/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/doi-regex/index.js
var require_doi_regex = __commonJS({
  "node_modules/doi-regex/index.js"(exports2, module2) {
    "use strict";
    var doiRegex2 = '(10[.][0-9]{2,}(?:[.][0-9]+)*/(?:(?![%"#? ])\\S)+)';
    var doiTextPrefix = "doi\\:";
    var doi = module2.exports = function(opts) {
      opts = opts || {};
      return opts.exact ? new RegExp("(?:^" + doiRegex2 + "$)") : new RegExp("(?:" + doiRegex2 + ")", "g");
    };
    doi.groups = function(str) {
      if (!str) {
        return;
      }
      var suffixes = [];
      var newStr = str.replace(/\.[a-zA-Z]{1}[0-9]{3}$/g, function(s) {
        suffixes.push(s);
        return "";
      });
      var match = doi().exec(newStr);
      if (match) {
        match[0] = str;
        match.push(suffixes.length ? suffixes[0] : "");
      }
      return match;
    };
    doi.declared = function(opts) {
      opts = opts || {};
      return opts.exact ? new RegExp("^" + doiTextPrefix + doiRegex2 + "$") : new RegExp(doiTextPrefix + doiRegex2, "g");
    };
    doi.resolvePath = function(opts) {
      opts = opts || {};
      return opts.protocol ? new RegExp("^http(s)?\\://(dx\\.)?doi\\.org/" + doiRegex2 + "$") : new RegExp("^(http(s)?\\://)?(dx\\.)?doi\\.org/" + doiRegex2 + "$");
    };
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = require("buffer");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/content-disposition/index.js
var require_content_disposition = __commonJS({
  "node_modules/content-disposition/index.js"(exports2, module2) {
    "use strict";
    module2.exports = contentDisposition;
    module2.exports.parse = parse2;
    var basename = require("path").basename;
    var Buffer2 = require_safe_buffer().Buffer;
    var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g;
    var HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;
    var HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;
    var NON_LATIN1_REGEXP = /[^\x20-\x7e\xa0-\xff]/g;
    var QESC_REGEXP = /\\([\u0000-\u007f])/g;
    var QUOTE_REGEXP = /([\\"])/g;
    var PARAM_REGEXP = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g;
    var TEXT_REGEXP = /^[\x20-\x7e\x80-\xff]+$/;
    var TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;
    var EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;
    var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;
    function contentDisposition(filename, options) {
      var opts = options || {};
      var type = opts.type || "attachment";
      var params = createparams(filename, opts.fallback);
      return format(new ContentDisposition(type, params));
    }
    function createparams(filename, fallback) {
      if (filename === void 0) {
        return;
      }
      var params = {};
      if (typeof filename !== "string") {
        throw new TypeError("filename must be a string");
      }
      if (fallback === void 0) {
        fallback = true;
      }
      if (typeof fallback !== "string" && typeof fallback !== "boolean") {
        throw new TypeError("fallback must be a string or boolean");
      }
      if (typeof fallback === "string" && NON_LATIN1_REGEXP.test(fallback)) {
        throw new TypeError("fallback must be ISO-8859-1 string");
      }
      var name = basename(filename);
      var isQuotedString = TEXT_REGEXP.test(name);
      var fallbackName = typeof fallback !== "string" ? fallback && getlatin1(name) : basename(fallback);
      var hasFallback = typeof fallbackName === "string" && fallbackName !== name;
      if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {
        params["filename*"] = name;
      }
      if (isQuotedString || hasFallback) {
        params.filename = hasFallback ? fallbackName : name;
      }
      return params;
    }
    function format(obj) {
      var parameters = obj.parameters;
      var type = obj.type;
      if (!type || typeof type !== "string" || !TOKEN_REGEXP.test(type)) {
        throw new TypeError("invalid type");
      }
      var string = String(type).toLowerCase();
      if (parameters && typeof parameters === "object") {
        var param;
        var params = Object.keys(parameters).sort();
        for (var i = 0; i < params.length; i++) {
          param = params[i];
          var val = param.substr(-1) === "*" ? ustring(parameters[param]) : qstring(parameters[param]);
          string += "; " + param + "=" + val;
        }
      }
      return string;
    }
    function decodefield(str) {
      var match = EXT_VALUE_REGEXP.exec(str);
      if (!match) {
        throw new TypeError("invalid extended field value");
      }
      var charset = match[1].toLowerCase();
      var encoded = match[2];
      var value;
      var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);
      switch (charset) {
        case "iso-8859-1":
          value = getlatin1(binary);
          break;
        case "utf-8":
          value = Buffer2.from(binary, "binary").toString("utf8");
          break;
        default:
          throw new TypeError("unsupported charset in extended field");
      }
      return value;
    }
    function getlatin1(val) {
      return String(val).replace(NON_LATIN1_REGEXP, "?");
    }
    function parse2(string) {
      if (!string || typeof string !== "string") {
        throw new TypeError("argument string is required");
      }
      var match = DISPOSITION_TYPE_REGEXP.exec(string);
      if (!match) {
        throw new TypeError("invalid type format");
      }
      var index = match[0].length;
      var type = match[1].toLowerCase();
      var key;
      var names = [];
      var params = {};
      var value;
      index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ";" ? index - 1 : index;
      while (match = PARAM_REGEXP.exec(string)) {
        if (match.index !== index) {
          throw new TypeError("invalid parameter format");
        }
        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];
        if (names.indexOf(key) !== -1) {
          throw new TypeError("invalid duplicate parameter");
        }
        names.push(key);
        if (key.indexOf("*") + 1 === key.length) {
          key = key.slice(0, -1);
          value = decodefield(value);
          params[key] = value;
          continue;
        }
        if (typeof params[key] === "string") {
          continue;
        }
        if (value[0] === '"') {
          value = value.substr(1, value.length - 2).replace(QESC_REGEXP, "$1");
        }
        params[key] = value;
      }
      if (index !== -1 && index !== string.length) {
        throw new TypeError("invalid parameter format");
      }
      return new ContentDisposition(type, params);
    }
    function pdecode(str, hex) {
      return String.fromCharCode(parseInt(hex, 16));
    }
    function pencode(char) {
      return "%" + String(char).charCodeAt(0).toString(16).toUpperCase();
    }
    function qstring(val) {
      var str = String(val);
      return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
    }
    function ustring(val) {
      var str = String(val);
      var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);
      return "UTF-8''" + encoded;
    }
    function ContentDisposition(type, parameters) {
      this.type = type;
      this.parameters = parameters;
    }
  }
});

// node_modules/archive-type/node_modules/file-type/index.js
var require_file_type = __commonJS({
  "node_modules/archive-type/node_modules/file-type/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (input) => {
      const buf = new Uint8Array(input);
      if (!(buf && buf.length > 1)) {
        return null;
      }
      const check = (header, opts) => {
        opts = Object.assign({
          offset: 0
        }, opts);
        for (let i = 0; i < header.length; i++) {
          if (header[i] !== buf[i + opts.offset]) {
            return false;
          }
        }
        return true;
      };
      if (check([255, 216, 255])) {
        return {
          ext: "jpg",
          mime: "image/jpeg"
        };
      }
      if (check([137, 80, 78, 71, 13, 10, 26, 10])) {
        return {
          ext: "png",
          mime: "image/png"
        };
      }
      if (check([71, 73, 70])) {
        return {
          ext: "gif",
          mime: "image/gif"
        };
      }
      if (check([87, 69, 66, 80], { offset: 8 })) {
        return {
          ext: "webp",
          mime: "image/webp"
        };
      }
      if (check([70, 76, 73, 70])) {
        return {
          ext: "flif",
          mime: "image/flif"
        };
      }
      if ((check([73, 73, 42, 0]) || check([77, 77, 0, 42])) && check([67, 82], { offset: 8 })) {
        return {
          ext: "cr2",
          mime: "image/x-canon-cr2"
        };
      }
      if (check([73, 73, 42, 0]) || check([77, 77, 0, 42])) {
        return {
          ext: "tif",
          mime: "image/tiff"
        };
      }
      if (check([66, 77])) {
        return {
          ext: "bmp",
          mime: "image/bmp"
        };
      }
      if (check([73, 73, 188])) {
        return {
          ext: "jxr",
          mime: "image/vnd.ms-photo"
        };
      }
      if (check([56, 66, 80, 83])) {
        return {
          ext: "psd",
          mime: "image/vnd.adobe.photoshop"
        };
      }
      if (check([80, 75, 3, 4]) && check([109, 105, 109, 101, 116, 121, 112, 101, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 101, 112, 117, 98, 43, 122, 105, 112], { offset: 30 })) {
        return {
          ext: "epub",
          mime: "application/epub+zip"
        };
      }
      if (check([80, 75, 3, 4]) && check([77, 69, 84, 65, 45, 73, 78, 70, 47, 109, 111, 122, 105, 108, 108, 97, 46, 114, 115, 97], { offset: 30 })) {
        return {
          ext: "xpi",
          mime: "application/x-xpinstall"
        };
      }
      if (check([80, 75]) && (buf[2] === 3 || buf[2] === 5 || buf[2] === 7) && (buf[3] === 4 || buf[3] === 6 || buf[3] === 8)) {
        return {
          ext: "zip",
          mime: "application/zip"
        };
      }
      if (check([117, 115, 116, 97, 114], { offset: 257 })) {
        return {
          ext: "tar",
          mime: "application/x-tar"
        };
      }
      if (check([82, 97, 114, 33, 26, 7]) && (buf[6] === 0 || buf[6] === 1)) {
        return {
          ext: "rar",
          mime: "application/x-rar-compressed"
        };
      }
      if (check([31, 139, 8])) {
        return {
          ext: "gz",
          mime: "application/gzip"
        };
      }
      if (check([66, 90, 104])) {
        return {
          ext: "bz2",
          mime: "application/x-bzip2"
        };
      }
      if (check([55, 122, 188, 175, 39, 28])) {
        return {
          ext: "7z",
          mime: "application/x-7z-compressed"
        };
      }
      if (check([120, 1])) {
        return {
          ext: "dmg",
          mime: "application/x-apple-diskimage"
        };
      }
      if (check([0, 0, 0]) && (buf[3] === 24 || buf[3] === 32) && check([102, 116, 121, 112], { offset: 4 }) || check([51, 103, 112, 53]) || check([0, 0, 0, 28, 102, 116, 121, 112, 109, 112, 52, 50]) && check([109, 112, 52, 49, 109, 112, 52, 50, 105, 115, 111, 109], { offset: 16 }) || check([0, 0, 0, 28, 102, 116, 121, 112, 105, 115, 111, 109]) || check([0, 0, 0, 28, 102, 116, 121, 112, 109, 112, 52, 50, 0, 0, 0, 0])) {
        return {
          ext: "mp4",
          mime: "video/mp4"
        };
      }
      if (check([0, 0, 0, 28, 102, 116, 121, 112, 77, 52, 86])) {
        return {
          ext: "m4v",
          mime: "video/x-m4v"
        };
      }
      if (check([77, 84, 104, 100])) {
        return {
          ext: "mid",
          mime: "audio/midi"
        };
      }
      if (check([26, 69, 223, 163])) {
        const sliced = buf.subarray(4, 4 + 4096);
        const idPos = sliced.findIndex((el, i, arr) => arr[i] === 66 && arr[i + 1] === 130);
        if (idPos >= 0) {
          const docTypePos = idPos + 3;
          const findDocType = (type) => Array.from(type).every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));
          if (findDocType("matroska")) {
            return {
              ext: "mkv",
              mime: "video/x-matroska"
            };
          }
          if (findDocType("webm")) {
            return {
              ext: "webm",
              mime: "video/webm"
            };
          }
        }
      }
      if (check([0, 0, 0, 20, 102, 116, 121, 112, 113, 116, 32, 32]) || check([102, 114, 101, 101], { offset: 4 }) || check([102, 116, 121, 112, 113, 116, 32, 32], { offset: 4 }) || check([109, 100, 97, 116], { offset: 4 }) || check([119, 105, 100, 101], { offset: 4 })) {
        return {
          ext: "mov",
          mime: "video/quicktime"
        };
      }
      if (check([82, 73, 70, 70]) && check([65, 86, 73], { offset: 8 })) {
        return {
          ext: "avi",
          mime: "video/x-msvideo"
        };
      }
      if (check([48, 38, 178, 117, 142, 102, 207, 17, 166, 217])) {
        return {
          ext: "wmv",
          mime: "video/x-ms-wmv"
        };
      }
      if (check([0, 0, 1, 186])) {
        return {
          ext: "mpg",
          mime: "video/mpeg"
        };
      }
      if (check([73, 68, 51]) || check([255, 251])) {
        return {
          ext: "mp3",
          mime: "audio/mpeg"
        };
      }
      if (check([102, 116, 121, 112, 77, 52, 65], { offset: 4 }) || check([77, 52, 65, 32])) {
        return {
          ext: "m4a",
          mime: "audio/m4a"
        };
      }
      if (check([79, 112, 117, 115, 72, 101, 97, 100], { offset: 28 })) {
        return {
          ext: "opus",
          mime: "audio/opus"
        };
      }
      if (check([79, 103, 103, 83])) {
        return {
          ext: "ogg",
          mime: "audio/ogg"
        };
      }
      if (check([102, 76, 97, 67])) {
        return {
          ext: "flac",
          mime: "audio/x-flac"
        };
      }
      if (check([82, 73, 70, 70]) && check([87, 65, 86, 69], { offset: 8 })) {
        return {
          ext: "wav",
          mime: "audio/x-wav"
        };
      }
      if (check([35, 33, 65, 77, 82, 10])) {
        return {
          ext: "amr",
          mime: "audio/amr"
        };
      }
      if (check([37, 80, 68, 70])) {
        return {
          ext: "pdf",
          mime: "application/pdf"
        };
      }
      if (check([77, 90])) {
        return {
          ext: "exe",
          mime: "application/x-msdownload"
        };
      }
      if ((buf[0] === 67 || buf[0] === 70) && check([87, 83], { offset: 1 })) {
        return {
          ext: "swf",
          mime: "application/x-shockwave-flash"
        };
      }
      if (check([123, 92, 114, 116, 102])) {
        return {
          ext: "rtf",
          mime: "application/rtf"
        };
      }
      if (check([0, 97, 115, 109])) {
        return {
          ext: "wasm",
          mime: "application/wasm"
        };
      }
      if (check([119, 79, 70, 70]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff",
          mime: "application/font-woff"
        };
      }
      if (check([119, 79, 70, 50]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff2",
          mime: "application/font-woff"
        };
      }
      if (check([76, 80], { offset: 34 }) && (check([0, 0, 1], { offset: 8 }) || check([1, 0, 2], { offset: 8 }) || check([2, 0, 2], { offset: 8 }))) {
        return {
          ext: "eot",
          mime: "application/octet-stream"
        };
      }
      if (check([0, 1, 0, 0, 0])) {
        return {
          ext: "ttf",
          mime: "application/font-sfnt"
        };
      }
      if (check([79, 84, 84, 79, 0])) {
        return {
          ext: "otf",
          mime: "application/font-sfnt"
        };
      }
      if (check([0, 0, 1, 0])) {
        return {
          ext: "ico",
          mime: "image/x-icon"
        };
      }
      if (check([70, 76, 86, 1])) {
        return {
          ext: "flv",
          mime: "video/x-flv"
        };
      }
      if (check([37, 33])) {
        return {
          ext: "ps",
          mime: "application/postscript"
        };
      }
      if (check([253, 55, 122, 88, 90, 0])) {
        return {
          ext: "xz",
          mime: "application/x-xz"
        };
      }
      if (check([83, 81, 76, 105])) {
        return {
          ext: "sqlite",
          mime: "application/x-sqlite3"
        };
      }
      if (check([78, 69, 83, 26])) {
        return {
          ext: "nes",
          mime: "application/x-nintendo-nes-rom"
        };
      }
      if (check([67, 114, 50, 52])) {
        return {
          ext: "crx",
          mime: "application/x-google-chrome-extension"
        };
      }
      if (check([77, 83, 67, 70]) || check([73, 83, 99, 40])) {
        return {
          ext: "cab",
          mime: "application/vnd.ms-cab-compressed"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62, 10, 100, 101, 98, 105, 97, 110, 45, 98, 105, 110, 97, 114, 121])) {
        return {
          ext: "deb",
          mime: "application/x-deb"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62])) {
        return {
          ext: "ar",
          mime: "application/x-unix-archive"
        };
      }
      if (check([237, 171, 238, 219])) {
        return {
          ext: "rpm",
          mime: "application/x-rpm"
        };
      }
      if (check([31, 160]) || check([31, 157])) {
        return {
          ext: "Z",
          mime: "application/x-compress"
        };
      }
      if (check([76, 90, 73, 80])) {
        return {
          ext: "lz",
          mime: "application/x-lzip"
        };
      }
      if (check([208, 207, 17, 224, 161, 177, 26, 225])) {
        return {
          ext: "msi",
          mime: "application/x-msi"
        };
      }
      if (check([6, 14, 43, 52, 2, 5, 1, 1, 13, 1, 2, 1, 1, 2])) {
        return {
          ext: "mxf",
          mime: "application/mxf"
        };
      }
      if (check([66, 76, 69, 78, 68, 69, 82])) {
        return {
          ext: "blend",
          mime: "application/x-blender"
        };
      }
      return null;
    };
  }
});

// node_modules/archive-type/index.js
var require_archive_type = __commonJS({
  "node_modules/archive-type/index.js"(exports2, module2) {
    "use strict";
    var fileType2 = require_file_type();
    var exts = /* @__PURE__ */ new Set([
      "7z",
      "bz2",
      "gz",
      "rar",
      "tar",
      "zip",
      "xz",
      "gz"
    ]);
    module2.exports = (input) => {
      const ret = fileType2(input);
      return exts.has(ret && ret.ext) ? ret : null;
    };
  }
});

// node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS({
  "node_modules/graceful-fs/polyfills.js"(exports2, module2) {
    var constants = require("constants");
    var origCwd = process.cwd;
    var cwd = null;
    var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      if (!cwd)
        cwd = origCwd.call(process);
      return cwd;
    };
    try {
      process.cwd();
    } catch (er) {
    }
    if (typeof process.chdir === "function") {
      chdir = process.chdir;
      process.chdir = function(d) {
        cwd = null;
        chdir.call(process, d);
      };
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(process.chdir, chdir);
    }
    var chdir;
    module2.exports = patch;
    function patch(fs3) {
      if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
        patchLchmod(fs3);
      }
      if (!fs3.lutimes) {
        patchLutimes(fs3);
      }
      fs3.chown = chownFix(fs3.chown);
      fs3.fchown = chownFix(fs3.fchown);
      fs3.lchown = chownFix(fs3.lchown);
      fs3.chmod = chmodFix(fs3.chmod);
      fs3.fchmod = chmodFix(fs3.fchmod);
      fs3.lchmod = chmodFix(fs3.lchmod);
      fs3.chownSync = chownFixSync(fs3.chownSync);
      fs3.fchownSync = chownFixSync(fs3.fchownSync);
      fs3.lchownSync = chownFixSync(fs3.lchownSync);
      fs3.chmodSync = chmodFixSync(fs3.chmodSync);
      fs3.fchmodSync = chmodFixSync(fs3.fchmodSync);
      fs3.lchmodSync = chmodFixSync(fs3.lchmodSync);
      fs3.stat = statFix(fs3.stat);
      fs3.fstat = statFix(fs3.fstat);
      fs3.lstat = statFix(fs3.lstat);
      fs3.statSync = statFixSync(fs3.statSync);
      fs3.fstatSync = statFixSync(fs3.fstatSync);
      fs3.lstatSync = statFixSync(fs3.lstatSync);
      if (fs3.chmod && !fs3.lchmod) {
        fs3.lchmod = function(path3, mode, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs3.lchmodSync = function() {
        };
      }
      if (fs3.chown && !fs3.lchown) {
        fs3.lchown = function(path3, uid, gid, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs3.lchownSync = function() {
        };
      }
      if (platform === "win32") {
        fs3.rename = typeof fs3.rename !== "function" ? fs3.rename : function(fs$rename) {
          function rename(from, to, cb) {
            var start = Date.now();
            var backoff = 0;
            fs$rename(from, to, function CB(er) {
              if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 6e4) {
                setTimeout(function() {
                  fs3.stat(to, function(stater, st) {
                    if (stater && stater.code === "ENOENT")
                      fs$rename(from, to, CB);
                    else
                      cb(er);
                  });
                }, backoff);
                if (backoff < 100)
                  backoff += 10;
                return;
              }
              if (cb)
                cb(er);
            });
          }
          if (Object.setPrototypeOf)
            Object.setPrototypeOf(rename, fs$rename);
          return rename;
        }(fs3.rename);
      }
      fs3.read = typeof fs3.read !== "function" ? fs3.read : function(fs$read) {
        function read(fd, buffer, offset, length, position, callback_) {
          var callback;
          if (callback_ && typeof callback_ === "function") {
            var eagCounter = 0;
            callback = function(er, _3, __) {
              if (er && er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                return fs$read.call(fs3, fd, buffer, offset, length, position, callback);
              }
              callback_.apply(this, arguments);
            };
          }
          return fs$read.call(fs3, fd, buffer, offset, length, position, callback);
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(read, fs$read);
        return read;
      }(fs3.read);
      fs3.readSync = typeof fs3.readSync !== "function" ? fs3.readSync : function(fs$readSync) {
        return function(fd, buffer, offset, length, position) {
          var eagCounter = 0;
          while (true) {
            try {
              return fs$readSync.call(fs3, fd, buffer, offset, length, position);
            } catch (er) {
              if (er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                continue;
              }
              throw er;
            }
          }
        };
      }(fs3.readSync);
      function patchLchmod(fs4) {
        fs4.lchmod = function(path3, mode, callback) {
          fs4.open(path3, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
            if (err) {
              if (callback)
                callback(err);
              return;
            }
            fs4.fchmod(fd, mode, function(err2) {
              fs4.close(fd, function(err22) {
                if (callback)
                  callback(err2 || err22);
              });
            });
          });
        };
        fs4.lchmodSync = function(path3, mode) {
          var fd = fs4.openSync(path3, constants.O_WRONLY | constants.O_SYMLINK, mode);
          var threw = true;
          var ret;
          try {
            ret = fs4.fchmodSync(fd, mode);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs4.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs4.closeSync(fd);
            }
          }
          return ret;
        };
      }
      function patchLutimes(fs4) {
        if (constants.hasOwnProperty("O_SYMLINK") && fs4.futimes) {
          fs4.lutimes = function(path3, at, mt, cb) {
            fs4.open(path3, constants.O_SYMLINK, function(er, fd) {
              if (er) {
                if (cb)
                  cb(er);
                return;
              }
              fs4.futimes(fd, at, mt, function(er2) {
                fs4.close(fd, function(er22) {
                  if (cb)
                    cb(er2 || er22);
                });
              });
            });
          };
          fs4.lutimesSync = function(path3, at, mt) {
            var fd = fs4.openSync(path3, constants.O_SYMLINK);
            var ret;
            var threw = true;
            try {
              ret = fs4.futimesSync(fd, at, mt);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs4.closeSync(fd);
                } catch (er) {
                }
              } else {
                fs4.closeSync(fd);
              }
            }
            return ret;
          };
        } else if (fs4.futimes) {
          fs4.lutimes = function(_a, _b, _c, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs4.lutimesSync = function() {
          };
        }
      }
      function chmodFix(orig) {
        if (!orig)
          return orig;
        return function(target, mode, cb) {
          return orig.call(fs3, target, mode, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chmodFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, mode) {
          try {
            return orig.call(fs3, target, mode);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function chownFix(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid, cb) {
          return orig.call(fs3, target, uid, gid, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chownFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid) {
          try {
            return orig.call(fs3, target, uid, gid);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function statFix(orig) {
        if (!orig)
          return orig;
        return function(target, options, cb) {
          if (typeof options === "function") {
            cb = options;
            options = null;
          }
          function callback(er, stats) {
            if (stats) {
              if (stats.uid < 0)
                stats.uid += 4294967296;
              if (stats.gid < 0)
                stats.gid += 4294967296;
            }
            if (cb)
              cb.apply(this, arguments);
          }
          return options ? orig.call(fs3, target, options, callback) : orig.call(fs3, target, callback);
        };
      }
      function statFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, options) {
          var stats = options ? orig.call(fs3, target, options) : orig.call(fs3, target);
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          return stats;
        };
      }
      function chownErOk(er) {
        if (!er)
          return true;
        if (er.code === "ENOSYS")
          return true;
        var nonroot = !process.getuid || process.getuid() !== 0;
        if (nonroot) {
          if (er.code === "EINVAL" || er.code === "EPERM")
            return true;
        }
        return false;
      }
    }
  }
});

// node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS({
  "node_modules/graceful-fs/legacy-streams.js"(exports2, module2) {
    var Stream = require("stream").Stream;
    module2.exports = legacy;
    function legacy(fs3) {
      return {
        ReadStream,
        WriteStream
      };
      function ReadStream(path3, options) {
        if (!(this instanceof ReadStream))
          return new ReadStream(path3, options);
        Stream.call(this);
        var self2 = this;
        this.path = path3;
        this.fd = null;
        this.readable = true;
        this.paused = false;
        this.flags = "r";
        this.mode = 438;
        this.bufferSize = 64 * 1024;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.encoding)
          this.setEncoding(this.encoding);
        if (this.start !== void 0) {
          if (typeof this.start !== "number") {
            throw TypeError("start must be a Number");
          }
          if (this.end === void 0) {
            this.end = Infinity;
          } else if (typeof this.end !== "number") {
            throw TypeError("end must be a Number");
          }
          if (this.start > this.end) {
            throw new Error("start must be <= end");
          }
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            self2._read();
          });
          return;
        }
        fs3.open(this.path, this.flags, this.mode, function(err, fd) {
          if (err) {
            self2.emit("error", err);
            self2.readable = false;
            return;
          }
          self2.fd = fd;
          self2.emit("open", fd);
          self2._read();
        });
      }
      function WriteStream(path3, options) {
        if (!(this instanceof WriteStream))
          return new WriteStream(path3, options);
        Stream.call(this);
        this.path = path3;
        this.fd = null;
        this.writable = true;
        this.flags = "w";
        this.encoding = "binary";
        this.mode = 438;
        this.bytesWritten = 0;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.start !== void 0) {
          if (typeof this.start !== "number") {
            throw TypeError("start must be a Number");
          }
          if (this.start < 0) {
            throw new Error("start must be >= zero");
          }
          this.pos = this.start;
        }
        this.busy = false;
        this._queue = [];
        if (this.fd === null) {
          this._open = fs3.open;
          this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
          this.flush();
        }
      }
    }
  }
});

// node_modules/graceful-fs/clone.js
var require_clone = __commonJS({
  "node_modules/graceful-fs/clone.js"(exports2, module2) {
    "use strict";
    module2.exports = clone;
    var getPrototypeOf = Object.getPrototypeOf || function(obj) {
      return obj.__proto__;
    };
    function clone(obj) {
      if (obj === null || typeof obj !== "object")
        return obj;
      if (obj instanceof Object)
        var copy = { __proto__: getPrototypeOf(obj) };
      else
        var copy = /* @__PURE__ */ Object.create(null);
      Object.getOwnPropertyNames(obj).forEach(function(key) {
        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
      });
      return copy;
    }
  }
});

// node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS({
  "node_modules/graceful-fs/graceful-fs.js"(exports2, module2) {
    var fs3 = require("fs");
    var polyfills = require_polyfills();
    var legacy = require_legacy_streams();
    var clone = require_clone();
    var util = require("util");
    var gracefulQueue;
    var previousSymbol;
    if (typeof Symbol === "function" && typeof Symbol.for === "function") {
      gracefulQueue = Symbol.for("graceful-fs.queue");
      previousSymbol = Symbol.for("graceful-fs.previous");
    } else {
      gracefulQueue = "___graceful-fs.queue";
      previousSymbol = "___graceful-fs.previous";
    }
    function noop() {
    }
    function publishQueue(context, queue2) {
      Object.defineProperty(context, gracefulQueue, {
        get: function() {
          return queue2;
        }
      });
    }
    var debug = noop;
    if (util.debuglog)
      debug = util.debuglog("gfs4");
    else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
      debug = function() {
        var m = util.format.apply(util, arguments);
        m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
        console.error(m);
      };
    if (!fs3[gracefulQueue]) {
      queue = global[gracefulQueue] || [];
      publishQueue(fs3, queue);
      fs3.close = function(fs$close) {
        function close(fd, cb) {
          return fs$close.call(fs3, fd, function(err) {
            if (!err) {
              resetQueue();
            }
            if (typeof cb === "function")
              cb.apply(this, arguments);
          });
        }
        Object.defineProperty(close, previousSymbol, {
          value: fs$close
        });
        return close;
      }(fs3.close);
      fs3.closeSync = function(fs$closeSync) {
        function closeSync(fd) {
          fs$closeSync.apply(fs3, arguments);
          resetQueue();
        }
        Object.defineProperty(closeSync, previousSymbol, {
          value: fs$closeSync
        });
        return closeSync;
      }(fs3.closeSync);
      if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
        process.on("exit", function() {
          debug(fs3[gracefulQueue]);
          require("assert").equal(fs3[gracefulQueue].length, 0);
        });
      }
    }
    var queue;
    if (!global[gracefulQueue]) {
      publishQueue(global, fs3[gracefulQueue]);
    }
    module2.exports = patch(clone(fs3));
    if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs3.__patched) {
      module2.exports = patch(fs3);
      fs3.__patched = true;
    }
    function patch(fs4) {
      polyfills(fs4);
      fs4.gracefulify = patch;
      fs4.createReadStream = createReadStream;
      fs4.createWriteStream = createWriteStream;
      var fs$readFile = fs4.readFile;
      fs4.readFile = readFile;
      function readFile(path3, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$readFile(path3, options, cb);
        function go$readFile(path4, options2, cb2, startTime) {
          return fs$readFile(path4, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$readFile, [path4, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$writeFile = fs4.writeFile;
      fs4.writeFile = writeFile;
      function writeFile(path3, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$writeFile(path3, data, options, cb);
        function go$writeFile(path4, data2, options2, cb2, startTime) {
          return fs$writeFile(path4, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$writeFile, [path4, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$appendFile = fs4.appendFile;
      if (fs$appendFile)
        fs4.appendFile = appendFile;
      function appendFile(path3, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$appendFile(path3, data, options, cb);
        function go$appendFile(path4, data2, options2, cb2, startTime) {
          return fs$appendFile(path4, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$appendFile, [path4, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$copyFile = fs4.copyFile;
      if (fs$copyFile)
        fs4.copyFile = copyFile;
      function copyFile(src, dest, flags, cb) {
        if (typeof flags === "function") {
          cb = flags;
          flags = 0;
        }
        return go$copyFile(src, dest, flags, cb);
        function go$copyFile(src2, dest2, flags2, cb2, startTime) {
          return fs$copyFile(src2, dest2, flags2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$readdir = fs4.readdir;
      fs4.readdir = readdir;
      var noReaddirOptionVersions = /^v[0-5]\./;
      function readdir(path3, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path4, options2, cb2, startTime) {
          return fs$readdir(path4, fs$readdirCallback(path4, options2, cb2, startTime));
        } : function go$readdir2(path4, options2, cb2, startTime) {
          return fs$readdir(path4, options2, fs$readdirCallback(path4, options2, cb2, startTime));
        };
        return go$readdir(path3, options, cb);
        function fs$readdirCallback(path4, options2, cb2, startTime) {
          return function(err, files) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([
                go$readdir,
                [path4, options2, cb2],
                err,
                startTime || Date.now(),
                Date.now()
              ]);
            else {
              if (files && files.sort)
                files.sort();
              if (typeof cb2 === "function")
                cb2.call(this, err, files);
            }
          };
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var legStreams = legacy(fs4);
        ReadStream = legStreams.ReadStream;
        WriteStream = legStreams.WriteStream;
      }
      var fs$ReadStream = fs4.ReadStream;
      if (fs$ReadStream) {
        ReadStream.prototype = Object.create(fs$ReadStream.prototype);
        ReadStream.prototype.open = ReadStream$open;
      }
      var fs$WriteStream = fs4.WriteStream;
      if (fs$WriteStream) {
        WriteStream.prototype = Object.create(fs$WriteStream.prototype);
        WriteStream.prototype.open = WriteStream$open;
      }
      Object.defineProperty(fs4, "ReadStream", {
        get: function() {
          return ReadStream;
        },
        set: function(val) {
          ReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(fs4, "WriteStream", {
        get: function() {
          return WriteStream;
        },
        set: function(val) {
          WriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileReadStream = ReadStream;
      Object.defineProperty(fs4, "FileReadStream", {
        get: function() {
          return FileReadStream;
        },
        set: function(val) {
          FileReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileWriteStream = WriteStream;
      Object.defineProperty(fs4, "FileWriteStream", {
        get: function() {
          return FileWriteStream;
        },
        set: function(val) {
          FileWriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      function ReadStream(path3, options) {
        if (this instanceof ReadStream)
          return fs$ReadStream.apply(this, arguments), this;
        else
          return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
      }
      function ReadStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            if (that.autoClose)
              that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
            that.read();
          }
        });
      }
      function WriteStream(path3, options) {
        if (this instanceof WriteStream)
          return fs$WriteStream.apply(this, arguments), this;
        else
          return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
      }
      function WriteStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
          }
        });
      }
      function createReadStream(path3, options) {
        return new fs4.ReadStream(path3, options);
      }
      function createWriteStream(path3, options) {
        return new fs4.WriteStream(path3, options);
      }
      var fs$open = fs4.open;
      fs4.open = open;
      function open(path3, flags, mode, cb) {
        if (typeof mode === "function")
          cb = mode, mode = null;
        return go$open(path3, flags, mode, cb);
        function go$open(path4, flags2, mode2, cb2, startTime) {
          return fs$open(path4, flags2, mode2, function(err, fd) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$open, [path4, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      return fs4;
    }
    function enqueue(elem) {
      debug("ENQUEUE", elem[0].name, elem[1]);
      fs3[gracefulQueue].push(elem);
      retry();
    }
    var retryTimer;
    function resetQueue() {
      var now = Date.now();
      for (var i = 0; i < fs3[gracefulQueue].length; ++i) {
        if (fs3[gracefulQueue][i].length > 2) {
          fs3[gracefulQueue][i][3] = now;
          fs3[gracefulQueue][i][4] = now;
        }
      }
      retry();
    }
    function retry() {
      clearTimeout(retryTimer);
      retryTimer = void 0;
      if (fs3[gracefulQueue].length === 0)
        return;
      var elem = fs3[gracefulQueue].shift();
      var fn = elem[0];
      var args = elem[1];
      var err = elem[2];
      var startTime = elem[3];
      var lastTime = elem[4];
      if (startTime === void 0) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args);
      } else if (Date.now() - startTime >= 6e4) {
        debug("TIMEOUT", fn.name, args);
        var cb = args.pop();
        if (typeof cb === "function")
          cb.call(null, err);
      } else {
        var sinceAttempt = Date.now() - lastTime;
        var sinceStart = Math.max(lastTime - startTime, 1);
        var desiredDelay = Math.min(sinceStart * 1.2, 100);
        if (sinceAttempt >= desiredDelay) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args.concat([startTime]));
        } else {
          fs3[gracefulQueue].push(elem);
        }
      }
      if (retryTimer === void 0) {
        retryTimer = setTimeout(retry, 0);
      }
    }
  }
});

// node_modules/decompress-tar/node_modules/file-type/index.js
var require_file_type2 = __commonJS({
  "node_modules/decompress-tar/node_modules/file-type/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (input) => {
      const buf = new Uint8Array(input);
      if (!(buf && buf.length > 1)) {
        return null;
      }
      const check = (header, opts) => {
        opts = Object.assign({
          offset: 0
        }, opts);
        for (let i = 0; i < header.length; i++) {
          if (header[i] !== buf[i + opts.offset]) {
            return false;
          }
        }
        return true;
      };
      if (check([255, 216, 255])) {
        return {
          ext: "jpg",
          mime: "image/jpeg"
        };
      }
      if (check([137, 80, 78, 71, 13, 10, 26, 10])) {
        return {
          ext: "png",
          mime: "image/png"
        };
      }
      if (check([71, 73, 70])) {
        return {
          ext: "gif",
          mime: "image/gif"
        };
      }
      if (check([87, 69, 66, 80], { offset: 8 })) {
        return {
          ext: "webp",
          mime: "image/webp"
        };
      }
      if (check([70, 76, 73, 70])) {
        return {
          ext: "flif",
          mime: "image/flif"
        };
      }
      if ((check([73, 73, 42, 0]) || check([77, 77, 0, 42])) && check([67, 82], { offset: 8 })) {
        return {
          ext: "cr2",
          mime: "image/x-canon-cr2"
        };
      }
      if (check([73, 73, 42, 0]) || check([77, 77, 0, 42])) {
        return {
          ext: "tif",
          mime: "image/tiff"
        };
      }
      if (check([66, 77])) {
        return {
          ext: "bmp",
          mime: "image/bmp"
        };
      }
      if (check([73, 73, 188])) {
        return {
          ext: "jxr",
          mime: "image/vnd.ms-photo"
        };
      }
      if (check([56, 66, 80, 83])) {
        return {
          ext: "psd",
          mime: "image/vnd.adobe.photoshop"
        };
      }
      if (check([80, 75, 3, 4]) && check([109, 105, 109, 101, 116, 121, 112, 101, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 101, 112, 117, 98, 43, 122, 105, 112], { offset: 30 })) {
        return {
          ext: "epub",
          mime: "application/epub+zip"
        };
      }
      if (check([80, 75, 3, 4]) && check([77, 69, 84, 65, 45, 73, 78, 70, 47, 109, 111, 122, 105, 108, 108, 97, 46, 114, 115, 97], { offset: 30 })) {
        return {
          ext: "xpi",
          mime: "application/x-xpinstall"
        };
      }
      if (check([80, 75]) && (buf[2] === 3 || buf[2] === 5 || buf[2] === 7) && (buf[3] === 4 || buf[3] === 6 || buf[3] === 8)) {
        return {
          ext: "zip",
          mime: "application/zip"
        };
      }
      if (check([117, 115, 116, 97, 114], { offset: 257 })) {
        return {
          ext: "tar",
          mime: "application/x-tar"
        };
      }
      if (check([82, 97, 114, 33, 26, 7]) && (buf[6] === 0 || buf[6] === 1)) {
        return {
          ext: "rar",
          mime: "application/x-rar-compressed"
        };
      }
      if (check([31, 139, 8])) {
        return {
          ext: "gz",
          mime: "application/gzip"
        };
      }
      if (check([66, 90, 104])) {
        return {
          ext: "bz2",
          mime: "application/x-bzip2"
        };
      }
      if (check([55, 122, 188, 175, 39, 28])) {
        return {
          ext: "7z",
          mime: "application/x-7z-compressed"
        };
      }
      if (check([120, 1])) {
        return {
          ext: "dmg",
          mime: "application/x-apple-diskimage"
        };
      }
      if (check([0, 0, 0]) && (buf[3] === 24 || buf[3] === 32) && check([102, 116, 121, 112], { offset: 4 }) || check([51, 103, 112, 53]) || check([0, 0, 0, 28, 102, 116, 121, 112, 109, 112, 52, 50]) && check([109, 112, 52, 49, 109, 112, 52, 50, 105, 115, 111, 109], { offset: 16 }) || check([0, 0, 0, 28, 102, 116, 121, 112, 105, 115, 111, 109]) || check([0, 0, 0, 28, 102, 116, 121, 112, 109, 112, 52, 50, 0, 0, 0, 0])) {
        return {
          ext: "mp4",
          mime: "video/mp4"
        };
      }
      if (check([0, 0, 0, 28, 102, 116, 121, 112, 77, 52, 86])) {
        return {
          ext: "m4v",
          mime: "video/x-m4v"
        };
      }
      if (check([77, 84, 104, 100])) {
        return {
          ext: "mid",
          mime: "audio/midi"
        };
      }
      if (check([26, 69, 223, 163])) {
        const sliced = buf.subarray(4, 4 + 4096);
        const idPos = sliced.findIndex((el, i, arr) => arr[i] === 66 && arr[i + 1] === 130);
        if (idPos >= 0) {
          const docTypePos = idPos + 3;
          const findDocType = (type) => Array.from(type).every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));
          if (findDocType("matroska")) {
            return {
              ext: "mkv",
              mime: "video/x-matroska"
            };
          }
          if (findDocType("webm")) {
            return {
              ext: "webm",
              mime: "video/webm"
            };
          }
        }
      }
      if (check([0, 0, 0, 20, 102, 116, 121, 112, 113, 116, 32, 32]) || check([102, 114, 101, 101], { offset: 4 }) || check([102, 116, 121, 112, 113, 116, 32, 32], { offset: 4 }) || check([109, 100, 97, 116], { offset: 4 }) || check([119, 105, 100, 101], { offset: 4 })) {
        return {
          ext: "mov",
          mime: "video/quicktime"
        };
      }
      if (check([82, 73, 70, 70]) && check([65, 86, 73], { offset: 8 })) {
        return {
          ext: "avi",
          mime: "video/x-msvideo"
        };
      }
      if (check([48, 38, 178, 117, 142, 102, 207, 17, 166, 217])) {
        return {
          ext: "wmv",
          mime: "video/x-ms-wmv"
        };
      }
      if (check([0, 0, 1, 186])) {
        return {
          ext: "mpg",
          mime: "video/mpeg"
        };
      }
      if (check([73, 68, 51]) || check([255, 251])) {
        return {
          ext: "mp3",
          mime: "audio/mpeg"
        };
      }
      if (check([102, 116, 121, 112, 77, 52, 65], { offset: 4 }) || check([77, 52, 65, 32])) {
        return {
          ext: "m4a",
          mime: "audio/m4a"
        };
      }
      if (check([79, 112, 117, 115, 72, 101, 97, 100], { offset: 28 })) {
        return {
          ext: "opus",
          mime: "audio/opus"
        };
      }
      if (check([79, 103, 103, 83])) {
        return {
          ext: "ogg",
          mime: "audio/ogg"
        };
      }
      if (check([102, 76, 97, 67])) {
        return {
          ext: "flac",
          mime: "audio/x-flac"
        };
      }
      if (check([82, 73, 70, 70]) && check([87, 65, 86, 69], { offset: 8 })) {
        return {
          ext: "wav",
          mime: "audio/x-wav"
        };
      }
      if (check([35, 33, 65, 77, 82, 10])) {
        return {
          ext: "amr",
          mime: "audio/amr"
        };
      }
      if (check([37, 80, 68, 70])) {
        return {
          ext: "pdf",
          mime: "application/pdf"
        };
      }
      if (check([77, 90])) {
        return {
          ext: "exe",
          mime: "application/x-msdownload"
        };
      }
      if ((buf[0] === 67 || buf[0] === 70) && check([87, 83], { offset: 1 })) {
        return {
          ext: "swf",
          mime: "application/x-shockwave-flash"
        };
      }
      if (check([123, 92, 114, 116, 102])) {
        return {
          ext: "rtf",
          mime: "application/rtf"
        };
      }
      if (check([0, 97, 115, 109])) {
        return {
          ext: "wasm",
          mime: "application/wasm"
        };
      }
      if (check([119, 79, 70, 70]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff",
          mime: "font/woff"
        };
      }
      if (check([119, 79, 70, 50]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff2",
          mime: "font/woff2"
        };
      }
      if (check([76, 80], { offset: 34 }) && (check([0, 0, 1], { offset: 8 }) || check([1, 0, 2], { offset: 8 }) || check([2, 0, 2], { offset: 8 }))) {
        return {
          ext: "eot",
          mime: "application/octet-stream"
        };
      }
      if (check([0, 1, 0, 0, 0])) {
        return {
          ext: "ttf",
          mime: "font/ttf"
        };
      }
      if (check([79, 84, 84, 79, 0])) {
        return {
          ext: "otf",
          mime: "font/otf"
        };
      }
      if (check([0, 0, 1, 0])) {
        return {
          ext: "ico",
          mime: "image/x-icon"
        };
      }
      if (check([70, 76, 86, 1])) {
        return {
          ext: "flv",
          mime: "video/x-flv"
        };
      }
      if (check([37, 33])) {
        return {
          ext: "ps",
          mime: "application/postscript"
        };
      }
      if (check([253, 55, 122, 88, 90, 0])) {
        return {
          ext: "xz",
          mime: "application/x-xz"
        };
      }
      if (check([83, 81, 76, 105])) {
        return {
          ext: "sqlite",
          mime: "application/x-sqlite3"
        };
      }
      if (check([78, 69, 83, 26])) {
        return {
          ext: "nes",
          mime: "application/x-nintendo-nes-rom"
        };
      }
      if (check([67, 114, 50, 52])) {
        return {
          ext: "crx",
          mime: "application/x-google-chrome-extension"
        };
      }
      if (check([77, 83, 67, 70]) || check([73, 83, 99, 40])) {
        return {
          ext: "cab",
          mime: "application/vnd.ms-cab-compressed"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62, 10, 100, 101, 98, 105, 97, 110, 45, 98, 105, 110, 97, 114, 121])) {
        return {
          ext: "deb",
          mime: "application/x-deb"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62])) {
        return {
          ext: "ar",
          mime: "application/x-unix-archive"
        };
      }
      if (check([237, 171, 238, 219])) {
        return {
          ext: "rpm",
          mime: "application/x-rpm"
        };
      }
      if (check([31, 160]) || check([31, 157])) {
        return {
          ext: "Z",
          mime: "application/x-compress"
        };
      }
      if (check([76, 90, 73, 80])) {
        return {
          ext: "lz",
          mime: "application/x-lzip"
        };
      }
      if (check([208, 207, 17, 224, 161, 177, 26, 225])) {
        return {
          ext: "msi",
          mime: "application/x-msi"
        };
      }
      if (check([6, 14, 43, 52, 2, 5, 1, 1, 13, 1, 2, 1, 1, 2])) {
        return {
          ext: "mxf",
          mime: "application/mxf"
        };
      }
      if (check([71], { offset: 4 }) && (check([71], { offset: 192 }) || check([71], { offset: 196 }))) {
        return {
          ext: "mts",
          mime: "video/mp2t"
        };
      }
      if (check([66, 76, 69, 78, 68, 69, 82])) {
        return {
          ext: "blend",
          mime: "application/x-blender"
        };
      }
      if (check([66, 80, 71, 251])) {
        return {
          ext: "bpg",
          mime: "image/bpg"
        };
      }
      return null;
    };
  }
});

// node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "node_modules/is-stream/index.js"(exports2, module2) {
    "use strict";
    var isStream = module2.exports = function(stream2) {
      return stream2 !== null && typeof stream2 === "object" && typeof stream2.pipe === "function";
    };
    isStream.writable = function(stream2) {
      return isStream(stream2) && stream2.writable !== false && typeof stream2._write === "function" && typeof stream2._writableState === "object";
    };
    isStream.readable = function(stream2) {
      return isStream(stream2) && stream2.readable !== false && typeof stream2._read === "function" && typeof stream2._readableState === "object";
    };
    isStream.duplex = function(stream2) {
      return isStream.writable(stream2) && isStream.readable(stream2);
    };
    isStream.transform = function(stream2) {
      return isStream.duplex(stream2) && typeof stream2._transform === "function" && typeof stream2._transformState === "object";
    };
  }
});

// node_modules/process-nextick-args/index.js
var require_process_nextick_args = __commonJS({
  "node_modules/process-nextick-args/index.js"(exports2, module2) {
    "use strict";
    if (typeof process === "undefined" || !process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
      module2.exports = { nextTick };
    } else {
      module2.exports = process;
    }
    function nextTick(fn, arg1, arg2, arg3) {
      if (typeof fn !== "function") {
        throw new TypeError('"callback" argument must be a function');
      }
      var len = arguments.length;
      var args, i;
      switch (len) {
        case 0:
        case 1:
          return process.nextTick(fn);
        case 2:
          return process.nextTick(function afterTickOne() {
            fn.call(null, arg1);
          });
        case 3:
          return process.nextTick(function afterTickTwo() {
            fn.call(null, arg1, arg2);
          });
        case 4:
          return process.nextTick(function afterTickThree() {
            fn.call(null, arg1, arg2, arg3);
          });
        default:
          args = new Array(len - 1);
          i = 0;
          while (i < args.length) {
            args[i++] = arguments[i];
          }
          return process.nextTick(function afterTick() {
            fn.apply(null, args);
          });
      }
    }
  }
});

// node_modules/core-util-is/lib/util.js
var require_util = __commonJS({
  "node_modules/core-util-is/lib/util.js"(exports2) {
    function isArray(arg) {
      if (Array.isArray) {
        return Array.isArray(arg);
      }
      return objectToString(arg) === "[object Array]";
    }
    exports2.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports2.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports2.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports2.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports2.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports2.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports2.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports2.isUndefined = isUndefined;
    function isRegExp(re) {
      return objectToString(re) === "[object RegExp]";
    }
    exports2.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports2.isObject = isObject;
    function isDate(d) {
      return objectToString(d) === "[object Date]";
    }
    exports2.isDate = isDate;
    function isError(e) {
      return objectToString(e) === "[object Error]" || e instanceof Error;
    }
    exports2.isError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports2.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
    }
    exports2.isPrimitive = isPrimitive;
    exports2.isBuffer = require("buffer").Buffer.isBuffer;
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/isarray/index.js"(exports2, module2) {
    var toString = {}.toString;
    module2.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports2, module2) {
    module2.exports = require("events").EventEmitter;
  }
});

// node_modules/readable-stream/node_modules/safe-buffer/index.js
var require_safe_buffer2 = __commonJS({
  "node_modules/readable-stream/node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = require("buffer");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/BufferList.js
var require_BufferList = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/BufferList.js"(exports2, module2) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Buffer2 = require_safe_buffer2().Buffer;
    var util = require("util");
    function copyBuffer(src, target, offset) {
      src.copy(target, offset);
    }
    module2.exports = function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      BufferList.prototype.push = function push(v) {
        var entry = { data: v, next: null };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      };
      BufferList.prototype.unshift = function unshift(v) {
        var entry = { data: v, next: this.head };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      };
      BufferList.prototype.shift = function shift() {
        if (this.length === 0)
          return;
        var ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      };
      BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };
      BufferList.prototype.join = function join(s) {
        if (this.length === 0)
          return "";
        var p = this.head;
        var ret = "" + p.data;
        while (p = p.next) {
          ret += s + p.data;
        }
        return ret;
      };
      BufferList.prototype.concat = function concat(n) {
        if (this.length === 0)
          return Buffer2.alloc(0);
        var ret = Buffer2.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      };
      return BufferList;
    }();
    if (util && util.inspect && util.inspect.custom) {
      module2.exports.prototype[util.inspect.custom] = function() {
        var obj = util.inspect({ length: this.length });
        return this.constructor.name + " " + obj;
      };
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports2, module2) {
    "use strict";
    var pna = require_process_nextick_args();
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            pna.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            pna.nextTick(emitErrorNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, _this, err2);
          }
        } else if (cb) {
          cb(err2);
        }
      });
      return this;
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy
    };
  }
});

// node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/readable-stream/lib/_stream_readable.js"(exports2, module2) {
    "use strict";
    var pna = require_process_nextick_args();
    module2.exports = Readable;
    var isArray = require_isarray();
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require("events").EventEmitter;
    var EElistenerCount = function(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_safe_buffer2().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var util = Object.create(require_util());
    util.inherits = require_inherits_browser();
    var debugUtil = require("util");
    var debug = void 0;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function() {
      };
    }
    var BufferList = require_BufferList();
    var destroyImpl = require_destroy();
    var StringDecoder;
    util.inherits(Readable, Stream);
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream2) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      var isDuplex = stream2 instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      var hwm = options.highWaterMark;
      var readableHwm = options.readableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0)
        this.highWaterMark = hwm;
      else if (isDuplex && (readableHwm || readableHwm === 0))
        this.highWaterMark = readableHwm;
      else
        this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require("string_decoder/").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      this._readableState = new ReadableState(options, this);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      this.push(null);
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream2, chunk, encoding, addToFront, skipChunkCheck) {
      var state = stream2._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream2, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          stream2.emit("error", er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              stream2.emit("error", new Error("stream.unshift() after end event"));
            else
              addChunk(stream2, state, chunk, true);
          } else if (state.ended) {
            stream2.emit("error", new Error("stream.push() after EOF"));
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream2, state, chunk, false);
              else
                maybeReadMore(stream2, state);
            } else {
              addChunk(stream2, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
        }
      }
      return needMoreData(state);
    }
    function addChunk(stream2, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        stream2.emit("data", chunk);
        stream2.read(0);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream2);
      }
      maybeReadMore(stream2, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      return er;
    }
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require("string_decoder/").StringDecoder;
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };
    var MAX_HWM = 8388608;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream2, state) {
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      emitReadable(stream2);
    }
    function emitReadable(stream2) {
      var state = stream2._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        if (state.sync)
          pna.nextTick(emitReadable_, stream2);
        else
          emitReadable_(stream2);
      }
    }
    function emitReadable_(stream2) {
      debug("emit readable");
      stream2.emit("readable");
      flow(stream2);
    }
    function maybeReadMore(stream2, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        pna.nextTick(maybeReadMore_, stream2, state);
      }
    }
    function maybeReadMore_(stream2, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug("maybeReadMore read 0");
        stream2.read(0);
        if (len === state.length)
          break;
        else
          len = state.length;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      this.emit("error", new Error("_read() is not implemented"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        pna.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      var increasedAwaitDrain = false;
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (ret === false && !increasedAwaitDrain) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          dest.emit("error", er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = { hasUnpiped: false };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) {
          dests[i].emit("unpipe", this, { hasUnpiped: false });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      if (ev === "data") {
        if (this._readableState.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            pna.nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };
    function resume(stream2, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        pna.nextTick(resume_, stream2, state);
      }
    }
    function resume_(stream2, state) {
      if (!state.reading) {
        debug("resume read 0");
        stream2.read(0);
      }
      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream2.emit("resume");
      flow(stream2);
      if (state.flowing && !state.reading)
        stream2.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      return this;
    };
    function flow(stream2) {
      var state = stream2._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream2.read() !== null) {
      }
    }
    Readable.prototype.wrap = function(stream2) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream2.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream2.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream2.pause();
        }
      });
      for (var i in stream2) {
        if (this[i] === void 0 && typeof stream2[i] === "function") {
          this[i] = function(method) {
            return function() {
              return stream2[method].apply(stream2, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream2.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream2.resume();
        }
      };
      return this;
    };
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      enumerable: false,
      get: function() {
        return this._readableState.highWaterMark;
      }
    });
    Readable._fromList = fromList;
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.head.data;
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = fromListPartial(n, state.buffer, state.decoder);
      }
      return ret;
    }
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        ret = list.shift();
      } else {
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length)
          ret += str;
        else
          ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next)
              list.head = p.next;
            else
              list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    function copyFromBuffer(n, list) {
      var ret = Buffer2.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next)
              list.head = p.next;
            else
              list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    function endReadable(stream2) {
      var state = stream2._readableState;
      if (state.length > 0)
        throw new Error('"endReadable()" called on non-empty stream');
      if (!state.endEmitted) {
        state.ended = true;
        pna.nextTick(endReadableNT, state, stream2);
      }
    }
    function endReadableNT(state, stream2) {
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream2.readable = false;
        stream2.emit("end");
      }
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/util-deprecate/browser.js
var require_browser = __commonJS({
  "node_modules/util-deprecate/browser.js"(exports2, module2) {
    module2.exports = deprecate;
    function deprecate(fn, msg) {
      if (config("noDeprecation")) {
        return fn;
      }
      var warned2 = false;
      function deprecated() {
        if (!warned2) {
          if (config("throwDeprecation")) {
            throw new Error(msg);
          } else if (config("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned2 = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config(name) {
      try {
        if (!global.localStorage)
          return false;
      } catch (_3) {
        return false;
      }
      var val = global.localStorage[name];
      if (val == null)
        return false;
      return String(val).toLowerCase() === "true";
    }
  }
});

// node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/readable-stream/lib/_stream_writable.js"(exports2, module2) {
    "use strict";
    var pna = require_process_nextick_args();
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var asyncWrite = !process.browser && ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
    var Duplex;
    Writable.WritableState = WritableState;
    var util = Object.create(require_util());
    util.inherits = require_inherits_browser();
    var internalUtil = {
      deprecate: require_browser()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_safe_buffer2().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    util.inherits(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream2) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      var isDuplex = stream2 instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      var hwm = options.highWaterMark;
      var writableHwm = options.writableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0)
        this.highWaterMark = hwm;
      else if (isDuplex && (writableHwm || writableHwm === 0))
        this.highWaterMark = writableHwm;
      else
        this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream2, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_3) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
        return new Writable(options);
      }
      this._writableState = new WritableState(options, this);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      this.emit("error", new Error("Cannot pipe, not readable"));
    };
    function writeAfterEnd(stream2, cb) {
      var er = new Error("write after end");
      stream2.emit("error", er);
      pna.nextTick(cb, er);
    }
    function validChunk(stream2, state, chunk, cb) {
      var valid = true;
      var er = false;
      if (chunk === null) {
        er = new TypeError("May not write null values to stream");
      } else if (typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      if (er) {
        stream2.emit("error", er);
        pna.nextTick(cb, er);
        valid = false;
      }
      return valid;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ended)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      var state = this._writableState;
      state.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new TypeError("Unknown encoding: " + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream2, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream2, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream2, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev)
        stream2._writev(chunk, state.onwrite);
      else
        stream2._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream2, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        pna.nextTick(cb, er);
        pna.nextTick(finishMaybe, stream2, state);
        stream2._writableState.errorEmitted = true;
        stream2.emit("error", er);
      } else {
        cb(er);
        stream2._writableState.errorEmitted = true;
        stream2.emit("error", er);
        finishMaybe(stream2, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream2, er) {
      var state = stream2._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream2, state, sync, er, cb);
      else {
        var finished = needFinish(state);
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream2, state);
        }
        if (sync) {
          asyncWrite(afterWrite, stream2, state, finished, cb);
        } else {
          afterWrite(stream2, state, finished, cb);
        }
      }
    }
    function afterWrite(stream2, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream2, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream2, state);
    }
    function onwriteDrain(stream2, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream2.emit("drain");
      }
    }
    function clearBuffer(stream2, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream2._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream2, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream2, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new Error("_write() is not implemented"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
    };
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream2, state) {
      stream2._final(function(err) {
        state.pendingcb--;
        if (err) {
          stream2.emit("error", err);
        }
        state.prefinished = true;
        stream2.emit("prefinish");
        finishMaybe(stream2, state);
      });
    }
    function prefinish(stream2, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream2._final === "function") {
          state.pendingcb++;
          state.finalCalled = true;
          pna.nextTick(callFinal, stream2, state);
        } else {
          state.prefinished = true;
          stream2.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream2, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream2, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream2.emit("finish");
        }
      }
      return need;
    }
    function endWritable(stream2, state, cb) {
      state.ending = true;
      finishMaybe(stream2, state);
      if (cb) {
        if (state.finished)
          pna.nextTick(cb);
        else
          stream2.once("finish", cb);
      }
      state.ended = true;
      stream2.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      get: function() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      this.end();
      cb(err);
    };
  }
});

// node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/readable-stream/lib/_stream_duplex.js"(exports2, module2) {
    "use strict";
    var pna = require_process_nextick_args();
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj) {
        keys2.push(key);
      }
      return keys2;
    };
    module2.exports = Duplex;
    var util = Object.create(require_util());
    util.inherits = require_inherits_browser();
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    util.inherits(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false)
        this.readable = false;
      if (options && options.writable === false)
        this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false)
        this.allowHalfOpen = false;
      this.once("end", onend);
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function onend() {
      if (this.allowHalfOpen || this._writableState.ended)
        return;
      pna.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    Duplex.prototype._destroy = function(err, cb) {
      this.push(null);
      this.end();
      pna.nextTick(cb, err);
    };
  }
});

// node_modules/readable-stream/duplex-browser.js
var require_duplex_browser = __commonJS({
  "node_modules/readable-stream/duplex-browser.js"(exports2, module2) {
    module2.exports = require_stream_duplex();
  }
});

// node_modules/bl/bl.js
var require_bl = __commonJS({
  "node_modules/bl/bl.js"(exports2, module2) {
    var DuplexStream = require_duplex_browser();
    var util = require("util");
    var Buffer2 = require_safe_buffer().Buffer;
    function BufferList(callback) {
      if (!(this instanceof BufferList))
        return new BufferList(callback);
      this._bufs = [];
      this.length = 0;
      if (typeof callback == "function") {
        this._callback = callback;
        var piper = function piper2(err) {
          if (this._callback) {
            this._callback(err);
            this._callback = null;
          }
        }.bind(this);
        this.on("pipe", function onPipe(src) {
          src.on("error", piper);
        });
        this.on("unpipe", function onUnpipe(src) {
          src.removeListener("error", piper);
        });
      } else {
        this.append(callback);
      }
      DuplexStream.call(this);
    }
    util.inherits(BufferList, DuplexStream);
    BufferList.prototype._offset = function _offset(offset) {
      var tot = 0, i = 0, _t;
      if (offset === 0)
        return [0, 0];
      for (; i < this._bufs.length; i++) {
        _t = tot + this._bufs[i].length;
        if (offset < _t || i == this._bufs.length - 1)
          return [i, offset - tot];
        tot = _t;
      }
    };
    BufferList.prototype.append = function append(buf) {
      var i = 0;
      if (Buffer2.isBuffer(buf)) {
        this._appendBuffer(buf);
      } else if (Array.isArray(buf)) {
        for (; i < buf.length; i++)
          this.append(buf[i]);
      } else if (buf instanceof BufferList) {
        for (; i < buf._bufs.length; i++)
          this.append(buf._bufs[i]);
      } else if (buf != null) {
        if (typeof buf == "number")
          buf = buf.toString();
        this._appendBuffer(Buffer2.from(buf));
      }
      return this;
    };
    BufferList.prototype._appendBuffer = function appendBuffer(buf) {
      this._bufs.push(buf);
      this.length += buf.length;
    };
    BufferList.prototype._write = function _write(buf, encoding, callback) {
      this._appendBuffer(buf);
      if (typeof callback == "function")
        callback();
    };
    BufferList.prototype._read = function _read(size) {
      if (!this.length)
        return this.push(null);
      size = Math.min(size, this.length);
      this.push(this.slice(0, size));
      this.consume(size);
    };
    BufferList.prototype.end = function end(chunk) {
      DuplexStream.prototype.end.call(this, chunk);
      if (this._callback) {
        this._callback(null, this.slice());
        this._callback = null;
      }
    };
    BufferList.prototype.get = function get(index) {
      return this.slice(index, index + 1)[0];
    };
    BufferList.prototype.slice = function slice(start, end) {
      if (typeof start == "number" && start < 0)
        start += this.length;
      if (typeof end == "number" && end < 0)
        end += this.length;
      return this.copy(null, 0, start, end);
    };
    BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
      if (typeof srcStart != "number" || srcStart < 0)
        srcStart = 0;
      if (typeof srcEnd != "number" || srcEnd > this.length)
        srcEnd = this.length;
      if (srcStart >= this.length)
        return dst || Buffer2.alloc(0);
      if (srcEnd <= 0)
        return dst || Buffer2.alloc(0);
      var copy2 = !!dst, off = this._offset(srcStart), len = srcEnd - srcStart, bytes = len, bufoff = copy2 && dstStart || 0, start = off[1], l, i;
      if (srcStart === 0 && srcEnd == this.length) {
        if (!copy2) {
          return this._bufs.length === 1 ? this._bufs[0] : Buffer2.concat(this._bufs, this.length);
        }
        for (i = 0; i < this._bufs.length; i++) {
          this._bufs[i].copy(dst, bufoff);
          bufoff += this._bufs[i].length;
        }
        return dst;
      }
      if (bytes <= this._bufs[off[0]].length - start) {
        return copy2 ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
      }
      if (!copy2)
        dst = Buffer2.allocUnsafe(len);
      for (i = off[0]; i < this._bufs.length; i++) {
        l = this._bufs[i].length - start;
        if (bytes > l) {
          this._bufs[i].copy(dst, bufoff, start);
          bufoff += l;
        } else {
          this._bufs[i].copy(dst, bufoff, start, start + bytes);
          bufoff += l;
          break;
        }
        bytes -= l;
        if (start)
          start = 0;
      }
      if (dst.length > bufoff)
        return dst.slice(0, bufoff);
      return dst;
    };
    BufferList.prototype.shallowSlice = function shallowSlice(start, end) {
      start = start || 0;
      end = end || this.length;
      if (start < 0)
        start += this.length;
      if (end < 0)
        end += this.length;
      var startOffset = this._offset(start), endOffset = this._offset(end), buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);
      if (endOffset[1] == 0)
        buffers.pop();
      else
        buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
      if (startOffset[1] != 0)
        buffers[0] = buffers[0].slice(startOffset[1]);
      return new BufferList(buffers);
    };
    BufferList.prototype.toString = function toString(encoding, start, end) {
      return this.slice(start, end).toString(encoding);
    };
    BufferList.prototype.consume = function consume(bytes) {
      bytes = Math.trunc(bytes);
      if (Number.isNaN(bytes) || bytes <= 0)
        return this;
      while (this._bufs.length) {
        if (bytes >= this._bufs[0].length) {
          bytes -= this._bufs[0].length;
          this.length -= this._bufs[0].length;
          this._bufs.shift();
        } else {
          this._bufs[0] = this._bufs[0].slice(bytes);
          this.length -= bytes;
          break;
        }
      }
      return this;
    };
    BufferList.prototype.duplicate = function duplicate() {
      var i = 0, copy = new BufferList();
      for (; i < this._bufs.length; i++)
        copy.append(this._bufs[i]);
      return copy;
    };
    BufferList.prototype.destroy = function destroy() {
      this._bufs.length = 0;
      this.length = 0;
      this.push(null);
    };
    (function() {
      var methods = {
        "readDoubleBE": 8,
        "readDoubleLE": 8,
        "readFloatBE": 4,
        "readFloatLE": 4,
        "readInt32BE": 4,
        "readInt32LE": 4,
        "readUInt32BE": 4,
        "readUInt32LE": 4,
        "readInt16BE": 2,
        "readInt16LE": 2,
        "readUInt16BE": 2,
        "readUInt16LE": 2,
        "readInt8": 1,
        "readUInt8": 1
      };
      for (var m in methods) {
        (function(m2) {
          BufferList.prototype[m2] = function(offset) {
            return this.slice(offset, offset + methods[m2])[m2](0);
          };
        })(m);
      }
    })();
    module2.exports = BufferList;
  }
});

// node_modules/xtend/immutable.js
var require_immutable = __commonJS({
  "node_modules/xtend/immutable.js"(exports2, module2) {
    module2.exports = extend;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function extend() {
      var target = {};
      for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    }
  }
});

// node_modules/to-buffer/index.js
var require_to_buffer = __commonJS({
  "node_modules/to-buffer/index.js"(exports2, module2) {
    module2.exports = toBuffer;
    var makeBuffer = Buffer.from && Buffer.from !== Uint8Array.from ? Buffer.from : bufferFrom;
    function bufferFrom(buf, enc) {
      return new Buffer(buf, enc);
    }
    function toBuffer(buf, enc) {
      if (Buffer.isBuffer(buf))
        return buf;
      if (typeof buf === "string")
        return makeBuffer(buf, enc);
      if (Array.isArray(buf))
        return makeBuffer(buf);
      throw new Error("Input should be a buffer or a string");
    }
  }
});

// node_modules/buffer-fill/index.js
var require_buffer_fill = __commonJS({
  "node_modules/buffer-fill/index.js"(exports2, module2) {
    var hasFullSupport = function() {
      try {
        if (!Buffer.isEncoding("latin1")) {
          return false;
        }
        var buf = Buffer.alloc ? Buffer.alloc(4) : new Buffer(4);
        buf.fill("ab", "ucs2");
        return buf.toString("hex") === "61006200";
      } catch (_3) {
        return false;
      }
    }();
    function isSingleByte(val) {
      return val.length === 1 && val.charCodeAt(0) < 256;
    }
    function fillWithNumber(buffer, val, start, end) {
      if (start < 0 || end > buffer.length) {
        throw new RangeError("Out of range index");
      }
      start = start >>> 0;
      end = end === void 0 ? buffer.length : end >>> 0;
      if (end > start) {
        buffer.fill(val, start, end);
      }
      return buffer;
    }
    function fillWithBuffer(buffer, val, start, end) {
      if (start < 0 || end > buffer.length) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return buffer;
      }
      start = start >>> 0;
      end = end === void 0 ? buffer.length : end >>> 0;
      var pos = start;
      var len = val.length;
      while (pos <= end - len) {
        val.copy(buffer, pos);
        pos += len;
      }
      if (pos !== end) {
        val.copy(buffer, pos, 0, end - pos);
      }
      return buffer;
    }
    function fill(buffer, val, start, end, encoding) {
      if (hasFullSupport) {
        return buffer.fill(val, start, end, encoding);
      }
      if (typeof val === "number") {
        return fillWithNumber(buffer, val, start, end);
      }
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = buffer.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = buffer.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (encoding === "latin1") {
          encoding = "binary";
        }
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val === "") {
          return fillWithNumber(buffer, 0, start, end);
        }
        if (isSingleByte(val)) {
          return fillWithNumber(buffer, val.charCodeAt(0), start, end);
        }
        val = new Buffer(val, encoding);
      }
      if (Buffer.isBuffer(val)) {
        return fillWithBuffer(buffer, val, start, end);
      }
      return fillWithNumber(buffer, 0, start, end);
    }
    module2.exports = fill;
  }
});

// node_modules/buffer-alloc-unsafe/index.js
var require_buffer_alloc_unsafe = __commonJS({
  "node_modules/buffer-alloc-unsafe/index.js"(exports2, module2) {
    function allocUnsafe(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be a number');
      }
      if (size < 0) {
        throw new RangeError('"size" argument must not be negative');
      }
      if (Buffer.allocUnsafe) {
        return Buffer.allocUnsafe(size);
      } else {
        return new Buffer(size);
      }
    }
    module2.exports = allocUnsafe;
  }
});

// node_modules/buffer-alloc/index.js
var require_buffer_alloc = __commonJS({
  "node_modules/buffer-alloc/index.js"(exports2, module2) {
    var bufferFill = require_buffer_fill();
    var allocUnsafe = require_buffer_alloc_unsafe();
    module2.exports = function alloc(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be a number');
      }
      if (size < 0) {
        throw new RangeError('"size" argument must not be negative');
      }
      if (Buffer.alloc) {
        return Buffer.alloc(size, fill, encoding);
      }
      var buffer = allocUnsafe(size);
      if (size === 0) {
        return buffer;
      }
      if (fill === void 0) {
        return bufferFill(buffer, 0);
      }
      if (typeof encoding !== "string") {
        encoding = void 0;
      }
      return bufferFill(buffer, fill, encoding);
    };
  }
});

// node_modules/tar-stream/headers.js
var require_headers = __commonJS({
  "node_modules/tar-stream/headers.js"(exports2) {
    var toBuffer = require_to_buffer();
    var alloc = require_buffer_alloc();
    var ZEROS = "0000000000000000000";
    var SEVENS = "7777777777777777777";
    var ZERO_OFFSET = "0".charCodeAt(0);
    var USTAR = "ustar\x0000";
    var MASK = parseInt("7777", 8);
    var clamp = function(index, len, defaultValue) {
      if (typeof index !== "number")
        return defaultValue;
      index = ~~index;
      if (index >= len)
        return len;
      if (index >= 0)
        return index;
      index += len;
      if (index >= 0)
        return index;
      return 0;
    };
    var toType = function(flag) {
      switch (flag) {
        case 0:
          return "file";
        case 1:
          return "link";
        case 2:
          return "symlink";
        case 3:
          return "character-device";
        case 4:
          return "block-device";
        case 5:
          return "directory";
        case 6:
          return "fifo";
        case 7:
          return "contiguous-file";
        case 72:
          return "pax-header";
        case 55:
          return "pax-global-header";
        case 27:
          return "gnu-long-link-path";
        case 28:
        case 30:
          return "gnu-long-path";
      }
      return null;
    };
    var toTypeflag = function(flag) {
      switch (flag) {
        case "file":
          return 0;
        case "link":
          return 1;
        case "symlink":
          return 2;
        case "character-device":
          return 3;
        case "block-device":
          return 4;
        case "directory":
          return 5;
        case "fifo":
          return 6;
        case "contiguous-file":
          return 7;
        case "pax-header":
          return 72;
      }
      return 0;
    };
    var indexOf = function(block, num, offset, end) {
      for (; offset < end; offset++) {
        if (block[offset] === num)
          return offset;
      }
      return end;
    };
    var cksum = function(block) {
      var sum = 8 * 32;
      for (var i = 0; i < 148; i++)
        sum += block[i];
      for (var j = 156; j < 512; j++)
        sum += block[j];
      return sum;
    };
    var encodeOct = function(val, n) {
      val = val.toString(8);
      if (val.length > n)
        return SEVENS.slice(0, n) + " ";
      else
        return ZEROS.slice(0, n - val.length) + val + " ";
    };
    function parse256(buf) {
      var positive;
      if (buf[0] === 128)
        positive = true;
      else if (buf[0] === 255)
        positive = false;
      else
        return null;
      var zero = false;
      var tuple = [];
      for (var i = buf.length - 1; i > 0; i--) {
        var byte = buf[i];
        if (positive)
          tuple.push(byte);
        else if (zero && byte === 0)
          tuple.push(0);
        else if (zero) {
          zero = false;
          tuple.push(256 - byte);
        } else
          tuple.push(255 - byte);
      }
      var sum = 0;
      var l = tuple.length;
      for (i = 0; i < l; i++) {
        sum += tuple[i] * Math.pow(256, i);
      }
      return positive ? sum : -1 * sum;
    }
    var decodeOct = function(val, offset, length) {
      val = val.slice(offset, offset + length);
      offset = 0;
      if (val[offset] & 128) {
        return parse256(val);
      } else {
        while (offset < val.length && val[offset] === 32)
          offset++;
        var end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);
        while (offset < end && val[offset] === 0)
          offset++;
        if (end === offset)
          return 0;
        return parseInt(val.slice(offset, end).toString(), 8);
      }
    };
    var decodeStr = function(val, offset, length, encoding) {
      return val.slice(offset, indexOf(val, 0, offset, offset + length)).toString(encoding);
    };
    var addLength = function(str) {
      var len = Buffer.byteLength(str);
      var digits = Math.floor(Math.log(len) / Math.log(10)) + 1;
      if (len + digits >= Math.pow(10, digits))
        digits++;
      return len + digits + str;
    };
    exports2.decodeLongPath = function(buf, encoding) {
      return decodeStr(buf, 0, buf.length, encoding);
    };
    exports2.encodePax = function(opts) {
      var result = "";
      if (opts.name)
        result += addLength(" path=" + opts.name + "\n");
      if (opts.linkname)
        result += addLength(" linkpath=" + opts.linkname + "\n");
      var pax = opts.pax;
      if (pax) {
        for (var key in pax) {
          result += addLength(" " + key + "=" + pax[key] + "\n");
        }
      }
      return toBuffer(result);
    };
    exports2.decodePax = function(buf) {
      var result = {};
      while (buf.length) {
        var i = 0;
        while (i < buf.length && buf[i] !== 32)
          i++;
        var len = parseInt(buf.slice(0, i).toString(), 10);
        if (!len)
          return result;
        var b = buf.slice(i + 1, len - 1).toString();
        var keyIndex = b.indexOf("=");
        if (keyIndex === -1)
          return result;
        result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);
        buf = buf.slice(len);
      }
      return result;
    };
    exports2.encode = function(opts) {
      var buf = alloc(512);
      var name = opts.name;
      var prefix = "";
      if (opts.typeflag === 5 && name[name.length - 1] !== "/")
        name += "/";
      if (Buffer.byteLength(name) !== name.length)
        return null;
      while (Buffer.byteLength(name) > 100) {
        var i = name.indexOf("/");
        if (i === -1)
          return null;
        prefix += prefix ? "/" + name.slice(0, i) : name.slice(0, i);
        name = name.slice(i + 1);
      }
      if (Buffer.byteLength(name) > 100 || Buffer.byteLength(prefix) > 155)
        return null;
      if (opts.linkname && Buffer.byteLength(opts.linkname) > 100)
        return null;
      buf.write(name);
      buf.write(encodeOct(opts.mode & MASK, 6), 100);
      buf.write(encodeOct(opts.uid, 6), 108);
      buf.write(encodeOct(opts.gid, 6), 116);
      buf.write(encodeOct(opts.size, 11), 124);
      buf.write(encodeOct(opts.mtime.getTime() / 1e3 | 0, 11), 136);
      buf[156] = ZERO_OFFSET + toTypeflag(opts.type);
      if (opts.linkname)
        buf.write(opts.linkname, 157);
      buf.write(USTAR, 257);
      if (opts.uname)
        buf.write(opts.uname, 265);
      if (opts.gname)
        buf.write(opts.gname, 297);
      buf.write(encodeOct(opts.devmajor || 0, 6), 329);
      buf.write(encodeOct(opts.devminor || 0, 6), 337);
      if (prefix)
        buf.write(prefix, 345);
      buf.write(encodeOct(cksum(buf), 6), 148);
      return buf;
    };
    exports2.decode = function(buf, filenameEncoding) {
      var typeflag = buf[156] === 0 ? 0 : buf[156] - ZERO_OFFSET;
      var name = decodeStr(buf, 0, 100, filenameEncoding);
      var mode = decodeOct(buf, 100, 8);
      var uid = decodeOct(buf, 108, 8);
      var gid = decodeOct(buf, 116, 8);
      var size = decodeOct(buf, 124, 12);
      var mtime = decodeOct(buf, 136, 12);
      var type = toType(typeflag);
      var linkname = buf[157] === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding);
      var uname = decodeStr(buf, 265, 32);
      var gname = decodeStr(buf, 297, 32);
      var devmajor = decodeOct(buf, 329, 8);
      var devminor = decodeOct(buf, 337, 8);
      if (buf[345])
        name = decodeStr(buf, 345, 155, filenameEncoding) + "/" + name;
      if (typeflag === 0 && name && name[name.length - 1] === "/")
        typeflag = 5;
      var c = cksum(buf);
      if (c === 8 * 32)
        return null;
      if (c !== decodeOct(buf, 148, 8))
        throw new Error("Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?");
      return {
        name,
        mode,
        uid,
        gid,
        size,
        mtime: new Date(1e3 * mtime),
        type,
        linkname,
        uname,
        gname,
        devmajor,
        devminor
      };
    };
  }
});

// node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/readable-stream/lib/_stream_transform.js"(exports2, module2) {
    "use strict";
    module2.exports = Transform;
    var Duplex = require_stream_duplex();
    var util = Object.create(require_util());
    util.inherits = require_inherits_browser();
    util.inherits(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (!cb) {
        return this.emit("error", new Error("write callback called multiple times"));
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function") {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      throw new Error("_transform() is not implemented");
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      var _this2 = this;
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
        _this2.emit("close");
      });
    };
    function done(stream2, er, data) {
      if (er)
        return stream2.emit("error", er);
      if (data != null)
        stream2.push(data);
      if (stream2._writableState.length)
        throw new Error("Calling transform done when ws.length != 0");
      if (stream2._transformState.transforming)
        throw new Error("Calling transform done when still transforming");
      return stream2.push(null);
    }
  }
});

// node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/readable-stream/lib/_stream_passthrough.js"(exports2, module2) {
    "use strict";
    module2.exports = PassThrough;
    var Transform = require_stream_transform();
    var util = Object.create(require_util());
    util.inherits = require_inherits_browser();
    util.inherits(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/readable-stream/readable-browser.js"(exports2, module2) {
    exports2 = module2.exports = require_stream_readable();
    exports2.Stream = exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable();
    exports2.Duplex = require_stream_duplex();
    exports2.Transform = require_stream_transform();
    exports2.PassThrough = require_stream_passthrough();
  }
});

// node_modules/tar-stream/extract.js
var require_extract = __commonJS({
  "node_modules/tar-stream/extract.js"(exports2, module2) {
    var util = require("util");
    var bl = require_bl();
    var xtend = require_immutable();
    var headers = require_headers();
    var Writable = require_readable_browser().Writable;
    var PassThrough = require_readable_browser().PassThrough;
    var noop = function() {
    };
    var overflow = function(size) {
      size &= 511;
      return size && 512 - size;
    };
    var emptyStream = function(self2, offset) {
      var s = new Source(self2, offset);
      s.end();
      return s;
    };
    var mixinPax = function(header, pax) {
      if (pax.path)
        header.name = pax.path;
      if (pax.linkpath)
        header.linkname = pax.linkpath;
      if (pax.size)
        header.size = parseInt(pax.size, 10);
      header.pax = pax;
      return header;
    };
    var Source = function(self2, offset) {
      this._parent = self2;
      this.offset = offset;
      PassThrough.call(this);
    };
    util.inherits(Source, PassThrough);
    Source.prototype.destroy = function(err) {
      this._parent.destroy(err);
    };
    var Extract = function(opts) {
      if (!(this instanceof Extract))
        return new Extract(opts);
      Writable.call(this, opts);
      opts = opts || {};
      this._offset = 0;
      this._buffer = bl();
      this._missing = 0;
      this._partial = false;
      this._onparse = noop;
      this._header = null;
      this._stream = null;
      this._overflow = null;
      this._cb = null;
      this._locked = false;
      this._destroyed = false;
      this._pax = null;
      this._paxGlobal = null;
      this._gnuLongPath = null;
      this._gnuLongLinkPath = null;
      var self2 = this;
      var b = self2._buffer;
      var oncontinue = function() {
        self2._continue();
      };
      var onunlock = function(err) {
        self2._locked = false;
        if (err)
          return self2.destroy(err);
        if (!self2._stream)
          oncontinue();
      };
      var onstreamend = function() {
        self2._stream = null;
        var drain = overflow(self2._header.size);
        if (drain)
          self2._parse(drain, ondrain);
        else
          self2._parse(512, onheader);
        if (!self2._locked)
          oncontinue();
      };
      var ondrain = function() {
        self2._buffer.consume(overflow(self2._header.size));
        self2._parse(512, onheader);
        oncontinue();
      };
      var onpaxglobalheader = function() {
        var size = self2._header.size;
        self2._paxGlobal = headers.decodePax(b.slice(0, size));
        b.consume(size);
        onstreamend();
      };
      var onpaxheader = function() {
        var size = self2._header.size;
        self2._pax = headers.decodePax(b.slice(0, size));
        if (self2._paxGlobal)
          self2._pax = xtend(self2._paxGlobal, self2._pax);
        b.consume(size);
        onstreamend();
      };
      var ongnulongpath = function() {
        var size = self2._header.size;
        this._gnuLongPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
        b.consume(size);
        onstreamend();
      };
      var ongnulonglinkpath = function() {
        var size = self2._header.size;
        this._gnuLongLinkPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
        b.consume(size);
        onstreamend();
      };
      var onheader = function() {
        var offset = self2._offset;
        var header;
        try {
          header = self2._header = headers.decode(b.slice(0, 512), opts.filenameEncoding);
        } catch (err) {
          self2.emit("error", err);
        }
        b.consume(512);
        if (!header) {
          self2._parse(512, onheader);
          oncontinue();
          return;
        }
        if (header.type === "gnu-long-path") {
          self2._parse(header.size, ongnulongpath);
          oncontinue();
          return;
        }
        if (header.type === "gnu-long-link-path") {
          self2._parse(header.size, ongnulonglinkpath);
          oncontinue();
          return;
        }
        if (header.type === "pax-global-header") {
          self2._parse(header.size, onpaxglobalheader);
          oncontinue();
          return;
        }
        if (header.type === "pax-header") {
          self2._parse(header.size, onpaxheader);
          oncontinue();
          return;
        }
        if (self2._gnuLongPath) {
          header.name = self2._gnuLongPath;
          self2._gnuLongPath = null;
        }
        if (self2._gnuLongLinkPath) {
          header.linkname = self2._gnuLongLinkPath;
          self2._gnuLongLinkPath = null;
        }
        if (self2._pax) {
          self2._header = header = mixinPax(header, self2._pax);
          self2._pax = null;
        }
        self2._locked = true;
        if (!header.size || header.type === "directory") {
          self2._parse(512, onheader);
          self2.emit("entry", header, emptyStream(self2, offset), onunlock);
          return;
        }
        self2._stream = new Source(self2, offset);
        self2.emit("entry", header, self2._stream, onunlock);
        self2._parse(header.size, onstreamend);
        oncontinue();
      };
      this._onheader = onheader;
      this._parse(512, onheader);
    };
    util.inherits(Extract, Writable);
    Extract.prototype.destroy = function(err) {
      if (this._destroyed)
        return;
      this._destroyed = true;
      if (err)
        this.emit("error", err);
      this.emit("close");
      if (this._stream)
        this._stream.emit("close");
    };
    Extract.prototype._parse = function(size, onparse) {
      if (this._destroyed)
        return;
      this._offset += size;
      this._missing = size;
      if (onparse === this._onheader)
        this._partial = false;
      this._onparse = onparse;
    };
    Extract.prototype._continue = function() {
      if (this._destroyed)
        return;
      var cb = this._cb;
      this._cb = noop;
      if (this._overflow)
        this._write(this._overflow, void 0, cb);
      else
        cb();
    };
    Extract.prototype._write = function(data, enc, cb) {
      if (this._destroyed)
        return;
      var s = this._stream;
      var b = this._buffer;
      var missing = this._missing;
      if (data.length)
        this._partial = true;
      if (data.length < missing) {
        this._missing -= data.length;
        this._overflow = null;
        if (s)
          return s.write(data, cb);
        b.append(data);
        return cb();
      }
      this._cb = cb;
      this._missing = 0;
      var overflow2 = null;
      if (data.length > missing) {
        overflow2 = data.slice(missing);
        data = data.slice(0, missing);
      }
      if (s)
        s.end(data);
      else
        b.append(data);
      this._overflow = overflow2;
      this._onparse();
    };
    Extract.prototype._final = function(cb) {
      if (this._partial)
        return this.destroy(new Error("Unexpected end of data"));
      cb();
    };
    module2.exports = Extract;
  }
});

// node_modules/fs-constants/browser.js
var require_browser2 = __commonJS({
  "node_modules/fs-constants/browser.js"(exports2, module2) {
    module2.exports = require("constants");
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports2, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports2, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/end-of-stream/index.js
var require_end_of_stream = __commonJS({
  "node_modules/end-of-stream/index.js"(exports2, module2) {
    var once = require_once();
    var noop = function() {
    };
    var isRequest = function(stream2) {
      return stream2.setHeader && typeof stream2.abort === "function";
    };
    var isChildProcess = function(stream2) {
      return stream2.stdio && Array.isArray(stream2.stdio) && stream2.stdio.length === 3;
    };
    var eos = function(stream2, opts, callback) {
      if (typeof opts === "function")
        return eos(stream2, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var ws = stream2._writableState;
      var rs = stream2._readableState;
      var readable = opts.readable || opts.readable !== false && stream2.readable;
      var writable = opts.writable || opts.writable !== false && stream2.writable;
      var cancelled = false;
      var onlegacyfinish = function() {
        if (!stream2.writable)
          onfinish();
      };
      var onfinish = function() {
        writable = false;
        if (!readable)
          callback.call(stream2);
      };
      var onend = function() {
        readable = false;
        if (!writable)
          callback.call(stream2);
      };
      var onexit = function(exitCode) {
        callback.call(stream2, exitCode ? new Error("exited with error code: " + exitCode) : null);
      };
      var onerror = function(err) {
        callback.call(stream2, err);
      };
      var onclose = function() {
        process.nextTick(onclosenexttick);
      };
      var onclosenexttick = function() {
        if (cancelled)
          return;
        if (readable && !(rs && (rs.ended && !rs.destroyed)))
          return callback.call(stream2, new Error("premature close"));
        if (writable && !(ws && (ws.ended && !ws.destroyed)))
          return callback.call(stream2, new Error("premature close"));
      };
      var onrequest = function() {
        stream2.req.on("finish", onfinish);
      };
      if (isRequest(stream2)) {
        stream2.on("complete", onfinish);
        stream2.on("abort", onclose);
        if (stream2.req)
          onrequest();
        else
          stream2.on("request", onrequest);
      } else if (writable && !ws) {
        stream2.on("end", onlegacyfinish);
        stream2.on("close", onlegacyfinish);
      }
      if (isChildProcess(stream2))
        stream2.on("exit", onexit);
      stream2.on("end", onend);
      stream2.on("finish", onfinish);
      if (opts.error !== false)
        stream2.on("error", onerror);
      stream2.on("close", onclose);
      return function() {
        cancelled = true;
        stream2.removeListener("complete", onfinish);
        stream2.removeListener("abort", onclose);
        stream2.removeListener("request", onrequest);
        if (stream2.req)
          stream2.req.removeListener("finish", onfinish);
        stream2.removeListener("end", onlegacyfinish);
        stream2.removeListener("close", onlegacyfinish);
        stream2.removeListener("finish", onfinish);
        stream2.removeListener("exit", onexit);
        stream2.removeListener("end", onend);
        stream2.removeListener("error", onerror);
        stream2.removeListener("close", onclose);
      };
    };
    module2.exports = eos;
  }
});

// node_modules/tar-stream/pack.js
var require_pack = __commonJS({
  "node_modules/tar-stream/pack.js"(exports2, module2) {
    var constants = require_browser2();
    var eos = require_end_of_stream();
    var util = require("util");
    var alloc = require_buffer_alloc();
    var toBuffer = require_to_buffer();
    var Readable = require_readable_browser().Readable;
    var Writable = require_readable_browser().Writable;
    var StringDecoder = require("string_decoder").StringDecoder;
    var headers = require_headers();
    var DMODE = parseInt("755", 8);
    var FMODE = parseInt("644", 8);
    var END_OF_TAR = alloc(1024);
    var noop = function() {
    };
    var overflow = function(self2, size) {
      size &= 511;
      if (size)
        self2.push(END_OF_TAR.slice(0, 512 - size));
    };
    function modeToType(mode) {
      switch (mode & constants.S_IFMT) {
        case constants.S_IFBLK:
          return "block-device";
        case constants.S_IFCHR:
          return "character-device";
        case constants.S_IFDIR:
          return "directory";
        case constants.S_IFIFO:
          return "fifo";
        case constants.S_IFLNK:
          return "symlink";
      }
      return "file";
    }
    var Sink = function(to) {
      Writable.call(this);
      this.written = 0;
      this._to = to;
      this._destroyed = false;
    };
    util.inherits(Sink, Writable);
    Sink.prototype._write = function(data, enc, cb) {
      this.written += data.length;
      if (this._to.push(data))
        return cb();
      this._to._drain = cb;
    };
    Sink.prototype.destroy = function() {
      if (this._destroyed)
        return;
      this._destroyed = true;
      this.emit("close");
    };
    var LinkSink = function() {
      Writable.call(this);
      this.linkname = "";
      this._decoder = new StringDecoder("utf-8");
      this._destroyed = false;
    };
    util.inherits(LinkSink, Writable);
    LinkSink.prototype._write = function(data, enc, cb) {
      this.linkname += this._decoder.write(data);
      cb();
    };
    LinkSink.prototype.destroy = function() {
      if (this._destroyed)
        return;
      this._destroyed = true;
      this.emit("close");
    };
    var Void = function() {
      Writable.call(this);
      this._destroyed = false;
    };
    util.inherits(Void, Writable);
    Void.prototype._write = function(data, enc, cb) {
      cb(new Error("No body allowed for this entry"));
    };
    Void.prototype.destroy = function() {
      if (this._destroyed)
        return;
      this._destroyed = true;
      this.emit("close");
    };
    var Pack = function(opts) {
      if (!(this instanceof Pack))
        return new Pack(opts);
      Readable.call(this, opts);
      this._drain = noop;
      this._finalized = false;
      this._finalizing = false;
      this._destroyed = false;
      this._stream = null;
    };
    util.inherits(Pack, Readable);
    Pack.prototype.entry = function(header, buffer, callback) {
      if (this._stream)
        throw new Error("already piping an entry");
      if (this._finalized || this._destroyed)
        return;
      if (typeof buffer === "function") {
        callback = buffer;
        buffer = null;
      }
      if (!callback)
        callback = noop;
      var self2 = this;
      if (!header.size || header.type === "symlink")
        header.size = 0;
      if (!header.type)
        header.type = modeToType(header.mode);
      if (!header.mode)
        header.mode = header.type === "directory" ? DMODE : FMODE;
      if (!header.uid)
        header.uid = 0;
      if (!header.gid)
        header.gid = 0;
      if (!header.mtime)
        header.mtime = new Date();
      if (typeof buffer === "string")
        buffer = toBuffer(buffer);
      if (Buffer.isBuffer(buffer)) {
        header.size = buffer.length;
        this._encode(header);
        this.push(buffer);
        overflow(self2, header.size);
        process.nextTick(callback);
        return new Void();
      }
      if (header.type === "symlink" && !header.linkname) {
        var linkSink = new LinkSink();
        eos(linkSink, function(err) {
          if (err) {
            self2.destroy();
            return callback(err);
          }
          header.linkname = linkSink.linkname;
          self2._encode(header);
          callback();
        });
        return linkSink;
      }
      this._encode(header);
      if (header.type !== "file" && header.type !== "contiguous-file") {
        process.nextTick(callback);
        return new Void();
      }
      var sink = new Sink(this);
      this._stream = sink;
      eos(sink, function(err) {
        self2._stream = null;
        if (err) {
          self2.destroy();
          return callback(err);
        }
        if (sink.written !== header.size) {
          self2.destroy();
          return callback(new Error("size mismatch"));
        }
        overflow(self2, header.size);
        if (self2._finalizing)
          self2.finalize();
        callback();
      });
      return sink;
    };
    Pack.prototype.finalize = function() {
      if (this._stream) {
        this._finalizing = true;
        return;
      }
      if (this._finalized)
        return;
      this._finalized = true;
      this.push(END_OF_TAR);
      this.push(null);
    };
    Pack.prototype.destroy = function(err) {
      if (this._destroyed)
        return;
      this._destroyed = true;
      if (err)
        this.emit("error", err);
      this.emit("close");
      if (this._stream && this._stream.destroy)
        this._stream.destroy();
    };
    Pack.prototype._encode = function(header) {
      if (!header.pax) {
        var buf = headers.encode(header);
        if (buf) {
          this.push(buf);
          return;
        }
      }
      this._encodePax(header);
    };
    Pack.prototype._encodePax = function(header) {
      var paxHeader = headers.encodePax({
        name: header.name,
        linkname: header.linkname,
        pax: header.pax
      });
      var newHeader = {
        name: "PaxHeader",
        mode: header.mode,
        uid: header.uid,
        gid: header.gid,
        size: paxHeader.length,
        mtime: header.mtime,
        type: "pax-header",
        linkname: header.linkname && "PaxHeader",
        uname: header.uname,
        gname: header.gname,
        devmajor: header.devmajor,
        devminor: header.devminor
      };
      this.push(headers.encode(newHeader));
      this.push(paxHeader);
      overflow(this, paxHeader.length);
      newHeader.size = header.size;
      newHeader.type = header.type;
      this.push(headers.encode(newHeader));
    };
    Pack.prototype._read = function(n) {
      var drain = this._drain;
      this._drain = noop;
      drain();
    };
    module2.exports = Pack;
  }
});

// node_modules/tar-stream/index.js
var require_tar_stream = __commonJS({
  "node_modules/tar-stream/index.js"(exports2) {
    exports2.extract = require_extract();
    exports2.pack = require_pack();
  }
});

// node_modules/decompress-tar/index.js
var require_decompress_tar = __commonJS({
  "node_modules/decompress-tar/index.js"(exports2, module2) {
    "use strict";
    var fileType2 = require_file_type2();
    var isStream = require_is_stream();
    var tarStream = require_tar_stream();
    module2.exports = () => (input) => {
      if (!Buffer.isBuffer(input) && !isStream(input)) {
        return Promise.reject(new TypeError(`Expected a Buffer or Stream, got ${typeof input}`));
      }
      if (Buffer.isBuffer(input) && (!fileType2(input) || fileType2(input).ext !== "tar")) {
        return Promise.resolve([]);
      }
      const extract = tarStream.extract();
      const files = [];
      extract.on("entry", (header, stream2, cb) => {
        const chunk = [];
        stream2.on("data", (data) => chunk.push(data));
        stream2.on("end", () => {
          const file = {
            data: Buffer.concat(chunk),
            mode: header.mode,
            mtime: header.mtime,
            path: header.name,
            type: header.type
          };
          if (header.type === "symlink" || header.type === "link") {
            file.linkname = header.linkname;
          }
          files.push(file);
          cb();
        });
      });
      const promise = new Promise((resolve2, reject2) => {
        if (!Buffer.isBuffer(input)) {
          input.on("error", reject2);
        }
        extract.on("finish", () => resolve2(files));
        extract.on("error", reject2);
      });
      extract.then = promise.then.bind(promise);
      extract.catch = promise.catch.bind(promise);
      if (Buffer.isBuffer(input)) {
        extract.end(input);
      } else {
        input.pipe(extract);
      }
      return extract;
    };
  }
});

// node_modules/decompress-tarbz2/node_modules/file-type/index.js
var require_file_type3 = __commonJS({
  "node_modules/decompress-tarbz2/node_modules/file-type/index.js"(exports2, module2) {
    "use strict";
    var toBytes = (s) => Array.from(s).map((c) => c.charCodeAt(0));
    var xpiZipFilename2 = toBytes("META-INF/mozilla.rsa");
    var oxmlContentTypes2 = toBytes("[Content_Types].xml");
    var oxmlRels2 = toBytes("_rels/.rels");
    module2.exports = (input) => {
      const buf = new Uint8Array(input);
      if (!(buf && buf.length > 1)) {
        return null;
      }
      const check = (header, opts) => {
        opts = Object.assign({
          offset: 0
        }, opts);
        for (let i = 0; i < header.length; i++) {
          if (opts.mask) {
            if (header[i] !== (opts.mask[i] & buf[i + opts.offset])) {
              return false;
            }
          } else if (header[i] !== buf[i + opts.offset]) {
            return false;
          }
        }
        return true;
      };
      if (check([255, 216, 255])) {
        return {
          ext: "jpg",
          mime: "image/jpeg"
        };
      }
      if (check([137, 80, 78, 71, 13, 10, 26, 10])) {
        return {
          ext: "png",
          mime: "image/png"
        };
      }
      if (check([71, 73, 70])) {
        return {
          ext: "gif",
          mime: "image/gif"
        };
      }
      if (check([87, 69, 66, 80], { offset: 8 })) {
        return {
          ext: "webp",
          mime: "image/webp"
        };
      }
      if (check([70, 76, 73, 70])) {
        return {
          ext: "flif",
          mime: "image/flif"
        };
      }
      if ((check([73, 73, 42, 0]) || check([77, 77, 0, 42])) && check([67, 82], { offset: 8 })) {
        return {
          ext: "cr2",
          mime: "image/x-canon-cr2"
        };
      }
      if (check([73, 73, 42, 0]) || check([77, 77, 0, 42])) {
        return {
          ext: "tif",
          mime: "image/tiff"
        };
      }
      if (check([66, 77])) {
        return {
          ext: "bmp",
          mime: "image/bmp"
        };
      }
      if (check([73, 73, 188])) {
        return {
          ext: "jxr",
          mime: "image/vnd.ms-photo"
        };
      }
      if (check([56, 66, 80, 83])) {
        return {
          ext: "psd",
          mime: "image/vnd.adobe.photoshop"
        };
      }
      if (check([80, 75, 3, 4])) {
        if (check([109, 105, 109, 101, 116, 121, 112, 101, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 101, 112, 117, 98, 43, 122, 105, 112], { offset: 30 })) {
          return {
            ext: "epub",
            mime: "application/epub+zip"
          };
        }
        if (check(xpiZipFilename2, { offset: 30 })) {
          return {
            ext: "xpi",
            mime: "application/x-xpinstall"
          };
        }
        if (check(oxmlContentTypes2, { offset: 30 }) || check(oxmlRels2, { offset: 30 })) {
          const sliced = buf.subarray(4, 4 + 2e3);
          const nextZipHeaderIndex = (arr) => arr.findIndex((el, i, arr2) => arr2[i] === 80 && arr2[i + 1] === 75 && arr2[i + 2] === 3 && arr2[i + 3] === 4);
          const header2Pos = nextZipHeaderIndex(sliced);
          if (header2Pos !== -1) {
            const slicedAgain = buf.subarray(header2Pos + 8, header2Pos + 8 + 1e3);
            const header3Pos = nextZipHeaderIndex(slicedAgain);
            if (header3Pos !== -1) {
              const offset = 8 + header2Pos + header3Pos + 30;
              if (check(toBytes("word/"), { offset })) {
                return {
                  ext: "docx",
                  mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                };
              }
              if (check(toBytes("ppt/"), { offset })) {
                return {
                  ext: "pptx",
                  mime: "application/vnd.openxmlformats-officedocument.presentationml.presentation"
                };
              }
              if (check(toBytes("xl/"), { offset })) {
                return {
                  ext: "xlsx",
                  mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                };
              }
            }
          }
        }
      }
      if (check([80, 75]) && (buf[2] === 3 || buf[2] === 5 || buf[2] === 7) && (buf[3] === 4 || buf[3] === 6 || buf[3] === 8)) {
        return {
          ext: "zip",
          mime: "application/zip"
        };
      }
      if (check([117, 115, 116, 97, 114], { offset: 257 })) {
        return {
          ext: "tar",
          mime: "application/x-tar"
        };
      }
      if (check([82, 97, 114, 33, 26, 7]) && (buf[6] === 0 || buf[6] === 1)) {
        return {
          ext: "rar",
          mime: "application/x-rar-compressed"
        };
      }
      if (check([31, 139, 8])) {
        return {
          ext: "gz",
          mime: "application/gzip"
        };
      }
      if (check([66, 90, 104])) {
        return {
          ext: "bz2",
          mime: "application/x-bzip2"
        };
      }
      if (check([55, 122, 188, 175, 39, 28])) {
        return {
          ext: "7z",
          mime: "application/x-7z-compressed"
        };
      }
      if (check([120, 1])) {
        return {
          ext: "dmg",
          mime: "application/x-apple-diskimage"
        };
      }
      if (check([51, 103, 112, 53]) || check([0, 0, 0]) && check([102, 116, 121, 112], { offset: 4 }) && (check([109, 112, 52, 49], { offset: 8 }) || check([109, 112, 52, 50], { offset: 8 }) || check([105, 115, 111, 109], { offset: 8 }) || check([105, 115, 111, 50], { offset: 8 }) || check([109, 109, 112, 52], { offset: 8 }) || check([77, 52, 86], { offset: 8 }) || check([100, 97, 115, 104], { offset: 8 }))) {
        return {
          ext: "mp4",
          mime: "video/mp4"
        };
      }
      if (check([77, 84, 104, 100])) {
        return {
          ext: "mid",
          mime: "audio/midi"
        };
      }
      if (check([26, 69, 223, 163])) {
        const sliced = buf.subarray(4, 4 + 4096);
        const idPos = sliced.findIndex((el, i, arr) => arr[i] === 66 && arr[i + 1] === 130);
        if (idPos !== -1) {
          const docTypePos = idPos + 3;
          const findDocType = (type) => Array.from(type).every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));
          if (findDocType("matroska")) {
            return {
              ext: "mkv",
              mime: "video/x-matroska"
            };
          }
          if (findDocType("webm")) {
            return {
              ext: "webm",
              mime: "video/webm"
            };
          }
        }
      }
      if (check([0, 0, 0, 20, 102, 116, 121, 112, 113, 116, 32, 32]) || check([102, 114, 101, 101], { offset: 4 }) || check([102, 116, 121, 112, 113, 116, 32, 32], { offset: 4 }) || check([109, 100, 97, 116], { offset: 4 }) || check([119, 105, 100, 101], { offset: 4 })) {
        return {
          ext: "mov",
          mime: "video/quicktime"
        };
      }
      if (check([82, 73, 70, 70]) && check([65, 86, 73], { offset: 8 })) {
        return {
          ext: "avi",
          mime: "video/x-msvideo"
        };
      }
      if (check([48, 38, 178, 117, 142, 102, 207, 17, 166, 217])) {
        return {
          ext: "wmv",
          mime: "video/x-ms-wmv"
        };
      }
      if (check([0, 0, 1, 186])) {
        return {
          ext: "mpg",
          mime: "video/mpeg"
        };
      }
      for (let start = 0; start < 2 && start < buf.length - 16; start++) {
        if (check([73, 68, 51], { offset: start }) || check([255, 226], { offset: start, mask: [255, 226] })) {
          return {
            ext: "mp3",
            mime: "audio/mpeg"
          };
        }
      }
      if (check([102, 116, 121, 112, 77, 52, 65], { offset: 4 }) || check([77, 52, 65, 32])) {
        return {
          ext: "m4a",
          mime: "audio/m4a"
        };
      }
      if (check([79, 112, 117, 115, 72, 101, 97, 100], { offset: 28 })) {
        return {
          ext: "opus",
          mime: "audio/opus"
        };
      }
      if (check([79, 103, 103, 83])) {
        return {
          ext: "ogg",
          mime: "audio/ogg"
        };
      }
      if (check([102, 76, 97, 67])) {
        return {
          ext: "flac",
          mime: "audio/x-flac"
        };
      }
      if (check([82, 73, 70, 70]) && check([87, 65, 86, 69], { offset: 8 })) {
        return {
          ext: "wav",
          mime: "audio/x-wav"
        };
      }
      if (check([35, 33, 65, 77, 82, 10])) {
        return {
          ext: "amr",
          mime: "audio/amr"
        };
      }
      if (check([37, 80, 68, 70])) {
        return {
          ext: "pdf",
          mime: "application/pdf"
        };
      }
      if (check([77, 90])) {
        return {
          ext: "exe",
          mime: "application/x-msdownload"
        };
      }
      if ((buf[0] === 67 || buf[0] === 70) && check([87, 83], { offset: 1 })) {
        return {
          ext: "swf",
          mime: "application/x-shockwave-flash"
        };
      }
      if (check([123, 92, 114, 116, 102])) {
        return {
          ext: "rtf",
          mime: "application/rtf"
        };
      }
      if (check([0, 97, 115, 109])) {
        return {
          ext: "wasm",
          mime: "application/wasm"
        };
      }
      if (check([119, 79, 70, 70]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff",
          mime: "font/woff"
        };
      }
      if (check([119, 79, 70, 50]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff2",
          mime: "font/woff2"
        };
      }
      if (check([76, 80], { offset: 34 }) && (check([0, 0, 1], { offset: 8 }) || check([1, 0, 2], { offset: 8 }) || check([2, 0, 2], { offset: 8 }))) {
        return {
          ext: "eot",
          mime: "application/octet-stream"
        };
      }
      if (check([0, 1, 0, 0, 0])) {
        return {
          ext: "ttf",
          mime: "font/ttf"
        };
      }
      if (check([79, 84, 84, 79, 0])) {
        return {
          ext: "otf",
          mime: "font/otf"
        };
      }
      if (check([0, 0, 1, 0])) {
        return {
          ext: "ico",
          mime: "image/x-icon"
        };
      }
      if (check([70, 76, 86, 1])) {
        return {
          ext: "flv",
          mime: "video/x-flv"
        };
      }
      if (check([37, 33])) {
        return {
          ext: "ps",
          mime: "application/postscript"
        };
      }
      if (check([253, 55, 122, 88, 90, 0])) {
        return {
          ext: "xz",
          mime: "application/x-xz"
        };
      }
      if (check([83, 81, 76, 105])) {
        return {
          ext: "sqlite",
          mime: "application/x-sqlite3"
        };
      }
      if (check([78, 69, 83, 26])) {
        return {
          ext: "nes",
          mime: "application/x-nintendo-nes-rom"
        };
      }
      if (check([67, 114, 50, 52])) {
        return {
          ext: "crx",
          mime: "application/x-google-chrome-extension"
        };
      }
      if (check([77, 83, 67, 70]) || check([73, 83, 99, 40])) {
        return {
          ext: "cab",
          mime: "application/vnd.ms-cab-compressed"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62, 10, 100, 101, 98, 105, 97, 110, 45, 98, 105, 110, 97, 114, 121])) {
        return {
          ext: "deb",
          mime: "application/x-deb"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62])) {
        return {
          ext: "ar",
          mime: "application/x-unix-archive"
        };
      }
      if (check([237, 171, 238, 219])) {
        return {
          ext: "rpm",
          mime: "application/x-rpm"
        };
      }
      if (check([31, 160]) || check([31, 157])) {
        return {
          ext: "Z",
          mime: "application/x-compress"
        };
      }
      if (check([76, 90, 73, 80])) {
        return {
          ext: "lz",
          mime: "application/x-lzip"
        };
      }
      if (check([208, 207, 17, 224, 161, 177, 26, 225])) {
        return {
          ext: "msi",
          mime: "application/x-msi"
        };
      }
      if (check([6, 14, 43, 52, 2, 5, 1, 1, 13, 1, 2, 1, 1, 2])) {
        return {
          ext: "mxf",
          mime: "application/mxf"
        };
      }
      if (check([71], { offset: 4 }) && (check([71], { offset: 192 }) || check([71], { offset: 196 }))) {
        return {
          ext: "mts",
          mime: "video/mp2t"
        };
      }
      if (check([66, 76, 69, 78, 68, 69, 82])) {
        return {
          ext: "blend",
          mime: "application/x-blender"
        };
      }
      if (check([66, 80, 71, 251])) {
        return {
          ext: "bpg",
          mime: "image/bpg"
        };
      }
      return null;
    };
  }
});

// node_modules/seek-bzip/lib/bitreader.js
var require_bitreader = __commonJS({
  "node_modules/seek-bzip/lib/bitreader.js"(exports2, module2) {
    var BITMASK = [0, 1, 3, 7, 15, 31, 63, 127, 255];
    var BitReader = function(stream2) {
      this.stream = stream2;
      this.bitOffset = 0;
      this.curByte = 0;
      this.hasByte = false;
    };
    BitReader.prototype._ensureByte = function() {
      if (!this.hasByte) {
        this.curByte = this.stream.readByte();
        this.hasByte = true;
      }
    };
    BitReader.prototype.read = function(bits) {
      var result = 0;
      while (bits > 0) {
        this._ensureByte();
        var remaining = 8 - this.bitOffset;
        if (bits >= remaining) {
          result <<= remaining;
          result |= BITMASK[remaining] & this.curByte;
          this.hasByte = false;
          this.bitOffset = 0;
          bits -= remaining;
        } else {
          result <<= bits;
          var shift = remaining - bits;
          result |= (this.curByte & BITMASK[bits] << shift) >> shift;
          this.bitOffset += bits;
          bits = 0;
        }
      }
      return result;
    };
    BitReader.prototype.seek = function(pos) {
      var n_bit = pos % 8;
      var n_byte = (pos - n_bit) / 8;
      this.bitOffset = n_bit;
      this.stream.seek(n_byte);
      this.hasByte = false;
    };
    BitReader.prototype.pi = function() {
      var buf = new Buffer(6), i;
      for (i = 0; i < buf.length; i++) {
        buf[i] = this.read(8);
      }
      return buf.toString("hex");
    };
    module2.exports = BitReader;
  }
});

// node_modules/seek-bzip/lib/stream.js
var require_stream = __commonJS({
  "node_modules/seek-bzip/lib/stream.js"(exports2, module2) {
    var Stream = function() {
    };
    Stream.prototype.readByte = function() {
      throw new Error("abstract method readByte() not implemented");
    };
    Stream.prototype.read = function(buffer, bufOffset, length) {
      var bytesRead = 0;
      while (bytesRead < length) {
        var c = this.readByte();
        if (c < 0) {
          return bytesRead === 0 ? -1 : bytesRead;
        }
        buffer[bufOffset++] = c;
        bytesRead++;
      }
      return bytesRead;
    };
    Stream.prototype.seek = function(new_pos) {
      throw new Error("abstract method seek() not implemented");
    };
    Stream.prototype.writeByte = function(_byte) {
      throw new Error("abstract method readByte() not implemented");
    };
    Stream.prototype.write = function(buffer, bufOffset, length) {
      var i;
      for (i = 0; i < length; i++) {
        this.writeByte(buffer[bufOffset++]);
      }
      return length;
    };
    Stream.prototype.flush = function() {
    };
    module2.exports = Stream;
  }
});

// node_modules/seek-bzip/lib/crc32.js
var require_crc32 = __commonJS({
  "node_modules/seek-bzip/lib/crc32.js"(exports2, module2) {
    module2.exports = function() {
      var crc32Lookup = new Uint32Array([
        0,
        79764919,
        159529838,
        222504665,
        319059676,
        398814059,
        445009330,
        507990021,
        638119352,
        583659535,
        797628118,
        726387553,
        890018660,
        835552979,
        1015980042,
        944750013,
        1276238704,
        1221641927,
        1167319070,
        1095957929,
        1595256236,
        1540665371,
        1452775106,
        1381403509,
        1780037320,
        1859660671,
        1671105958,
        1733955601,
        2031960084,
        2111593891,
        1889500026,
        1952343757,
        2552477408,
        2632100695,
        2443283854,
        2506133561,
        2334638140,
        2414271883,
        2191915858,
        2254759653,
        3190512472,
        3135915759,
        3081330742,
        3009969537,
        2905550212,
        2850959411,
        2762807018,
        2691435357,
        3560074640,
        3505614887,
        3719321342,
        3648080713,
        3342211916,
        3287746299,
        3467911202,
        3396681109,
        4063920168,
        4143685023,
        4223187782,
        4286162673,
        3779000052,
        3858754371,
        3904687514,
        3967668269,
        881225847,
        809987520,
        1023691545,
        969234094,
        662832811,
        591600412,
        771767749,
        717299826,
        311336399,
        374308984,
        453813921,
        533576470,
        25881363,
        88864420,
        134795389,
        214552010,
        2023205639,
        2086057648,
        1897238633,
        1976864222,
        1804852699,
        1867694188,
        1645340341,
        1724971778,
        1587496639,
        1516133128,
        1461550545,
        1406951526,
        1302016099,
        1230646740,
        1142491917,
        1087903418,
        2896545431,
        2825181984,
        2770861561,
        2716262478,
        3215044683,
        3143675388,
        3055782693,
        3001194130,
        2326604591,
        2389456536,
        2200899649,
        2280525302,
        2578013683,
        2640855108,
        2418763421,
        2498394922,
        3769900519,
        3832873040,
        3912640137,
        3992402750,
        4088425275,
        4151408268,
        4197601365,
        4277358050,
        3334271071,
        3263032808,
        3476998961,
        3422541446,
        3585640067,
        3514407732,
        3694837229,
        3640369242,
        1762451694,
        1842216281,
        1619975040,
        1682949687,
        2047383090,
        2127137669,
        1938468188,
        2001449195,
        1325665622,
        1271206113,
        1183200824,
        1111960463,
        1543535498,
        1489069629,
        1434599652,
        1363369299,
        622672798,
        568075817,
        748617968,
        677256519,
        907627842,
        853037301,
        1067152940,
        995781531,
        51762726,
        131386257,
        177728840,
        240578815,
        269590778,
        349224269,
        429104020,
        491947555,
        4046411278,
        4126034873,
        4172115296,
        4234965207,
        3794477266,
        3874110821,
        3953728444,
        4016571915,
        3609705398,
        3555108353,
        3735388376,
        3664026991,
        3290680682,
        3236090077,
        3449943556,
        3378572211,
        3174993278,
        3120533705,
        3032266256,
        2961025959,
        2923101090,
        2868635157,
        2813903052,
        2742672763,
        2604032198,
        2683796849,
        2461293480,
        2524268063,
        2284983834,
        2364738477,
        2175806836,
        2238787779,
        1569362073,
        1498123566,
        1409854455,
        1355396672,
        1317987909,
        1246755826,
        1192025387,
        1137557660,
        2072149281,
        2135122070,
        1912620623,
        1992383480,
        1753615357,
        1816598090,
        1627664531,
        1707420964,
        295390185,
        358241886,
        404320391,
        483945776,
        43990325,
        106832002,
        186451547,
        266083308,
        932423249,
        861060070,
        1041341759,
        986742920,
        613929101,
        542559546,
        756411363,
        701822548,
        3316196985,
        3244833742,
        3425377559,
        3370778784,
        3601682597,
        3530312978,
        3744426955,
        3689838204,
        3819031489,
        3881883254,
        3928223919,
        4007849240,
        4037393693,
        4100235434,
        4180117107,
        4259748804,
        2310601993,
        2373574846,
        2151335527,
        2231098320,
        2596047829,
        2659030626,
        2470359227,
        2550115596,
        2947551409,
        2876312838,
        2788305887,
        2733848168,
        3165939309,
        3094707162,
        3040238851,
        2985771188
      ]);
      var CRC32 = function() {
        var crc = 4294967295;
        this.getCRC = function() {
          return ~crc >>> 0;
        };
        this.updateCRC = function(value) {
          crc = crc << 8 ^ crc32Lookup[(crc >>> 24 ^ value) & 255];
        };
        this.updateCRCRun = function(value, count) {
          while (count-- > 0) {
            crc = crc << 8 ^ crc32Lookup[(crc >>> 24 ^ value) & 255];
          }
        };
      };
      return CRC32;
    }();
  }
});

// node_modules/seek-bzip/package.json
var require_package = __commonJS({
  "node_modules/seek-bzip/package.json"(exports2, module2) {
    module2.exports = {
      name: "seek-bzip",
      version: "1.0.6",
      contributors: [
        "C. Scott Ananian (http://cscott.net)",
        "Eli Skeggs",
        "Kevin Kwok",
        "Rob Landley (http://landley.net)"
      ],
      description: "a pure-JavaScript Node.JS module for random-access decoding bzip2 data",
      main: "./lib/index.js",
      repository: {
        type: "git",
        url: "https://github.com/cscott/seek-bzip.git"
      },
      license: "MIT",
      bin: {
        "seek-bunzip": "./bin/seek-bunzip",
        "seek-table": "./bin/seek-bzip-table"
      },
      directories: {
        test: "test"
      },
      dependencies: {
        commander: "^2.8.1"
      },
      devDependencies: {
        fibers: "~1.0.6",
        mocha: "~2.2.5"
      },
      scripts: {
        test: "mocha"
      }
    };
  }
});

// node_modules/seek-bzip/lib/index.js
var require_lib = __commonJS({
  "node_modules/seek-bzip/lib/index.js"(exports2, module2) {
    var BitReader = require_bitreader();
    var Stream = require_stream();
    var CRC32 = require_crc32();
    var pjson = require_package();
    var MAX_HUFCODE_BITS = 20;
    var MAX_SYMBOLS = 258;
    var SYMBOL_RUNA = 0;
    var SYMBOL_RUNB = 1;
    var MIN_GROUPS = 2;
    var MAX_GROUPS = 6;
    var GROUP_SIZE = 50;
    var WHOLEPI = "314159265359";
    var SQRTPI = "177245385090";
    var mtf = function(array, index) {
      var src = array[index], i;
      for (i = index; i > 0; i--) {
        array[i] = array[i - 1];
      }
      array[0] = src;
      return src;
    };
    var Err = {
      OK: 0,
      LAST_BLOCK: -1,
      NOT_BZIP_DATA: -2,
      UNEXPECTED_INPUT_EOF: -3,
      UNEXPECTED_OUTPUT_EOF: -4,
      DATA_ERROR: -5,
      OUT_OF_MEMORY: -6,
      OBSOLETE_INPUT: -7,
      END_OF_BLOCK: -8
    };
    var ErrorMessages = {};
    ErrorMessages[Err.LAST_BLOCK] = "Bad file checksum";
    ErrorMessages[Err.NOT_BZIP_DATA] = "Not bzip data";
    ErrorMessages[Err.UNEXPECTED_INPUT_EOF] = "Unexpected input EOF";
    ErrorMessages[Err.UNEXPECTED_OUTPUT_EOF] = "Unexpected output EOF";
    ErrorMessages[Err.DATA_ERROR] = "Data error";
    ErrorMessages[Err.OUT_OF_MEMORY] = "Out of memory";
    ErrorMessages[Err.OBSOLETE_INPUT] = "Obsolete (pre 0.9.5) bzip format not supported.";
    var _throw = function(status, optDetail) {
      var msg = ErrorMessages[status] || "unknown error";
      if (optDetail) {
        msg += ": " + optDetail;
      }
      var e = new TypeError(msg);
      e.errorCode = status;
      throw e;
    };
    var Bunzip = function(inputStream, outputStream) {
      this.writePos = this.writeCurrent = this.writeCount = 0;
      this._start_bunzip(inputStream, outputStream);
    };
    Bunzip.prototype._init_block = function() {
      var moreBlocks = this._get_next_block();
      if (!moreBlocks) {
        this.writeCount = -1;
        return false;
      }
      this.blockCRC = new CRC32();
      return true;
    };
    Bunzip.prototype._start_bunzip = function(inputStream, outputStream) {
      var buf = new Buffer(4);
      if (inputStream.read(buf, 0, 4) !== 4 || String.fromCharCode(buf[0], buf[1], buf[2]) !== "BZh")
        _throw(Err.NOT_BZIP_DATA, "bad magic");
      var level = buf[3] - 48;
      if (level < 1 || level > 9)
        _throw(Err.NOT_BZIP_DATA, "level out of range");
      this.reader = new BitReader(inputStream);
      this.dbufSize = 1e5 * level;
      this.nextoutput = 0;
      this.outputStream = outputStream;
      this.streamCRC = 0;
    };
    Bunzip.prototype._get_next_block = function() {
      var i, j, k;
      var reader = this.reader;
      var h = reader.pi();
      if (h === SQRTPI) {
        return false;
      }
      if (h !== WHOLEPI)
        _throw(Err.NOT_BZIP_DATA);
      this.targetBlockCRC = reader.read(32) >>> 0;
      this.streamCRC = (this.targetBlockCRC ^ (this.streamCRC << 1 | this.streamCRC >>> 31)) >>> 0;
      if (reader.read(1))
        _throw(Err.OBSOLETE_INPUT);
      var origPointer = reader.read(24);
      if (origPointer > this.dbufSize)
        _throw(Err.DATA_ERROR, "initial position out of bounds");
      var t2 = reader.read(16);
      var symToByte = new Buffer(256), symTotal = 0;
      for (i = 0; i < 16; i++) {
        if (t2 & 1 << 15 - i) {
          var o = i * 16;
          k = reader.read(16);
          for (j = 0; j < 16; j++)
            if (k & 1 << 15 - j)
              symToByte[symTotal++] = o + j;
        }
      }
      var groupCount = reader.read(3);
      if (groupCount < MIN_GROUPS || groupCount > MAX_GROUPS)
        _throw(Err.DATA_ERROR);
      var nSelectors = reader.read(15);
      if (nSelectors === 0)
        _throw(Err.DATA_ERROR);
      var mtfSymbol = new Buffer(256);
      for (i = 0; i < groupCount; i++)
        mtfSymbol[i] = i;
      var selectors = new Buffer(nSelectors);
      for (i = 0; i < nSelectors; i++) {
        for (j = 0; reader.read(1); j++)
          if (j >= groupCount)
            _throw(Err.DATA_ERROR);
        selectors[i] = mtf(mtfSymbol, j);
      }
      var symCount = symTotal + 2;
      var groups = [], hufGroup;
      for (j = 0; j < groupCount; j++) {
        var length = new Buffer(symCount), temp = new Uint16Array(MAX_HUFCODE_BITS + 1);
        t2 = reader.read(5);
        for (i = 0; i < symCount; i++) {
          for (; ; ) {
            if (t2 < 1 || t2 > MAX_HUFCODE_BITS)
              _throw(Err.DATA_ERROR);
            if (!reader.read(1))
              break;
            if (!reader.read(1))
              t2++;
            else
              t2--;
          }
          length[i] = t2;
        }
        var minLen, maxLen;
        minLen = maxLen = length[0];
        for (i = 1; i < symCount; i++) {
          if (length[i] > maxLen)
            maxLen = length[i];
          else if (length[i] < minLen)
            minLen = length[i];
        }
        hufGroup = {};
        groups.push(hufGroup);
        hufGroup.permute = new Uint16Array(MAX_SYMBOLS);
        hufGroup.limit = new Uint32Array(MAX_HUFCODE_BITS + 2);
        hufGroup.base = new Uint32Array(MAX_HUFCODE_BITS + 1);
        hufGroup.minLen = minLen;
        hufGroup.maxLen = maxLen;
        var pp = 0;
        for (i = minLen; i <= maxLen; i++) {
          temp[i] = hufGroup.limit[i] = 0;
          for (t2 = 0; t2 < symCount; t2++)
            if (length[t2] === i)
              hufGroup.permute[pp++] = t2;
        }
        for (i = 0; i < symCount; i++)
          temp[length[i]]++;
        pp = t2 = 0;
        for (i = minLen; i < maxLen; i++) {
          pp += temp[i];
          hufGroup.limit[i] = pp - 1;
          pp <<= 1;
          t2 += temp[i];
          hufGroup.base[i + 1] = pp - t2;
        }
        hufGroup.limit[maxLen + 1] = Number.MAX_VALUE;
        hufGroup.limit[maxLen] = pp + temp[maxLen] - 1;
        hufGroup.base[minLen] = 0;
      }
      var byteCount = new Uint32Array(256);
      for (i = 0; i < 256; i++)
        mtfSymbol[i] = i;
      var runPos = 0, dbufCount = 0, selector = 0, uc;
      var dbuf = this.dbuf = new Uint32Array(this.dbufSize);
      symCount = 0;
      for (; ; ) {
        if (!symCount--) {
          symCount = GROUP_SIZE - 1;
          if (selector >= nSelectors) {
            _throw(Err.DATA_ERROR);
          }
          hufGroup = groups[selectors[selector++]];
        }
        i = hufGroup.minLen;
        j = reader.read(i);
        for (; ; i++) {
          if (i > hufGroup.maxLen) {
            _throw(Err.DATA_ERROR);
          }
          if (j <= hufGroup.limit[i])
            break;
          j = j << 1 | reader.read(1);
        }
        j -= hufGroup.base[i];
        if (j < 0 || j >= MAX_SYMBOLS) {
          _throw(Err.DATA_ERROR);
        }
        var nextSym = hufGroup.permute[j];
        if (nextSym === SYMBOL_RUNA || nextSym === SYMBOL_RUNB) {
          if (!runPos) {
            runPos = 1;
            t2 = 0;
          }
          if (nextSym === SYMBOL_RUNA)
            t2 += runPos;
          else
            t2 += 2 * runPos;
          runPos <<= 1;
          continue;
        }
        if (runPos) {
          runPos = 0;
          if (dbufCount + t2 > this.dbufSize) {
            _throw(Err.DATA_ERROR);
          }
          uc = symToByte[mtfSymbol[0]];
          byteCount[uc] += t2;
          while (t2--)
            dbuf[dbufCount++] = uc;
        }
        if (nextSym > symTotal)
          break;
        if (dbufCount >= this.dbufSize) {
          _throw(Err.DATA_ERROR);
        }
        i = nextSym - 1;
        uc = mtf(mtfSymbol, i);
        uc = symToByte[uc];
        byteCount[uc]++;
        dbuf[dbufCount++] = uc;
      }
      if (origPointer < 0 || origPointer >= dbufCount) {
        _throw(Err.DATA_ERROR);
      }
      j = 0;
      for (i = 0; i < 256; i++) {
        k = j + byteCount[i];
        byteCount[i] = j;
        j = k;
      }
      for (i = 0; i < dbufCount; i++) {
        uc = dbuf[i] & 255;
        dbuf[byteCount[uc]] |= i << 8;
        byteCount[uc]++;
      }
      var pos = 0, current = 0, run = 0;
      if (dbufCount) {
        pos = dbuf[origPointer];
        current = pos & 255;
        pos >>= 8;
        run = -1;
      }
      this.writePos = pos;
      this.writeCurrent = current;
      this.writeCount = dbufCount;
      this.writeRun = run;
      return true;
    };
    Bunzip.prototype._read_bunzip = function(outputBuffer, len) {
      var copies, previous, outbyte;
      if (this.writeCount < 0) {
        return 0;
      }
      var gotcount = 0;
      var dbuf = this.dbuf, pos = this.writePos, current = this.writeCurrent;
      var dbufCount = this.writeCount, outputsize = this.outputsize;
      var run = this.writeRun;
      while (dbufCount) {
        dbufCount--;
        previous = current;
        pos = dbuf[pos];
        current = pos & 255;
        pos >>= 8;
        if (run++ === 3) {
          copies = current;
          outbyte = previous;
          current = -1;
        } else {
          copies = 1;
          outbyte = current;
        }
        this.blockCRC.updateCRCRun(outbyte, copies);
        while (copies--) {
          this.outputStream.writeByte(outbyte);
          this.nextoutput++;
        }
        if (current != previous)
          run = 0;
      }
      this.writeCount = dbufCount;
      if (this.blockCRC.getCRC() !== this.targetBlockCRC) {
        _throw(Err.DATA_ERROR, "Bad block CRC (got " + this.blockCRC.getCRC().toString(16) + " expected " + this.targetBlockCRC.toString(16) + ")");
      }
      return this.nextoutput;
    };
    var coerceInputStream = function(input) {
      if ("readByte" in input) {
        return input;
      }
      var inputStream = new Stream();
      inputStream.pos = 0;
      inputStream.readByte = function() {
        return input[this.pos++];
      };
      inputStream.seek = function(pos) {
        this.pos = pos;
      };
      inputStream.eof = function() {
        return this.pos >= input.length;
      };
      return inputStream;
    };
    var coerceOutputStream = function(output) {
      var outputStream = new Stream();
      var resizeOk = true;
      if (output) {
        if (typeof output === "number") {
          outputStream.buffer = new Buffer(output);
          resizeOk = false;
        } else if ("writeByte" in output) {
          return output;
        } else {
          outputStream.buffer = output;
          resizeOk = false;
        }
      } else {
        outputStream.buffer = new Buffer(16384);
      }
      outputStream.pos = 0;
      outputStream.writeByte = function(_byte) {
        if (resizeOk && this.pos >= this.buffer.length) {
          var newBuffer = new Buffer(this.buffer.length * 2);
          this.buffer.copy(newBuffer);
          this.buffer = newBuffer;
        }
        this.buffer[this.pos++] = _byte;
      };
      outputStream.getBuffer = function() {
        if (this.pos !== this.buffer.length) {
          if (!resizeOk)
            throw new TypeError("outputsize does not match decoded input");
          var newBuffer = new Buffer(this.pos);
          this.buffer.copy(newBuffer, 0, 0, this.pos);
          this.buffer = newBuffer;
        }
        return this.buffer;
      };
      outputStream._coerced = true;
      return outputStream;
    };
    Bunzip.Err = Err;
    Bunzip.decode = function(input, output, multistream) {
      var inputStream = coerceInputStream(input);
      var outputStream = coerceOutputStream(output);
      var bz = new Bunzip(inputStream, outputStream);
      while (true) {
        if ("eof" in inputStream && inputStream.eof())
          break;
        if (bz._init_block()) {
          bz._read_bunzip();
        } else {
          var targetStreamCRC = bz.reader.read(32) >>> 0;
          if (targetStreamCRC !== bz.streamCRC) {
            _throw(Err.DATA_ERROR, "Bad stream CRC (got " + bz.streamCRC.toString(16) + " expected " + targetStreamCRC.toString(16) + ")");
          }
          if (multistream && "eof" in inputStream && !inputStream.eof()) {
            bz._start_bunzip(inputStream, outputStream);
          } else
            break;
        }
      }
      if ("getBuffer" in outputStream)
        return outputStream.getBuffer();
    };
    Bunzip.decodeBlock = function(input, pos, output) {
      var inputStream = coerceInputStream(input);
      var outputStream = coerceOutputStream(output);
      var bz = new Bunzip(inputStream, outputStream);
      bz.reader.seek(pos);
      var moreBlocks = bz._get_next_block();
      if (moreBlocks) {
        bz.blockCRC = new CRC32();
        bz.writeCopies = 0;
        bz._read_bunzip();
      }
      if ("getBuffer" in outputStream)
        return outputStream.getBuffer();
    };
    Bunzip.table = function(input, callback, multistream) {
      var inputStream = new Stream();
      inputStream.delegate = coerceInputStream(input);
      inputStream.pos = 0;
      inputStream.readByte = function() {
        this.pos++;
        return this.delegate.readByte();
      };
      if (inputStream.delegate.eof) {
        inputStream.eof = inputStream.delegate.eof.bind(inputStream.delegate);
      }
      var outputStream = new Stream();
      outputStream.pos = 0;
      outputStream.writeByte = function() {
        this.pos++;
      };
      var bz = new Bunzip(inputStream, outputStream);
      var blockSize = bz.dbufSize;
      while (true) {
        if ("eof" in inputStream && inputStream.eof())
          break;
        var position = inputStream.pos * 8 + bz.reader.bitOffset;
        if (bz.reader.hasByte) {
          position -= 8;
        }
        if (bz._init_block()) {
          var start = outputStream.pos;
          bz._read_bunzip();
          callback(position, outputStream.pos - start);
        } else {
          var crc = bz.reader.read(32);
          if (multistream && "eof" in inputStream && !inputStream.eof()) {
            bz._start_bunzip(inputStream, outputStream);
            console.assert(bz.dbufSize === blockSize, "shouldn't change block size within multistream file");
          } else
            break;
        }
      }
    };
    Bunzip.Stream = Stream;
    Bunzip.version = pjson.version;
    Bunzip.license = pjson.license;
    module2.exports = Bunzip;
  }
});

// node_modules/through/index.js
var require_through = __commonJS({
  "node_modules/through/index.js"(exports2, module2) {
    var Stream = require("stream");
    exports2 = module2.exports = through;
    through.through = through;
    function through(write, end, opts) {
      write = write || function(data) {
        this.queue(data);
      };
      end = end || function() {
        this.queue(null);
      };
      var ended = false, destroyed = false, buffer = [], _ended = false;
      var stream2 = new Stream();
      stream2.readable = stream2.writable = true;
      stream2.paused = false;
      stream2.autoDestroy = !(opts && opts.autoDestroy === false);
      stream2.write = function(data) {
        write.call(this, data);
        return !stream2.paused;
      };
      function drain() {
        while (buffer.length && !stream2.paused) {
          var data = buffer.shift();
          if (data === null)
            return stream2.emit("end");
          else
            stream2.emit("data", data);
        }
      }
      stream2.queue = stream2.push = function(data) {
        if (_ended)
          return stream2;
        if (data === null)
          _ended = true;
        buffer.push(data);
        drain();
        return stream2;
      };
      stream2.on("end", function() {
        stream2.readable = false;
        if (!stream2.writable && stream2.autoDestroy)
          process.nextTick(function() {
            stream2.destroy();
          });
      });
      function _end() {
        stream2.writable = false;
        end.call(stream2);
        if (!stream2.readable && stream2.autoDestroy)
          stream2.destroy();
      }
      stream2.end = function(data) {
        if (ended)
          return;
        ended = true;
        if (arguments.length)
          stream2.write(data);
        _end();
        return stream2;
      };
      stream2.destroy = function() {
        if (destroyed)
          return;
        destroyed = true;
        ended = true;
        buffer.length = 0;
        stream2.writable = stream2.readable = false;
        stream2.emit("close");
        return stream2;
      };
      stream2.pause = function() {
        if (stream2.paused)
          return;
        stream2.paused = true;
        return stream2;
      };
      stream2.resume = function() {
        if (stream2.paused) {
          stream2.paused = false;
          stream2.emit("resume");
        }
        drain();
        if (!stream2.paused)
          stream2.emit("drain");
        return stream2;
      };
      return stream2;
    }
  }
});

// node_modules/unbzip2-stream/lib/bzip2.js
var require_bzip2 = __commonJS({
  "node_modules/unbzip2-stream/lib/bzip2.js"(exports2, module2) {
    function Bzip2Error(message2) {
      this.name = "Bzip2Error";
      this.message = message2;
      this.stack = new Error().stack;
    }
    Bzip2Error.prototype = new Error();
    var message = {
      Error: function(message2) {
        throw new Bzip2Error(message2);
      }
    };
    var bzip2 = {};
    bzip2.Bzip2Error = Bzip2Error;
    bzip2.crcTable = [
      0,
      79764919,
      159529838,
      222504665,
      319059676,
      398814059,
      445009330,
      507990021,
      638119352,
      583659535,
      797628118,
      726387553,
      890018660,
      835552979,
      1015980042,
      944750013,
      1276238704,
      1221641927,
      1167319070,
      1095957929,
      1595256236,
      1540665371,
      1452775106,
      1381403509,
      1780037320,
      1859660671,
      1671105958,
      1733955601,
      2031960084,
      2111593891,
      1889500026,
      1952343757,
      2552477408,
      2632100695,
      2443283854,
      2506133561,
      2334638140,
      2414271883,
      2191915858,
      2254759653,
      3190512472,
      3135915759,
      3081330742,
      3009969537,
      2905550212,
      2850959411,
      2762807018,
      2691435357,
      3560074640,
      3505614887,
      3719321342,
      3648080713,
      3342211916,
      3287746299,
      3467911202,
      3396681109,
      4063920168,
      4143685023,
      4223187782,
      4286162673,
      3779000052,
      3858754371,
      3904687514,
      3967668269,
      881225847,
      809987520,
      1023691545,
      969234094,
      662832811,
      591600412,
      771767749,
      717299826,
      311336399,
      374308984,
      453813921,
      533576470,
      25881363,
      88864420,
      134795389,
      214552010,
      2023205639,
      2086057648,
      1897238633,
      1976864222,
      1804852699,
      1867694188,
      1645340341,
      1724971778,
      1587496639,
      1516133128,
      1461550545,
      1406951526,
      1302016099,
      1230646740,
      1142491917,
      1087903418,
      2896545431,
      2825181984,
      2770861561,
      2716262478,
      3215044683,
      3143675388,
      3055782693,
      3001194130,
      2326604591,
      2389456536,
      2200899649,
      2280525302,
      2578013683,
      2640855108,
      2418763421,
      2498394922,
      3769900519,
      3832873040,
      3912640137,
      3992402750,
      4088425275,
      4151408268,
      4197601365,
      4277358050,
      3334271071,
      3263032808,
      3476998961,
      3422541446,
      3585640067,
      3514407732,
      3694837229,
      3640369242,
      1762451694,
      1842216281,
      1619975040,
      1682949687,
      2047383090,
      2127137669,
      1938468188,
      2001449195,
      1325665622,
      1271206113,
      1183200824,
      1111960463,
      1543535498,
      1489069629,
      1434599652,
      1363369299,
      622672798,
      568075817,
      748617968,
      677256519,
      907627842,
      853037301,
      1067152940,
      995781531,
      51762726,
      131386257,
      177728840,
      240578815,
      269590778,
      349224269,
      429104020,
      491947555,
      4046411278,
      4126034873,
      4172115296,
      4234965207,
      3794477266,
      3874110821,
      3953728444,
      4016571915,
      3609705398,
      3555108353,
      3735388376,
      3664026991,
      3290680682,
      3236090077,
      3449943556,
      3378572211,
      3174993278,
      3120533705,
      3032266256,
      2961025959,
      2923101090,
      2868635157,
      2813903052,
      2742672763,
      2604032198,
      2683796849,
      2461293480,
      2524268063,
      2284983834,
      2364738477,
      2175806836,
      2238787779,
      1569362073,
      1498123566,
      1409854455,
      1355396672,
      1317987909,
      1246755826,
      1192025387,
      1137557660,
      2072149281,
      2135122070,
      1912620623,
      1992383480,
      1753615357,
      1816598090,
      1627664531,
      1707420964,
      295390185,
      358241886,
      404320391,
      483945776,
      43990325,
      106832002,
      186451547,
      266083308,
      932423249,
      861060070,
      1041341759,
      986742920,
      613929101,
      542559546,
      756411363,
      701822548,
      3316196985,
      3244833742,
      3425377559,
      3370778784,
      3601682597,
      3530312978,
      3744426955,
      3689838204,
      3819031489,
      3881883254,
      3928223919,
      4007849240,
      4037393693,
      4100235434,
      4180117107,
      4259748804,
      2310601993,
      2373574846,
      2151335527,
      2231098320,
      2596047829,
      2659030626,
      2470359227,
      2550115596,
      2947551409,
      2876312838,
      2788305887,
      2733848168,
      3165939309,
      3094707162,
      3040238851,
      2985771188
    ];
    bzip2.array = function(bytes) {
      var bit = 0, byte = 0;
      var BITMASK = [0, 1, 3, 7, 15, 31, 63, 127, 255];
      return function(n) {
        var result = 0;
        while (n > 0) {
          var left = 8 - bit;
          if (n >= left) {
            result <<= left;
            result |= BITMASK[left] & bytes[byte++];
            bit = 0;
            n -= left;
          } else {
            result <<= n;
            result |= (bytes[byte] & BITMASK[n] << 8 - n - bit) >> 8 - n - bit;
            bit += n;
            n = 0;
          }
        }
        return result;
      };
    };
    bzip2.simple = function(srcbuffer, stream2) {
      var bits = bzip2.array(srcbuffer);
      var size = bzip2.header(bits);
      var ret = false;
      var bufsize = 1e5 * size;
      var buf = new Int32Array(bufsize);
      do {
        ret = bzip2.decompress(bits, stream2, buf, bufsize);
      } while (!ret);
    };
    bzip2.header = function(bits) {
      this.byteCount = new Int32Array(256);
      this.symToByte = new Uint8Array(256);
      this.mtfSymbol = new Int32Array(256);
      this.selectors = new Uint8Array(32768);
      if (bits(8 * 3) != 4348520)
        message.Error("No magic number found");
      var i = bits(8) - 48;
      if (i < 1 || i > 9)
        message.Error("Not a BZIP archive");
      return i;
    };
    bzip2.decompress = function(bits, stream2, buf, bufsize, streamCRC) {
      var MAX_HUFCODE_BITS = 20;
      var MAX_SYMBOLS = 258;
      var SYMBOL_RUNA = 0;
      var SYMBOL_RUNB = 1;
      var GROUP_SIZE = 50;
      var crc = 0 ^ -1;
      for (var h = "", i = 0; i < 6; i++)
        h += bits(8).toString(16);
      if (h == "177245385090") {
        var finalCRC = bits(32) | 0;
        if (finalCRC !== streamCRC)
          message.Error("Error in bzip2: crc32 do not match");
        bits(null);
        return null;
      }
      if (h != "314159265359")
        message.Error("eek not valid bzip data");
      var crcblock = bits(32) | 0;
      if (bits(1))
        message.Error("unsupported obsolete version");
      var origPtr = bits(24);
      if (origPtr > bufsize)
        message.Error("Initial position larger than buffer size");
      var t2 = bits(16);
      var symTotal = 0;
      for (i = 0; i < 16; i++) {
        if (t2 & 1 << 15 - i) {
          var k = bits(16);
          for (j = 0; j < 16; j++) {
            if (k & 1 << 15 - j) {
              this.symToByte[symTotal++] = 16 * i + j;
            }
          }
        }
      }
      var groupCount = bits(3);
      if (groupCount < 2 || groupCount > 6)
        message.Error("another error");
      var nSelectors = bits(15);
      if (nSelectors == 0)
        message.Error("meh");
      for (var i = 0; i < groupCount; i++)
        this.mtfSymbol[i] = i;
      for (var i = 0; i < nSelectors; i++) {
        for (var j = 0; bits(1); j++)
          if (j >= groupCount)
            message.Error("whoops another error");
        var uc = this.mtfSymbol[j];
        for (var k = j - 1; k >= 0; k--) {
          this.mtfSymbol[k + 1] = this.mtfSymbol[k];
        }
        this.mtfSymbol[0] = uc;
        this.selectors[i] = uc;
      }
      var symCount = symTotal + 2;
      var groups = [];
      var length = new Uint8Array(MAX_SYMBOLS), temp = new Uint16Array(MAX_HUFCODE_BITS + 1);
      var hufGroup;
      for (var j = 0; j < groupCount; j++) {
        t2 = bits(5);
        for (var i = 0; i < symCount; i++) {
          while (true) {
            if (t2 < 1 || t2 > MAX_HUFCODE_BITS)
              message.Error("I gave up a while ago on writing error messages");
            if (!bits(1))
              break;
            if (!bits(1))
              t2++;
            else
              t2--;
          }
          length[i] = t2;
        }
        var minLen, maxLen;
        minLen = maxLen = length[0];
        for (var i = 1; i < symCount; i++) {
          if (length[i] > maxLen)
            maxLen = length[i];
          else if (length[i] < minLen)
            minLen = length[i];
        }
        hufGroup = groups[j] = {};
        hufGroup.permute = new Int32Array(MAX_SYMBOLS);
        hufGroup.limit = new Int32Array(MAX_HUFCODE_BITS + 1);
        hufGroup.base = new Int32Array(MAX_HUFCODE_BITS + 1);
        hufGroup.minLen = minLen;
        hufGroup.maxLen = maxLen;
        var base = hufGroup.base;
        var limit = hufGroup.limit;
        var pp = 0;
        for (var i = minLen; i <= maxLen; i++)
          for (var t2 = 0; t2 < symCount; t2++)
            if (length[t2] == i)
              hufGroup.permute[pp++] = t2;
        for (i = minLen; i <= maxLen; i++)
          temp[i] = limit[i] = 0;
        for (i = 0; i < symCount; i++)
          temp[length[i]]++;
        pp = t2 = 0;
        for (i = minLen; i < maxLen; i++) {
          pp += temp[i];
          limit[i] = pp - 1;
          pp <<= 1;
          base[i + 1] = pp - (t2 += temp[i]);
        }
        limit[maxLen] = pp + temp[maxLen] - 1;
        base[minLen] = 0;
      }
      for (var i = 0; i < 256; i++) {
        this.mtfSymbol[i] = i;
        this.byteCount[i] = 0;
      }
      var runPos, count, symCount, selector;
      runPos = count = symCount = selector = 0;
      while (true) {
        if (!symCount--) {
          symCount = GROUP_SIZE - 1;
          if (selector >= nSelectors)
            message.Error("meow i'm a kitty, that's an error");
          hufGroup = groups[this.selectors[selector++]];
          base = hufGroup.base;
          limit = hufGroup.limit;
        }
        i = hufGroup.minLen;
        j = bits(i);
        while (true) {
          if (i > hufGroup.maxLen)
            message.Error("rawr i'm a dinosaur");
          if (j <= limit[i])
            break;
          i++;
          j = j << 1 | bits(1);
        }
        j -= base[i];
        if (j < 0 || j >= MAX_SYMBOLS)
          message.Error("moo i'm a cow");
        var nextSym = hufGroup.permute[j];
        if (nextSym == SYMBOL_RUNA || nextSym == SYMBOL_RUNB) {
          if (!runPos) {
            runPos = 1;
            t2 = 0;
          }
          if (nextSym == SYMBOL_RUNA)
            t2 += runPos;
          else
            t2 += 2 * runPos;
          runPos <<= 1;
          continue;
        }
        if (runPos) {
          runPos = 0;
          if (count + t2 > bufsize)
            message.Error("Boom.");
          uc = this.symToByte[this.mtfSymbol[0]];
          this.byteCount[uc] += t2;
          while (t2--)
            buf[count++] = uc;
        }
        if (nextSym > symTotal)
          break;
        if (count >= bufsize)
          message.Error("I can't think of anything. Error");
        i = nextSym - 1;
        uc = this.mtfSymbol[i];
        for (var k = i - 1; k >= 0; k--) {
          this.mtfSymbol[k + 1] = this.mtfSymbol[k];
        }
        this.mtfSymbol[0] = uc;
        uc = this.symToByte[uc];
        this.byteCount[uc]++;
        buf[count++] = uc;
      }
      if (origPtr < 0 || origPtr >= count)
        message.Error("I'm a monkey and I'm throwing something at someone, namely you");
      var j = 0;
      for (var i = 0; i < 256; i++) {
        k = j + this.byteCount[i];
        this.byteCount[i] = j;
        j = k;
      }
      for (var i = 0; i < count; i++) {
        uc = buf[i] & 255;
        buf[this.byteCount[uc]] |= i << 8;
        this.byteCount[uc]++;
      }
      var pos = 0, current = 0, run = 0;
      if (count) {
        pos = buf[origPtr];
        current = pos & 255;
        pos >>= 8;
        run = -1;
      }
      count = count;
      var copies, previous, outbyte;
      while (count) {
        count--;
        previous = current;
        pos = buf[pos];
        current = pos & 255;
        pos >>= 8;
        if (run++ == 3) {
          copies = current;
          outbyte = previous;
          current = -1;
        } else {
          copies = 1;
          outbyte = current;
        }
        while (copies--) {
          crc = (crc << 8 ^ this.crcTable[(crc >> 24 ^ outbyte) & 255]) & 4294967295;
          stream2(outbyte);
        }
        if (current != previous)
          run = 0;
      }
      crc = (crc ^ -1) >>> 0;
      if ((crc | 0) != (crcblock | 0))
        message.Error("Error in bzip2: crc32 do not match");
      streamCRC = (crc ^ (streamCRC << 1 | streamCRC >>> 31)) & 4294967295;
      return streamCRC;
    };
    module2.exports = bzip2;
  }
});

// node_modules/unbzip2-stream/lib/bit_iterator.js
var require_bit_iterator = __commonJS({
  "node_modules/unbzip2-stream/lib/bit_iterator.js"(exports2, module2) {
    var BITMASK = [0, 1, 3, 7, 15, 31, 63, 127, 255];
    module2.exports = function bitIterator(nextBuffer) {
      var bit = 0, byte = 0;
      var bytes = nextBuffer();
      var f = function(n) {
        if (n === null && bit != 0) {
          bit = 0;
          byte++;
          return;
        }
        var result = 0;
        while (n > 0) {
          if (byte >= bytes.length) {
            byte = 0;
            bytes = nextBuffer();
          }
          var left = 8 - bit;
          if (bit === 0 && n > 0)
            f.bytesRead++;
          if (n >= left) {
            result <<= left;
            result |= BITMASK[left] & bytes[byte++];
            bit = 0;
            n -= left;
          } else {
            result <<= n;
            result |= (bytes[byte] & BITMASK[n] << 8 - n - bit) >> 8 - n - bit;
            bit += n;
            n = 0;
          }
        }
        return result;
      };
      f.bytesRead = 0;
      return f;
    };
  }
});

// node_modules/unbzip2-stream/index.js
var require_unbzip2_stream = __commonJS({
  "node_modules/unbzip2-stream/index.js"(exports2, module2) {
    var through = require_through();
    var bz2 = require_bzip2();
    var bitIterator = require_bit_iterator();
    module2.exports = unbzip2Stream;
    function unbzip2Stream() {
      var bufferQueue = [];
      var hasBytes = 0;
      var blockSize = 0;
      var broken = false;
      var done = false;
      var bitReader = null;
      var streamCRC = null;
      function decompressBlock(push) {
        if (!blockSize) {
          blockSize = bz2.header(bitReader);
          streamCRC = 0;
          return true;
        } else {
          var bufsize = 1e5 * blockSize;
          var buf = new Int32Array(bufsize);
          var chunk = [];
          var f = function(b) {
            chunk.push(b);
          };
          streamCRC = bz2.decompress(bitReader, f, buf, bufsize, streamCRC);
          if (streamCRC === null) {
            blockSize = 0;
            return false;
          } else {
            push(Buffer.from(chunk));
            return true;
          }
        }
      }
      var outlength = 0;
      function decompressAndQueue(stream2) {
        if (broken)
          return;
        try {
          return decompressBlock(function(d) {
            stream2.queue(d);
            if (d !== null) {
              outlength += d.length;
            } else {
            }
          });
        } catch (e) {
          stream2.emit("error", e);
          broken = true;
          return false;
        }
      }
      return through(function write(data) {
        bufferQueue.push(data);
        hasBytes += data.length;
        if (bitReader === null) {
          bitReader = bitIterator(function() {
            return bufferQueue.shift();
          });
        }
        while (!broken && hasBytes - bitReader.bytesRead + 1 >= (25e3 + 1e5 * blockSize || 4)) {
          decompressAndQueue(this);
        }
      }, function end(x) {
        while (!broken && bitReader && hasBytes > bitReader.bytesRead) {
          decompressAndQueue(this);
        }
        if (!broken) {
          if (streamCRC !== null)
            this.emit("error", new Error("input stream ended prematurely"));
          this.queue(null);
        }
      });
    }
  }
});

// node_modules/decompress-tarbz2/index.js
var require_decompress_tarbz2 = __commonJS({
  "node_modules/decompress-tarbz2/index.js"(exports2, module2) {
    "use strict";
    var decompressTar = require_decompress_tar();
    var fileType2 = require_file_type3();
    var isStream = require_is_stream();
    var seekBzip = require_lib();
    var unbzip2Stream = require_unbzip2_stream();
    module2.exports = () => (input) => {
      if (!Buffer.isBuffer(input) && !isStream(input)) {
        return Promise.reject(new TypeError(`Expected a Buffer or Stream, got ${typeof input}`));
      }
      if (Buffer.isBuffer(input) && (!fileType2(input) || fileType2(input).ext !== "bz2")) {
        return Promise.resolve([]);
      }
      if (Buffer.isBuffer(input)) {
        return decompressTar()(seekBzip.decode(input));
      }
      return decompressTar()(input.pipe(unbzip2Stream()));
    };
  }
});

// node_modules/decompress-targz/node_modules/file-type/index.js
var require_file_type4 = __commonJS({
  "node_modules/decompress-targz/node_modules/file-type/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (input) => {
      const buf = new Uint8Array(input);
      if (!(buf && buf.length > 1)) {
        return null;
      }
      const check = (header, opts) => {
        opts = Object.assign({
          offset: 0
        }, opts);
        for (let i = 0; i < header.length; i++) {
          if (header[i] !== buf[i + opts.offset]) {
            return false;
          }
        }
        return true;
      };
      if (check([255, 216, 255])) {
        return {
          ext: "jpg",
          mime: "image/jpeg"
        };
      }
      if (check([137, 80, 78, 71, 13, 10, 26, 10])) {
        return {
          ext: "png",
          mime: "image/png"
        };
      }
      if (check([71, 73, 70])) {
        return {
          ext: "gif",
          mime: "image/gif"
        };
      }
      if (check([87, 69, 66, 80], { offset: 8 })) {
        return {
          ext: "webp",
          mime: "image/webp"
        };
      }
      if (check([70, 76, 73, 70])) {
        return {
          ext: "flif",
          mime: "image/flif"
        };
      }
      if ((check([73, 73, 42, 0]) || check([77, 77, 0, 42])) && check([67, 82], { offset: 8 })) {
        return {
          ext: "cr2",
          mime: "image/x-canon-cr2"
        };
      }
      if (check([73, 73, 42, 0]) || check([77, 77, 0, 42])) {
        return {
          ext: "tif",
          mime: "image/tiff"
        };
      }
      if (check([66, 77])) {
        return {
          ext: "bmp",
          mime: "image/bmp"
        };
      }
      if (check([73, 73, 188])) {
        return {
          ext: "jxr",
          mime: "image/vnd.ms-photo"
        };
      }
      if (check([56, 66, 80, 83])) {
        return {
          ext: "psd",
          mime: "image/vnd.adobe.photoshop"
        };
      }
      if (check([80, 75, 3, 4]) && check([109, 105, 109, 101, 116, 121, 112, 101, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 101, 112, 117, 98, 43, 122, 105, 112], { offset: 30 })) {
        return {
          ext: "epub",
          mime: "application/epub+zip"
        };
      }
      if (check([80, 75, 3, 4]) && check([77, 69, 84, 65, 45, 73, 78, 70, 47, 109, 111, 122, 105, 108, 108, 97, 46, 114, 115, 97], { offset: 30 })) {
        return {
          ext: "xpi",
          mime: "application/x-xpinstall"
        };
      }
      if (check([80, 75]) && (buf[2] === 3 || buf[2] === 5 || buf[2] === 7) && (buf[3] === 4 || buf[3] === 6 || buf[3] === 8)) {
        return {
          ext: "zip",
          mime: "application/zip"
        };
      }
      if (check([117, 115, 116, 97, 114], { offset: 257 })) {
        return {
          ext: "tar",
          mime: "application/x-tar"
        };
      }
      if (check([82, 97, 114, 33, 26, 7]) && (buf[6] === 0 || buf[6] === 1)) {
        return {
          ext: "rar",
          mime: "application/x-rar-compressed"
        };
      }
      if (check([31, 139, 8])) {
        return {
          ext: "gz",
          mime: "application/gzip"
        };
      }
      if (check([66, 90, 104])) {
        return {
          ext: "bz2",
          mime: "application/x-bzip2"
        };
      }
      if (check([55, 122, 188, 175, 39, 28])) {
        return {
          ext: "7z",
          mime: "application/x-7z-compressed"
        };
      }
      if (check([120, 1])) {
        return {
          ext: "dmg",
          mime: "application/x-apple-diskimage"
        };
      }
      if (check([0, 0, 0]) && (buf[3] === 24 || buf[3] === 32) && check([102, 116, 121, 112], { offset: 4 }) || check([51, 103, 112, 53]) || check([0, 0, 0, 28, 102, 116, 121, 112, 109, 112, 52, 50]) && check([109, 112, 52, 49, 109, 112, 52, 50, 105, 115, 111, 109], { offset: 16 }) || check([0, 0, 0, 28, 102, 116, 121, 112, 105, 115, 111, 109]) || check([0, 0, 0, 28, 102, 116, 121, 112, 109, 112, 52, 50, 0, 0, 0, 0])) {
        return {
          ext: "mp4",
          mime: "video/mp4"
        };
      }
      if (check([0, 0, 0, 28, 102, 116, 121, 112, 77, 52, 86])) {
        return {
          ext: "m4v",
          mime: "video/x-m4v"
        };
      }
      if (check([77, 84, 104, 100])) {
        return {
          ext: "mid",
          mime: "audio/midi"
        };
      }
      if (check([26, 69, 223, 163])) {
        const sliced = buf.subarray(4, 4 + 4096);
        const idPos = sliced.findIndex((el, i, arr) => arr[i] === 66 && arr[i + 1] === 130);
        if (idPos >= 0) {
          const docTypePos = idPos + 3;
          const findDocType = (type) => Array.from(type).every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));
          if (findDocType("matroska")) {
            return {
              ext: "mkv",
              mime: "video/x-matroska"
            };
          }
          if (findDocType("webm")) {
            return {
              ext: "webm",
              mime: "video/webm"
            };
          }
        }
      }
      if (check([0, 0, 0, 20, 102, 116, 121, 112, 113, 116, 32, 32]) || check([102, 114, 101, 101], { offset: 4 }) || check([102, 116, 121, 112, 113, 116, 32, 32], { offset: 4 }) || check([109, 100, 97, 116], { offset: 4 }) || check([119, 105, 100, 101], { offset: 4 })) {
        return {
          ext: "mov",
          mime: "video/quicktime"
        };
      }
      if (check([82, 73, 70, 70]) && check([65, 86, 73], { offset: 8 })) {
        return {
          ext: "avi",
          mime: "video/x-msvideo"
        };
      }
      if (check([48, 38, 178, 117, 142, 102, 207, 17, 166, 217])) {
        return {
          ext: "wmv",
          mime: "video/x-ms-wmv"
        };
      }
      if (check([0, 0, 1, 186])) {
        return {
          ext: "mpg",
          mime: "video/mpeg"
        };
      }
      if (check([73, 68, 51]) || check([255, 251])) {
        return {
          ext: "mp3",
          mime: "audio/mpeg"
        };
      }
      if (check([102, 116, 121, 112, 77, 52, 65], { offset: 4 }) || check([77, 52, 65, 32])) {
        return {
          ext: "m4a",
          mime: "audio/m4a"
        };
      }
      if (check([79, 112, 117, 115, 72, 101, 97, 100], { offset: 28 })) {
        return {
          ext: "opus",
          mime: "audio/opus"
        };
      }
      if (check([79, 103, 103, 83])) {
        return {
          ext: "ogg",
          mime: "audio/ogg"
        };
      }
      if (check([102, 76, 97, 67])) {
        return {
          ext: "flac",
          mime: "audio/x-flac"
        };
      }
      if (check([82, 73, 70, 70]) && check([87, 65, 86, 69], { offset: 8 })) {
        return {
          ext: "wav",
          mime: "audio/x-wav"
        };
      }
      if (check([35, 33, 65, 77, 82, 10])) {
        return {
          ext: "amr",
          mime: "audio/amr"
        };
      }
      if (check([37, 80, 68, 70])) {
        return {
          ext: "pdf",
          mime: "application/pdf"
        };
      }
      if (check([77, 90])) {
        return {
          ext: "exe",
          mime: "application/x-msdownload"
        };
      }
      if ((buf[0] === 67 || buf[0] === 70) && check([87, 83], { offset: 1 })) {
        return {
          ext: "swf",
          mime: "application/x-shockwave-flash"
        };
      }
      if (check([123, 92, 114, 116, 102])) {
        return {
          ext: "rtf",
          mime: "application/rtf"
        };
      }
      if (check([0, 97, 115, 109])) {
        return {
          ext: "wasm",
          mime: "application/wasm"
        };
      }
      if (check([119, 79, 70, 70]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff",
          mime: "font/woff"
        };
      }
      if (check([119, 79, 70, 50]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff2",
          mime: "font/woff2"
        };
      }
      if (check([76, 80], { offset: 34 }) && (check([0, 0, 1], { offset: 8 }) || check([1, 0, 2], { offset: 8 }) || check([2, 0, 2], { offset: 8 }))) {
        return {
          ext: "eot",
          mime: "application/octet-stream"
        };
      }
      if (check([0, 1, 0, 0, 0])) {
        return {
          ext: "ttf",
          mime: "font/ttf"
        };
      }
      if (check([79, 84, 84, 79, 0])) {
        return {
          ext: "otf",
          mime: "font/otf"
        };
      }
      if (check([0, 0, 1, 0])) {
        return {
          ext: "ico",
          mime: "image/x-icon"
        };
      }
      if (check([70, 76, 86, 1])) {
        return {
          ext: "flv",
          mime: "video/x-flv"
        };
      }
      if (check([37, 33])) {
        return {
          ext: "ps",
          mime: "application/postscript"
        };
      }
      if (check([253, 55, 122, 88, 90, 0])) {
        return {
          ext: "xz",
          mime: "application/x-xz"
        };
      }
      if (check([83, 81, 76, 105])) {
        return {
          ext: "sqlite",
          mime: "application/x-sqlite3"
        };
      }
      if (check([78, 69, 83, 26])) {
        return {
          ext: "nes",
          mime: "application/x-nintendo-nes-rom"
        };
      }
      if (check([67, 114, 50, 52])) {
        return {
          ext: "crx",
          mime: "application/x-google-chrome-extension"
        };
      }
      if (check([77, 83, 67, 70]) || check([73, 83, 99, 40])) {
        return {
          ext: "cab",
          mime: "application/vnd.ms-cab-compressed"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62, 10, 100, 101, 98, 105, 97, 110, 45, 98, 105, 110, 97, 114, 121])) {
        return {
          ext: "deb",
          mime: "application/x-deb"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62])) {
        return {
          ext: "ar",
          mime: "application/x-unix-archive"
        };
      }
      if (check([237, 171, 238, 219])) {
        return {
          ext: "rpm",
          mime: "application/x-rpm"
        };
      }
      if (check([31, 160]) || check([31, 157])) {
        return {
          ext: "Z",
          mime: "application/x-compress"
        };
      }
      if (check([76, 90, 73, 80])) {
        return {
          ext: "lz",
          mime: "application/x-lzip"
        };
      }
      if (check([208, 207, 17, 224, 161, 177, 26, 225])) {
        return {
          ext: "msi",
          mime: "application/x-msi"
        };
      }
      if (check([6, 14, 43, 52, 2, 5, 1, 1, 13, 1, 2, 1, 1, 2])) {
        return {
          ext: "mxf",
          mime: "application/mxf"
        };
      }
      if (check([71], { offset: 4 }) && (check([71], { offset: 192 }) || check([71], { offset: 196 }))) {
        return {
          ext: "mts",
          mime: "video/mp2t"
        };
      }
      if (check([66, 76, 69, 78, 68, 69, 82])) {
        return {
          ext: "blend",
          mime: "application/x-blender"
        };
      }
      if (check([66, 80, 71, 251])) {
        return {
          ext: "bpg",
          mime: "image/bpg"
        };
      }
      return null;
    };
  }
});

// node_modules/decompress-targz/index.js
var require_decompress_targz = __commonJS({
  "node_modules/decompress-targz/index.js"(exports2, module2) {
    "use strict";
    var zlib = require("zlib");
    var decompressTar = require_decompress_tar();
    var fileType2 = require_file_type4();
    var isStream = require_is_stream();
    module2.exports = () => (input) => {
      if (!Buffer.isBuffer(input) && !isStream(input)) {
        return Promise.reject(new TypeError(`Expected a Buffer or Stream, got ${typeof input}`));
      }
      if (Buffer.isBuffer(input) && (!fileType2(input) || fileType2(input).ext !== "gz")) {
        return Promise.resolve([]);
      }
      const unzip = zlib.createGunzip();
      const result = decompressTar()(unzip);
      if (Buffer.isBuffer(input)) {
        unzip.end(input);
      } else {
        input.pipe(unzip);
      }
      return result;
    };
  }
});

// node_modules/decompress-unzip/node_modules/file-type/index.js
var require_file_type5 = __commonJS({
  "node_modules/decompress-unzip/node_modules/file-type/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function(buf) {
      if (!(buf && buf.length > 1)) {
        return null;
      }
      if (buf[0] === 255 && buf[1] === 216 && buf[2] === 255) {
        return {
          ext: "jpg",
          mime: "image/jpeg"
        };
      }
      if (buf[0] === 137 && buf[1] === 80 && buf[2] === 78 && buf[3] === 71) {
        return {
          ext: "png",
          mime: "image/png"
        };
      }
      if (buf[0] === 71 && buf[1] === 73 && buf[2] === 70) {
        return {
          ext: "gif",
          mime: "image/gif"
        };
      }
      if (buf[8] === 87 && buf[9] === 69 && buf[10] === 66 && buf[11] === 80) {
        return {
          ext: "webp",
          mime: "image/webp"
        };
      }
      if (buf[0] === 70 && buf[1] === 76 && buf[2] === 73 && buf[3] === 70) {
        return {
          ext: "flif",
          mime: "image/flif"
        };
      }
      if ((buf[0] === 73 && buf[1] === 73 && buf[2] === 42 && buf[3] === 0 || buf[0] === 77 && buf[1] === 77 && buf[2] === 0 && buf[3] === 42) && buf[8] === 67 && buf[9] === 82) {
        return {
          ext: "cr2",
          mime: "image/x-canon-cr2"
        };
      }
      if (buf[0] === 73 && buf[1] === 73 && buf[2] === 42 && buf[3] === 0 || buf[0] === 77 && buf[1] === 77 && buf[2] === 0 && buf[3] === 42) {
        return {
          ext: "tif",
          mime: "image/tiff"
        };
      }
      if (buf[0] === 66 && buf[1] === 77) {
        return {
          ext: "bmp",
          mime: "image/bmp"
        };
      }
      if (buf[0] === 73 && buf[1] === 73 && buf[2] === 188) {
        return {
          ext: "jxr",
          mime: "image/vnd.ms-photo"
        };
      }
      if (buf[0] === 56 && buf[1] === 66 && buf[2] === 80 && buf[3] === 83) {
        return {
          ext: "psd",
          mime: "image/vnd.adobe.photoshop"
        };
      }
      if (buf[0] === 80 && buf[1] === 75 && buf[2] === 3 && buf[3] === 4 && buf[30] === 109 && buf[31] === 105 && buf[32] === 109 && buf[33] === 101 && buf[34] === 116 && buf[35] === 121 && buf[36] === 112 && buf[37] === 101 && buf[38] === 97 && buf[39] === 112 && buf[40] === 112 && buf[41] === 108 && buf[42] === 105 && buf[43] === 99 && buf[44] === 97 && buf[45] === 116 && buf[46] === 105 && buf[47] === 111 && buf[48] === 110 && buf[49] === 47 && buf[50] === 101 && buf[51] === 112 && buf[52] === 117 && buf[53] === 98 && buf[54] === 43 && buf[55] === 122 && buf[56] === 105 && buf[57] === 112) {
        return {
          ext: "epub",
          mime: "application/epub+zip"
        };
      }
      if (buf[0] === 80 && buf[1] === 75 && buf[2] === 3 && buf[3] === 4 && buf[30] === 77 && buf[31] === 69 && buf[32] === 84 && buf[33] === 65 && buf[34] === 45 && buf[35] === 73 && buf[36] === 78 && buf[37] === 70 && buf[38] === 47 && buf[39] === 109 && buf[40] === 111 && buf[41] === 122 && buf[42] === 105 && buf[43] === 108 && buf[44] === 108 && buf[45] === 97 && buf[46] === 46 && buf[47] === 114 && buf[48] === 115 && buf[49] === 97) {
        return {
          ext: "xpi",
          mime: "application/x-xpinstall"
        };
      }
      if (buf[0] === 80 && buf[1] === 75 && (buf[2] === 3 || buf[2] === 5 || buf[2] === 7) && (buf[3] === 4 || buf[3] === 6 || buf[3] === 8)) {
        return {
          ext: "zip",
          mime: "application/zip"
        };
      }
      if (buf[257] === 117 && buf[258] === 115 && buf[259] === 116 && buf[260] === 97 && buf[261] === 114) {
        return {
          ext: "tar",
          mime: "application/x-tar"
        };
      }
      if (buf[0] === 82 && buf[1] === 97 && buf[2] === 114 && buf[3] === 33 && buf[4] === 26 && buf[5] === 7 && (buf[6] === 0 || buf[6] === 1)) {
        return {
          ext: "rar",
          mime: "application/x-rar-compressed"
        };
      }
      if (buf[0] === 31 && buf[1] === 139 && buf[2] === 8) {
        return {
          ext: "gz",
          mime: "application/gzip"
        };
      }
      if (buf[0] === 66 && buf[1] === 90 && buf[2] === 104) {
        return {
          ext: "bz2",
          mime: "application/x-bzip2"
        };
      }
      if (buf[0] === 55 && buf[1] === 122 && buf[2] === 188 && buf[3] === 175 && buf[4] === 39 && buf[5] === 28) {
        return {
          ext: "7z",
          mime: "application/x-7z-compressed"
        };
      }
      if (buf[0] === 120 && buf[1] === 1) {
        return {
          ext: "dmg",
          mime: "application/x-apple-diskimage"
        };
      }
      if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0 && (buf[3] === 24 || buf[3] === 32) && buf[4] === 102 && buf[5] === 116 && buf[6] === 121 && buf[7] === 112 || buf[0] === 51 && buf[1] === 103 && buf[2] === 112 && buf[3] === 53 || buf[0] === 0 && buf[1] === 0 && buf[2] === 0 && buf[3] === 28 && buf[4] === 102 && buf[5] === 116 && buf[6] === 121 && buf[7] === 112 && buf[8] === 109 && buf[9] === 112 && buf[10] === 52 && buf[11] === 50 && buf[16] === 109 && buf[17] === 112 && buf[18] === 52 && buf[19] === 49 && buf[20] === 109 && buf[21] === 112 && buf[22] === 52 && buf[23] === 50 && buf[24] === 105 && buf[25] === 115 && buf[26] === 111 && buf[27] === 109 || buf[0] === 0 && buf[1] === 0 && buf[2] === 0 && buf[3] === 28 && buf[4] === 102 && buf[5] === 116 && buf[6] === 121 && buf[7] === 112 && buf[8] === 105 && buf[9] === 115 && buf[10] === 111 && buf[11] === 109 || buf[0] === 0 && buf[1] === 0 && buf[2] === 0 && buf[3] === 28 && buf[4] === 102 && buf[5] === 116 && buf[6] === 121 && buf[7] === 112 && buf[8] === 109 && buf[9] === 112 && buf[10] === 52 && buf[11] === 50 && buf[12] === 0 && buf[13] === 0 && buf[14] === 0 && buf[15] === 0) {
        return {
          ext: "mp4",
          mime: "video/mp4"
        };
      }
      if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0 && buf[3] === 28 && buf[4] === 102 && buf[5] === 116 && buf[6] === 121 && buf[7] === 112 && buf[8] === 77 && buf[9] === 52 && buf[10] === 86) {
        return {
          ext: "m4v",
          mime: "video/x-m4v"
        };
      }
      if (buf[0] === 77 && buf[1] === 84 && buf[2] === 104 && buf[3] === 100) {
        return {
          ext: "mid",
          mime: "audio/midi"
        };
      }
      if (buf[31] === 109 && buf[32] === 97 && buf[33] === 116 && buf[34] === 114 && buf[35] === 111 && buf[36] === 115 && buf[37] === 107 && buf[38] === 97) {
        return {
          ext: "mkv",
          mime: "video/x-matroska"
        };
      }
      if (buf[0] === 26 && buf[1] === 69 && buf[2] === 223 && buf[3] === 163) {
        return {
          ext: "webm",
          mime: "video/webm"
        };
      }
      if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0 && buf[3] === 20 && buf[4] === 102 && buf[5] === 116 && buf[6] === 121 && buf[7] === 112) {
        return {
          ext: "mov",
          mime: "video/quicktime"
        };
      }
      if (buf[0] === 82 && buf[1] === 73 && buf[2] === 70 && buf[3] === 70 && buf[8] === 65 && buf[9] === 86 && buf[10] === 73) {
        return {
          ext: "avi",
          mime: "video/x-msvideo"
        };
      }
      if (buf[0] === 48 && buf[1] === 38 && buf[2] === 178 && buf[3] === 117 && buf[4] === 142 && buf[5] === 102 && buf[6] === 207 && buf[7] === 17 && buf[8] === 166 && buf[9] === 217) {
        return {
          ext: "wmv",
          mime: "video/x-ms-wmv"
        };
      }
      if (buf[0] === 0 && buf[1] === 0 && buf[2] === 1 && buf[3].toString(16)[0] === "b") {
        return {
          ext: "mpg",
          mime: "video/mpeg"
        };
      }
      if (buf[0] === 73 && buf[1] === 68 && buf[2] === 51 || buf[0] === 255 && buf[1] === 251) {
        return {
          ext: "mp3",
          mime: "audio/mpeg"
        };
      }
      if (buf[4] === 102 && buf[5] === 116 && buf[6] === 121 && buf[7] === 112 && buf[8] === 77 && buf[9] === 52 && buf[10] === 65 || buf[0] === 77 && buf[1] === 52 && buf[2] === 65 && buf[3] === 32) {
        return {
          ext: "m4a",
          mime: "audio/m4a"
        };
      }
      if (buf[28] === 79 && buf[29] === 112 && buf[30] === 117 && buf[31] === 115 && buf[32] === 72 && buf[33] === 101 && buf[34] === 97 && buf[35] === 100) {
        return {
          ext: "opus",
          mime: "audio/opus"
        };
      }
      if (buf[0] === 79 && buf[1] === 103 && buf[2] === 103 && buf[3] === 83) {
        return {
          ext: "ogg",
          mime: "audio/ogg"
        };
      }
      if (buf[0] === 102 && buf[1] === 76 && buf[2] === 97 && buf[3] === 67) {
        return {
          ext: "flac",
          mime: "audio/x-flac"
        };
      }
      if (buf[0] === 82 && buf[1] === 73 && buf[2] === 70 && buf[3] === 70 && buf[8] === 87 && buf[9] === 65 && buf[10] === 86 && buf[11] === 69) {
        return {
          ext: "wav",
          mime: "audio/x-wav"
        };
      }
      if (buf[0] === 35 && buf[1] === 33 && buf[2] === 65 && buf[3] === 77 && buf[4] === 82 && buf[5] === 10) {
        return {
          ext: "amr",
          mime: "audio/amr"
        };
      }
      if (buf[0] === 37 && buf[1] === 80 && buf[2] === 68 && buf[3] === 70) {
        return {
          ext: "pdf",
          mime: "application/pdf"
        };
      }
      if (buf[0] === 77 && buf[1] === 90) {
        return {
          ext: "exe",
          mime: "application/x-msdownload"
        };
      }
      if ((buf[0] === 67 || buf[0] === 70) && buf[1] === 87 && buf[2] === 83) {
        return {
          ext: "swf",
          mime: "application/x-shockwave-flash"
        };
      }
      if (buf[0] === 123 && buf[1] === 92 && buf[2] === 114 && buf[3] === 116 && buf[4] === 102) {
        return {
          ext: "rtf",
          mime: "application/rtf"
        };
      }
      if (buf[0] === 119 && buf[1] === 79 && buf[2] === 70 && buf[3] === 70 && (buf[4] === 0 && buf[5] === 1 && buf[6] === 0 && buf[7] === 0 || buf[4] === 79 && buf[5] === 84 && buf[6] === 84 && buf[7] === 79)) {
        return {
          ext: "woff",
          mime: "application/font-woff"
        };
      }
      if (buf[0] === 119 && buf[1] === 79 && buf[2] === 70 && buf[3] === 50 && (buf[4] === 0 && buf[5] === 1 && buf[6] === 0 && buf[7] === 0 || buf[4] === 79 && buf[5] === 84 && buf[6] === 84 && buf[7] === 79)) {
        return {
          ext: "woff2",
          mime: "application/font-woff"
        };
      }
      if (buf[34] === 76 && buf[35] === 80 && (buf[8] === 0 && buf[9] === 0 && buf[10] === 1 || buf[8] === 1 && buf[9] === 0 && buf[10] === 2 || buf[8] === 2 && buf[9] === 0 && buf[10] === 2)) {
        return {
          ext: "eot",
          mime: "application/octet-stream"
        };
      }
      if (buf[0] === 0 && buf[1] === 1 && buf[2] === 0 && buf[3] === 0 && buf[4] === 0) {
        return {
          ext: "ttf",
          mime: "application/font-sfnt"
        };
      }
      if (buf[0] === 79 && buf[1] === 84 && buf[2] === 84 && buf[3] === 79 && buf[4] === 0) {
        return {
          ext: "otf",
          mime: "application/font-sfnt"
        };
      }
      if (buf[0] === 0 && buf[1] === 0 && buf[2] === 1 && buf[3] === 0) {
        return {
          ext: "ico",
          mime: "image/x-icon"
        };
      }
      if (buf[0] === 70 && buf[1] === 76 && buf[2] === 86 && buf[3] === 1) {
        return {
          ext: "flv",
          mime: "video/x-flv"
        };
      }
      if (buf[0] === 37 && buf[1] === 33) {
        return {
          ext: "ps",
          mime: "application/postscript"
        };
      }
      if (buf[0] === 253 && buf[1] === 55 && buf[2] === 122 && buf[3] === 88 && buf[4] === 90 && buf[5] === 0) {
        return {
          ext: "xz",
          mime: "application/x-xz"
        };
      }
      if (buf[0] === 83 && buf[1] === 81 && buf[2] === 76 && buf[3] === 105) {
        return {
          ext: "sqlite",
          mime: "application/x-sqlite3"
        };
      }
      if (buf[0] === 78 && buf[1] === 69 && buf[2] === 83 && buf[3] === 26) {
        return {
          ext: "nes",
          mime: "application/x-nintendo-nes-rom"
        };
      }
      if (buf[0] === 67 && buf[1] === 114 && buf[2] === 50 && buf[3] === 52) {
        return {
          ext: "crx",
          mime: "application/x-google-chrome-extension"
        };
      }
      if (buf[0] === 77 && buf[1] === 83 && buf[2] === 67 && buf[3] === 70 || buf[0] === 73 && buf[1] === 83 && buf[2] === 99 && buf[3] === 40) {
        return {
          ext: "cab",
          mime: "application/vnd.ms-cab-compressed"
        };
      }
      if (buf[0] === 33 && buf[1] === 60 && buf[2] === 97 && buf[3] === 114 && buf[4] === 99 && buf[5] === 104 && buf[6] === 62 && buf[7] === 10 && buf[8] === 100 && buf[9] === 101 && buf[10] === 98 && buf[11] === 105 && buf[12] === 97 && buf[13] === 110 && buf[14] === 45 && buf[15] === 98 && buf[16] === 105 && buf[17] === 110 && buf[18] === 97 && buf[19] === 114 && buf[20] === 121) {
        return {
          ext: "deb",
          mime: "application/x-deb"
        };
      }
      if (buf[0] === 33 && buf[1] === 60 && buf[2] === 97 && buf[3] === 114 && buf[4] === 99 && buf[5] === 104 && buf[6] === 62) {
        return {
          ext: "ar",
          mime: "application/x-unix-archive"
        };
      }
      if (buf[0] === 237 && buf[1] === 171 && buf[2] === 238 && buf[3] === 219) {
        return {
          ext: "rpm",
          mime: "application/x-rpm"
        };
      }
      if (buf[0] === 31 && buf[1] === 160 || buf[0] === 31 && buf[1] === 157) {
        return {
          ext: "Z",
          mime: "application/x-compress"
        };
      }
      if (buf[0] === 76 && buf[1] === 90 && buf[2] === 73 && buf[3] === 80) {
        return {
          ext: "lz",
          mime: "application/x-lzip"
        };
      }
      if (buf[0] === 208 && buf[1] === 207 && buf[2] === 17 && buf[3] === 224 && buf[4] === 161 && buf[5] === 177 && buf[6] === 26 && buf[7] === 225) {
        return {
          ext: "msi",
          mime: "application/x-msi"
        };
      }
      return null;
    };
  }
});

// node_modules/pinkie/index.js
var require_pinkie = __commonJS({
  "node_modules/pinkie/index.js"(exports2, module2) {
    "use strict";
    var PENDING = "pending";
    var SETTLED = "settled";
    var FULFILLED = "fulfilled";
    var REJECTED = "rejected";
    var NOOP = function() {
    };
    var isNode = typeof global !== "undefined" && typeof global.process !== "undefined" && typeof global.process.emit === "function";
    var asyncSetTimer = typeof setImmediate === "undefined" ? setTimeout : setImmediate;
    var asyncQueue = [];
    var asyncTimer;
    function asyncFlush() {
      for (var i = 0; i < asyncQueue.length; i++) {
        asyncQueue[i][0](asyncQueue[i][1]);
      }
      asyncQueue = [];
      asyncTimer = false;
    }
    function asyncCall(callback, arg) {
      asyncQueue.push([callback, arg]);
      if (!asyncTimer) {
        asyncTimer = true;
        asyncSetTimer(asyncFlush, 0);
      }
    }
    function invokeResolver(resolver, promise) {
      function resolvePromise(value) {
        resolve2(promise, value);
      }
      function rejectPromise(reason) {
        reject2(promise, reason);
      }
      try {
        resolver(resolvePromise, rejectPromise);
      } catch (e) {
        rejectPromise(e);
      }
    }
    function invokeCallback(subscriber) {
      var owner = subscriber.owner;
      var settled = owner._state;
      var value = owner._data;
      var callback = subscriber[settled];
      var promise = subscriber.then;
      if (typeof callback === "function") {
        settled = FULFILLED;
        try {
          value = callback(value);
        } catch (e) {
          reject2(promise, e);
        }
      }
      if (!handleThenable(promise, value)) {
        if (settled === FULFILLED) {
          resolve2(promise, value);
        }
        if (settled === REJECTED) {
          reject2(promise, value);
        }
      }
    }
    function handleThenable(promise, value) {
      var resolved;
      try {
        if (promise === value) {
          throw new TypeError("A promises callback cannot return that same promise.");
        }
        if (value && (typeof value === "function" || typeof value === "object")) {
          var then = value.then;
          if (typeof then === "function") {
            then.call(value, function(val) {
              if (!resolved) {
                resolved = true;
                if (value === val) {
                  fulfill(promise, val);
                } else {
                  resolve2(promise, val);
                }
              }
            }, function(reason) {
              if (!resolved) {
                resolved = true;
                reject2(promise, reason);
              }
            });
            return true;
          }
        }
      } catch (e) {
        if (!resolved) {
          reject2(promise, e);
        }
        return true;
      }
      return false;
    }
    function resolve2(promise, value) {
      if (promise === value || !handleThenable(promise, value)) {
        fulfill(promise, value);
      }
    }
    function fulfill(promise, value) {
      if (promise._state === PENDING) {
        promise._state = SETTLED;
        promise._data = value;
        asyncCall(publishFulfillment, promise);
      }
    }
    function reject2(promise, reason) {
      if (promise._state === PENDING) {
        promise._state = SETTLED;
        promise._data = reason;
        asyncCall(publishRejection, promise);
      }
    }
    function publish(promise) {
      promise._then = promise._then.forEach(invokeCallback);
    }
    function publishFulfillment(promise) {
      promise._state = FULFILLED;
      publish(promise);
    }
    function publishRejection(promise) {
      promise._state = REJECTED;
      publish(promise);
      if (!promise._handled && isNode) {
        global.process.emit("unhandledRejection", promise._data, promise);
      }
    }
    function notifyRejectionHandled(promise) {
      global.process.emit("rejectionHandled", promise);
    }
    function Promise2(resolver) {
      if (typeof resolver !== "function") {
        throw new TypeError("Promise resolver " + resolver + " is not a function");
      }
      if (this instanceof Promise2 === false) {
        throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
      }
      this._then = [];
      invokeResolver(resolver, this);
    }
    Promise2.prototype = {
      constructor: Promise2,
      _state: PENDING,
      _then: null,
      _data: void 0,
      _handled: false,
      then: function(onFulfillment, onRejection) {
        var subscriber = {
          owner: this,
          then: new this.constructor(NOOP),
          fulfilled: onFulfillment,
          rejected: onRejection
        };
        if ((onRejection || onFulfillment) && !this._handled) {
          this._handled = true;
          if (this._state === REJECTED && isNode) {
            asyncCall(notifyRejectionHandled, this);
          }
        }
        if (this._state === FULFILLED || this._state === REJECTED) {
          asyncCall(invokeCallback, subscriber);
        } else {
          this._then.push(subscriber);
        }
        return subscriber.then;
      },
      catch: function(onRejection) {
        return this.then(null, onRejection);
      }
    };
    Promise2.all = function(promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("You must pass an array to Promise.all().");
      }
      return new Promise2(function(resolve3, reject3) {
        var results = [];
        var remaining = 0;
        function resolver(index) {
          remaining++;
          return function(value) {
            results[index] = value;
            if (!--remaining) {
              resolve3(results);
            }
          };
        }
        for (var i = 0, promise; i < promises.length; i++) {
          promise = promises[i];
          if (promise && typeof promise.then === "function") {
            promise.then(resolver(i), reject3);
          } else {
            results[i] = promise;
          }
        }
        if (!remaining) {
          resolve3(results);
        }
      });
    };
    Promise2.race = function(promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("You must pass an array to Promise.race().");
      }
      return new Promise2(function(resolve3, reject3) {
        for (var i = 0, promise; i < promises.length; i++) {
          promise = promises[i];
          if (promise && typeof promise.then === "function") {
            promise.then(resolve3, reject3);
          } else {
            resolve3(promise);
          }
        }
      });
    };
    Promise2.resolve = function(value) {
      if (value && typeof value === "object" && value.constructor === Promise2) {
        return value;
      }
      return new Promise2(function(resolve3) {
        resolve3(value);
      });
    };
    Promise2.reject = function(reason) {
      return new Promise2(function(resolve3, reject3) {
        reject3(reason);
      });
    };
    module2.exports = Promise2;
  }
});

// node_modules/pinkie-promise/index.js
var require_pinkie_promise = __commonJS({
  "node_modules/pinkie-promise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = typeof Promise === "function" ? Promise : require_pinkie();
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports2, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/decompress-unzip/node_modules/get-stream/buffer-stream.js
var require_buffer_stream = __commonJS({
  "node_modules/decompress-unzip/node_modules/get-stream/buffer-stream.js"(exports2, module2) {
    var PassThrough = require("stream").PassThrough;
    var objectAssign = require_object_assign();
    module2.exports = function(opts) {
      opts = objectAssign({}, opts);
      var array = opts.array;
      var encoding = opts.encoding;
      var buffer = encoding === "buffer";
      var objectMode = false;
      if (array) {
        objectMode = !(encoding || buffer);
      } else {
        encoding = encoding || "utf8";
      }
      if (buffer) {
        encoding = null;
      }
      var len = 0;
      var ret = [];
      var stream2 = new PassThrough({ objectMode });
      if (encoding) {
        stream2.setEncoding(encoding);
      }
      stream2.on("data", function(chunk) {
        ret.push(chunk);
        if (objectMode) {
          len = ret.length;
        } else {
          len += chunk.length;
        }
      });
      stream2.getBufferedValue = function() {
        if (array) {
          return ret;
        }
        return buffer ? Buffer.concat(ret, len) : ret.join("");
      };
      stream2.getBufferedLength = function() {
        return len;
      };
      return stream2;
    };
  }
});

// node_modules/decompress-unzip/node_modules/get-stream/index.js
var require_get_stream = __commonJS({
  "node_modules/decompress-unzip/node_modules/get-stream/index.js"(exports2, module2) {
    "use strict";
    var Promise2 = require_pinkie_promise();
    var objectAssign = require_object_assign();
    var bufferStream = require_buffer_stream();
    function getStream(inputStream, opts) {
      if (!inputStream) {
        return Promise2.reject(new Error("Expected a stream"));
      }
      opts = objectAssign({ maxBuffer: Infinity }, opts);
      var maxBuffer = opts.maxBuffer;
      var stream2;
      var clean;
      var p = new Promise2(function(resolve2, reject2) {
        stream2 = bufferStream(opts);
        inputStream.once("error", error);
        inputStream.pipe(stream2);
        stream2.on("data", function() {
          if (stream2.getBufferedLength() > maxBuffer) {
            reject2(new Error("maxBuffer exceeded"));
          }
        });
        stream2.once("error", error);
        stream2.on("end", resolve2);
        clean = function() {
          if (inputStream.unpipe) {
            inputStream.unpipe(stream2);
          }
        };
        function error(err) {
          if (err) {
            err.bufferedData = stream2.getBufferedValue();
          }
          reject2(err);
        }
      });
      p.then(clean, clean);
      return p.then(function() {
        return stream2.getBufferedValue();
      });
    }
    module2.exports = getStream;
    module2.exports.buffer = function(stream2, opts) {
      return getStream(stream2, objectAssign({}, opts, { encoding: "buffer" }));
    };
    module2.exports.array = function(stream2, opts) {
      return getStream(stream2, objectAssign({}, opts, { array: true }));
    };
  }
});

// node_modules/decompress-unzip/node_modules/pify/index.js
var require_pify = __commonJS({
  "node_modules/decompress-unzip/node_modules/pify/index.js"(exports2, module2) {
    "use strict";
    var processFn = function(fn, P, opts) {
      return function() {
        var that = this;
        var args = new Array(arguments.length);
        for (var i = 0; i < arguments.length; i++) {
          args[i] = arguments[i];
        }
        return new P(function(resolve2, reject2) {
          args.push(function(err, result) {
            if (err) {
              reject2(err);
            } else if (opts.multiArgs) {
              var results = new Array(arguments.length - 1);
              for (var i2 = 1; i2 < arguments.length; i2++) {
                results[i2 - 1] = arguments[i2];
              }
              resolve2(results);
            } else {
              resolve2(result);
            }
          });
          fn.apply(that, args);
        });
      };
    };
    var pify = module2.exports = function(obj, P, opts) {
      if (typeof P !== "function") {
        opts = P;
        P = Promise;
      }
      opts = opts || {};
      opts.exclude = opts.exclude || [/.+Sync$/];
      var filter = function(key) {
        var match = function(pattern) {
          return typeof pattern === "string" ? key === pattern : pattern.test(key);
        };
        return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
      };
      var ret = typeof obj === "function" ? function() {
        if (opts.excludeMain) {
          return obj.apply(this, arguments);
        }
        return processFn(obj, P, opts).apply(this, arguments);
      } : {};
      return Object.keys(obj).reduce(function(ret2, key) {
        var x = obj[key];
        ret2[key] = typeof x === "function" && filter(key) ? processFn(x, P, opts) : x;
        return ret2;
      }, ret);
    };
    pify.all = pify;
  }
});

// node_modules/pend/index.js
var require_pend = __commonJS({
  "node_modules/pend/index.js"(exports2, module2) {
    module2.exports = Pend;
    function Pend() {
      this.pending = 0;
      this.max = Infinity;
      this.listeners = [];
      this.waiting = [];
      this.error = null;
    }
    Pend.prototype.go = function(fn) {
      if (this.pending < this.max) {
        pendGo(this, fn);
      } else {
        this.waiting.push(fn);
      }
    };
    Pend.prototype.wait = function(cb) {
      if (this.pending === 0) {
        cb(this.error);
      } else {
        this.listeners.push(cb);
      }
    };
    Pend.prototype.hold = function() {
      return pendHold(this);
    };
    function pendHold(self2) {
      self2.pending += 1;
      var called = false;
      return onCb;
      function onCb(err) {
        if (called)
          throw new Error("callback called twice");
        called = true;
        self2.error = self2.error || err;
        self2.pending -= 1;
        if (self2.waiting.length > 0 && self2.pending < self2.max) {
          pendGo(self2, self2.waiting.shift());
        } else if (self2.pending === 0) {
          var listeners = self2.listeners;
          self2.listeners = [];
          listeners.forEach(cbListener);
        }
      }
      function cbListener(listener) {
        listener(self2.error);
      }
    }
    function pendGo(self2, fn) {
      fn(pendHold(self2));
    }
  }
});

// node_modules/fd-slicer/index.js
var require_fd_slicer = __commonJS({
  "node_modules/fd-slicer/index.js"(exports2) {
    var fs3 = require("fs");
    var util = require("util");
    var stream2 = require("stream");
    var Readable = stream2.Readable;
    var Writable = stream2.Writable;
    var PassThrough = stream2.PassThrough;
    var Pend = require_pend();
    var EventEmitter = require("events").EventEmitter;
    exports2.createFromBuffer = createFromBuffer;
    exports2.createFromFd = createFromFd;
    exports2.BufferSlicer = BufferSlicer;
    exports2.FdSlicer = FdSlicer;
    util.inherits(FdSlicer, EventEmitter);
    function FdSlicer(fd, options) {
      options = options || {};
      EventEmitter.call(this);
      this.fd = fd;
      this.pend = new Pend();
      this.pend.max = 1;
      this.refCount = 0;
      this.autoClose = !!options.autoClose;
    }
    FdSlicer.prototype.read = function(buffer, offset, length, position, callback) {
      var self2 = this;
      self2.pend.go(function(cb) {
        fs3.read(self2.fd, buffer, offset, length, position, function(err, bytesRead, buffer2) {
          cb();
          callback(err, bytesRead, buffer2);
        });
      });
    };
    FdSlicer.prototype.write = function(buffer, offset, length, position, callback) {
      var self2 = this;
      self2.pend.go(function(cb) {
        fs3.write(self2.fd, buffer, offset, length, position, function(err, written, buffer2) {
          cb();
          callback(err, written, buffer2);
        });
      });
    };
    FdSlicer.prototype.createReadStream = function(options) {
      return new ReadStream(this, options);
    };
    FdSlicer.prototype.createWriteStream = function(options) {
      return new WriteStream(this, options);
    };
    FdSlicer.prototype.ref = function() {
      this.refCount += 1;
    };
    FdSlicer.prototype.unref = function() {
      var self2 = this;
      self2.refCount -= 1;
      if (self2.refCount > 0)
        return;
      if (self2.refCount < 0)
        throw new Error("invalid unref");
      if (self2.autoClose) {
        fs3.close(self2.fd, onCloseDone);
      }
      function onCloseDone(err) {
        if (err) {
          self2.emit("error", err);
        } else {
          self2.emit("close");
        }
      }
    };
    util.inherits(ReadStream, Readable);
    function ReadStream(context, options) {
      options = options || {};
      Readable.call(this, options);
      this.context = context;
      this.context.ref();
      this.start = options.start || 0;
      this.endOffset = options.end;
      this.pos = this.start;
      this.destroyed = false;
    }
    ReadStream.prototype._read = function(n) {
      var self2 = this;
      if (self2.destroyed)
        return;
      var toRead = Math.min(self2._readableState.highWaterMark, n);
      if (self2.endOffset != null) {
        toRead = Math.min(toRead, self2.endOffset - self2.pos);
      }
      if (toRead <= 0) {
        self2.destroyed = true;
        self2.push(null);
        self2.context.unref();
        return;
      }
      self2.context.pend.go(function(cb) {
        if (self2.destroyed)
          return cb();
        var buffer = new Buffer(toRead);
        fs3.read(self2.context.fd, buffer, 0, toRead, self2.pos, function(err, bytesRead) {
          if (err) {
            self2.destroy(err);
          } else if (bytesRead === 0) {
            self2.destroyed = true;
            self2.push(null);
            self2.context.unref();
          } else {
            self2.pos += bytesRead;
            self2.push(buffer.slice(0, bytesRead));
          }
          cb();
        });
      });
    };
    ReadStream.prototype.destroy = function(err) {
      if (this.destroyed)
        return;
      err = err || new Error("stream destroyed");
      this.destroyed = true;
      this.emit("error", err);
      this.context.unref();
    };
    util.inherits(WriteStream, Writable);
    function WriteStream(context, options) {
      options = options || {};
      Writable.call(this, options);
      this.context = context;
      this.context.ref();
      this.start = options.start || 0;
      this.endOffset = options.end == null ? Infinity : +options.end;
      this.bytesWritten = 0;
      this.pos = this.start;
      this.destroyed = false;
      this.on("finish", this.destroy.bind(this));
    }
    WriteStream.prototype._write = function(buffer, encoding, callback) {
      var self2 = this;
      if (self2.destroyed)
        return;
      if (self2.pos + buffer.length > self2.endOffset) {
        var err = new Error("maximum file length exceeded");
        err.code = "ETOOBIG";
        self2.destroy();
        callback(err);
        return;
      }
      self2.context.pend.go(function(cb) {
        if (self2.destroyed)
          return cb();
        fs3.write(self2.context.fd, buffer, 0, buffer.length, self2.pos, function(err2, bytes) {
          if (err2) {
            self2.destroy();
            cb();
            callback(err2);
          } else {
            self2.bytesWritten += bytes;
            self2.pos += bytes;
            self2.emit("progress");
            cb();
            callback();
          }
        });
      });
    };
    WriteStream.prototype.destroy = function() {
      if (this.destroyed)
        return;
      this.destroyed = true;
      this.context.unref();
    };
    util.inherits(BufferSlicer, EventEmitter);
    function BufferSlicer(buffer, options) {
      EventEmitter.call(this);
      options = options || {};
      this.refCount = 0;
      this.buffer = buffer;
      this.maxChunkSize = options.maxChunkSize || Number.MAX_SAFE_INTEGER;
    }
    BufferSlicer.prototype.read = function(buffer, offset, length, position, callback) {
      var end = position + length;
      var delta = end - this.buffer.length;
      var written = delta > 0 ? delta : length;
      this.buffer.copy(buffer, offset, position, end);
      setImmediate(function() {
        callback(null, written);
      });
    };
    BufferSlicer.prototype.write = function(buffer, offset, length, position, callback) {
      buffer.copy(this.buffer, position, offset, offset + length);
      setImmediate(function() {
        callback(null, length, buffer);
      });
    };
    BufferSlicer.prototype.createReadStream = function(options) {
      options = options || {};
      var readStream = new PassThrough(options);
      readStream.destroyed = false;
      readStream.start = options.start || 0;
      readStream.endOffset = options.end;
      readStream.pos = readStream.endOffset || this.buffer.length;
      var entireSlice = this.buffer.slice(readStream.start, readStream.pos);
      var offset = 0;
      while (true) {
        var nextOffset = offset + this.maxChunkSize;
        if (nextOffset >= entireSlice.length) {
          if (offset < entireSlice.length) {
            readStream.write(entireSlice.slice(offset, entireSlice.length));
          }
          break;
        }
        readStream.write(entireSlice.slice(offset, nextOffset));
        offset = nextOffset;
      }
      readStream.end();
      readStream.destroy = function() {
        readStream.destroyed = true;
      };
      return readStream;
    };
    BufferSlicer.prototype.createWriteStream = function(options) {
      var bufferSlicer = this;
      options = options || {};
      var writeStream = new Writable(options);
      writeStream.start = options.start || 0;
      writeStream.endOffset = options.end == null ? this.buffer.length : +options.end;
      writeStream.bytesWritten = 0;
      writeStream.pos = writeStream.start;
      writeStream.destroyed = false;
      writeStream._write = function(buffer, encoding, callback) {
        if (writeStream.destroyed)
          return;
        var end = writeStream.pos + buffer.length;
        if (end > writeStream.endOffset) {
          var err = new Error("maximum file length exceeded");
          err.code = "ETOOBIG";
          writeStream.destroyed = true;
          callback(err);
          return;
        }
        buffer.copy(bufferSlicer.buffer, writeStream.pos, 0, buffer.length);
        writeStream.bytesWritten += buffer.length;
        writeStream.pos = end;
        writeStream.emit("progress");
        callback();
      };
      writeStream.destroy = function() {
        writeStream.destroyed = true;
      };
      return writeStream;
    };
    BufferSlicer.prototype.ref = function() {
      this.refCount += 1;
    };
    BufferSlicer.prototype.unref = function() {
      this.refCount -= 1;
      if (this.refCount < 0) {
        throw new Error("invalid unref");
      }
    };
    function createFromBuffer(buffer, options) {
      return new BufferSlicer(buffer, options);
    }
    function createFromFd(fd, options) {
      return new FdSlicer(fd, options);
    }
  }
});

// node_modules/buffer-crc32/index.js
var require_buffer_crc32 = __commonJS({
  "node_modules/buffer-crc32/index.js"(exports2, module2) {
    var Buffer2 = require("buffer").Buffer;
    var CRC_TABLE = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    if (typeof Int32Array !== "undefined") {
      CRC_TABLE = new Int32Array(CRC_TABLE);
    }
    function ensureBuffer(input) {
      if (Buffer2.isBuffer(input)) {
        return input;
      }
      var hasNewBufferAPI = typeof Buffer2.alloc === "function" && typeof Buffer2.from === "function";
      if (typeof input === "number") {
        return hasNewBufferAPI ? Buffer2.alloc(input) : new Buffer2(input);
      } else if (typeof input === "string") {
        return hasNewBufferAPI ? Buffer2.from(input) : new Buffer2(input);
      } else {
        throw new Error("input must be buffer, number, or string, received " + typeof input);
      }
    }
    function bufferizeInt(num) {
      var tmp = ensureBuffer(4);
      tmp.writeInt32BE(num, 0);
      return tmp;
    }
    function _crc32(buf, previous) {
      buf = ensureBuffer(buf);
      if (Buffer2.isBuffer(previous)) {
        previous = previous.readUInt32BE(0);
      }
      var crc = ~~previous ^ -1;
      for (var n = 0; n < buf.length; n++) {
        crc = CRC_TABLE[(crc ^ buf[n]) & 255] ^ crc >>> 8;
      }
      return crc ^ -1;
    }
    function crc32() {
      return bufferizeInt(_crc32.apply(null, arguments));
    }
    crc32.signed = function() {
      return _crc32.apply(null, arguments);
    };
    crc32.unsigned = function() {
      return _crc32.apply(null, arguments) >>> 0;
    };
    module2.exports = crc32;
  }
});

// node_modules/yauzl/index.js
var require_yauzl = __commonJS({
  "node_modules/yauzl/index.js"(exports2) {
    var fs3 = require("fs");
    var zlib = require("zlib");
    var fd_slicer = require_fd_slicer();
    var crc32 = require_buffer_crc32();
    var util = require("util");
    var EventEmitter = require("events").EventEmitter;
    var Transform = require("stream").Transform;
    var PassThrough = require("stream").PassThrough;
    var Writable = require("stream").Writable;
    exports2.open = open;
    exports2.fromFd = fromFd;
    exports2.fromBuffer = fromBuffer;
    exports2.fromRandomAccessReader = fromRandomAccessReader;
    exports2.dosDateTimeToDate = dosDateTimeToDate;
    exports2.validateFileName = validateFileName;
    exports2.ZipFile = ZipFile;
    exports2.Entry = Entry;
    exports2.RandomAccessReader = RandomAccessReader;
    function open(path3, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = null;
      }
      if (options == null)
        options = {};
      if (options.autoClose == null)
        options.autoClose = true;
      if (options.lazyEntries == null)
        options.lazyEntries = false;
      if (options.decodeStrings == null)
        options.decodeStrings = true;
      if (options.validateEntrySizes == null)
        options.validateEntrySizes = true;
      if (options.strictFileNames == null)
        options.strictFileNames = false;
      if (callback == null)
        callback = defaultCallback;
      fs3.open(path3, "r", function(err, fd) {
        if (err)
          return callback(err);
        fromFd(fd, options, function(err2, zipfile) {
          if (err2)
            fs3.close(fd, defaultCallback);
          callback(err2, zipfile);
        });
      });
    }
    function fromFd(fd, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = null;
      }
      if (options == null)
        options = {};
      if (options.autoClose == null)
        options.autoClose = false;
      if (options.lazyEntries == null)
        options.lazyEntries = false;
      if (options.decodeStrings == null)
        options.decodeStrings = true;
      if (options.validateEntrySizes == null)
        options.validateEntrySizes = true;
      if (options.strictFileNames == null)
        options.strictFileNames = false;
      if (callback == null)
        callback = defaultCallback;
      fs3.fstat(fd, function(err, stats) {
        if (err)
          return callback(err);
        var reader = fd_slicer.createFromFd(fd, { autoClose: true });
        fromRandomAccessReader(reader, stats.size, options, callback);
      });
    }
    function fromBuffer(buffer, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = null;
      }
      if (options == null)
        options = {};
      options.autoClose = false;
      if (options.lazyEntries == null)
        options.lazyEntries = false;
      if (options.decodeStrings == null)
        options.decodeStrings = true;
      if (options.validateEntrySizes == null)
        options.validateEntrySizes = true;
      if (options.strictFileNames == null)
        options.strictFileNames = false;
      var reader = fd_slicer.createFromBuffer(buffer, { maxChunkSize: 65536 });
      fromRandomAccessReader(reader, buffer.length, options, callback);
    }
    function fromRandomAccessReader(reader, totalSize, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = null;
      }
      if (options == null)
        options = {};
      if (options.autoClose == null)
        options.autoClose = true;
      if (options.lazyEntries == null)
        options.lazyEntries = false;
      if (options.decodeStrings == null)
        options.decodeStrings = true;
      var decodeStrings = !!options.decodeStrings;
      if (options.validateEntrySizes == null)
        options.validateEntrySizes = true;
      if (options.strictFileNames == null)
        options.strictFileNames = false;
      if (callback == null)
        callback = defaultCallback;
      if (typeof totalSize !== "number")
        throw new Error("expected totalSize parameter to be a number");
      if (totalSize > Number.MAX_SAFE_INTEGER) {
        throw new Error("zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.");
      }
      reader.ref();
      var eocdrWithoutCommentSize = 22;
      var maxCommentSize = 65535;
      var bufferSize = Math.min(eocdrWithoutCommentSize + maxCommentSize, totalSize);
      var buffer = newBuffer(bufferSize);
      var bufferReadStart = totalSize - buffer.length;
      readAndAssertNoEof(reader, buffer, 0, bufferSize, bufferReadStart, function(err) {
        if (err)
          return callback(err);
        for (var i = bufferSize - eocdrWithoutCommentSize; i >= 0; i -= 1) {
          if (buffer.readUInt32LE(i) !== 101010256)
            continue;
          var eocdrBuffer = buffer.slice(i);
          var diskNumber = eocdrBuffer.readUInt16LE(4);
          if (diskNumber !== 0) {
            return callback(new Error("multi-disk zip files are not supported: found disk number: " + diskNumber));
          }
          var entryCount = eocdrBuffer.readUInt16LE(10);
          var centralDirectoryOffset = eocdrBuffer.readUInt32LE(16);
          var commentLength = eocdrBuffer.readUInt16LE(20);
          var expectedCommentLength = eocdrBuffer.length - eocdrWithoutCommentSize;
          if (commentLength !== expectedCommentLength) {
            return callback(new Error("invalid comment length. expected: " + expectedCommentLength + ". found: " + commentLength));
          }
          var comment = decodeStrings ? decodeBuffer(eocdrBuffer, 22, eocdrBuffer.length, false) : eocdrBuffer.slice(22);
          if (!(entryCount === 65535 || centralDirectoryOffset === 4294967295)) {
            return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));
          }
          var zip64EocdlBuffer = newBuffer(20);
          var zip64EocdlOffset = bufferReadStart + i - zip64EocdlBuffer.length;
          readAndAssertNoEof(reader, zip64EocdlBuffer, 0, zip64EocdlBuffer.length, zip64EocdlOffset, function(err2) {
            if (err2)
              return callback(err2);
            if (zip64EocdlBuffer.readUInt32LE(0) !== 117853008) {
              return callback(new Error("invalid zip64 end of central directory locator signature"));
            }
            var zip64EocdrOffset = readUInt64LE2(zip64EocdlBuffer, 8);
            var zip64EocdrBuffer = newBuffer(56);
            readAndAssertNoEof(reader, zip64EocdrBuffer, 0, zip64EocdrBuffer.length, zip64EocdrOffset, function(err3) {
              if (err3)
                return callback(err3);
              if (zip64EocdrBuffer.readUInt32LE(0) !== 101075792) {
                return callback(new Error("invalid zip64 end of central directory record signature"));
              }
              entryCount = readUInt64LE2(zip64EocdrBuffer, 32);
              centralDirectoryOffset = readUInt64LE2(zip64EocdrBuffer, 48);
              return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));
            });
          });
          return;
        }
        callback(new Error("end of central directory record signature not found"));
      });
    }
    util.inherits(ZipFile, EventEmitter);
    function ZipFile(reader, centralDirectoryOffset, fileSize, entryCount, comment, autoClose, lazyEntries, decodeStrings, validateEntrySizes, strictFileNames) {
      var self2 = this;
      EventEmitter.call(self2);
      self2.reader = reader;
      self2.reader.on("error", function(err) {
        emitError(self2, err);
      });
      self2.reader.once("close", function() {
        self2.emit("close");
      });
      self2.readEntryCursor = centralDirectoryOffset;
      self2.fileSize = fileSize;
      self2.entryCount = entryCount;
      self2.comment = comment;
      self2.entriesRead = 0;
      self2.autoClose = !!autoClose;
      self2.lazyEntries = !!lazyEntries;
      self2.decodeStrings = !!decodeStrings;
      self2.validateEntrySizes = !!validateEntrySizes;
      self2.strictFileNames = !!strictFileNames;
      self2.isOpen = true;
      self2.emittedError = false;
      if (!self2.lazyEntries)
        self2._readEntry();
    }
    ZipFile.prototype.close = function() {
      if (!this.isOpen)
        return;
      this.isOpen = false;
      this.reader.unref();
    };
    function emitErrorAndAutoClose(self2, err) {
      if (self2.autoClose)
        self2.close();
      emitError(self2, err);
    }
    function emitError(self2, err) {
      if (self2.emittedError)
        return;
      self2.emittedError = true;
      self2.emit("error", err);
    }
    ZipFile.prototype.readEntry = function() {
      if (!this.lazyEntries)
        throw new Error("readEntry() called without lazyEntries:true");
      this._readEntry();
    };
    ZipFile.prototype._readEntry = function() {
      var self2 = this;
      if (self2.entryCount === self2.entriesRead) {
        setImmediate(function() {
          if (self2.autoClose)
            self2.close();
          if (self2.emittedError)
            return;
          self2.emit("end");
        });
        return;
      }
      if (self2.emittedError)
        return;
      var buffer = newBuffer(46);
      readAndAssertNoEof(self2.reader, buffer, 0, buffer.length, self2.readEntryCursor, function(err) {
        if (err)
          return emitErrorAndAutoClose(self2, err);
        if (self2.emittedError)
          return;
        var entry = new Entry();
        var signature = buffer.readUInt32LE(0);
        if (signature !== 33639248)
          return emitErrorAndAutoClose(self2, new Error("invalid central directory file header signature: 0x" + signature.toString(16)));
        entry.versionMadeBy = buffer.readUInt16LE(4);
        entry.versionNeededToExtract = buffer.readUInt16LE(6);
        entry.generalPurposeBitFlag = buffer.readUInt16LE(8);
        entry.compressionMethod = buffer.readUInt16LE(10);
        entry.lastModFileTime = buffer.readUInt16LE(12);
        entry.lastModFileDate = buffer.readUInt16LE(14);
        entry.crc32 = buffer.readUInt32LE(16);
        entry.compressedSize = buffer.readUInt32LE(20);
        entry.uncompressedSize = buffer.readUInt32LE(24);
        entry.fileNameLength = buffer.readUInt16LE(28);
        entry.extraFieldLength = buffer.readUInt16LE(30);
        entry.fileCommentLength = buffer.readUInt16LE(32);
        entry.internalFileAttributes = buffer.readUInt16LE(36);
        entry.externalFileAttributes = buffer.readUInt32LE(38);
        entry.relativeOffsetOfLocalHeader = buffer.readUInt32LE(42);
        if (entry.generalPurposeBitFlag & 64)
          return emitErrorAndAutoClose(self2, new Error("strong encryption is not supported"));
        self2.readEntryCursor += 46;
        buffer = newBuffer(entry.fileNameLength + entry.extraFieldLength + entry.fileCommentLength);
        readAndAssertNoEof(self2.reader, buffer, 0, buffer.length, self2.readEntryCursor, function(err2) {
          if (err2)
            return emitErrorAndAutoClose(self2, err2);
          if (self2.emittedError)
            return;
          var isUtf8 = (entry.generalPurposeBitFlag & 2048) !== 0;
          entry.fileName = self2.decodeStrings ? decodeBuffer(buffer, 0, entry.fileNameLength, isUtf8) : buffer.slice(0, entry.fileNameLength);
          var fileCommentStart = entry.fileNameLength + entry.extraFieldLength;
          var extraFieldBuffer = buffer.slice(entry.fileNameLength, fileCommentStart);
          entry.extraFields = [];
          var i = 0;
          while (i < extraFieldBuffer.length - 3) {
            var headerId = extraFieldBuffer.readUInt16LE(i + 0);
            var dataSize = extraFieldBuffer.readUInt16LE(i + 2);
            var dataStart = i + 4;
            var dataEnd = dataStart + dataSize;
            if (dataEnd > extraFieldBuffer.length)
              return emitErrorAndAutoClose(self2, new Error("extra field length exceeds extra field buffer size"));
            var dataBuffer = newBuffer(dataSize);
            extraFieldBuffer.copy(dataBuffer, 0, dataStart, dataEnd);
            entry.extraFields.push({
              id: headerId,
              data: dataBuffer
            });
            i = dataEnd;
          }
          entry.fileComment = self2.decodeStrings ? decodeBuffer(buffer, fileCommentStart, fileCommentStart + entry.fileCommentLength, isUtf8) : buffer.slice(fileCommentStart, fileCommentStart + entry.fileCommentLength);
          entry.comment = entry.fileComment;
          self2.readEntryCursor += buffer.length;
          self2.entriesRead += 1;
          if (entry.uncompressedSize === 4294967295 || entry.compressedSize === 4294967295 || entry.relativeOffsetOfLocalHeader === 4294967295) {
            var zip64EiefBuffer = null;
            for (var i = 0; i < entry.extraFields.length; i++) {
              var extraField = entry.extraFields[i];
              if (extraField.id === 1) {
                zip64EiefBuffer = extraField.data;
                break;
              }
            }
            if (zip64EiefBuffer == null) {
              return emitErrorAndAutoClose(self2, new Error("expected zip64 extended information extra field"));
            }
            var index = 0;
            if (entry.uncompressedSize === 4294967295) {
              if (index + 8 > zip64EiefBuffer.length) {
                return emitErrorAndAutoClose(self2, new Error("zip64 extended information extra field does not include uncompressed size"));
              }
              entry.uncompressedSize = readUInt64LE2(zip64EiefBuffer, index);
              index += 8;
            }
            if (entry.compressedSize === 4294967295) {
              if (index + 8 > zip64EiefBuffer.length) {
                return emitErrorAndAutoClose(self2, new Error("zip64 extended information extra field does not include compressed size"));
              }
              entry.compressedSize = readUInt64LE2(zip64EiefBuffer, index);
              index += 8;
            }
            if (entry.relativeOffsetOfLocalHeader === 4294967295) {
              if (index + 8 > zip64EiefBuffer.length) {
                return emitErrorAndAutoClose(self2, new Error("zip64 extended information extra field does not include relative header offset"));
              }
              entry.relativeOffsetOfLocalHeader = readUInt64LE2(zip64EiefBuffer, index);
              index += 8;
            }
          }
          if (self2.decodeStrings) {
            for (var i = 0; i < entry.extraFields.length; i++) {
              var extraField = entry.extraFields[i];
              if (extraField.id === 28789) {
                if (extraField.data.length < 6) {
                  continue;
                }
                if (extraField.data.readUInt8(0) !== 1) {
                  continue;
                }
                var oldNameCrc32 = extraField.data.readUInt32LE(1);
                if (crc32.unsigned(buffer.slice(0, entry.fileNameLength)) !== oldNameCrc32) {
                  continue;
                }
                entry.fileName = decodeBuffer(extraField.data, 5, extraField.data.length, true);
                break;
              }
            }
          }
          if (self2.validateEntrySizes && entry.compressionMethod === 0) {
            var expectedCompressedSize = entry.uncompressedSize;
            if (entry.isEncrypted()) {
              expectedCompressedSize += 12;
            }
            if (entry.compressedSize !== expectedCompressedSize) {
              var msg = "compressed/uncompressed size mismatch for stored file: " + entry.compressedSize + " != " + entry.uncompressedSize;
              return emitErrorAndAutoClose(self2, new Error(msg));
            }
          }
          if (self2.decodeStrings) {
            if (!self2.strictFileNames) {
              entry.fileName = entry.fileName.replace(/\\/g, "/");
            }
            var errorMessage = validateFileName(entry.fileName, self2.validateFileNameOptions);
            if (errorMessage != null)
              return emitErrorAndAutoClose(self2, new Error(errorMessage));
          }
          self2.emit("entry", entry);
          if (!self2.lazyEntries)
            self2._readEntry();
        });
      });
    };
    ZipFile.prototype.openReadStream = function(entry, options, callback) {
      var self2 = this;
      var relativeStart = 0;
      var relativeEnd = entry.compressedSize;
      if (callback == null) {
        callback = options;
        options = {};
      } else {
        if (options.decrypt != null) {
          if (!entry.isEncrypted()) {
            throw new Error("options.decrypt can only be specified for encrypted entries");
          }
          if (options.decrypt !== false)
            throw new Error("invalid options.decrypt value: " + options.decrypt);
          if (entry.isCompressed()) {
            if (options.decompress !== false)
              throw new Error("entry is encrypted and compressed, and options.decompress !== false");
          }
        }
        if (options.decompress != null) {
          if (!entry.isCompressed()) {
            throw new Error("options.decompress can only be specified for compressed entries");
          }
          if (!(options.decompress === false || options.decompress === true)) {
            throw new Error("invalid options.decompress value: " + options.decompress);
          }
        }
        if (options.start != null || options.end != null) {
          if (entry.isCompressed() && options.decompress !== false) {
            throw new Error("start/end range not allowed for compressed entry without options.decompress === false");
          }
          if (entry.isEncrypted() && options.decrypt !== false) {
            throw new Error("start/end range not allowed for encrypted entry without options.decrypt === false");
          }
        }
        if (options.start != null) {
          relativeStart = options.start;
          if (relativeStart < 0)
            throw new Error("options.start < 0");
          if (relativeStart > entry.compressedSize)
            throw new Error("options.start > entry.compressedSize");
        }
        if (options.end != null) {
          relativeEnd = options.end;
          if (relativeEnd < 0)
            throw new Error("options.end < 0");
          if (relativeEnd > entry.compressedSize)
            throw new Error("options.end > entry.compressedSize");
          if (relativeEnd < relativeStart)
            throw new Error("options.end < options.start");
        }
      }
      if (!self2.isOpen)
        return callback(new Error("closed"));
      if (entry.isEncrypted()) {
        if (options.decrypt !== false)
          return callback(new Error("entry is encrypted, and options.decrypt !== false"));
      }
      self2.reader.ref();
      var buffer = newBuffer(30);
      readAndAssertNoEof(self2.reader, buffer, 0, buffer.length, entry.relativeOffsetOfLocalHeader, function(err) {
        try {
          if (err)
            return callback(err);
          var signature = buffer.readUInt32LE(0);
          if (signature !== 67324752) {
            return callback(new Error("invalid local file header signature: 0x" + signature.toString(16)));
          }
          var fileNameLength = buffer.readUInt16LE(26);
          var extraFieldLength = buffer.readUInt16LE(28);
          var localFileHeaderEnd = entry.relativeOffsetOfLocalHeader + buffer.length + fileNameLength + extraFieldLength;
          var decompress;
          if (entry.compressionMethod === 0) {
            decompress = false;
          } else if (entry.compressionMethod === 8) {
            decompress = options.decompress != null ? options.decompress : true;
          } else {
            return callback(new Error("unsupported compression method: " + entry.compressionMethod));
          }
          var fileDataStart = localFileHeaderEnd;
          var fileDataEnd = fileDataStart + entry.compressedSize;
          if (entry.compressedSize !== 0) {
            if (fileDataEnd > self2.fileSize) {
              return callback(new Error("file data overflows file bounds: " + fileDataStart + " + " + entry.compressedSize + " > " + self2.fileSize));
            }
          }
          var readStream = self2.reader.createReadStream({
            start: fileDataStart + relativeStart,
            end: fileDataStart + relativeEnd
          });
          var endpointStream = readStream;
          if (decompress) {
            var destroyed = false;
            var inflateFilter = zlib.createInflateRaw();
            readStream.on("error", function(err2) {
              setImmediate(function() {
                if (!destroyed)
                  inflateFilter.emit("error", err2);
              });
            });
            readStream.pipe(inflateFilter);
            if (self2.validateEntrySizes) {
              endpointStream = new AssertByteCountStream(entry.uncompressedSize);
              inflateFilter.on("error", function(err2) {
                setImmediate(function() {
                  if (!destroyed)
                    endpointStream.emit("error", err2);
                });
              });
              inflateFilter.pipe(endpointStream);
            } else {
              endpointStream = inflateFilter;
            }
            endpointStream.destroy = function() {
              destroyed = true;
              if (inflateFilter !== endpointStream)
                inflateFilter.unpipe(endpointStream);
              readStream.unpipe(inflateFilter);
              readStream.destroy();
            };
          }
          callback(null, endpointStream);
        } finally {
          self2.reader.unref();
        }
      });
    };
    function Entry() {
    }
    Entry.prototype.getLastModDate = function() {
      return dosDateTimeToDate(this.lastModFileDate, this.lastModFileTime);
    };
    Entry.prototype.isEncrypted = function() {
      return (this.generalPurposeBitFlag & 1) !== 0;
    };
    Entry.prototype.isCompressed = function() {
      return this.compressionMethod === 8;
    };
    function dosDateTimeToDate(date, time) {
      var day = date & 31;
      var month = (date >> 5 & 15) - 1;
      var year = (date >> 9 & 127) + 1980;
      var millisecond = 0;
      var second = (time & 31) * 2;
      var minute = time >> 5 & 63;
      var hour = time >> 11 & 31;
      return new Date(year, month, day, hour, minute, second, millisecond);
    }
    function validateFileName(fileName) {
      if (fileName.indexOf("\\") !== -1) {
        return "invalid characters in fileName: " + fileName;
      }
      if (/^[a-zA-Z]:/.test(fileName) || /^\//.test(fileName)) {
        return "absolute path: " + fileName;
      }
      if (fileName.split("/").indexOf("..") !== -1) {
        return "invalid relative path: " + fileName;
      }
      return null;
    }
    function readAndAssertNoEof(reader, buffer, offset, length, position, callback) {
      if (length === 0) {
        return setImmediate(function() {
          callback(null, newBuffer(0));
        });
      }
      reader.read(buffer, offset, length, position, function(err, bytesRead) {
        if (err)
          return callback(err);
        if (bytesRead < length) {
          return callback(new Error("unexpected EOF"));
        }
        callback();
      });
    }
    util.inherits(AssertByteCountStream, Transform);
    function AssertByteCountStream(byteCount) {
      Transform.call(this);
      this.actualByteCount = 0;
      this.expectedByteCount = byteCount;
    }
    AssertByteCountStream.prototype._transform = function(chunk, encoding, cb) {
      this.actualByteCount += chunk.length;
      if (this.actualByteCount > this.expectedByteCount) {
        var msg = "too many bytes in the stream. expected " + this.expectedByteCount + ". got at least " + this.actualByteCount;
        return cb(new Error(msg));
      }
      cb(null, chunk);
    };
    AssertByteCountStream.prototype._flush = function(cb) {
      if (this.actualByteCount < this.expectedByteCount) {
        var msg = "not enough bytes in the stream. expected " + this.expectedByteCount + ". got only " + this.actualByteCount;
        return cb(new Error(msg));
      }
      cb();
    };
    util.inherits(RandomAccessReader, EventEmitter);
    function RandomAccessReader() {
      EventEmitter.call(this);
      this.refCount = 0;
    }
    RandomAccessReader.prototype.ref = function() {
      this.refCount += 1;
    };
    RandomAccessReader.prototype.unref = function() {
      var self2 = this;
      self2.refCount -= 1;
      if (self2.refCount > 0)
        return;
      if (self2.refCount < 0)
        throw new Error("invalid unref");
      self2.close(onCloseDone);
      function onCloseDone(err) {
        if (err)
          return self2.emit("error", err);
        self2.emit("close");
      }
    };
    RandomAccessReader.prototype.createReadStream = function(options) {
      var start = options.start;
      var end = options.end;
      if (start === end) {
        var emptyStream = new PassThrough();
        setImmediate(function() {
          emptyStream.end();
        });
        return emptyStream;
      }
      var stream2 = this._readStreamForRange(start, end);
      var destroyed = false;
      var refUnrefFilter = new RefUnrefFilter(this);
      stream2.on("error", function(err) {
        setImmediate(function() {
          if (!destroyed)
            refUnrefFilter.emit("error", err);
        });
      });
      refUnrefFilter.destroy = function() {
        stream2.unpipe(refUnrefFilter);
        refUnrefFilter.unref();
        stream2.destroy();
      };
      var byteCounter = new AssertByteCountStream(end - start);
      refUnrefFilter.on("error", function(err) {
        setImmediate(function() {
          if (!destroyed)
            byteCounter.emit("error", err);
        });
      });
      byteCounter.destroy = function() {
        destroyed = true;
        refUnrefFilter.unpipe(byteCounter);
        refUnrefFilter.destroy();
      };
      return stream2.pipe(refUnrefFilter).pipe(byteCounter);
    };
    RandomAccessReader.prototype._readStreamForRange = function(start, end) {
      throw new Error("not implemented");
    };
    RandomAccessReader.prototype.read = function(buffer, offset, length, position, callback) {
      var readStream = this.createReadStream({ start: position, end: position + length });
      var writeStream = new Writable();
      var written = 0;
      writeStream._write = function(chunk, encoding, cb) {
        chunk.copy(buffer, offset + written, 0, chunk.length);
        written += chunk.length;
        cb();
      };
      writeStream.on("finish", callback);
      readStream.on("error", function(error) {
        callback(error);
      });
      readStream.pipe(writeStream);
    };
    RandomAccessReader.prototype.close = function(callback) {
      setImmediate(callback);
    };
    util.inherits(RefUnrefFilter, PassThrough);
    function RefUnrefFilter(context) {
      PassThrough.call(this);
      this.context = context;
      this.context.ref();
      this.unreffedYet = false;
    }
    RefUnrefFilter.prototype._flush = function(cb) {
      this.unref();
      cb();
    };
    RefUnrefFilter.prototype.unref = function(cb) {
      if (this.unreffedYet)
        return;
      this.unreffedYet = true;
      this.context.unref();
    };
    var cp437 = "\0\u263A\u263B\u2665\u2666\u2663\u2660\u2022\u25D8\u25CB\u25D9\u2642\u2640\u266A\u266B\u263C\u25BA\u25C4\u2195\u203C\xB6\xA7\u25AC\u21A8\u2191\u2193\u2192\u2190\u221F\u2194\u25B2\u25BC !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u2302\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0";
    function decodeBuffer(buffer, start, end, isUtf8) {
      if (isUtf8) {
        return buffer.toString("utf8", start, end);
      } else {
        var result = "";
        for (var i = start; i < end; i++) {
          result += cp437[buffer[i]];
        }
        return result;
      }
    }
    function readUInt64LE2(buffer, offset) {
      var lower32 = buffer.readUInt32LE(offset);
      var upper32 = buffer.readUInt32LE(offset + 4);
      return upper32 * 4294967296 + lower32;
    }
    var newBuffer;
    if (typeof Buffer.allocUnsafe === "function") {
      newBuffer = function(len) {
        return Buffer.allocUnsafe(len);
      };
    } else {
      newBuffer = function(len) {
        return new Buffer(len);
      };
    }
    function defaultCallback(err) {
      if (err)
        throw err;
    }
  }
});

// node_modules/decompress-unzip/index.js
var require_decompress_unzip = __commonJS({
  "node_modules/decompress-unzip/index.js"(exports2, module2) {
    "use strict";
    var fileType2 = require_file_type5();
    var getStream = require_get_stream();
    var pify = require_pify();
    var yauzl = require_yauzl();
    var getType = (entry, mode) => {
      const IFMT = 61440;
      const IFDIR = 16384;
      const IFLNK = 40960;
      const madeBy = entry.versionMadeBy >> 8;
      if ((mode & IFMT) === IFLNK) {
        return "symlink";
      }
      if ((mode & IFMT) === IFDIR || madeBy === 0 && entry.externalFileAttributes === 16) {
        return "directory";
      }
      return "file";
    };
    var extractEntry = (entry, zip) => {
      const file = {
        mode: entry.externalFileAttributes >> 16 & 65535,
        mtime: entry.getLastModDate(),
        path: entry.fileName
      };
      file.type = getType(entry, file.mode);
      if (file.mode === 0 && file.type === "directory") {
        file.mode = 493;
      }
      if (file.mode === 0) {
        file.mode = 420;
      }
      return pify(zip.openReadStream.bind(zip))(entry).then(getStream.buffer).then((buf) => {
        file.data = buf;
        if (file.type === "symlink") {
          file.linkname = buf.toString();
        }
        return file;
      }).catch((err) => {
        zip.close();
        throw err;
      });
    };
    var extractFile = (zip) => new Promise((resolve2, reject2) => {
      const files = [];
      zip.readEntry();
      zip.on("entry", (entry) => {
        extractEntry(entry, zip).catch(reject2).then((file) => {
          files.push(file);
          zip.readEntry();
        });
      });
      zip.on("error", reject2);
      zip.on("end", () => resolve2(files));
    });
    module2.exports = () => (buf) => {
      if (!Buffer.isBuffer(buf)) {
        return Promise.reject(new TypeError(`Expected a Buffer, got ${typeof buf}`));
      }
      if (!fileType2(buf) || fileType2(buf).ext !== "zip") {
        return Promise.resolve([]);
      }
      return pify(yauzl.fromBuffer)(buf, { lazyEntries: true }).then(extractFile);
    };
  }
});

// node_modules/decompress/node_modules/make-dir/node_modules/pify/index.js
var require_pify2 = __commonJS({
  "node_modules/decompress/node_modules/make-dir/node_modules/pify/index.js"(exports2, module2) {
    "use strict";
    var processFn = (fn, opts) => function() {
      const P = opts.promiseModule;
      const args = new Array(arguments.length);
      for (let i = 0; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      return new P((resolve2, reject2) => {
        if (opts.errorFirst) {
          args.push(function(err, result) {
            if (opts.multiArgs) {
              const results = new Array(arguments.length - 1);
              for (let i = 1; i < arguments.length; i++) {
                results[i - 1] = arguments[i];
              }
              if (err) {
                results.unshift(err);
                reject2(results);
              } else {
                resolve2(results);
              }
            } else if (err) {
              reject2(err);
            } else {
              resolve2(result);
            }
          });
        } else {
          args.push(function(result) {
            if (opts.multiArgs) {
              const results = new Array(arguments.length - 1);
              for (let i = 0; i < arguments.length; i++) {
                results[i] = arguments[i];
              }
              resolve2(results);
            } else {
              resolve2(result);
            }
          });
        }
        fn.apply(this, args);
      });
    };
    module2.exports = (obj, opts) => {
      opts = Object.assign({
        exclude: [/.+(Sync|Stream)$/],
        errorFirst: true,
        promiseModule: Promise
      }, opts);
      const filter = (key) => {
        const match = (pattern) => typeof pattern === "string" ? key === pattern : pattern.test(key);
        return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
      };
      let ret;
      if (typeof obj === "function") {
        ret = function() {
          if (opts.excludeMain) {
            return obj.apply(this, arguments);
          }
          return processFn(obj, opts).apply(this, arguments);
        };
      } else {
        ret = Object.create(Object.getPrototypeOf(obj));
      }
      for (const key in obj) {
        const x = obj[key];
        ret[key] = typeof x === "function" && filter(key) ? processFn(x, opts) : x;
      }
      return ret;
    };
  }
});

// node_modules/decompress/node_modules/make-dir/index.js
var require_make_dir = __commonJS({
  "node_modules/decompress/node_modules/make-dir/index.js"(exports2, module2) {
    "use strict";
    var fs3 = require("fs");
    var path3 = require("path");
    var pify = require_pify2();
    var defaults = {
      mode: 511 & ~process.umask(),
      fs: fs3
    };
    var checkPath = (pth) => {
      if (process.platform === "win32") {
        const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path3.parse(pth).root, ""));
        if (pathHasInvalidWinCharacters) {
          const err = new Error(`Path contains invalid characters: ${pth}`);
          err.code = "EINVAL";
          throw err;
        }
      }
    };
    module2.exports = (input, opts) => Promise.resolve().then(() => {
      checkPath(input);
      opts = Object.assign({}, defaults, opts);
      const mkdir = pify(opts.fs.mkdir);
      const stat = pify(opts.fs.stat);
      const make = (pth) => {
        return mkdir(pth, opts.mode).then(() => pth).catch((err) => {
          if (err.code === "ENOENT") {
            if (err.message.includes("null bytes") || path3.dirname(pth) === pth) {
              throw err;
            }
            return make(path3.dirname(pth)).then(() => make(pth));
          }
          return stat(pth).then((stats) => stats.isDirectory() ? pth : Promise.reject()).catch(() => {
            throw err;
          });
        });
      };
      return make(path3.resolve(input));
    });
    module2.exports.sync = (input, opts) => {
      checkPath(input);
      opts = Object.assign({}, defaults, opts);
      const make = (pth) => {
        try {
          opts.fs.mkdirSync(pth, opts.mode);
        } catch (err) {
          if (err.code === "ENOENT") {
            if (err.message.includes("null bytes") || path3.dirname(pth) === pth) {
              throw err;
            }
            make(path3.dirname(pth));
            return make(pth);
          }
          try {
            if (!opts.fs.statSync(pth).isDirectory()) {
              throw new Error("The path is not a directory");
            }
          } catch (_3) {
            throw err;
          }
        }
        return pth;
      };
      return make(path3.resolve(input));
    };
  }
});

// node_modules/decompress/node_modules/pify/index.js
var require_pify3 = __commonJS({
  "node_modules/decompress/node_modules/pify/index.js"(exports2, module2) {
    "use strict";
    var processFn = function(fn, P, opts) {
      return function() {
        var that = this;
        var args = new Array(arguments.length);
        for (var i = 0; i < arguments.length; i++) {
          args[i] = arguments[i];
        }
        return new P(function(resolve2, reject2) {
          args.push(function(err, result) {
            if (err) {
              reject2(err);
            } else if (opts.multiArgs) {
              var results = new Array(arguments.length - 1);
              for (var i2 = 1; i2 < arguments.length; i2++) {
                results[i2 - 1] = arguments[i2];
              }
              resolve2(results);
            } else {
              resolve2(result);
            }
          });
          fn.apply(that, args);
        });
      };
    };
    var pify = module2.exports = function(obj, P, opts) {
      if (typeof P !== "function") {
        opts = P;
        P = Promise;
      }
      opts = opts || {};
      opts.exclude = opts.exclude || [/.+Sync$/];
      var filter = function(key) {
        var match = function(pattern) {
          return typeof pattern === "string" ? key === pattern : pattern.test(key);
        };
        return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
      };
      var ret = typeof obj === "function" ? function() {
        if (opts.excludeMain) {
          return obj.apply(this, arguments);
        }
        return processFn(obj, P, opts).apply(this, arguments);
      } : {};
      return Object.keys(obj).reduce(function(ret2, key) {
        var x = obj[key];
        ret2[key] = typeof x === "function" && filter(key) ? processFn(x, P, opts) : x;
        return ret2;
      }, ret);
    };
    pify.all = pify;
  }
});

// node_modules/is-natural-number/index.js
var require_is_natural_number = __commonJS({
  "node_modules/is-natural-number/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function isNaturalNumber(val, option) {
      if (option) {
        if (typeof option !== "object") {
          throw new TypeError(String(option) + " is not an object. Expected an object that has boolean `includeZero` property.");
        }
        if ("includeZero" in option) {
          if (typeof option.includeZero !== "boolean") {
            throw new TypeError(String(option.includeZero) + " is neither true nor false. `includeZero` option must be a Boolean value.");
          }
          if (option.includeZero && val === 0) {
            return true;
          }
        }
      }
      return Number.isSafeInteger(val) && val >= 1;
    };
  }
});

// node_modules/strip-dirs/index.js
var require_strip_dirs = __commonJS({
  "node_modules/strip-dirs/index.js"(exports2, module2) {
    "use strict";
    var path3 = require("path");
    var util = require("util");
    var isNaturalNumber = require_is_natural_number();
    module2.exports = function stripDirs(pathStr, count, option) {
      if (typeof pathStr !== "string") {
        throw new TypeError(util.inspect(pathStr) + " is not a string. First argument to strip-dirs must be a path string.");
      }
      if (path3.posix.isAbsolute(pathStr) || path3.win32.isAbsolute(pathStr)) {
        throw new Error(`${pathStr} is an absolute path. strip-dirs requires a relative path.`);
      }
      if (!isNaturalNumber(count, { includeZero: true })) {
        throw new Error("The Second argument of strip-dirs must be a natural number or 0, but received " + util.inspect(count) + ".");
      }
      if (option) {
        if (typeof option !== "object") {
          throw new TypeError(util.inspect(option) + " is not an object. Expected an object with a boolean `disallowOverflow` property.");
        }
        if (Array.isArray(option)) {
          throw new TypeError(util.inspect(option) + " is an array. Expected an object with a boolean `disallowOverflow` property.");
        }
        if ("disallowOverflow" in option && typeof option.disallowOverflow !== "boolean") {
          throw new TypeError(util.inspect(option.disallowOverflow) + " is neither true nor false. `disallowOverflow` option must be a Boolean value.");
        }
      } else {
        option = { disallowOverflow: false };
      }
      const pathComponents = path3.normalize(pathStr).split(path3.sep);
      if (pathComponents.length > 1 && pathComponents[0] === ".") {
        pathComponents.shift();
      }
      if (count > pathComponents.length - 1) {
        if (option.disallowOverflow) {
          throw new RangeError("Cannot strip more directories than there are.");
        }
        count = pathComponents.length - 1;
      }
      return path3.join.apply(null, pathComponents.slice(count));
    };
  }
});

// node_modules/decompress/index.js
var require_decompress = __commonJS({
  "node_modules/decompress/index.js"(exports2, module2) {
    "use strict";
    var path3 = require("path");
    var fs3 = require_graceful_fs();
    var decompressTar = require_decompress_tar();
    var decompressTarbz2 = require_decompress_tarbz2();
    var decompressTargz = require_decompress_targz();
    var decompressUnzip = require_decompress_unzip();
    var makeDir = require_make_dir();
    var pify = require_pify3();
    var stripDirs = require_strip_dirs();
    var fsP = pify(fs3);
    var runPlugins = (input, opts) => {
      if (opts.plugins.length === 0) {
        return Promise.resolve([]);
      }
      return Promise.all(opts.plugins.map((x) => x(input, opts))).then((files) => files.reduce((a, b) => a.concat(b)));
    };
    var safeMakeDir = (dir, realOutputPath) => {
      return fsP.realpath(dir).catch((_3) => {
        const parent = path3.dirname(dir);
        return safeMakeDir(parent, realOutputPath);
      }).then((realParentPath) => {
        if (realParentPath.indexOf(realOutputPath) !== 0) {
          throw new Error("Refusing to create a directory outside the output path.");
        }
        return makeDir(dir).then(fsP.realpath);
      });
    };
    var preventWritingThroughSymlink = (destination, realOutputPath) => {
      return fsP.readlink(destination).catch((_3) => {
        return null;
      }).then((symlinkPointsTo) => {
        if (symlinkPointsTo) {
          throw new Error("Refusing to write into a symlink");
        }
        return realOutputPath;
      });
    };
    var extractFile = (input, output, opts) => runPlugins(input, opts).then((files) => {
      if (opts.strip > 0) {
        files = files.map((x) => {
          x.path = stripDirs(x.path, opts.strip);
          return x;
        }).filter((x) => x.path !== ".");
      }
      if (typeof opts.filter === "function") {
        files = files.filter(opts.filter);
      }
      if (typeof opts.map === "function") {
        files = files.map(opts.map);
      }
      if (!output) {
        return files;
      }
      return Promise.all(files.map((x) => {
        const dest = path3.join(output, x.path);
        const mode = x.mode & ~process.umask();
        const now = new Date();
        if (x.type === "directory") {
          return makeDir(output).then((outputPath) => fsP.realpath(outputPath)).then((realOutputPath) => safeMakeDir(dest, realOutputPath)).then(() => fsP.utimes(dest, now, x.mtime)).then(() => x);
        }
        return makeDir(output).then((outputPath) => fsP.realpath(outputPath)).then((realOutputPath) => {
          return safeMakeDir(path3.dirname(dest), realOutputPath).then(() => realOutputPath);
        }).then((realOutputPath) => {
          if (x.type === "file") {
            return preventWritingThroughSymlink(dest, realOutputPath);
          }
          return realOutputPath;
        }).then((realOutputPath) => {
          return fsP.realpath(path3.dirname(dest)).then((realDestinationDir) => {
            if (realDestinationDir.indexOf(realOutputPath) !== 0) {
              throw new Error("Refusing to write outside output directory: " + realDestinationDir);
            }
          });
        }).then(() => {
          if (x.type === "link") {
            return fsP.link(x.linkname, dest);
          }
          if (x.type === "symlink" && process.platform === "win32") {
            return fsP.link(x.linkname, dest);
          }
          if (x.type === "symlink") {
            return fsP.symlink(x.linkname, dest);
          }
          return fsP.writeFile(dest, x.data, { mode });
        }).then(() => x.type === "file" && fsP.utimes(dest, now, x.mtime)).then(() => x);
      }));
    });
    module2.exports = (input, output, opts) => {
      if (typeof input !== "string" && !Buffer.isBuffer(input)) {
        return Promise.reject(new TypeError("Input file required"));
      }
      if (typeof output === "object") {
        opts = output;
        output = null;
      }
      opts = Object.assign({ plugins: [
        decompressTar(),
        decompressTarbz2(),
        decompressTargz(),
        decompressUnzip()
      ] }, opts);
      const read = typeof input === "string" ? fsP.readFile(input) : Promise.resolve(input);
      return read.then((buf) => extractFile(buf, output, opts));
    };
  }
});

// node_modules/trim-repeated/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp = __commonJS({
  "node_modules/trim-repeated/node_modules/escape-string-regexp/index.js"(exports2, module2) {
    "use strict";
    var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
    module2.exports = function(str) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      return str.replace(matchOperatorsRe, "\\$&");
    };
  }
});

// node_modules/trim-repeated/index.js
var require_trim_repeated = __commonJS({
  "node_modules/trim-repeated/index.js"(exports2, module2) {
    "use strict";
    var escapeStringRegexp = require_escape_string_regexp();
    module2.exports = function(str, target) {
      if (typeof str !== "string" || typeof target !== "string") {
        throw new TypeError("Expected a string");
      }
      return str.replace(new RegExp("(?:" + escapeStringRegexp(target) + "){2,}", "g"), target);
    };
  }
});

// node_modules/filename-reserved-regex/index.js
var require_filename_reserved_regex = __commonJS({
  "node_modules/filename-reserved-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = () => /[<>:"\/\\|?*\x00-\x1F]/g;
    module2.exports.windowsNames = () => /^(con|prn|aux|nul|com[0-9]|lpt[0-9])$/i;
  }
});

// node_modules/strip-outer/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp2 = __commonJS({
  "node_modules/strip-outer/node_modules/escape-string-regexp/index.js"(exports2, module2) {
    "use strict";
    var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
    module2.exports = function(str) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      return str.replace(matchOperatorsRe, "\\$&");
    };
  }
});

// node_modules/strip-outer/index.js
var require_strip_outer = __commonJS({
  "node_modules/strip-outer/index.js"(exports2, module2) {
    "use strict";
    var escapeStringRegexp = require_escape_string_regexp2();
    module2.exports = function(str, sub) {
      if (typeof str !== "string" || typeof sub !== "string") {
        throw new TypeError();
      }
      sub = escapeStringRegexp(sub);
      return str.replace(new RegExp("^" + sub + "|" + sub + "$", "g"), "");
    };
  }
});

// node_modules/filenamify/index.js
var require_filenamify = __commonJS({
  "node_modules/filenamify/index.js"(exports2, module2) {
    "use strict";
    var path3 = require("path");
    var trimRepeated = require_trim_repeated();
    var filenameReservedRegex = require_filename_reserved_regex();
    var stripOuter = require_strip_outer();
    var MAX_FILENAME_LENGTH = 100;
    var reControlChars = /[\u0000-\u001f\u0080-\u009f]/g;
    var reRelativePath = /^\.+/;
    var filenamify = (string, options = {}) => {
      if (typeof string !== "string") {
        throw new TypeError("Expected a string");
      }
      const replacement = options.replacement === void 0 ? "!" : options.replacement;
      if (filenameReservedRegex().test(replacement) && reControlChars.test(replacement)) {
        throw new Error("Replacement string cannot contain reserved filename characters");
      }
      string = string.replace(filenameReservedRegex(), replacement);
      string = string.replace(reControlChars, replacement);
      string = string.replace(reRelativePath, replacement);
      if (replacement.length > 0) {
        string = trimRepeated(string, replacement);
        string = string.length > 1 ? stripOuter(string, replacement) : string;
      }
      string = filenameReservedRegex.windowsNames().test(string) ? string + replacement : string;
      string = string.slice(0, MAX_FILENAME_LENGTH);
      return string;
    };
    filenamify.path = (filePath, options) => {
      filePath = path3.resolve(filePath);
      return path3.join(path3.dirname(filePath), filenamify(path3.basename(filePath), options));
    };
    module2.exports = filenamify;
    module2.exports.default = filenamify;
  }
});

// node_modules/pump/index.js
var require_pump = __commonJS({
  "node_modules/pump/index.js"(exports2, module2) {
    var once = require_once();
    var eos = require_end_of_stream();
    var fs3 = require("fs");
    var noop = function() {
    };
    var ancient = /^v?\.0/.test(process.version);
    var isFn = function(fn) {
      return typeof fn === "function";
    };
    var isFS = function(stream2) {
      if (!ancient)
        return false;
      if (!fs3)
        return false;
      return (stream2 instanceof (fs3.ReadStream || noop) || stream2 instanceof (fs3.WriteStream || noop)) && isFn(stream2.close);
    };
    var isRequest = function(stream2) {
      return stream2.setHeader && isFn(stream2.abort);
    };
    var destroyer = function(stream2, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream2.on("close", function() {
        closed = true;
      });
      eos(stream2, { readable: reading, writable: writing }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isFS(stream2))
          return stream2.close(noop);
        if (isRequest(stream2))
          return stream2.abort();
        if (isFn(stream2.destroy))
          return stream2.destroy();
        callback(err || new Error("stream was destroyed"));
      };
    };
    var call = function(fn) {
      fn();
    };
    var pipe = function(from, to) {
      return from.pipe(to);
    };
    var pump = function() {
      var streams = Array.prototype.slice.call(arguments);
      var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2)
        throw new Error("pump requires two streams per minimum");
      var error;
      var destroys = streams.map(function(stream2, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream2, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    };
    module2.exports = pump;
  }
});

// node_modules/get-stream/buffer-stream.js
var require_buffer_stream2 = __commonJS({
  "node_modules/get-stream/buffer-stream.js"(exports2, module2) {
    "use strict";
    var { PassThrough } = require("stream");
    module2.exports = (options) => {
      options = Object.assign({}, options);
      const { array } = options;
      let { encoding } = options;
      const buffer = encoding === "buffer";
      let objectMode = false;
      if (array) {
        objectMode = !(encoding || buffer);
      } else {
        encoding = encoding || "utf8";
      }
      if (buffer) {
        encoding = null;
      }
      let len = 0;
      const ret = [];
      const stream2 = new PassThrough({ objectMode });
      if (encoding) {
        stream2.setEncoding(encoding);
      }
      stream2.on("data", (chunk) => {
        ret.push(chunk);
        if (objectMode) {
          len = ret.length;
        } else {
          len += chunk.length;
        }
      });
      stream2.getBufferedValue = () => {
        if (array) {
          return ret;
        }
        return buffer ? Buffer.concat(ret, len) : ret.join("");
      };
      stream2.getBufferedLength = () => len;
      return stream2;
    };
  }
});

// node_modules/get-stream/index.js
var require_get_stream2 = __commonJS({
  "node_modules/get-stream/index.js"(exports2, module2) {
    "use strict";
    var pump = require_pump();
    var bufferStream = require_buffer_stream2();
    var MaxBufferError = class extends Error {
      constructor() {
        super("maxBuffer exceeded");
        this.name = "MaxBufferError";
      }
    };
    function getStream(inputStream, options) {
      if (!inputStream) {
        return Promise.reject(new Error("Expected a stream"));
      }
      options = Object.assign({ maxBuffer: Infinity }, options);
      const { maxBuffer } = options;
      let stream2;
      return new Promise((resolve2, reject2) => {
        const rejectPromise = (error) => {
          if (error) {
            error.bufferedData = stream2.getBufferedValue();
          }
          reject2(error);
        };
        stream2 = pump(inputStream, bufferStream(options), (error) => {
          if (error) {
            rejectPromise(error);
            return;
          }
          resolve2();
        });
        stream2.on("data", () => {
          if (stream2.getBufferedLength() > maxBuffer) {
            rejectPromise(new MaxBufferError());
          }
        });
      }).then(() => stream2.getBufferedValue());
    }
    module2.exports = getStream;
    module2.exports.buffer = (stream2, options) => getStream(stream2, Object.assign({}, options, { encoding: "buffer" }));
    module2.exports.array = (stream2, options) => getStream(stream2, Object.assign({}, options, { array: true }));
    module2.exports.MaxBufferError = MaxBufferError;
  }
});

// node_modules/strict-uri-encode/index.js
var require_strict_uri_encode = __commonJS({
  "node_modules/strict-uri-encode/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    };
  }
});

// node_modules/decode-uri-component/index.js
var require_decode_uri_component = __commonJS({
  "node_modules/decode-uri-component/index.js"(exports2, module2) {
    "use strict";
    var token = "%[a-f0-9]{2}";
    var singleMatcher = new RegExp("(" + token + ")|([^%]+?)", "gi");
    var multiMatcher = new RegExp("(" + token + ")+", "gi");
    function decodeComponents(components, split) {
      try {
        return [decodeURIComponent(components.join(""))];
      } catch (err) {
      }
      if (components.length === 1) {
        return components;
      }
      split = split || 1;
      var left = components.slice(0, split);
      var right = components.slice(split);
      return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
    }
    function decode(input) {
      try {
        return decodeURIComponent(input);
      } catch (err) {
        var tokens = input.match(singleMatcher) || [];
        for (var i = 1; i < tokens.length; i++) {
          input = decodeComponents(tokens, i).join("");
          tokens = input.match(singleMatcher) || [];
        }
        return input;
      }
    }
    function customDecodeURIComponent(input) {
      var replaceMap = {
        "%FE%FF": "\uFFFD\uFFFD",
        "%FF%FE": "\uFFFD\uFFFD"
      };
      var match = multiMatcher.exec(input);
      while (match) {
        try {
          replaceMap[match[0]] = decodeURIComponent(match[0]);
        } catch (err) {
          var result = decode(match[0]);
          if (result !== match[0]) {
            replaceMap[match[0]] = result;
          }
        }
        match = multiMatcher.exec(input);
      }
      replaceMap["%C2"] = "\uFFFD";
      var entries = Object.keys(replaceMap);
      for (var i = 0; i < entries.length; i++) {
        var key = entries[i];
        input = input.replace(new RegExp(key, "g"), replaceMap[key]);
      }
      return input;
    }
    module2.exports = function(encodedURI) {
      if (typeof encodedURI !== "string") {
        throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
      }
      try {
        encodedURI = encodedURI.replace(/\+/g, " ");
        return decodeURIComponent(encodedURI);
      } catch (err) {
        return customDecodeURIComponent(encodedURI);
      }
    };
  }
});

// node_modules/query-string/index.js
var require_query_string = __commonJS({
  "node_modules/query-string/index.js"(exports2) {
    "use strict";
    var strictUriEncode = require_strict_uri_encode();
    var objectAssign = require_object_assign();
    var decodeComponent = require_decode_uri_component();
    function encoderForArrayFormat(opts) {
      switch (opts.arrayFormat) {
        case "index":
          return function(key, value, index) {
            return value === null ? [
              encode(key, opts),
              "[",
              index,
              "]"
            ].join("") : [
              encode(key, opts),
              "[",
              encode(index, opts),
              "]=",
              encode(value, opts)
            ].join("");
          };
        case "bracket":
          return function(key, value) {
            return value === null ? encode(key, opts) : [
              encode(key, opts),
              "[]=",
              encode(value, opts)
            ].join("");
          };
        default:
          return function(key, value) {
            return value === null ? encode(key, opts) : [
              encode(key, opts),
              "=",
              encode(value, opts)
            ].join("");
          };
      }
    }
    function parserForArrayFormat(opts) {
      var result;
      switch (opts.arrayFormat) {
        case "index":
          return function(key, value, accumulator) {
            result = /\[(\d*)\]$/.exec(key);
            key = key.replace(/\[\d*\]$/, "");
            if (!result) {
              accumulator[key] = value;
              return;
            }
            if (accumulator[key] === void 0) {
              accumulator[key] = {};
            }
            accumulator[key][result[1]] = value;
          };
        case "bracket":
          return function(key, value, accumulator) {
            result = /(\[\])$/.exec(key);
            key = key.replace(/\[\]$/, "");
            if (!result) {
              accumulator[key] = value;
              return;
            } else if (accumulator[key] === void 0) {
              accumulator[key] = [value];
              return;
            }
            accumulator[key] = [].concat(accumulator[key], value);
          };
        default:
          return function(key, value, accumulator) {
            if (accumulator[key] === void 0) {
              accumulator[key] = value;
              return;
            }
            accumulator[key] = [].concat(accumulator[key], value);
          };
      }
    }
    function encode(value, opts) {
      if (opts.encode) {
        return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
      }
      return value;
    }
    function keysSorter(input) {
      if (Array.isArray(input)) {
        return input.sort();
      } else if (typeof input === "object") {
        return keysSorter(Object.keys(input)).sort(function(a, b) {
          return Number(a) - Number(b);
        }).map(function(key) {
          return input[key];
        });
      }
      return input;
    }
    function extract(str) {
      var queryStart = str.indexOf("?");
      if (queryStart === -1) {
        return "";
      }
      return str.slice(queryStart + 1);
    }
    function parse2(str, opts) {
      opts = objectAssign({ arrayFormat: "none" }, opts);
      var formatter = parserForArrayFormat(opts);
      var ret = /* @__PURE__ */ Object.create(null);
      if (typeof str !== "string") {
        return ret;
      }
      str = str.trim().replace(/^[?#&]/, "");
      if (!str) {
        return ret;
      }
      str.split("&").forEach(function(param) {
        var parts = param.replace(/\+/g, " ").split("=");
        var key = parts.shift();
        var val = parts.length > 0 ? parts.join("=") : void 0;
        val = val === void 0 ? null : decodeComponent(val);
        formatter(decodeComponent(key), val, ret);
      });
      return Object.keys(ret).sort().reduce(function(result, key) {
        var val = ret[key];
        if (Boolean(val) && typeof val === "object" && !Array.isArray(val)) {
          result[key] = keysSorter(val);
        } else {
          result[key] = val;
        }
        return result;
      }, /* @__PURE__ */ Object.create(null));
    }
    exports2.extract = extract;
    exports2.parse = parse2;
    exports2.stringify = function(obj, opts) {
      var defaults = {
        encode: true,
        strict: true,
        arrayFormat: "none"
      };
      opts = objectAssign(defaults, opts);
      if (opts.sort === false) {
        opts.sort = function() {
        };
      }
      var formatter = encoderForArrayFormat(opts);
      return obj ? Object.keys(obj).sort(opts.sort).map(function(key) {
        var val = obj[key];
        if (val === void 0) {
          return "";
        }
        if (val === null) {
          return encode(key, opts);
        }
        if (Array.isArray(val)) {
          var result = [];
          val.slice().forEach(function(val2) {
            if (val2 === void 0) {
              return;
            }
            result.push(formatter(key, val2, result.length));
          });
          return result.join("&");
        }
        return encode(key, opts) + "=" + encode(val, opts);
      }).filter(function(x) {
        return x.length > 0;
      }).join("&") : "";
    };
    exports2.parseUrl = function(str, opts) {
      return {
        url: str.split("?")[0] || "",
        query: parse2(extract(str), opts)
      };
    };
  }
});

// node_modules/prepend-http/index.js
var require_prepend_http = __commonJS({
  "node_modules/prepend-http/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (url, opts) => {
      if (typeof url !== "string") {
        throw new TypeError(`Expected \`url\` to be of type \`string\`, got \`${typeof url}\``);
      }
      url = url.trim();
      opts = Object.assign({ https: false }, opts);
      if (/^\.*\/|^(?!localhost)\w+:/.test(url)) {
        return url;
      }
      return url.replace(/^(?!(?:\w+:)?\/\/)/, opts.https ? "https://" : "http://");
    };
  }
});

// node_modules/is-plain-obj/index.js
var require_is_plain_obj = __commonJS({
  "node_modules/is-plain-obj/index.js"(exports2, module2) {
    "use strict";
    var toString = Object.prototype.toString;
    module2.exports = function(x) {
      var prototype;
      return toString.call(x) === "[object Object]" && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
    };
  }
});

// node_modules/sort-keys/index.js
var require_sort_keys = __commonJS({
  "node_modules/sort-keys/index.js"(exports2, module2) {
    "use strict";
    var isPlainObj = require_is_plain_obj();
    module2.exports = (obj, opts) => {
      if (!isPlainObj(obj)) {
        throw new TypeError("Expected a plain object");
      }
      opts = opts || {};
      if (typeof opts === "function") {
        throw new TypeError("Specify the compare function as an option instead");
      }
      const deep = opts.deep;
      const seenInput = [];
      const seenOutput = [];
      const sortKeys = (x) => {
        const seenIndex = seenInput.indexOf(x);
        if (seenIndex !== -1) {
          return seenOutput[seenIndex];
        }
        const ret = {};
        const keys = Object.keys(x).sort(opts.compare);
        seenInput.push(x);
        seenOutput.push(ret);
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const val = x[key];
          if (deep && Array.isArray(val)) {
            const retArr = [];
            for (let j = 0; j < val.length; j++) {
              retArr[j] = isPlainObj(val[j]) ? sortKeys(val[j]) : val[j];
            }
            ret[key] = retArr;
            continue;
          }
          ret[key] = deep && isPlainObj(val) ? sortKeys(val) : val;
        }
        return ret;
      };
      return sortKeys(obj);
    };
  }
});

// node_modules/normalize-url/index.js
var require_normalize_url = __commonJS({
  "node_modules/normalize-url/index.js"(exports2, module2) {
    "use strict";
    var url = require("url");
    var punycode = require("punycode");
    var queryString = require_query_string();
    var prependHttp = require_prepend_http();
    var sortKeys = require_sort_keys();
    var DEFAULT_PORTS = {
      "http:": 80,
      "https:": 443,
      "ftp:": 21
    };
    var slashedProtocol = {
      http: true,
      https: true,
      ftp: true,
      gopher: true,
      file: true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    function testParameter(name, filters) {
      return filters.some((filter) => filter instanceof RegExp ? filter.test(name) : filter === name);
    }
    module2.exports = (str, opts) => {
      opts = Object.assign({
        normalizeProtocol: true,
        normalizeHttps: false,
        stripFragment: true,
        stripWWW: true,
        removeQueryParameters: [/^utm_\w+/i],
        removeTrailingSlash: true,
        removeDirectoryIndex: false,
        sortQueryParameters: true
      }, opts);
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      const hasRelativeProtocol = str.startsWith("//");
      str = prependHttp(str.trim()).replace(/^\/\//, "http://");
      const urlObj = url.parse(str);
      if (opts.normalizeHttps && urlObj.protocol === "https:") {
        urlObj.protocol = "http:";
      }
      if (!urlObj.hostname && !urlObj.pathname) {
        throw new Error("Invalid URL");
      }
      delete urlObj.host;
      delete urlObj.query;
      if (opts.stripFragment) {
        delete urlObj.hash;
      }
      const port = DEFAULT_PORTS[urlObj.protocol];
      if (Number(urlObj.port) === port) {
        delete urlObj.port;
      }
      if (urlObj.pathname) {
        urlObj.pathname = urlObj.pathname.replace(/\/{2,}/g, "/");
      }
      if (urlObj.pathname) {
        urlObj.pathname = decodeURI(urlObj.pathname);
      }
      if (opts.removeDirectoryIndex === true) {
        opts.removeDirectoryIndex = [/^index\.[a-z]+$/];
      }
      if (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length > 0) {
        let pathComponents = urlObj.pathname.split("/");
        const lastComponent = pathComponents[pathComponents.length - 1];
        if (testParameter(lastComponent, opts.removeDirectoryIndex)) {
          pathComponents = pathComponents.slice(0, pathComponents.length - 1);
          urlObj.pathname = pathComponents.slice(1).join("/") + "/";
        }
      }
      if (slashedProtocol[urlObj.protocol]) {
        const domain = urlObj.protocol + "//" + urlObj.hostname;
        const relative = url.resolve(domain, urlObj.pathname);
        urlObj.pathname = relative.replace(domain, "");
      }
      if (urlObj.hostname) {
        urlObj.hostname = punycode.toUnicode(urlObj.hostname).toLowerCase();
        urlObj.hostname = urlObj.hostname.replace(/\.$/, "");
        if (opts.stripWWW) {
          urlObj.hostname = urlObj.hostname.replace(/^www\./, "");
        }
      }
      if (urlObj.search === "?") {
        delete urlObj.search;
      }
      const queryParameters = queryString.parse(urlObj.search);
      if (Array.isArray(opts.removeQueryParameters)) {
        for (const key in queryParameters) {
          if (testParameter(key, opts.removeQueryParameters)) {
            delete queryParameters[key];
          }
        }
      }
      if (opts.sortQueryParameters) {
        urlObj.search = queryString.stringify(sortKeys(queryParameters));
      }
      if (urlObj.search !== null) {
        urlObj.search = decodeURIComponent(urlObj.search);
      }
      str = url.format(urlObj);
      if (opts.removeTrailingSlash || urlObj.pathname === "/") {
        str = str.replace(/\/$/, "");
      }
      if (hasRelativeProtocol && !opts.normalizeProtocol) {
        str = str.replace(/^http:\/\//, "//");
      }
      return str;
    };
  }
});

// node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js
var require_buffer_stream3 = __commonJS({
  "node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js"(exports2, module2) {
    "use strict";
    var PassThrough = require("stream").PassThrough;
    module2.exports = (opts) => {
      opts = Object.assign({}, opts);
      const array = opts.array;
      let encoding = opts.encoding;
      const buffer = encoding === "buffer";
      let objectMode = false;
      if (array) {
        objectMode = !(encoding || buffer);
      } else {
        encoding = encoding || "utf8";
      }
      if (buffer) {
        encoding = null;
      }
      let len = 0;
      const ret = [];
      const stream2 = new PassThrough({ objectMode });
      if (encoding) {
        stream2.setEncoding(encoding);
      }
      stream2.on("data", (chunk) => {
        ret.push(chunk);
        if (objectMode) {
          len = ret.length;
        } else {
          len += chunk.length;
        }
      });
      stream2.getBufferedValue = () => {
        if (array) {
          return ret;
        }
        return buffer ? Buffer.concat(ret, len) : ret.join("");
      };
      stream2.getBufferedLength = () => len;
      return stream2;
    };
  }
});

// node_modules/cacheable-request/node_modules/get-stream/index.js
var require_get_stream3 = __commonJS({
  "node_modules/cacheable-request/node_modules/get-stream/index.js"(exports2, module2) {
    "use strict";
    var bufferStream = require_buffer_stream3();
    function getStream(inputStream, opts) {
      if (!inputStream) {
        return Promise.reject(new Error("Expected a stream"));
      }
      opts = Object.assign({ maxBuffer: Infinity }, opts);
      const maxBuffer = opts.maxBuffer;
      let stream2;
      let clean;
      const p = new Promise((resolve2, reject2) => {
        const error = (err) => {
          if (err) {
            err.bufferedData = stream2.getBufferedValue();
          }
          reject2(err);
        };
        stream2 = bufferStream(opts);
        inputStream.once("error", error);
        inputStream.pipe(stream2);
        stream2.on("data", () => {
          if (stream2.getBufferedLength() > maxBuffer) {
            reject2(new Error("maxBuffer exceeded"));
          }
        });
        stream2.once("error", error);
        stream2.on("end", resolve2);
        clean = () => {
          if (inputStream.unpipe) {
            inputStream.unpipe(stream2);
          }
        };
      });
      p.then(clean, clean);
      return p.then(() => stream2.getBufferedValue());
    }
    module2.exports = getStream;
    module2.exports.buffer = (stream2, opts) => getStream(stream2, Object.assign({}, opts, { encoding: "buffer" }));
    module2.exports.array = (stream2, opts) => getStream(stream2, Object.assign({}, opts, { array: true }));
  }
});

// node_modules/http-cache-semantics/node4/index.js
var require_node4 = __commonJS({
  "node_modules/http-cache-semantics/node4/index.js"(exports2, module2) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var statusCodeCacheableByDefault = [200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501];
    var understoodStatuses = [200, 203, 204, 300, 301, 302, 303, 307, 308, 404, 405, 410, 414, 501];
    var hopByHopHeaders = { "connection": true, "keep-alive": true, "proxy-authenticate": true, "proxy-authorization": true, "te": true, "trailer": true, "transfer-encoding": true, "upgrade": true };
    var excludedFromRevalidationUpdate = {
      "content-length": true,
      "content-encoding": true,
      "transfer-encoding": true,
      "content-range": true
    };
    function parseCacheControl(header) {
      var cc = {};
      if (!header)
        return cc;
      var parts = header.trim().split(/\s*,\s*/);
      for (var _iterator = parts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var part = _ref;
        var _part$split = part.split(/\s*=\s*/, 2), k = _part$split[0], v = _part$split[1];
        cc[k] = v === void 0 ? true : v.replace(/^"|"$/g, "");
      }
      return cc;
    }
    function formatCacheControl(cc) {
      var parts = [];
      for (var k in cc) {
        var v = cc[k];
        parts.push(v === true ? k : k + "=" + v);
      }
      if (!parts.length) {
        return void 0;
      }
      return parts.join(", ");
    }
    module2.exports = function() {
      function CachePolicy(req, res) {
        var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, shared = _ref2.shared, cacheHeuristic = _ref2.cacheHeuristic, immutableMinTimeToLive = _ref2.immutableMinTimeToLive, ignoreCargoCult = _ref2.ignoreCargoCult, _fromObject = _ref2._fromObject;
        _classCallCheck(this, CachePolicy);
        if (_fromObject) {
          this._fromObject(_fromObject);
          return;
        }
        if (!res || !res.headers) {
          throw Error("Response headers missing");
        }
        this._assertRequestHasHeaders(req);
        this._responseTime = this.now();
        this._isShared = shared !== false;
        this._cacheHeuristic = cacheHeuristic !== void 0 ? cacheHeuristic : 0.1;
        this._immutableMinTtl = immutableMinTimeToLive !== void 0 ? immutableMinTimeToLive : 24 * 3600 * 1e3;
        this._status = "status" in res ? res.status : 200;
        this._resHeaders = res.headers;
        this._rescc = parseCacheControl(res.headers["cache-control"]);
        this._method = "method" in req ? req.method : "GET";
        this._url = req.url;
        this._host = req.headers.host;
        this._noAuthorization = !req.headers.authorization;
        this._reqHeaders = res.headers.vary ? req.headers : null;
        this._reqcc = parseCacheControl(req.headers["cache-control"]);
        if (ignoreCargoCult && "pre-check" in this._rescc && "post-check" in this._rescc) {
          delete this._rescc["pre-check"];
          delete this._rescc["post-check"];
          delete this._rescc["no-cache"];
          delete this._rescc["no-store"];
          delete this._rescc["must-revalidate"];
          this._resHeaders = Object.assign({}, this._resHeaders, { "cache-control": formatCacheControl(this._rescc) });
          delete this._resHeaders.expires;
          delete this._resHeaders.pragma;
        }
        if (!res.headers["cache-control"] && /no-cache/.test(res.headers.pragma)) {
          this._rescc["no-cache"] = true;
        }
      }
      CachePolicy.prototype.now = function now() {
        return Date.now();
      };
      CachePolicy.prototype.storable = function storable() {
        return !!(!this._reqcc["no-store"] && (this._method === "GET" || this._method === "HEAD" || this._method === "POST" && this._hasExplicitExpiration()) && understoodStatuses.indexOf(this._status) !== -1 && !this._rescc["no-store"] && (!this._isShared || !this._rescc.private) && (!this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) && (this._resHeaders.expires || this._rescc.public || this._rescc["max-age"] || this._rescc["s-maxage"] || statusCodeCacheableByDefault.indexOf(this._status) !== -1));
      };
      CachePolicy.prototype._hasExplicitExpiration = function _hasExplicitExpiration() {
        return this._isShared && this._rescc["s-maxage"] || this._rescc["max-age"] || this._resHeaders.expires;
      };
      CachePolicy.prototype._assertRequestHasHeaders = function _assertRequestHasHeaders(req) {
        if (!req || !req.headers) {
          throw Error("Request headers missing");
        }
      };
      CachePolicy.prototype.satisfiesWithoutRevalidation = function satisfiesWithoutRevalidation(req) {
        this._assertRequestHasHeaders(req);
        var requestCC = parseCacheControl(req.headers["cache-control"]);
        if (requestCC["no-cache"] || /no-cache/.test(req.headers.pragma)) {
          return false;
        }
        if (requestCC["max-age"] && this.age() > requestCC["max-age"]) {
          return false;
        }
        if (requestCC["min-fresh"] && this.timeToLive() < 1e3 * requestCC["min-fresh"]) {
          return false;
        }
        if (this.stale()) {
          var allowsStale = requestCC["max-stale"] && !this._rescc["must-revalidate"] && (requestCC["max-stale"] === true || requestCC["max-stale"] > this.age() - this.maxAge());
          if (!allowsStale) {
            return false;
          }
        }
        return this._requestMatches(req, false);
      };
      CachePolicy.prototype._requestMatches = function _requestMatches(req, allowHeadMethod) {
        return (!this._url || this._url === req.url) && this._host === req.headers.host && (!req.method || this._method === req.method || allowHeadMethod && req.method === "HEAD") && this._varyMatches(req);
      };
      CachePolicy.prototype._allowsStoringAuthenticated = function _allowsStoringAuthenticated() {
        return this._rescc["must-revalidate"] || this._rescc.public || this._rescc["s-maxage"];
      };
      CachePolicy.prototype._varyMatches = function _varyMatches(req) {
        if (!this._resHeaders.vary) {
          return true;
        }
        if (this._resHeaders.vary === "*") {
          return false;
        }
        var fields = this._resHeaders.vary.trim().toLowerCase().split(/\s*,\s*/);
        for (var _iterator2 = fields, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator](); ; ) {
          var _ref3;
          if (_isArray2) {
            if (_i2 >= _iterator2.length)
              break;
            _ref3 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done)
              break;
            _ref3 = _i2.value;
          }
          var name = _ref3;
          if (req.headers[name] !== this._reqHeaders[name])
            return false;
        }
        return true;
      };
      CachePolicy.prototype._copyWithoutHopByHopHeaders = function _copyWithoutHopByHopHeaders(inHeaders) {
        var headers = {};
        for (var name in inHeaders) {
          if (hopByHopHeaders[name])
            continue;
          headers[name] = inHeaders[name];
        }
        if (inHeaders.connection) {
          var tokens = inHeaders.connection.trim().split(/\s*,\s*/);
          for (var _iterator3 = tokens, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator](); ; ) {
            var _ref4;
            if (_isArray3) {
              if (_i3 >= _iterator3.length)
                break;
              _ref4 = _iterator3[_i3++];
            } else {
              _i3 = _iterator3.next();
              if (_i3.done)
                break;
              _ref4 = _i3.value;
            }
            var _name = _ref4;
            delete headers[_name];
          }
        }
        if (headers.warning) {
          var warnings = headers.warning.split(/,/).filter(function(warning) {
            return !/^\s*1[0-9][0-9]/.test(warning);
          });
          if (!warnings.length) {
            delete headers.warning;
          } else {
            headers.warning = warnings.join(",").trim();
          }
        }
        return headers;
      };
      CachePolicy.prototype.responseHeaders = function responseHeaders() {
        var headers = this._copyWithoutHopByHopHeaders(this._resHeaders);
        var age = this.age();
        if (age > 3600 * 24 && !this._hasExplicitExpiration() && this.maxAge() > 3600 * 24) {
          headers.warning = (headers.warning ? `${headers.warning}, ` : "") + '113 - "rfc7234 5.5.4"';
        }
        headers.age = `${Math.round(age)}`;
        return headers;
      };
      CachePolicy.prototype.date = function date() {
        var dateValue = Date.parse(this._resHeaders.date);
        var maxClockDrift = 8 * 3600 * 1e3;
        if (Number.isNaN(dateValue) || dateValue < this._responseTime - maxClockDrift || dateValue > this._responseTime + maxClockDrift) {
          return this._responseTime;
        }
        return dateValue;
      };
      CachePolicy.prototype.age = function age() {
        var age2 = Math.max(0, (this._responseTime - this.date()) / 1e3);
        if (this._resHeaders.age) {
          var ageValue = this._ageValue();
          if (ageValue > age2)
            age2 = ageValue;
        }
        var residentTime = (this.now() - this._responseTime) / 1e3;
        return age2 + residentTime;
      };
      CachePolicy.prototype._ageValue = function _ageValue() {
        var ageValue = parseInt(this._resHeaders.age);
        return isFinite(ageValue) ? ageValue : 0;
      };
      CachePolicy.prototype.maxAge = function maxAge() {
        if (!this.storable() || this._rescc["no-cache"]) {
          return 0;
        }
        if (this._isShared && this._resHeaders["set-cookie"] && !this._rescc.public && !this._rescc.immutable) {
          return 0;
        }
        if (this._resHeaders.vary === "*") {
          return 0;
        }
        if (this._isShared) {
          if (this._rescc["proxy-revalidate"]) {
            return 0;
          }
          if (this._rescc["s-maxage"]) {
            return parseInt(this._rescc["s-maxage"], 10);
          }
        }
        if (this._rescc["max-age"]) {
          return parseInt(this._rescc["max-age"], 10);
        }
        var defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;
        var dateValue = this.date();
        if (this._resHeaders.expires) {
          var expires = Date.parse(this._resHeaders.expires);
          if (Number.isNaN(expires) || expires < dateValue) {
            return 0;
          }
          return Math.max(defaultMinTtl, (expires - dateValue) / 1e3);
        }
        if (this._resHeaders["last-modified"]) {
          var lastModified = Date.parse(this._resHeaders["last-modified"]);
          if (isFinite(lastModified) && dateValue > lastModified) {
            return Math.max(defaultMinTtl, (dateValue - lastModified) / 1e3 * this._cacheHeuristic);
          }
        }
        return defaultMinTtl;
      };
      CachePolicy.prototype.timeToLive = function timeToLive() {
        return Math.max(0, this.maxAge() - this.age()) * 1e3;
      };
      CachePolicy.prototype.stale = function stale() {
        return this.maxAge() <= this.age();
      };
      CachePolicy.fromObject = function fromObject(obj) {
        return new this(void 0, void 0, { _fromObject: obj });
      };
      CachePolicy.prototype._fromObject = function _fromObject(obj) {
        if (this._responseTime)
          throw Error("Reinitialized");
        if (!obj || obj.v !== 1)
          throw Error("Invalid serialization");
        this._responseTime = obj.t;
        this._isShared = obj.sh;
        this._cacheHeuristic = obj.ch;
        this._immutableMinTtl = obj.imm !== void 0 ? obj.imm : 24 * 3600 * 1e3;
        this._status = obj.st;
        this._resHeaders = obj.resh;
        this._rescc = obj.rescc;
        this._method = obj.m;
        this._url = obj.u;
        this._host = obj.h;
        this._noAuthorization = obj.a;
        this._reqHeaders = obj.reqh;
        this._reqcc = obj.reqcc;
      };
      CachePolicy.prototype.toObject = function toObject() {
        return {
          v: 1,
          t: this._responseTime,
          sh: this._isShared,
          ch: this._cacheHeuristic,
          imm: this._immutableMinTtl,
          st: this._status,
          resh: this._resHeaders,
          rescc: this._rescc,
          m: this._method,
          u: this._url,
          h: this._host,
          a: this._noAuthorization,
          reqh: this._reqHeaders,
          reqcc: this._reqcc
        };
      };
      CachePolicy.prototype.revalidationHeaders = function revalidationHeaders(incomingReq) {
        this._assertRequestHasHeaders(incomingReq);
        var headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);
        delete headers["if-range"];
        if (!this._requestMatches(incomingReq, true) || !this.storable()) {
          delete headers["if-none-match"];
          delete headers["if-modified-since"];
          return headers;
        }
        if (this._resHeaders.etag) {
          headers["if-none-match"] = headers["if-none-match"] ? `${headers["if-none-match"]}, ${this._resHeaders.etag}` : this._resHeaders.etag;
        }
        var forbidsWeakValidators = headers["accept-ranges"] || headers["if-match"] || headers["if-unmodified-since"] || this._method && this._method != "GET";
        if (forbidsWeakValidators) {
          delete headers["if-modified-since"];
          if (headers["if-none-match"]) {
            var etags = headers["if-none-match"].split(/,/).filter(function(etag) {
              return !/^\s*W\//.test(etag);
            });
            if (!etags.length) {
              delete headers["if-none-match"];
            } else {
              headers["if-none-match"] = etags.join(",").trim();
            }
          }
        } else if (this._resHeaders["last-modified"] && !headers["if-modified-since"]) {
          headers["if-modified-since"] = this._resHeaders["last-modified"];
        }
        return headers;
      };
      CachePolicy.prototype.revalidatedPolicy = function revalidatedPolicy(request2, response) {
        this._assertRequestHasHeaders(request2);
        if (!response || !response.headers) {
          throw Error("Response headers missing");
        }
        var matches = false;
        if (response.status !== void 0 && response.status != 304) {
          matches = false;
        } else if (response.headers.etag && !/^\s*W\//.test(response.headers.etag)) {
          matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\s*W\//, "") === response.headers.etag;
        } else if (this._resHeaders.etag && response.headers.etag) {
          matches = this._resHeaders.etag.replace(/^\s*W\//, "") === response.headers.etag.replace(/^\s*W\//, "");
        } else if (this._resHeaders["last-modified"]) {
          matches = this._resHeaders["last-modified"] === response.headers["last-modified"];
        } else {
          if (!this._resHeaders.etag && !this._resHeaders["last-modified"] && !response.headers.etag && !response.headers["last-modified"]) {
            matches = true;
          }
        }
        if (!matches) {
          return {
            policy: new this.constructor(request2, response),
            modified: true
          };
        }
        var headers = {};
        for (var k in this._resHeaders) {
          headers[k] = k in response.headers && !excludedFromRevalidationUpdate[k] ? response.headers[k] : this._resHeaders[k];
        }
        var newResponse = Object.assign({}, response, {
          status: this._status,
          method: this._method,
          headers
        });
        return {
          policy: new this.constructor(request2, newResponse),
          modified: false
        };
      };
      return CachePolicy;
    }();
  }
});

// node_modules/lowercase-keys/index.js
var require_lowercase_keys = __commonJS({
  "node_modules/lowercase-keys/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function(obj) {
      var ret = {};
      var keys = Object.keys(Object(obj));
      for (var i = 0; i < keys.length; i++) {
        ret[keys[i].toLowerCase()] = obj[keys[i]];
      }
      return ret;
    };
  }
});

// node_modules/responselike/src/index.js
var require_src = __commonJS({
  "node_modules/responselike/src/index.js"(exports2, module2) {
    "use strict";
    var Readable = require("stream").Readable;
    var lowercaseKeys = require_lowercase_keys();
    var Response = class extends Readable {
      constructor(statusCode, headers, body, url) {
        if (typeof statusCode !== "number") {
          throw new TypeError("Argument `statusCode` should be a number");
        }
        if (typeof headers !== "object") {
          throw new TypeError("Argument `headers` should be an object");
        }
        if (!(body instanceof Buffer)) {
          throw new TypeError("Argument `body` should be a buffer");
        }
        if (typeof url !== "string") {
          throw new TypeError("Argument `url` should be a string");
        }
        super();
        this.statusCode = statusCode;
        this.headers = lowercaseKeys(headers);
        this.body = body;
        this.url = url;
      }
      _read() {
        this.push(this.body);
        this.push(null);
      }
    };
    module2.exports = Response;
  }
});

// node_modules/cacheable-request/node_modules/lowercase-keys/index.js
var require_lowercase_keys2 = __commonJS({
  "node_modules/cacheable-request/node_modules/lowercase-keys/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function(obj) {
      var ret = {};
      var keys = Object.keys(Object(obj));
      for (var i = 0; i < keys.length; i++) {
        ret[keys[i].toLowerCase()] = obj[keys[i]];
      }
      return ret;
    };
  }
});

// node_modules/mimic-response/index.js
var require_mimic_response = __commonJS({
  "node_modules/mimic-response/index.js"(exports2, module2) {
    "use strict";
    var knownProps = [
      "destroy",
      "setTimeout",
      "socket",
      "headers",
      "trailers",
      "rawHeaders",
      "statusCode",
      "httpVersion",
      "httpVersionMinor",
      "httpVersionMajor",
      "rawTrailers",
      "statusMessage"
    ];
    module2.exports = (fromStream, toStream) => {
      const fromProps = new Set(Object.keys(fromStream).concat(knownProps));
      for (const prop of fromProps) {
        if (prop in toStream) {
          continue;
        }
        toStream[prop] = typeof fromStream[prop] === "function" ? fromStream[prop].bind(fromStream) : fromStream[prop];
      }
    };
  }
});

// node_modules/clone-response/src/index.js
var require_src2 = __commonJS({
  "node_modules/clone-response/src/index.js"(exports2, module2) {
    "use strict";
    var PassThrough = require("stream").PassThrough;
    var mimicResponse = require_mimic_response();
    var cloneResponse = (response) => {
      if (!(response && response.pipe)) {
        throw new TypeError("Parameter `response` must be a response stream.");
      }
      const clone = new PassThrough();
      mimicResponse(response, clone);
      return response.pipe(clone);
    };
    module2.exports = cloneResponse;
  }
});

// node_modules/cacheable-request/node_modules/json-buffer/index.js
var require_json_buffer = __commonJS({
  "node_modules/cacheable-request/node_modules/json-buffer/index.js"(exports2) {
    exports2.stringify = function stringify(o) {
      if (typeof o == "undefined")
        return o;
      if (o && Buffer.isBuffer(o))
        return JSON.stringify(":base64:" + o.toString("base64"));
      if (o && o.toJSON)
        o = o.toJSON();
      if (o && typeof o === "object") {
        var s = "";
        var array = Array.isArray(o);
        s = array ? "[" : "{";
        var first = true;
        for (var k in o) {
          var ignore = typeof o[k] == "function" || !array && typeof o[k] === "undefined";
          if (Object.hasOwnProperty.call(o, k) && !ignore) {
            if (!first)
              s += ",";
            first = false;
            if (array) {
              if (o[k] == void 0)
                s += "null";
              else
                s += stringify(o[k]);
            } else if (o[k] !== void 0) {
              s += stringify(k) + ":" + stringify(o[k]);
            }
          }
        }
        s += array ? "]" : "}";
        return s;
      } else if (typeof o === "string") {
        return JSON.stringify(/^:/.test(o) ? ":" + o : o);
      } else if (typeof o === "undefined") {
        return "null";
      } else
        return JSON.stringify(o);
    };
    exports2.parse = function(s) {
      return JSON.parse(s, function(key, value) {
        if (typeof value === "string") {
          if (/^:base64:/.test(value))
            return new Buffer(value.substring(8), "base64");
          else
            return /^:/.test(value) ? value.substring(1) : value;
        }
        return value;
      });
    };
  }
});

// node_modules/cacheable-request/node_modules/keyv/src/index.js
var require_src3 = __commonJS({
  "node_modules/cacheable-request/node_modules/keyv/src/index.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("events");
    var JSONB = require_json_buffer();
    var loadStore = (opts) => {
      const adapters = {
        redis: "@keyv/redis",
        mongodb: "@keyv/mongo",
        mongo: "@keyv/mongo",
        sqlite: "@keyv/sqlite",
        postgresql: "@keyv/postgres",
        postgres: "@keyv/postgres",
        mysql: "@keyv/mysql"
      };
      if (opts.adapter || opts.uri) {
        const adapter = opts.adapter || /^[^:]*/.exec(opts.uri)[0];
        return new (require(adapters[adapter]))(opts);
      }
      return /* @__PURE__ */ new Map();
    };
    var Keyv = class extends EventEmitter {
      constructor(uri, opts) {
        super();
        this.opts = Object.assign({ namespace: "keyv" }, typeof uri === "string" ? { uri } : uri, opts);
        if (!this.opts.store) {
          const adapterOpts = Object.assign({}, this.opts);
          this.opts.store = loadStore(adapterOpts);
        }
        if (typeof this.opts.store.on === "function") {
          this.opts.store.on("error", (err) => this.emit("error", err));
        }
        this.opts.store.namespace = this.opts.namespace;
      }
      _getKeyPrefix(key) {
        return `${this.opts.namespace}:${key}`;
      }
      get(key) {
        key = this._getKeyPrefix(key);
        const store = this.opts.store;
        return Promise.resolve().then(() => store.get(key)).then((data) => {
          data = typeof data === "string" ? JSONB.parse(data) : data;
          if (data === void 0) {
            return void 0;
          }
          if (typeof data.expires === "number" && Date.now() > data.expires) {
            this.delete(key);
            return void 0;
          }
          return data.value;
        });
      }
      set(key, value, ttl) {
        key = this._getKeyPrefix(key);
        if (typeof ttl === "undefined") {
          ttl = this.opts.ttl;
        }
        if (ttl === 0) {
          ttl = void 0;
        }
        const store = this.opts.store;
        return Promise.resolve().then(() => {
          const expires = typeof ttl === "number" ? Date.now() + ttl : null;
          value = { value, expires };
          return store.set(key, JSONB.stringify(value), ttl);
        }).then(() => true);
      }
      delete(key) {
        key = this._getKeyPrefix(key);
        const store = this.opts.store;
        return Promise.resolve().then(() => store.delete(key));
      }
      clear() {
        const store = this.opts.store;
        return Promise.resolve().then(() => store.clear());
      }
    };
    module2.exports = Keyv;
  }
});

// node_modules/cacheable-request/src/index.js
var require_src4 = __commonJS({
  "node_modules/cacheable-request/src/index.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("events");
    var urlLib = require("url");
    var normalizeUrl = require_normalize_url();
    var getStream = require_get_stream3();
    var CachePolicy = require_node4();
    var Response = require_src();
    var lowercaseKeys = require_lowercase_keys2();
    var cloneResponse = require_src2();
    var Keyv = require_src3();
    var CacheableRequest = class {
      constructor(request2, cacheAdapter) {
        if (typeof request2 !== "function") {
          throw new TypeError("Parameter `request` must be a function");
        }
        this.cache = new Keyv({
          uri: typeof cacheAdapter === "string" && cacheAdapter,
          store: typeof cacheAdapter !== "string" && cacheAdapter,
          namespace: "cacheable-request"
        });
        return this.createCacheableRequest(request2);
      }
      createCacheableRequest(request2) {
        return (opts, cb) => {
          if (typeof opts === "string") {
            opts = urlLib.parse(opts);
          }
          opts = Object.assign({
            headers: {},
            method: "GET",
            cache: true,
            strictTtl: false,
            automaticFailover: false
          }, opts);
          opts.headers = lowercaseKeys(opts.headers);
          const ee = new EventEmitter();
          const url = normalizeUrl(urlLib.format(opts));
          const key = `${opts.method}:${url}`;
          let revalidate = false;
          let madeRequest = false;
          const makeRequest = (opts2) => {
            madeRequest = true;
            const handler = (response) => {
              if (revalidate) {
                const revalidatedPolicy = CachePolicy.fromObject(revalidate.cachePolicy).revalidatedPolicy(opts2, response);
                if (!revalidatedPolicy.modified) {
                  const headers = revalidatedPolicy.policy.responseHeaders();
                  response = new Response(response.statusCode, headers, revalidate.body, revalidate.url);
                  response.cachePolicy = revalidatedPolicy.policy;
                  response.fromCache = true;
                }
              }
              if (!response.fromCache) {
                response.cachePolicy = new CachePolicy(opts2, response);
                response.fromCache = false;
              }
              let clonedResponse;
              if (opts2.cache && response.cachePolicy.storable()) {
                clonedResponse = cloneResponse(response);
                getStream.buffer(response).then((body) => {
                  const value = {
                    cachePolicy: response.cachePolicy.toObject(),
                    url: response.url,
                    statusCode: response.fromCache ? revalidate.statusCode : response.statusCode,
                    body
                  };
                  const ttl = opts2.strictTtl ? response.cachePolicy.timeToLive() : void 0;
                  return this.cache.set(key, value, ttl);
                }).catch((err) => ee.emit("error", new CacheableRequest.CacheError(err)));
              } else if (opts2.cache && revalidate) {
                this.cache.delete(key).catch((err) => ee.emit("error", new CacheableRequest.CacheError(err)));
              }
              ee.emit("response", clonedResponse || response);
              if (typeof cb === "function") {
                cb(clonedResponse || response);
              }
            };
            try {
              const req = request2(opts2, handler);
              ee.emit("request", req);
            } catch (err) {
              ee.emit("error", new CacheableRequest.RequestError(err));
            }
          };
          const get = (opts2) => Promise.resolve().then(() => opts2.cache ? this.cache.get(key) : void 0).then((cacheEntry) => {
            if (typeof cacheEntry === "undefined") {
              return makeRequest(opts2);
            }
            const policy = CachePolicy.fromObject(cacheEntry.cachePolicy);
            if (policy.satisfiesWithoutRevalidation(opts2)) {
              const headers = policy.responseHeaders();
              const response = new Response(cacheEntry.statusCode, headers, cacheEntry.body, cacheEntry.url);
              response.cachePolicy = policy;
              response.fromCache = true;
              ee.emit("response", response);
              if (typeof cb === "function") {
                cb(response);
              }
            } else {
              revalidate = cacheEntry;
              opts2.headers = policy.revalidationHeaders(opts2);
              makeRequest(opts2);
            }
          });
          this.cache.on("error", (err) => ee.emit("error", new CacheableRequest.CacheError(err)));
          get(opts).catch((err) => {
            if (opts.automaticFailover && !madeRequest) {
              makeRequest(opts);
            }
            ee.emit("error", new CacheableRequest.CacheError(err));
          });
          return ee;
        };
      }
    };
    CacheableRequest.RequestError = class extends Error {
      constructor(err) {
        super(err.message);
        this.name = "RequestError";
        Object.assign(this, err);
      }
    };
    CacheableRequest.CacheError = class extends Error {
      constructor(err) {
        super(err.message);
        this.name = "CacheError";
        Object.assign(this, err);
      }
    };
    module2.exports = CacheableRequest;
  }
});

// node_modules/duplexer3/index.js
var require_duplexer3 = __commonJS({
  "node_modules/duplexer3/index.js"(exports2, module2) {
    "use strict";
    var stream2 = require("stream");
    function DuplexWrapper(options, writable, readable) {
      if (typeof readable === "undefined") {
        readable = writable;
        writable = options;
        options = null;
      }
      stream2.Duplex.call(this, options);
      if (typeof readable.read !== "function") {
        readable = new stream2.Readable(options).wrap(readable);
      }
      this._writable = writable;
      this._readable = readable;
      this._waiting = false;
      var self2 = this;
      writable.once("finish", function() {
        self2.end();
      });
      this.once("finish", function() {
        writable.end();
      });
      readable.on("readable", function() {
        if (self2._waiting) {
          self2._waiting = false;
          self2._read();
        }
      });
      readable.once("end", function() {
        self2.push(null);
      });
      if (!options || typeof options.bubbleErrors === "undefined" || options.bubbleErrors) {
        writable.on("error", function(err) {
          self2.emit("error", err);
        });
        readable.on("error", function(err) {
          self2.emit("error", err);
        });
      }
    }
    DuplexWrapper.prototype = Object.create(stream2.Duplex.prototype, { constructor: { value: DuplexWrapper } });
    DuplexWrapper.prototype._write = function _write(input, encoding, done) {
      this._writable.write(input, encoding, done);
    };
    DuplexWrapper.prototype._read = function _read() {
      var buf;
      var reads = 0;
      while ((buf = this._readable.read()) !== null) {
        this.push(buf);
        reads++;
      }
      if (reads === 0) {
        this._waiting = true;
      }
    };
    module2.exports = function duplex2(options, writable, readable) {
      return new DuplexWrapper(options, writable, readable);
    };
    module2.exports.DuplexWrapper = DuplexWrapper;
  }
});

// node_modules/from2/index.js
var require_from2 = __commonJS({
  "node_modules/from2/index.js"(exports2, module2) {
    var Readable = require_readable_browser().Readable;
    var inherits = require_inherits_browser();
    module2.exports = from2;
    from2.ctor = ctor;
    from2.obj = obj;
    var Proto = ctor();
    function toFunction(list) {
      list = list.slice();
      return function(_3, cb) {
        var err = null;
        var item = list.length ? list.shift() : null;
        if (item instanceof Error) {
          err = item;
          item = null;
        }
        cb(err, item);
      };
    }
    function from2(opts, read) {
      if (typeof opts !== "object" || Array.isArray(opts)) {
        read = opts;
        opts = {};
      }
      var rs = new Proto(opts);
      rs._from = Array.isArray(read) ? toFunction(read) : read || noop;
      return rs;
    }
    function ctor(opts, read) {
      if (typeof opts === "function") {
        read = opts;
        opts = {};
      }
      opts = defaults(opts);
      inherits(Class, Readable);
      function Class(override) {
        if (!(this instanceof Class))
          return new Class(override);
        this._reading = false;
        this._callback = check;
        this.destroyed = false;
        Readable.call(this, override || opts);
        var self2 = this;
        var hwm = this._readableState.highWaterMark;
        function check(err, data) {
          if (self2.destroyed)
            return;
          if (err)
            return self2.destroy(err);
          if (data === null)
            return self2.push(null);
          self2._reading = false;
          if (self2.push(data))
            self2._read(hwm);
        }
      }
      Class.prototype._from = read || noop;
      Class.prototype._read = function(size) {
        if (this._reading || this.destroyed)
          return;
        this._reading = true;
        this._from(size, this._callback);
      };
      Class.prototype.destroy = function(err) {
        if (this.destroyed)
          return;
        this.destroyed = true;
        var self2 = this;
        process.nextTick(function() {
          if (err)
            self2.emit("error", err);
          self2.emit("close");
        });
      };
      return Class;
    }
    function obj(opts, read) {
      if (typeof opts === "function" || Array.isArray(opts)) {
        read = opts;
        opts = {};
      }
      opts = defaults(opts);
      opts.objectMode = true;
      opts.highWaterMark = 16;
      return from2(opts, read);
    }
    function noop() {
    }
    function defaults(opts) {
      opts = opts || {};
      return opts;
    }
  }
});

// node_modules/p-is-promise/index.js
var require_p_is_promise = __commonJS({
  "node_modules/p-is-promise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (x) => x instanceof Promise || x !== null && typeof x === "object" && typeof x.then === "function" && typeof x.catch === "function";
  }
});

// node_modules/into-stream/index.js
var require_into_stream = __commonJS({
  "node_modules/into-stream/index.js"(exports2, module2) {
    "use strict";
    var from = require_from2();
    var pIsPromise = require_p_is_promise();
    module2.exports = (x) => {
      if (Array.isArray(x)) {
        x = x.slice();
      }
      let promise;
      let iterator;
      prepare(x);
      function prepare(value) {
        x = value;
        promise = pIsPromise(x) ? x : null;
        const shouldIterate = !promise && x[Symbol.iterator] && typeof x !== "string" && !Buffer.isBuffer(x);
        iterator = shouldIterate ? x[Symbol.iterator]() : null;
      }
      return from(function reader(size, cb) {
        if (promise) {
          promise.then(prepare).then(() => reader.call(this, size, cb), cb);
          return;
        }
        if (iterator) {
          const obj = iterator.next();
          setImmediate(cb, null, obj.done ? null : obj.value);
          return;
        }
        if (x.length === 0) {
          setImmediate(cb, null, null);
          return;
        }
        const chunk = x.slice(0, size);
        x = x.slice(size);
        setImmediate(cb, null, chunk);
      });
    };
    module2.exports.obj = (x) => {
      if (Array.isArray(x)) {
        x = x.slice();
      }
      let promise;
      let iterator;
      prepare(x);
      function prepare(value) {
        x = value;
        promise = pIsPromise(x) ? x : null;
        iterator = !promise && x[Symbol.iterator] ? x[Symbol.iterator]() : null;
      }
      return from.obj(function reader(size, cb) {
        if (promise) {
          promise.then(prepare).then(() => reader.call(this, size, cb), cb);
          return;
        }
        if (iterator) {
          const obj = iterator.next();
          setImmediate(cb, null, obj.done ? null : obj.value);
          return;
        }
        this.push(x);
        setImmediate(cb, null, null);
      });
    };
  }
});

// node_modules/@sindresorhus/is/dist/index.js
var require_dist = __commonJS({
  "node_modules/@sindresorhus/is/dist/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var util = require("util");
    var toString = Object.prototype.toString;
    var isOfType = (type) => (value) => typeof value === type;
    var getObjectType = (value) => {
      const objectName = toString.call(value).slice(8, -1);
      if (objectName) {
        return objectName;
      }
      return null;
    };
    var isObjectOfType = (typeName) => (value) => {
      return getObjectType(value) === typeName;
    };
    function is(value) {
      if (value === null) {
        return "null";
      }
      if (value === true || value === false) {
        return "boolean";
      }
      const type = typeof value;
      if (type === "undefined") {
        return "undefined";
      }
      if (type === "string") {
        return "string";
      }
      if (type === "number") {
        return "number";
      }
      if (type === "symbol") {
        return "symbol";
      }
      if (is.function_(value)) {
        return "Function";
      }
      if (Array.isArray(value)) {
        return "Array";
      }
      if (Buffer.isBuffer(value)) {
        return "Buffer";
      }
      const tagType = getObjectType(value);
      if (tagType) {
        return tagType;
      }
      if (value instanceof String || value instanceof Boolean || value instanceof Number) {
        throw new TypeError("Please don't use object wrappers for primitive types");
      }
      return "Object";
    }
    (function(is2) {
      const isObject = (value) => typeof value === "object";
      is2.undefined = isOfType("undefined");
      is2.string = isOfType("string");
      is2.number = isOfType("number");
      is2.function_ = isOfType("function");
      is2.null_ = (value) => value === null;
      is2.class_ = (value) => is2.function_(value) && value.toString().startsWith("class ");
      is2.boolean = (value) => value === true || value === false;
      is2.symbol = isOfType("symbol");
      is2.array = Array.isArray;
      is2.buffer = Buffer.isBuffer;
      is2.nullOrUndefined = (value) => is2.null_(value) || is2.undefined(value);
      is2.object = (value) => !is2.nullOrUndefined(value) && (is2.function_(value) || isObject(value));
      is2.iterable = (value) => !is2.nullOrUndefined(value) && is2.function_(value[Symbol.iterator]);
      is2.generator = (value) => is2.iterable(value) && is2.function_(value.next) && is2.function_(value.throw);
      is2.nativePromise = isObjectOfType("Promise");
      const hasPromiseAPI = (value) => !is2.null_(value) && isObject(value) && is2.function_(value.then) && is2.function_(value.catch);
      is2.promise = (value) => is2.nativePromise(value) || hasPromiseAPI(value);
      const isFunctionOfType = (type) => (value) => is2.function_(value) && is2.function_(value.constructor) && value.constructor.name === type;
      is2.generatorFunction = isFunctionOfType("GeneratorFunction");
      is2.asyncFunction = isFunctionOfType("AsyncFunction");
      is2.boundFunction = (value) => is2.function_(value) && !value.hasOwnProperty("prototype");
      is2.regExp = isObjectOfType("RegExp");
      is2.date = isObjectOfType("Date");
      is2.error = isObjectOfType("Error");
      is2.map = isObjectOfType("Map");
      is2.set = isObjectOfType("Set");
      is2.weakMap = isObjectOfType("WeakMap");
      is2.weakSet = isObjectOfType("WeakSet");
      is2.int8Array = isObjectOfType("Int8Array");
      is2.uint8Array = isObjectOfType("Uint8Array");
      is2.uint8ClampedArray = isObjectOfType("Uint8ClampedArray");
      is2.int16Array = isObjectOfType("Int16Array");
      is2.uint16Array = isObjectOfType("Uint16Array");
      is2.int32Array = isObjectOfType("Int32Array");
      is2.uint32Array = isObjectOfType("Uint32Array");
      is2.float32Array = isObjectOfType("Float32Array");
      is2.float64Array = isObjectOfType("Float64Array");
      is2.arrayBuffer = isObjectOfType("ArrayBuffer");
      is2.sharedArrayBuffer = isObjectOfType("SharedArrayBuffer");
      is2.dataView = isObjectOfType("DataView");
      is2.directInstanceOf = (instance, klass) => is2.object(instance) && is2.object(klass) && Object.getPrototypeOf(instance) === klass.prototype;
      is2.truthy = (value) => Boolean(value);
      is2.falsy = (value) => !value;
      is2.nan = (value) => Number.isNaN(value);
      const primitiveTypes = /* @__PURE__ */ new Set([
        "undefined",
        "string",
        "number",
        "boolean",
        "symbol"
      ]);
      is2.primitive = (value) => is2.null_(value) || primitiveTypes.has(typeof value);
      is2.integer = (value) => Number.isInteger(value);
      is2.safeInteger = (value) => Number.isSafeInteger(value);
      is2.plainObject = (value) => {
        let prototype;
        return getObjectType(value) === "Object" && (prototype = Object.getPrototypeOf(value), prototype === null || prototype === Object.getPrototypeOf({}));
      };
      const typedArrayTypes = /* @__PURE__ */ new Set([
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Uint16Array",
        "Int32Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array"
      ]);
      is2.typedArray = (value) => {
        const objectType = getObjectType(value);
        if (objectType === null) {
          return false;
        }
        return typedArrayTypes.has(objectType);
      };
      const isValidLength = (value) => is2.safeInteger(value) && value > -1;
      is2.arrayLike = (value) => !is2.nullOrUndefined(value) && !is2.function_(value) && isValidLength(value.length);
      is2.inRange = (value, range) => {
        if (is2.number(range)) {
          return value >= Math.min(0, range) && value <= Math.max(range, 0);
        }
        if (is2.array(range) && range.length === 2) {
          return value >= Math.min.apply(null, range) && value <= Math.max.apply(null, range);
        }
        throw new TypeError(`Invalid range: ${util.inspect(range)}`);
      };
      const NODE_TYPE_ELEMENT = 1;
      const DOM_PROPERTIES_TO_CHECK = [
        "innerHTML",
        "ownerDocument",
        "style",
        "attributes",
        "nodeValue"
      ];
      is2.domElement = (value) => is2.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is2.string(value.nodeName) && !is2.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every((property) => property in value);
      is2.nodeStream = (value) => !is2.nullOrUndefined(value) && isObject(value) && is2.function_(value.pipe);
      is2.infinite = (value) => value === Infinity || value === -Infinity;
      const isAbsoluteMod2 = (value) => (rem) => is2.integer(rem) && Math.abs(rem % 2) === value;
      is2.even = isAbsoluteMod2(0);
      is2.odd = isAbsoluteMod2(1);
      const isWhiteSpaceString = (value) => is2.string(value) && /\S/.test(value) === false;
      const isEmptyStringOrArray = (value) => (is2.string(value) || is2.array(value)) && value.length === 0;
      const isEmptyObject = (value) => !is2.map(value) && !is2.set(value) && is2.object(value) && Object.keys(value).length === 0;
      const isEmptyMapOrSet = (value) => (is2.map(value) || is2.set(value)) && value.size === 0;
      is2.empty = (value) => is2.falsy(value) || isEmptyStringOrArray(value) || isEmptyObject(value) || isEmptyMapOrSet(value);
      is2.emptyOrWhitespace = (value) => is2.empty(value) || isWhiteSpaceString(value);
      const predicateOnArray = (method, predicate, args) => {
        const values = Array.prototype.slice.call(args, 1);
        if (is2.function_(predicate) === false) {
          throw new TypeError(`Invalid predicate: ${util.inspect(predicate)}`);
        }
        if (values.length === 0) {
          throw new TypeError("Invalid number of values");
        }
        return method.call(values, predicate);
      };
      function any(predicate) {
        return predicateOnArray(Array.prototype.some, predicate, arguments);
      }
      is2.any = any;
      function all(predicate) {
        return predicateOnArray(Array.prototype.every, predicate, arguments);
      }
      is2.all = all;
    })(is || (is = {}));
    Object.defineProperties(is, {
      class: {
        value: is.class_
      },
      function: {
        value: is.function_
      },
      null: {
        value: is.null_
      }
    });
    exports2.default = is;
    module2.exports = is;
    module2.exports.default = is;
  }
});

// node_modules/got/node_modules/get-stream/buffer-stream.js
var require_buffer_stream4 = __commonJS({
  "node_modules/got/node_modules/get-stream/buffer-stream.js"(exports2, module2) {
    "use strict";
    var PassThrough = require("stream").PassThrough;
    module2.exports = (opts) => {
      opts = Object.assign({}, opts);
      const array = opts.array;
      let encoding = opts.encoding;
      const buffer = encoding === "buffer";
      let objectMode = false;
      if (array) {
        objectMode = !(encoding || buffer);
      } else {
        encoding = encoding || "utf8";
      }
      if (buffer) {
        encoding = null;
      }
      let len = 0;
      const ret = [];
      const stream2 = new PassThrough({ objectMode });
      if (encoding) {
        stream2.setEncoding(encoding);
      }
      stream2.on("data", (chunk) => {
        ret.push(chunk);
        if (objectMode) {
          len = ret.length;
        } else {
          len += chunk.length;
        }
      });
      stream2.getBufferedValue = () => {
        if (array) {
          return ret;
        }
        return buffer ? Buffer.concat(ret, len) : ret.join("");
      };
      stream2.getBufferedLength = () => len;
      return stream2;
    };
  }
});

// node_modules/got/node_modules/get-stream/index.js
var require_get_stream4 = __commonJS({
  "node_modules/got/node_modules/get-stream/index.js"(exports2, module2) {
    "use strict";
    var bufferStream = require_buffer_stream4();
    function getStream(inputStream, opts) {
      if (!inputStream) {
        return Promise.reject(new Error("Expected a stream"));
      }
      opts = Object.assign({ maxBuffer: Infinity }, opts);
      const maxBuffer = opts.maxBuffer;
      let stream2;
      let clean;
      const p = new Promise((resolve2, reject2) => {
        const error = (err) => {
          if (err) {
            err.bufferedData = stream2.getBufferedValue();
          }
          reject2(err);
        };
        stream2 = bufferStream(opts);
        inputStream.once("error", error);
        inputStream.pipe(stream2);
        stream2.on("data", () => {
          if (stream2.getBufferedLength() > maxBuffer) {
            reject2(new Error("maxBuffer exceeded"));
          }
        });
        stream2.once("error", error);
        stream2.on("end", resolve2);
        clean = () => {
          if (inputStream.unpipe) {
            inputStream.unpipe(stream2);
          }
        };
      });
      p.then(clean, clean);
      return p.then(() => stream2.getBufferedValue());
    }
    module2.exports = getStream;
    module2.exports.buffer = (stream2, opts) => getStream(stream2, Object.assign({}, opts, { encoding: "buffer" }));
    module2.exports.array = (stream2, opts) => getStream(stream2, Object.assign({}, opts, { array: true }));
  }
});

// node_modules/timed-out/index.js
var require_timed_out = __commonJS({
  "node_modules/timed-out/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function(req, time) {
      if (req.timeoutTimer) {
        return req;
      }
      var delays = isNaN(time) ? time : { socket: time, connect: time };
      var host = req._headers ? " to " + req._headers.host : "";
      if (delays.connect !== void 0) {
        req.timeoutTimer = setTimeout(function timeoutHandler() {
          req.abort();
          var e = new Error("Connection timed out on request" + host);
          e.code = "ETIMEDOUT";
          req.emit("error", e);
        }, delays.connect);
      }
      req.on("socket", function assign(socket) {
        if (!(socket.connecting || socket._connecting)) {
          connect();
          return;
        }
        socket.once("connect", connect);
      });
      function clear() {
        if (req.timeoutTimer) {
          clearTimeout(req.timeoutTimer);
          req.timeoutTimer = null;
        }
      }
      function connect() {
        clear();
        if (delays.socket !== void 0) {
          req.setTimeout(delays.socket, function socketTimeoutHandler() {
            req.abort();
            var e = new Error("Socket timed out on request" + host);
            e.code = "ESOCKETTIMEDOUT";
            req.emit("error", e);
          });
        }
      }
      return req.on("error", clear);
    };
  }
});

// node_modules/url-parse-lax/index.js
var require_url_parse_lax = __commonJS({
  "node_modules/url-parse-lax/index.js"(exports2, module2) {
    "use strict";
    var url = require("url");
    var prependHttp = require_prepend_http();
    module2.exports = (input, options) => {
      if (typeof input !== "string") {
        throw new TypeError(`Expected \`url\` to be of type \`string\`, got \`${typeof input}\` instead.`);
      }
      const finalUrl = prependHttp(input, Object.assign({ https: true }, options));
      return url.parse(finalUrl);
    };
  }
});

// node_modules/url-to-options/index.js
var require_url_to_options = __commonJS({
  "node_modules/url-to-options/index.js"(exports2, module2) {
    "use strict";
    function urlToOptions(url) {
      var options = {
        protocol: url.protocol,
        hostname: url.hostname,
        hash: url.hash,
        search: url.search,
        pathname: url.pathname,
        path: `${url.pathname}${url.search}`,
        href: url.href
      };
      if (url.port !== "") {
        options.port = Number(url.port);
      }
      if (url.username || url.password) {
        options.auth = `${url.username}:${url.password}`;
      }
      return options;
    }
    module2.exports = urlToOptions;
  }
});

// (disabled):node_modules/decompress-response/index.js
var require_decompress_response = __commonJS({
  "(disabled):node_modules/decompress-response/index.js"() {
  }
});

// node_modules/is-retry-allowed/index.js
var require_is_retry_allowed = __commonJS({
  "node_modules/is-retry-allowed/index.js"(exports2, module2) {
    "use strict";
    var WHITELIST = [
      "ETIMEDOUT",
      "ECONNRESET",
      "EADDRINUSE",
      "ESOCKETTIMEDOUT",
      "ECONNREFUSED",
      "EPIPE",
      "EHOSTUNREACH",
      "EAI_AGAIN"
    ];
    var BLACKLIST = [
      "ENOTFOUND",
      "ENETUNREACH",
      "UNABLE_TO_GET_ISSUER_CERT",
      "UNABLE_TO_GET_CRL",
      "UNABLE_TO_DECRYPT_CERT_SIGNATURE",
      "UNABLE_TO_DECRYPT_CRL_SIGNATURE",
      "UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY",
      "CERT_SIGNATURE_FAILURE",
      "CRL_SIGNATURE_FAILURE",
      "CERT_NOT_YET_VALID",
      "CERT_HAS_EXPIRED",
      "CRL_NOT_YET_VALID",
      "CRL_HAS_EXPIRED",
      "ERROR_IN_CERT_NOT_BEFORE_FIELD",
      "ERROR_IN_CERT_NOT_AFTER_FIELD",
      "ERROR_IN_CRL_LAST_UPDATE_FIELD",
      "ERROR_IN_CRL_NEXT_UPDATE_FIELD",
      "OUT_OF_MEM",
      "DEPTH_ZERO_SELF_SIGNED_CERT",
      "SELF_SIGNED_CERT_IN_CHAIN",
      "UNABLE_TO_GET_ISSUER_CERT_LOCALLY",
      "UNABLE_TO_VERIFY_LEAF_SIGNATURE",
      "CERT_CHAIN_TOO_LONG",
      "CERT_REVOKED",
      "INVALID_CA",
      "PATH_LENGTH_EXCEEDED",
      "INVALID_PURPOSE",
      "CERT_UNTRUSTED",
      "CERT_REJECTED"
    ];
    module2.exports = function(err) {
      if (!err || !err.code) {
        return true;
      }
      if (WHITELIST.indexOf(err.code) !== -1) {
        return true;
      }
      if (BLACKLIST.indexOf(err.code) !== -1) {
        return false;
      }
      return true;
    };
  }
});

// node_modules/has-symbol-support-x/index.js
var require_has_symbol_support_x = __commonJS({
  "node_modules/has-symbol-support-x/index.js"(exports2, module2) {
    "use strict";
    module2.exports = typeof Symbol === "function" && typeof Symbol("") === "symbol";
  }
});

// node_modules/has-to-string-tag-x/index.js
var require_has_to_string_tag_x = __commonJS({
  "node_modules/has-to-string-tag-x/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_has_symbol_support_x() && typeof Symbol.toStringTag === "symbol";
  }
});

// node_modules/is-object/index.js
var require_is_object = __commonJS({
  "node_modules/is-object/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function isObject(x) {
      return typeof x === "object" && x !== null;
    };
  }
});

// node_modules/isurl/index.js
var require_isurl = __commonJS({
  "node_modules/isurl/index.js"(exports2, module2) {
    "use strict";
    var hasToStringTag = require_has_to_string_tag_x();
    var isObject = require_is_object();
    var toString = Object.prototype.toString;
    var urlClass = "[object URL]";
    var hash = "hash";
    var host = "host";
    var hostname = "hostname";
    var href = "href";
    var password = "password";
    var pathname = "pathname";
    var port = "port";
    var protocol = "protocol";
    var search = "search";
    var username = "username";
    var isURL = (url, supportIncomplete) => {
      if (!isObject(url))
        return false;
      if (!hasToStringTag && toString.call(url) === urlClass)
        return true;
      if (!(href in url))
        return false;
      if (!(protocol in url))
        return false;
      if (!(username in url))
        return false;
      if (!(password in url))
        return false;
      if (!(hostname in url))
        return false;
      if (!(port in url))
        return false;
      if (!(host in url))
        return false;
      if (!(pathname in url))
        return false;
      if (!(search in url))
        return false;
      if (!(hash in url))
        return false;
      if (supportIncomplete !== true) {
        if (!isObject(url.searchParams))
          return false;
      }
      return true;
    };
    isURL.lenient = (url) => {
      return isURL(url, true);
    };
    module2.exports = isURL;
  }
});

// node_modules/p-cancelable/index.js
var require_p_cancelable = __commonJS({
  "node_modules/p-cancelable/index.js"(exports2, module2) {
    "use strict";
    var CancelError = class extends Error {
      constructor() {
        super("Promise was canceled");
        this.name = "CancelError";
      }
      get isCanceled() {
        return true;
      }
    };
    var PCancelable = class {
      static fn(userFn) {
        return function() {
          const args = [].slice.apply(arguments);
          return new PCancelable((resolve2, reject2, onCancel) => {
            args.push(onCancel);
            userFn.apply(null, args).then(resolve2, reject2);
          });
        };
      }
      constructor(executor) {
        this._cancelHandlers = [];
        this._isPending = true;
        this._isCanceled = false;
        this._promise = new Promise((resolve2, reject2) => {
          this._reject = reject2;
          return executor((value) => {
            this._isPending = false;
            resolve2(value);
          }, (error) => {
            this._isPending = false;
            reject2(error);
          }, (handler) => {
            this._cancelHandlers.push(handler);
          });
        });
      }
      then(onFulfilled, onRejected) {
        return this._promise.then(onFulfilled, onRejected);
      }
      catch(onRejected) {
        return this._promise.catch(onRejected);
      }
      finally(onFinally) {
        return this._promise.finally(onFinally);
      }
      cancel() {
        if (!this._isPending || this._isCanceled) {
          return;
        }
        if (this._cancelHandlers.length > 0) {
          try {
            for (const handler of this._cancelHandlers) {
              handler();
            }
          } catch (err) {
            this._reject(err);
          }
        }
        this._isCanceled = true;
        this._reject(new CancelError());
      }
      get isCanceled() {
        return this._isCanceled;
      }
    };
    Object.setPrototypeOf(PCancelable.prototype, Promise.prototype);
    module2.exports = PCancelable;
    module2.exports.CancelError = CancelError;
  }
});

// node_modules/p-finally/index.js
var require_p_finally = __commonJS({
  "node_modules/p-finally/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (promise, onFinally) => {
      onFinally = onFinally || (() => {
      });
      return promise.then((val) => new Promise((resolve2) => {
        resolve2(onFinally());
      }).then(() => val), (err) => new Promise((resolve2) => {
        resolve2(onFinally());
      }).then(() => {
        throw err;
      }));
    };
  }
});

// node_modules/p-timeout/index.js
var require_p_timeout = __commonJS({
  "node_modules/p-timeout/index.js"(exports2, module2) {
    "use strict";
    var pFinally = require_p_finally();
    var TimeoutError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "TimeoutError";
      }
    };
    module2.exports = (promise, ms, fallback) => new Promise((resolve2, reject2) => {
      if (typeof ms !== "number" || ms < 0) {
        throw new TypeError("Expected `ms` to be a positive number");
      }
      const timer = setTimeout(() => {
        if (typeof fallback === "function") {
          try {
            resolve2(fallback());
          } catch (err2) {
            reject2(err2);
          }
          return;
        }
        const message = typeof fallback === "string" ? fallback : `Promise timed out after ${ms} milliseconds`;
        const err = fallback instanceof Error ? fallback : new TimeoutError(message);
        if (typeof promise.cancel === "function") {
          promise.cancel();
        }
        reject2(err);
      }, ms);
      pFinally(promise.then(resolve2, reject2), () => {
        clearTimeout(timer);
      });
    });
    module2.exports.TimeoutError = TimeoutError;
  }
});

// node_modules/got/node_modules/pify/index.js
var require_pify4 = __commonJS({
  "node_modules/got/node_modules/pify/index.js"(exports2, module2) {
    "use strict";
    var processFn = (fn, opts) => function() {
      const P = opts.promiseModule;
      const args = new Array(arguments.length);
      for (let i = 0; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      return new P((resolve2, reject2) => {
        if (opts.errorFirst) {
          args.push(function(err, result) {
            if (opts.multiArgs) {
              const results = new Array(arguments.length - 1);
              for (let i = 1; i < arguments.length; i++) {
                results[i - 1] = arguments[i];
              }
              if (err) {
                results.unshift(err);
                reject2(results);
              } else {
                resolve2(results);
              }
            } else if (err) {
              reject2(err);
            } else {
              resolve2(result);
            }
          });
        } else {
          args.push(function(result) {
            if (opts.multiArgs) {
              const results = new Array(arguments.length - 1);
              for (let i = 0; i < arguments.length; i++) {
                results[i] = arguments[i];
              }
              resolve2(results);
            } else {
              resolve2(result);
            }
          });
        }
        fn.apply(this, args);
      });
    };
    module2.exports = (obj, opts) => {
      opts = Object.assign({
        exclude: [/.+(Sync|Stream)$/],
        errorFirst: true,
        promiseModule: Promise
      }, opts);
      const filter = (key) => {
        const match = (pattern) => typeof pattern === "string" ? key === pattern : pattern.test(key);
        return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
      };
      let ret;
      if (typeof obj === "function") {
        ret = function() {
          if (opts.excludeMain) {
            return obj.apply(this, arguments);
          }
          return processFn(obj, opts).apply(this, arguments);
        };
      } else {
        ret = Object.create(Object.getPrototypeOf(obj));
      }
      for (const key in obj) {
        const x = obj[key];
        ret[key] = typeof x === "function" && filter(key) ? processFn(x, opts) : x;
      }
      return ret;
    };
  }
});

// node_modules/got/package.json
var require_package2 = __commonJS({
  "node_modules/got/package.json"(exports2, module2) {
    module2.exports = {
      name: "got",
      version: "8.3.2",
      description: "Simplified HTTP requests",
      license: "MIT",
      repository: "sindresorhus/got",
      maintainers: [
        {
          name: "Sindre Sorhus",
          email: "sindresorhus@gmail.com",
          url: "sindresorhus.com"
        },
        {
          name: "Vsevolod Strukchinsky",
          email: "floatdrop@gmail.com",
          url: "github.com/floatdrop"
        },
        {
          name: "Alexander Tesfamichael",
          email: "alex.tesfamichael@gmail.com",
          url: "alextes.me"
        }
      ],
      engines: {
        node: ">=4"
      },
      scripts: {
        test: "xo && nyc ava",
        coveralls: "nyc report --reporter=text-lcov | coveralls"
      },
      files: [
        "index.js",
        "errors.js"
      ],
      keywords: [
        "http",
        "https",
        "get",
        "got",
        "url",
        "uri",
        "request",
        "util",
        "utility",
        "simple",
        "curl",
        "wget",
        "fetch",
        "net",
        "network",
        "electron"
      ],
      dependencies: {
        "@sindresorhus/is": "^0.7.0",
        "cacheable-request": "^2.1.1",
        "decompress-response": "^3.3.0",
        duplexer3: "^0.1.4",
        "get-stream": "^3.0.0",
        "into-stream": "^3.1.0",
        "is-retry-allowed": "^1.1.0",
        isurl: "^1.0.0-alpha5",
        "lowercase-keys": "^1.0.0",
        "mimic-response": "^1.0.0",
        "p-cancelable": "^0.4.0",
        "p-timeout": "^2.0.1",
        pify: "^3.0.0",
        "safe-buffer": "^5.1.1",
        "timed-out": "^4.0.1",
        "url-parse-lax": "^3.0.0",
        "url-to-options": "^1.0.1"
      },
      devDependencies: {
        ava: "^0.25.0",
        coveralls: "^3.0.0",
        "form-data": "^2.1.1",
        "get-port": "^3.0.0",
        nyc: "^11.0.2",
        "p-event": "^1.3.0",
        pem: "^1.4.4",
        proxyquire: "^1.8.0",
        sinon: "^4.0.0",
        "slow-stream": "0.0.4",
        tempfile: "^2.0.0",
        tempy: "^0.2.1",
        "universal-url": "1.0.0-alpha",
        xo: "^0.20.0"
      },
      ava: {
        concurrency: 4
      },
      browser: {
        "decompress-response": false,
        electron: false
      }
    };
  }
});

// node_modules/got/errors.js
var require_errors = __commonJS({
  "node_modules/got/errors.js"(exports2, module2) {
    "use strict";
    var urlLib = require("url");
    var http = require("http");
    var PCancelable = require_p_cancelable();
    var is = require_dist();
    var GotError = class extends Error {
      constructor(message, error, opts) {
        super(message);
        Error.captureStackTrace(this, this.constructor);
        this.name = "GotError";
        if (!is.undefined(error.code)) {
          this.code = error.code;
        }
        Object.assign(this, {
          host: opts.host,
          hostname: opts.hostname,
          method: opts.method,
          path: opts.path,
          protocol: opts.protocol,
          url: opts.href
        });
      }
    };
    module2.exports.GotError = GotError;
    module2.exports.CacheError = class extends GotError {
      constructor(error, opts) {
        super(error.message, error, opts);
        this.name = "CacheError";
      }
    };
    module2.exports.RequestError = class extends GotError {
      constructor(error, opts) {
        super(error.message, error, opts);
        this.name = "RequestError";
      }
    };
    module2.exports.ReadError = class extends GotError {
      constructor(error, opts) {
        super(error.message, error, opts);
        this.name = "ReadError";
      }
    };
    module2.exports.ParseError = class extends GotError {
      constructor(error, statusCode, opts, data) {
        super(`${error.message} in "${urlLib.format(opts)}": 
${data.slice(0, 77)}...`, error, opts);
        this.name = "ParseError";
        this.statusCode = statusCode;
        this.statusMessage = http.STATUS_CODES[this.statusCode];
      }
    };
    module2.exports.HTTPError = class extends GotError {
      constructor(statusCode, statusMessage, headers, opts) {
        if (statusMessage) {
          statusMessage = statusMessage.replace(/\r?\n/g, " ").trim();
        } else {
          statusMessage = http.STATUS_CODES[statusCode];
        }
        super(`Response code ${statusCode} (${statusMessage})`, {}, opts);
        this.name = "HTTPError";
        this.statusCode = statusCode;
        this.statusMessage = statusMessage;
        this.headers = headers;
      }
    };
    module2.exports.MaxRedirectsError = class extends GotError {
      constructor(statusCode, redirectUrls, opts) {
        super("Redirected 10 times. Aborting.", {}, opts);
        this.name = "MaxRedirectsError";
        this.statusCode = statusCode;
        this.statusMessage = http.STATUS_CODES[this.statusCode];
        this.redirectUrls = redirectUrls;
      }
    };
    module2.exports.UnsupportedProtocolError = class extends GotError {
      constructor(opts) {
        super(`Unsupported protocol "${opts.protocol}"`, {}, opts);
        this.name = "UnsupportedProtocolError";
      }
    };
    module2.exports.CancelError = PCancelable.CancelError;
  }
});

// node_modules/got/index.js
var require_got = __commonJS({
  "node_modules/got/index.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("events");
    var http = require("http");
    var https2 = require("https");
    var PassThrough = require("stream").PassThrough;
    var Transform = require("stream").Transform;
    var urlLib = require("url");
    var fs3 = require("fs");
    var querystring = require("querystring");
    var CacheableRequest = require_src4();
    var duplexer3 = require_duplexer3();
    var intoStream = require_into_stream();
    var is = require_dist();
    var getStream = require_get_stream4();
    var timedOut = require_timed_out();
    var urlParseLax = require_url_parse_lax();
    var urlToOptions = require_url_to_options();
    var lowercaseKeys = require_lowercase_keys();
    var decompressResponse = require_decompress_response();
    var mimicResponse = require_mimic_response();
    var isRetryAllowed = require_is_retry_allowed();
    var isURL = require_isurl();
    var PCancelable = require_p_cancelable();
    var pTimeout = require_p_timeout();
    var pify = require_pify4();
    var Buffer2 = require_safe_buffer().Buffer;
    var pkg = require_package2();
    var errors = require_errors();
    var getMethodRedirectCodes = /* @__PURE__ */ new Set([300, 301, 302, 303, 304, 305, 307, 308]);
    var allMethodRedirectCodes = /* @__PURE__ */ new Set([300, 303, 307, 308]);
    var isFormData = (body) => is.nodeStream(body) && is.function(body.getBoundary);
    var getBodySize = (opts) => {
      const body = opts.body;
      if (opts.headers["content-length"]) {
        return Number(opts.headers["content-length"]);
      }
      if (!body && !opts.stream) {
        return 0;
      }
      if (is.string(body)) {
        return Buffer2.byteLength(body);
      }
      if (isFormData(body)) {
        return pify(body.getLength.bind(body))();
      }
      if (body instanceof fs3.ReadStream) {
        return pify(fs3.stat)(body.path).then((stat) => stat.size);
      }
      if (is.nodeStream(body) && is.buffer(body._buffer)) {
        return body._buffer.length;
      }
      return null;
    };
    function requestAsEventEmitter(opts) {
      opts = opts || {};
      const ee = new EventEmitter();
      const requestUrl2 = opts.href || urlLib.resolve(urlLib.format(opts), opts.path);
      const redirects = [];
      const agents = is.object(opts.agent) ? opts.agent : null;
      let retryCount = 0;
      let redirectUrl;
      let uploadBodySize;
      let uploaded = 0;
      const get = (opts2) => {
        if (opts2.protocol !== "http:" && opts2.protocol !== "https:") {
          ee.emit("error", new got.UnsupportedProtocolError(opts2));
          return;
        }
        let fn = opts2.protocol === "https:" ? https2 : http;
        if (agents) {
          const protocolName = opts2.protocol === "https:" ? "https" : "http";
          opts2.agent = agents[protocolName] || opts2.agent;
        }
        if (opts2.useElectronNet && process.versions.electron) {
          const electron = require("electron");
          fn = electron.net || electron.remote.net;
        }
        let progressInterval;
        const cacheableRequest = new CacheableRequest(fn.request, opts2.cache);
        const cacheReq = cacheableRequest(opts2, (res) => {
          clearInterval(progressInterval);
          ee.emit("uploadProgress", {
            percent: 1,
            transferred: uploaded,
            total: uploadBodySize
          });
          const statusCode = res.statusCode;
          res.url = redirectUrl || requestUrl2;
          res.requestUrl = requestUrl2;
          const followRedirect = opts2.followRedirect && "location" in res.headers;
          const redirectGet = followRedirect && getMethodRedirectCodes.has(statusCode);
          const redirectAll = followRedirect && allMethodRedirectCodes.has(statusCode);
          if (redirectAll || redirectGet && (opts2.method === "GET" || opts2.method === "HEAD")) {
            res.resume();
            if (statusCode === 303) {
              opts2.method = "GET";
            }
            if (redirects.length >= 10) {
              ee.emit("error", new got.MaxRedirectsError(statusCode, redirects, opts2), null, res);
              return;
            }
            const bufferString = Buffer2.from(res.headers.location, "binary").toString();
            redirectUrl = urlLib.resolve(urlLib.format(opts2), bufferString);
            redirects.push(redirectUrl);
            const redirectOpts = Object.assign({}, opts2, urlLib.parse(redirectUrl));
            ee.emit("redirect", res, redirectOpts);
            get(redirectOpts);
            return;
          }
          setImmediate(() => {
            try {
              getResponse(res, opts2, ee, redirects);
            } catch (e) {
              ee.emit("error", e);
            }
          });
        });
        cacheReq.on("error", (err) => {
          if (err instanceof CacheableRequest.RequestError) {
            ee.emit("error", new got.RequestError(err, opts2));
          } else {
            ee.emit("error", new got.CacheError(err, opts2));
          }
        });
        cacheReq.once("request", (req) => {
          let aborted = false;
          req.once("abort", (_3) => {
            aborted = true;
          });
          req.once("error", (err) => {
            clearInterval(progressInterval);
            if (aborted) {
              return;
            }
            const backoff = opts2.retries(++retryCount, err);
            if (backoff) {
              setTimeout(get, backoff, opts2);
              return;
            }
            ee.emit("error", new got.RequestError(err, opts2));
          });
          ee.once("request", (req2) => {
            ee.emit("uploadProgress", {
              percent: 0,
              transferred: 0,
              total: uploadBodySize
            });
            const socket = req2.connection;
            if (socket) {
              const isConnecting = socket.connecting === void 0 ? socket._connecting : socket.connecting;
              const onSocketConnect = () => {
                const uploadEventFrequency = 150;
                progressInterval = setInterval(() => {
                  if (socket.destroyed) {
                    clearInterval(progressInterval);
                    return;
                  }
                  const lastUploaded = uploaded;
                  const headersSize = req2._header ? Buffer2.byteLength(req2._header) : 0;
                  uploaded = socket.bytesWritten - headersSize;
                  if (uploadBodySize && uploaded > uploadBodySize) {
                    uploaded = uploadBodySize;
                  }
                  if (uploaded === lastUploaded || uploaded === uploadBodySize) {
                    return;
                  }
                  ee.emit("uploadProgress", {
                    percent: uploadBodySize ? uploaded / uploadBodySize : 0,
                    transferred: uploaded,
                    total: uploadBodySize
                  });
                }, uploadEventFrequency);
              };
              if (isConnecting) {
                socket.once("connect", onSocketConnect);
              } else {
                onSocketConnect();
              }
            }
          });
          if (opts2.gotTimeout) {
            clearInterval(progressInterval);
            timedOut(req, opts2.gotTimeout);
          }
          setImmediate(() => {
            ee.emit("request", req);
          });
        });
      };
      setImmediate(() => {
        Promise.resolve(getBodySize(opts)).then((size) => {
          uploadBodySize = size;
          if (is.undefined(opts.headers["content-length"]) && is.undefined(opts.headers["transfer-encoding"]) && isFormData(opts.body)) {
            opts.headers["content-length"] = size;
          }
          get(opts);
        }).catch((err) => {
          ee.emit("error", err);
        });
      });
      return ee;
    }
    function getResponse(res, opts, ee, redirects) {
      const downloadBodySize = Number(res.headers["content-length"]) || null;
      let downloaded = 0;
      const progressStream = new Transform({
        transform(chunk, encoding, callback) {
          downloaded += chunk.length;
          const percent = downloadBodySize ? downloaded / downloadBodySize : 0;
          if (percent < 1) {
            ee.emit("downloadProgress", {
              percent,
              transferred: downloaded,
              total: downloadBodySize
            });
          }
          callback(null, chunk);
        },
        flush(callback) {
          ee.emit("downloadProgress", {
            percent: 1,
            transferred: downloaded,
            total: downloadBodySize
          });
          callback();
        }
      });
      mimicResponse(res, progressStream);
      progressStream.redirectUrls = redirects;
      const response = opts.decompress === true && is.function(decompressResponse) && opts.method !== "HEAD" ? decompressResponse(progressStream) : progressStream;
      if (!opts.decompress && ["gzip", "deflate"].indexOf(res.headers["content-encoding"]) !== -1) {
        opts.encoding = null;
      }
      ee.emit("response", response);
      ee.emit("downloadProgress", {
        percent: 0,
        transferred: 0,
        total: downloadBodySize
      });
      res.pipe(progressStream);
    }
    function asPromise(opts) {
      const timeoutFn = (requestPromise) => opts.gotTimeout && opts.gotTimeout.request ? pTimeout(requestPromise, opts.gotTimeout.request, new got.RequestError({ message: "Request timed out", code: "ETIMEDOUT" }, opts)) : requestPromise;
      const proxy = new EventEmitter();
      const cancelable = new PCancelable((resolve2, reject2, onCancel) => {
        const ee = requestAsEventEmitter(opts);
        let cancelOnRequest = false;
        onCancel(() => {
          cancelOnRequest = true;
        });
        ee.on("request", (req) => {
          if (cancelOnRequest) {
            req.abort();
          }
          onCancel(() => {
            req.abort();
          });
          if (is.nodeStream(opts.body)) {
            opts.body.pipe(req);
            opts.body = void 0;
            return;
          }
          req.end(opts.body);
        });
        ee.on("response", (res) => {
          const stream2 = is.null(opts.encoding) ? getStream.buffer(res) : getStream(res, opts);
          stream2.catch((err) => reject2(new got.ReadError(err, opts))).then((data) => {
            const statusCode = res.statusCode;
            const limitStatusCode = opts.followRedirect ? 299 : 399;
            res.body = data;
            if (opts.json && res.body) {
              try {
                res.body = JSON.parse(res.body);
              } catch (err) {
                if (statusCode >= 200 && statusCode < 300) {
                  throw new got.ParseError(err, statusCode, opts, data);
                }
              }
            }
            if (opts.throwHttpErrors && statusCode !== 304 && (statusCode < 200 || statusCode > limitStatusCode)) {
              throw new got.HTTPError(statusCode, res.statusMessage, res.headers, opts);
            }
            resolve2(res);
          }).catch((err) => {
            Object.defineProperty(err, "response", { value: res });
            reject2(err);
          });
        });
        ee.once("error", reject2);
        ee.on("redirect", proxy.emit.bind(proxy, "redirect"));
        ee.on("uploadProgress", proxy.emit.bind(proxy, "uploadProgress"));
        ee.on("downloadProgress", proxy.emit.bind(proxy, "downloadProgress"));
      });
      Object.defineProperty(cancelable, "canceled", {
        get() {
          return cancelable.isCanceled;
        }
      });
      const promise = timeoutFn(cancelable);
      promise.cancel = cancelable.cancel.bind(cancelable);
      promise.on = (name, fn) => {
        proxy.on(name, fn);
        return promise;
      };
      return promise;
    }
    function asStream(opts) {
      opts.stream = true;
      const input = new PassThrough();
      const output = new PassThrough();
      const proxy = duplexer3(input, output);
      let timeout;
      if (opts.gotTimeout && opts.gotTimeout.request) {
        timeout = setTimeout(() => {
          proxy.emit("error", new got.RequestError({ message: "Request timed out", code: "ETIMEDOUT" }, opts));
        }, opts.gotTimeout.request);
      }
      if (opts.json) {
        throw new Error("Got can not be used as a stream when the `json` option is used");
      }
      if (opts.body) {
        proxy.write = () => {
          throw new Error("Got's stream is not writable when the `body` option is used");
        };
      }
      const ee = requestAsEventEmitter(opts);
      ee.on("request", (req) => {
        proxy.emit("request", req);
        if (is.nodeStream(opts.body)) {
          opts.body.pipe(req);
          return;
        }
        if (opts.body) {
          req.end(opts.body);
          return;
        }
        if (opts.method === "POST" || opts.method === "PUT" || opts.method === "PATCH") {
          input.pipe(req);
          return;
        }
        req.end();
      });
      ee.on("response", (res) => {
        clearTimeout(timeout);
        const statusCode = res.statusCode;
        res.on("error", (err) => {
          proxy.emit("error", new got.ReadError(err, opts));
        });
        res.pipe(output);
        if (opts.throwHttpErrors && statusCode !== 304 && (statusCode < 200 || statusCode > 299)) {
          proxy.emit("error", new got.HTTPError(statusCode, res.statusMessage, res.headers, opts), null, res);
          return;
        }
        proxy.emit("response", res);
      });
      ee.on("error", proxy.emit.bind(proxy, "error"));
      ee.on("redirect", proxy.emit.bind(proxy, "redirect"));
      ee.on("uploadProgress", proxy.emit.bind(proxy, "uploadProgress"));
      ee.on("downloadProgress", proxy.emit.bind(proxy, "downloadProgress"));
      return proxy;
    }
    function normalizeArguments(url, opts) {
      if (!is.string(url) && !is.object(url)) {
        throw new TypeError(`Parameter \`url\` must be a string or object, not ${is(url)}`);
      } else if (is.string(url)) {
        url = url.replace(/^unix:/, "http://$&");
        try {
          decodeURI(url);
        } catch (err) {
          throw new Error("Parameter `url` must contain valid UTF-8 character sequences");
        }
        url = urlParseLax(url);
        if (url.auth) {
          throw new Error("Basic authentication must be done with the `auth` option");
        }
      } else if (isURL.lenient(url)) {
        url = urlToOptions(url);
      }
      opts = Object.assign({
        path: "",
        retries: 2,
        cache: false,
        decompress: true,
        useElectronNet: false,
        throwHttpErrors: true
      }, url, {
        protocol: url.protocol || "http:"
      }, opts);
      const headers = lowercaseKeys(opts.headers);
      for (const key of Object.keys(headers)) {
        if (is.nullOrUndefined(headers[key])) {
          delete headers[key];
        }
      }
      opts.headers = Object.assign({
        "user-agent": `${pkg.name}/${pkg.version} (https://github.com/sindresorhus/got)`
      }, headers);
      if (opts.decompress && is.undefined(opts.headers["accept-encoding"])) {
        opts.headers["accept-encoding"] = "gzip, deflate";
      }
      const query = opts.query;
      if (query) {
        if (!is.string(query)) {
          opts.query = querystring.stringify(query);
        }
        opts.path = `${opts.path.split("?")[0]}?${opts.query}`;
        delete opts.query;
      }
      if (opts.json && is.undefined(opts.headers.accept)) {
        opts.headers.accept = "application/json";
      }
      const body = opts.body;
      if (is.nullOrUndefined(body)) {
        opts.method = (opts.method || "GET").toUpperCase();
      } else {
        const headers2 = opts.headers;
        if (!is.nodeStream(body) && !is.string(body) && !is.buffer(body) && !(opts.form || opts.json)) {
          throw new TypeError("The `body` option must be a stream.Readable, string, Buffer or plain Object");
        }
        const canBodyBeStringified = is.plainObject(body) || is.array(body);
        if ((opts.form || opts.json) && !canBodyBeStringified) {
          throw new TypeError("The `body` option must be a plain Object or Array when the `form` or `json` option is used");
        }
        if (isFormData(body)) {
          headers2["content-type"] = headers2["content-type"] || `multipart/form-data; boundary=${body.getBoundary()}`;
        } else if (opts.form && canBodyBeStringified) {
          headers2["content-type"] = headers2["content-type"] || "application/x-www-form-urlencoded";
          opts.body = querystring.stringify(body);
        } else if (opts.json && canBodyBeStringified) {
          headers2["content-type"] = headers2["content-type"] || "application/json";
          opts.body = JSON.stringify(body);
        }
        if (is.undefined(headers2["content-length"]) && is.undefined(headers2["transfer-encoding"]) && !is.nodeStream(body)) {
          const length = is.string(opts.body) ? Buffer2.byteLength(opts.body) : opts.body.length;
          headers2["content-length"] = length;
        }
        if (is.buffer(body)) {
          opts.body = intoStream(body);
          opts.body._buffer = body;
        }
        opts.method = (opts.method || "POST").toUpperCase();
      }
      if (opts.hostname === "unix") {
        const matches = /(.+?):(.+)/.exec(opts.path);
        if (matches) {
          opts.socketPath = matches[1];
          opts.path = matches[2];
          opts.host = null;
        }
      }
      if (!is.function(opts.retries)) {
        const retries = opts.retries;
        opts.retries = (iter, err) => {
          if (iter > retries || !isRetryAllowed(err)) {
            return 0;
          }
          const noise = Math.random() * 100;
          return (1 << iter) * 1e3 + noise;
        };
      }
      if (is.undefined(opts.followRedirect)) {
        opts.followRedirect = true;
      }
      if (opts.timeout) {
        if (is.number(opts.timeout)) {
          opts.gotTimeout = { request: opts.timeout };
        } else {
          opts.gotTimeout = opts.timeout;
        }
        delete opts.timeout;
      }
      return opts;
    }
    function got(url, opts) {
      try {
        const normalizedArgs = normalizeArguments(url, opts);
        if (normalizedArgs.stream) {
          return asStream(normalizedArgs);
        }
        return asPromise(normalizedArgs);
      } catch (err) {
        return Promise.reject(err);
      }
    }
    got.stream = (url, opts) => asStream(normalizeArguments(url, opts));
    var methods = [
      "get",
      "post",
      "put",
      "patch",
      "head",
      "delete"
    ];
    for (const method of methods) {
      got[method] = (url, opts) => got(url, Object.assign({}, opts, { method }));
      got.stream[method] = (url, opts) => got.stream(url, Object.assign({}, opts, { method }));
    }
    Object.assign(got, errors);
    module2.exports = got;
  }
});

// node_modules/pify/index.js
var require_pify5 = __commonJS({
  "node_modules/pify/index.js"(exports2, module2) {
    "use strict";
    var processFn = (fn, options) => function(...args) {
      const P = options.promiseModule;
      return new P((resolve2, reject2) => {
        if (options.multiArgs) {
          args.push((...result) => {
            if (options.errorFirst) {
              if (result[0]) {
                reject2(result);
              } else {
                result.shift();
                resolve2(result);
              }
            } else {
              resolve2(result);
            }
          });
        } else if (options.errorFirst) {
          args.push((error, result) => {
            if (error) {
              reject2(error);
            } else {
              resolve2(result);
            }
          });
        } else {
          args.push(resolve2);
        }
        fn.apply(this, args);
      });
    };
    module2.exports = (input, options) => {
      options = Object.assign({
        exclude: [/.+(Sync|Stream)$/],
        errorFirst: true,
        promiseModule: Promise
      }, options);
      const objType = typeof input;
      if (!(input !== null && (objType === "object" || objType === "function"))) {
        throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? "null" : objType}\``);
      }
      const filter = (key) => {
        const match = (pattern) => typeof pattern === "string" ? key === pattern : pattern.test(key);
        return options.include ? options.include.some(match) : !options.exclude.some(match);
      };
      let ret;
      if (objType === "function") {
        ret = function(...args) {
          return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);
        };
      } else {
        ret = Object.create(Object.getPrototypeOf(input));
      }
      for (const key in input) {
        const property = input[key];
        ret[key] = typeof property === "function" && filter(key) ? processFn(property, options) : property;
      }
      return ret;
    };
  }
});

// node_modules/make-dir/node_modules/semver/semver.js
var require_semver = __commonJS({
  "node_modules/make-dir/node_modules/semver/semver.js"(exports2, module2) {
    exports2 = module2.exports = SemVer;
    var debug;
    if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift("SEMVER");
        console.log.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports2.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var re = exports2.re = [];
    var safeRe = exports2.safeRe = [];
    var src = exports2.src = [];
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    function makeSafeRe(value) {
      for (var i2 = 0; i2 < safeRegexReplacements.length; i2++) {
        var token = safeRegexReplacements[i2][0];
        var max = safeRegexReplacements[i2][1];
        value = value.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
      }
      return value;
    }
    var NUMERICIDENTIFIER = R++;
    src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    var NUMERICIDENTIFIERLOOSE = R++;
    src[NUMERICIDENTIFIERLOOSE] = "\\d+";
    var NONNUMERICIDENTIFIER = R++;
    src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-]" + LETTERDASHNUMBER + "*";
    var MAINVERSION = R++;
    src[MAINVERSION] = "(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")";
    var MAINVERSIONLOOSE = R++;
    src[MAINVERSIONLOOSE] = "(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")";
    var PRERELEASEIDENTIFIER = R++;
    src[PRERELEASEIDENTIFIER] = "(?:" + src[NUMERICIDENTIFIER] + "|" + src[NONNUMERICIDENTIFIER] + ")";
    var PRERELEASEIDENTIFIERLOOSE = R++;
    src[PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[NUMERICIDENTIFIERLOOSE] + "|" + src[NONNUMERICIDENTIFIER] + ")";
    var PRERELEASE = R++;
    src[PRERELEASE] = "(?:-(" + src[PRERELEASEIDENTIFIER] + "(?:\\." + src[PRERELEASEIDENTIFIER] + ")*))";
    var PRERELEASELOOSE = R++;
    src[PRERELEASELOOSE] = "(?:-?(" + src[PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[PRERELEASEIDENTIFIERLOOSE] + ")*))";
    var BUILDIDENTIFIER = R++;
    src[BUILDIDENTIFIER] = LETTERDASHNUMBER + "+";
    var BUILD = R++;
    src[BUILD] = "(?:\\+(" + src[BUILDIDENTIFIER] + "(?:\\." + src[BUILDIDENTIFIER] + ")*))";
    var FULL = R++;
    var FULLPLAIN = "v?" + src[MAINVERSION] + src[PRERELEASE] + "?" + src[BUILD] + "?";
    src[FULL] = "^" + FULLPLAIN + "$";
    var LOOSEPLAIN = "[v=\\s]*" + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + "?" + src[BUILD] + "?";
    var LOOSE = R++;
    src[LOOSE] = "^" + LOOSEPLAIN + "$";
    var GTLT = R++;
    src[GTLT] = "((?:<|>)?=?)";
    var XRANGEIDENTIFIERLOOSE = R++;
    src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    var XRANGEIDENTIFIER = R++;
    src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
    var XRANGEPLAIN = R++;
    src[XRANGEPLAIN] = "[v=\\s]*(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:" + src[PRERELEASE] + ")?" + src[BUILD] + "?)?)?";
    var XRANGEPLAINLOOSE = R++;
    src[XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:" + src[PRERELEASELOOSE] + ")?" + src[BUILD] + "?)?)?";
    var XRANGE = R++;
    src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
    var XRANGELOOSE = R++;
    src[XRANGELOOSE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
    var COERCE = R++;
    src[COERCE] = "(?:^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    var LONETILDE = R++;
    src[LONETILDE] = "(?:~>?)";
    var TILDETRIM = R++;
    src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
    re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
    safeRe[TILDETRIM] = new RegExp(makeSafeRe(src[TILDETRIM]), "g");
    var tildeTrimReplace = "$1~";
    var TILDE = R++;
    src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
    var TILDELOOSE = R++;
    src[TILDELOOSE] = "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
    var LONECARET = R++;
    src[LONECARET] = "(?:\\^)";
    var CARETTRIM = R++;
    src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
    re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
    safeRe[CARETTRIM] = new RegExp(makeSafeRe(src[CARETTRIM]), "g");
    var caretTrimReplace = "$1^";
    var CARET = R++;
    src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
    var CARETLOOSE = R++;
    src[CARETLOOSE] = "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
    var COMPARATORLOOSE = R++;
    src[COMPARATORLOOSE] = "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
    var COMPARATOR = R++;
    src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
    var COMPARATORTRIM = R++;
    src[COMPARATORTRIM] = "(\\s*)" + src[GTLT] + "\\s*(" + LOOSEPLAIN + "|" + src[XRANGEPLAIN] + ")";
    re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
    safeRe[COMPARATORTRIM] = new RegExp(makeSafeRe(src[COMPARATORTRIM]), "g");
    var comparatorTrimReplace = "$1$2$3";
    var HYPHENRANGE = R++;
    src[HYPHENRANGE] = "^\\s*(" + src[XRANGEPLAIN] + ")\\s+-\\s+(" + src[XRANGEPLAIN] + ")\\s*$";
    var HYPHENRANGELOOSE = R++;
    src[HYPHENRANGELOOSE] = "^\\s*(" + src[XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[XRANGEPLAINLOOSE] + ")\\s*$";
    var STAR = R++;
    src[STAR] = "(<|>)?=?\\s*\\*";
    for (i = 0; i < R; i++) {
      debug(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
        safeRe[i] = new RegExp(makeSafeRe(src[i]));
      }
    }
    var i;
    exports2.parse = parse2;
    function parse2(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      var r = options.loose ? safeRe[LOOSE] : safeRe[FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }
    exports2.valid = valid;
    function valid(version, options) {
      var v = parse2(version, options);
      return v ? v.version : null;
    }
    exports2.clean = clean;
    function clean(version, options) {
      var s = parse2(version.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    }
    exports2.SemVer = SemVer;
    function SemVer(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== "string") {
        throw new TypeError("Invalid Version: " + version);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }
      debug("SemVer", version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version.trim().match(options.loose ? safeRe[LOOSE] : safeRe[FULL]);
      if (!m) {
        throw new TypeError("Invalid Version: " + version);
      }
      this.raw = version;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier);
          this.inc("pre", identifier);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier);
          }
          this.inc("pre", identifier);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports2.inc = inc;
    function inc(version, release, loose, identifier) {
      if (typeof loose === "string") {
        identifier = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }
    exports2.diff = diff;
    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse2(version1);
        var v2 = parse2(version2);
        var prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports2.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }
    exports2.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }
    exports2.major = major;
    function major(a, loose) {
      return new SemVer(a, loose).major;
    }
    exports2.minor = minor;
    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }
    exports2.patch = patch;
    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }
    exports2.compare = compare;
    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }
    exports2.compareLoose = compareLoose;
    function compareLoose(a, b) {
      return compare(a, b, true);
    }
    exports2.rcompare = rcompare;
    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }
    exports2.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a, b) {
        return exports2.compare(a, b, loose);
      });
    }
    exports2.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a, b) {
        return exports2.rcompare(a, b, loose);
      });
    }
    exports2.gt = gt;
    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }
    exports2.lt = lt;
    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }
    exports2.eq = eq;
    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }
    exports2.neq = neq;
    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }
    exports2.gte = gte;
    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }
    exports2.lte = lte;
    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }
    exports2.cmp = cmp;
    function cmp(a, op, b, loose) {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports2.Comparator = Comparator;
    function Comparator(comp, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }
      comp = comp.trim().split(/\s+/).join(" ");
      debug("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? safeRe[COMPARATORLOOSE] : safeRe[COMPARATOR];
      var m = comp.match(r);
      if (!m) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m[1];
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version) {
      debug("Comparator.test", version, this.options.loose);
      if (this.semver === ANY) {
        return true;
      }
      if (typeof version === "string") {
        version = new SemVer(version, this.options);
      }
      return cmp(version, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === "") {
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports2.Range = Range;
    function Range(range, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options);
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range.trim().split(/\s+/).join(" ");
      this.set = this.raw.split("||").map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + this.raw);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      var hr = loose ? safeRe[HYPHENRANGELOOSE] : safeRe[HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug("hyphen replace", range);
      range = range.replace(safeRe[COMPARATORTRIM], comparatorTrimReplace);
      debug("comparator trim", range, safeRe[COMPARATORTRIM]);
      range = range.replace(safeRe[TILDETRIM], tildeTrimReplace);
      range = range.replace(safeRe[CARETTRIM], caretTrimReplace);
      var compRe = loose ? safeRe[COMPARATORLOOSE] : safeRe[COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return thisComparators.every(function(thisComparator) {
          return range.set.some(function(rangeComparators) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    };
    exports2.toComparators = toComparators;
    function toComparators(range, options) {
      return new Range(range, options).set.map(function(comp) {
        return comp.map(function(c) {
          return c.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options) {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === "x" || id === "*";
    }
    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options);
      }).join(" ");
    }
    function replaceTilde(comp, options) {
      var r = options.loose ? safeRe[TILDELOOSE] : safeRe[TILDE];
      return comp.replace(r, function(_3, M, m, p, pr) {
        debug("tilde", comp, _3, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
        }
        debug("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options);
      }).join(" ");
    }
    function replaceCaret(comp, options) {
      debug("caret", comp, options);
      var r = options.loose ? safeRe[CARETLOOSE] : safeRe[CARET];
      return comp.replace(r, function(_3, M, m, p, pr) {
        debug("caret", comp, _3, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          if (M === "0") {
            ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
          } else {
            ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
          }
        }
        debug("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options) {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options);
      }).join(" ");
    }
    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? safeRe[XRANGELOOSE] : safeRe[XRANGE];
      return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          ret = gtlt + M + "." + m + "." + p;
        } else if (xm) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (xp) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        }
        debug("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options) {
      debug("replaceStars", comp, options);
      return comp.trim().replace(safeRe[STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to = "<=" + to;
      }
      return (from + " " + to).trim();
    }
    Range.prototype.test = function(version) {
      if (!version) {
        return false;
      }
      if (typeof version === "string") {
        version = new SemVer(version, this.options);
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version, options) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports2.satisfies = satisfies;
    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    }
    exports2.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }
    exports2.minSatisfying = minSatisfying;
    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }
    exports2.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports2.validRange = validRange;
    function validRange(range, options) {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    }
    exports2.ltr = ltr;
    function ltr(version, range, options) {
      return outside(version, range, "<", options);
    }
    exports2.gtr = gtr;
    function gtr(version, range, options) {
      return outside(version, range, ">", options);
    }
    exports2.outside = outside;
    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports2.prerelease = prerelease;
    function prerelease(version, options) {
      var parsed = parse2(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports2.intersects = intersects;
    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }
    exports2.coerce = coerce;
    function coerce(version) {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      var match = version.match(safeRe[COERCE]);
      if (match == null) {
        return null;
      }
      return parse2(match[1] + "." + (match[2] || "0") + "." + (match[3] || "0"));
    }
  }
});

// node_modules/make-dir/index.js
var require_make_dir2 = __commonJS({
  "node_modules/make-dir/index.js"(exports2, module2) {
    "use strict";
    var fs3 = require("fs");
    var path3 = require("path");
    var pify = require_pify5();
    var semver = require_semver();
    var defaults = {
      mode: 511 & ~process.umask(),
      fs: fs3
    };
    var useNativeRecursiveOption = semver.satisfies(process.version, ">=10.12.0");
    var checkPath = (pth) => {
      if (process.platform === "win32") {
        const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path3.parse(pth).root, ""));
        if (pathHasInvalidWinCharacters) {
          const error = new Error(`Path contains invalid characters: ${pth}`);
          error.code = "EINVAL";
          throw error;
        }
      }
    };
    var permissionError = (pth) => {
      const error = new Error(`operation not permitted, mkdir '${pth}'`);
      error.code = "EPERM";
      error.errno = -4048;
      error.path = pth;
      error.syscall = "mkdir";
      return error;
    };
    var makeDir = (input, options) => Promise.resolve().then(() => {
      checkPath(input);
      options = Object.assign({}, defaults, options);
      const mkdir = pify(options.fs.mkdir);
      const stat = pify(options.fs.stat);
      if (useNativeRecursiveOption && options.fs.mkdir === fs3.mkdir) {
        const pth = path3.resolve(input);
        return mkdir(pth, {
          mode: options.mode,
          recursive: true
        }).then(() => pth);
      }
      const make = (pth) => {
        return mkdir(pth, options.mode).then(() => pth).catch((error) => {
          if (error.code === "EPERM") {
            throw error;
          }
          if (error.code === "ENOENT") {
            if (path3.dirname(pth) === pth) {
              throw permissionError(pth);
            }
            if (error.message.includes("null bytes")) {
              throw error;
            }
            return make(path3.dirname(pth)).then(() => make(pth));
          }
          return stat(pth).then((stats) => stats.isDirectory() ? pth : Promise.reject()).catch(() => {
            throw error;
          });
        });
      };
      return make(path3.resolve(input));
    });
    module2.exports = makeDir;
    module2.exports.default = makeDir;
    module2.exports.sync = (input, options) => {
      checkPath(input);
      options = Object.assign({}, defaults, options);
      if (useNativeRecursiveOption && options.fs.mkdirSync === fs3.mkdirSync) {
        const pth = path3.resolve(input);
        fs3.mkdirSync(pth, {
          mode: options.mode,
          recursive: true
        });
        return pth;
      }
      const make = (pth) => {
        try {
          options.fs.mkdirSync(pth, options.mode);
        } catch (error) {
          if (error.code === "EPERM") {
            throw error;
          }
          if (error.code === "ENOENT") {
            if (path3.dirname(pth) === pth) {
              throw permissionError(pth);
            }
            if (error.message.includes("null bytes")) {
              throw error;
            }
            make(path3.dirname(pth));
            return make(pth);
          }
          try {
            if (!options.fs.statSync(pth).isDirectory()) {
              throw new Error("The path is not a directory");
            }
          } catch (_3) {
            throw error;
          }
        }
        return pth;
      };
      return make(path3.resolve(input));
    };
  }
});

// node_modules/p-event/index.js
var require_p_event = __commonJS({
  "node_modules/p-event/index.js"(exports2, module2) {
    "use strict";
    var pTimeout = require_p_timeout();
    var symbolAsyncIterator = Symbol.asyncIterator || "@@asyncIterator";
    var normalizeEmitter = (emitter) => {
      const addListener = emitter.on || emitter.addListener || emitter.addEventListener;
      const removeListener = emitter.off || emitter.removeListener || emitter.removeEventListener;
      if (!addListener || !removeListener) {
        throw new TypeError("Emitter is not compatible");
      }
      return {
        addListener: addListener.bind(emitter),
        removeListener: removeListener.bind(emitter)
      };
    };
    var normalizeEvents = (event) => Array.isArray(event) ? event : [event];
    var multiple = (emitter, event, options) => {
      let cancel;
      const ret = new Promise((resolve2, reject2) => {
        options = Object.assign({
          rejectionEvents: ["error"],
          multiArgs: false,
          resolveImmediately: false
        }, options);
        if (!(options.count >= 0 && (options.count === Infinity || Number.isInteger(options.count)))) {
          throw new TypeError("The `count` option should be at least 0 or more");
        }
        const events = normalizeEvents(event);
        const items = [];
        const { addListener, removeListener } = normalizeEmitter(emitter);
        const onItem = (...args) => {
          const value = options.multiArgs ? args : args[0];
          if (options.filter && !options.filter(value)) {
            return;
          }
          items.push(value);
          if (options.count === items.length) {
            cancel();
            resolve2(items);
          }
        };
        const rejectHandler = (error) => {
          cancel();
          reject2(error);
        };
        cancel = () => {
          for (const event2 of events) {
            removeListener(event2, onItem);
          }
          for (const rejectionEvent of options.rejectionEvents) {
            removeListener(rejectionEvent, rejectHandler);
          }
        };
        for (const event2 of events) {
          addListener(event2, onItem);
        }
        for (const rejectionEvent of options.rejectionEvents) {
          addListener(rejectionEvent, rejectHandler);
        }
        if (options.resolveImmediately) {
          resolve2(items);
        }
      });
      ret.cancel = cancel;
      if (typeof options.timeout === "number") {
        const timeout = pTimeout(ret, options.timeout);
        timeout.cancel = cancel;
        return timeout;
      }
      return ret;
    };
    module2.exports = (emitter, event, options) => {
      if (typeof options === "function") {
        options = { filter: options };
      }
      options = Object.assign({}, options, {
        count: 1,
        resolveImmediately: false
      });
      const arrayPromise = multiple(emitter, event, options);
      const promise = arrayPromise.then((array) => array[0]);
      promise.cancel = arrayPromise.cancel;
      return promise;
    };
    module2.exports.multiple = multiple;
    module2.exports.iterator = (emitter, event, options) => {
      if (typeof options === "function") {
        options = { filter: options };
      }
      const events = normalizeEvents(event);
      options = Object.assign({
        rejectionEvents: ["error"],
        resolutionEvents: [],
        limit: Infinity,
        multiArgs: false
      }, options);
      const { limit } = options;
      const isValidLimit = limit >= 0 && (limit === Infinity || Number.isInteger(limit));
      if (!isValidLimit) {
        throw new TypeError("The `limit` option should be a non-negative integer or Infinity");
      }
      if (limit === 0) {
        return {
          [Symbol.asyncIterator]() {
            return this;
          },
          next() {
            return Promise.resolve({ done: true, value: void 0 });
          }
        };
      }
      let isLimitReached = false;
      const { addListener, removeListener } = normalizeEmitter(emitter);
      let done = false;
      let error;
      let hasPendingError = false;
      const nextQueue = [];
      const valueQueue = [];
      let eventCount = 0;
      const valueHandler = (...args) => {
        eventCount++;
        isLimitReached = eventCount === limit;
        const value = options.multiArgs ? args : args[0];
        if (nextQueue.length > 0) {
          const { resolve: resolve2 } = nextQueue.shift();
          resolve2({ done: false, value });
          if (isLimitReached) {
            cancel();
          }
          return;
        }
        valueQueue.push(value);
        if (isLimitReached) {
          cancel();
        }
      };
      const cancel = () => {
        done = true;
        for (const event2 of events) {
          removeListener(event2, valueHandler);
        }
        for (const rejectionEvent of options.rejectionEvents) {
          removeListener(rejectionEvent, rejectHandler);
        }
        for (const resolutionEvent of options.resolutionEvents) {
          removeListener(resolutionEvent, resolveHandler);
        }
        while (nextQueue.length > 0) {
          const { resolve: resolve2 } = nextQueue.shift();
          resolve2({ done: true, value: void 0 });
        }
      };
      const rejectHandler = (...args) => {
        error = options.multiArgs ? args : args[0];
        if (nextQueue.length > 0) {
          const { reject: reject2 } = nextQueue.shift();
          reject2(error);
        } else {
          hasPendingError = true;
        }
        cancel();
      };
      const resolveHandler = (...args) => {
        const value = options.multiArgs ? args : args[0];
        if (options.filter && !options.filter(value)) {
          return;
        }
        if (nextQueue.length > 0) {
          const { resolve: resolve2 } = nextQueue.shift();
          resolve2({ done: true, value });
        } else {
          valueQueue.push(value);
        }
        cancel();
      };
      for (const event2 of events) {
        addListener(event2, valueHandler);
      }
      for (const rejectionEvent of options.rejectionEvents) {
        addListener(rejectionEvent, rejectHandler);
      }
      for (const resolutionEvent of options.resolutionEvents) {
        addListener(resolutionEvent, resolveHandler);
      }
      return {
        [symbolAsyncIterator]() {
          return this;
        },
        next() {
          if (valueQueue.length > 0) {
            const value = valueQueue.shift();
            return Promise.resolve({ done: done && valueQueue.length === 0 && !isLimitReached, value });
          }
          if (hasPendingError) {
            hasPendingError = false;
            return Promise.reject(error);
          }
          if (done) {
            return Promise.resolve({ done: true, value: void 0 });
          }
          return new Promise((resolve2, reject2) => nextQueue.push({ resolve: resolve2, reject: reject2 }));
        },
        return(value) {
          cancel();
          return Promise.resolve({ done, value });
        }
      };
    };
  }
});

// node_modules/file-type/util.js
var require_util2 = __commonJS({
  "node_modules/file-type/util.js"(exports2) {
    "use strict";
    exports2.stringToBytes = (string) => [...string].map((character) => character.charCodeAt(0));
    var uint8ArrayUtf8ByteString2 = (array, start, end) => {
      return String.fromCharCode(...array.slice(start, end));
    };
    exports2.readUInt64LE = (buffer, offset = 0) => {
      let n = buffer[offset];
      let mul = 1;
      let i = 0;
      while (++i < 8) {
        mul *= 256;
        n += buffer[offset + i] * mul;
      }
      return n;
    };
    exports2.tarHeaderChecksumMatches = (buffer) => {
      if (buffer.length < 512) {
        return false;
      }
      const MASK_8TH_BIT = 128;
      let sum = 256;
      let signedBitSum = 0;
      for (let i = 0; i < 148; i++) {
        const byte = buffer[i];
        sum += byte;
        signedBitSum += byte & MASK_8TH_BIT;
      }
      for (let i = 156; i < 512; i++) {
        const byte = buffer[i];
        sum += byte;
        signedBitSum += byte & MASK_8TH_BIT;
      }
      const readSum = parseInt(uint8ArrayUtf8ByteString2(buffer, 148, 154), 8);
      return readSum === sum || readSum === sum - (signedBitSum << 1);
    };
    exports2.uint8ArrayUtf8ByteString = uint8ArrayUtf8ByteString2;
  }
});

// node_modules/file-type/index.js
var require_file_type6 = __commonJS({
  "node_modules/file-type/index.js"(exports, module) {
    "use strict";
    var { stringToBytes, readUInt64LE, tarHeaderChecksumMatches, uint8ArrayUtf8ByteString } = require_util2();
    var xpiZipFilename = stringToBytes("META-INF/mozilla.rsa");
    var oxmlContentTypes = stringToBytes("[Content_Types].xml");
    var oxmlRels = stringToBytes("_rels/.rels");
    var fileType = (input) => {
      if (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {
        throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof input}\``);
      }
      const buffer = input instanceof Uint8Array ? input : new Uint8Array(input);
      if (!(buffer && buffer.length > 1)) {
        return;
      }
      const check = (header, options) => {
        options = Object.assign({
          offset: 0
        }, options);
        for (let i = 0; i < header.length; i++) {
          if (options.mask) {
            if (header[i] !== (options.mask[i] & buffer[i + options.offset])) {
              return false;
            }
          } else if (header[i] !== buffer[i + options.offset]) {
            return false;
          }
        }
        return true;
      };
      const checkString = (header, options) => check(stringToBytes(header), options);
      if (check([255, 216, 255])) {
        return {
          ext: "jpg",
          mime: "image/jpeg"
        };
      }
      if (check([137, 80, 78, 71, 13, 10, 26, 10])) {
        return {
          ext: "png",
          mime: "image/png"
        };
      }
      if (check([71, 73, 70])) {
        return {
          ext: "gif",
          mime: "image/gif"
        };
      }
      if (check([87, 69, 66, 80], { offset: 8 })) {
        return {
          ext: "webp",
          mime: "image/webp"
        };
      }
      if (check([70, 76, 73, 70])) {
        return {
          ext: "flif",
          mime: "image/flif"
        };
      }
      if ((check([73, 73, 42, 0]) || check([77, 77, 0, 42])) && check([67, 82], { offset: 8 })) {
        return {
          ext: "cr2",
          mime: "image/x-canon-cr2"
        };
      }
      if (check([73, 73, 82, 79, 8, 0, 0, 0, 24])) {
        return {
          ext: "orf",
          mime: "image/x-olympus-orf"
        };
      }
      if (check([73, 73, 42, 0, 16, 251, 134, 1])) {
        return {
          ext: "arw",
          mime: "image/x-sony-arw"
        };
      }
      if (check([73, 73, 42, 0, 8, 0, 0, 0, 45])) {
        return {
          ext: "dng",
          mime: "image/x-adobe-dng"
        };
      }
      if (check([73, 73, 42, 0, 48, 61, 114, 1, 28])) {
        return {
          ext: "nef",
          mime: "image/x-nikon-nef"
        };
      }
      if (check([73, 73, 42, 0]) || check([77, 77, 0, 42])) {
        return {
          ext: "tif",
          mime: "image/tiff"
        };
      }
      if (check([66, 77])) {
        return {
          ext: "bmp",
          mime: "image/bmp"
        };
      }
      if (check([73, 73, 188])) {
        return {
          ext: "jxr",
          mime: "image/vnd.ms-photo"
        };
      }
      if (check([56, 66, 80, 83])) {
        return {
          ext: "psd",
          mime: "image/vnd.adobe.photoshop"
        };
      }
      if (check([80, 75, 3, 4])) {
        if (check([109, 105, 109, 101, 116, 121, 112, 101, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 101, 112, 117, 98, 43, 122, 105, 112], { offset: 30 })) {
          return {
            ext: "epub",
            mime: "application/epub+zip"
          };
        }
        if (check(xpiZipFilename, { offset: 30 })) {
          return {
            ext: "xpi",
            mime: "application/x-xpinstall"
          };
        }
        if (checkString("mimetypeapplication/vnd.oasis.opendocument.text", { offset: 30 })) {
          return {
            ext: "odt",
            mime: "application/vnd.oasis.opendocument.text"
          };
        }
        if (checkString("mimetypeapplication/vnd.oasis.opendocument.spreadsheet", { offset: 30 })) {
          return {
            ext: "ods",
            mime: "application/vnd.oasis.opendocument.spreadsheet"
          };
        }
        if (checkString("mimetypeapplication/vnd.oasis.opendocument.presentation", { offset: 30 })) {
          return {
            ext: "odp",
            mime: "application/vnd.oasis.opendocument.presentation"
          };
        }
        const findNextZipHeaderIndex = (arr, startAt = 0) => arr.findIndex((el, i, arr2) => i >= startAt && arr2[i] === 80 && arr2[i + 1] === 75 && arr2[i + 2] === 3 && arr2[i + 3] === 4);
        let zipHeaderIndex = 0;
        let oxmlFound = false;
        let type;
        do {
          const offset = zipHeaderIndex + 30;
          if (!oxmlFound) {
            oxmlFound = check(oxmlContentTypes, { offset }) || check(oxmlRels, { offset });
          }
          if (!type) {
            if (checkString("word/", { offset })) {
              type = {
                ext: "docx",
                mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
              };
            } else if (checkString("ppt/", { offset })) {
              type = {
                ext: "pptx",
                mime: "application/vnd.openxmlformats-officedocument.presentationml.presentation"
              };
            } else if (checkString("xl/", { offset })) {
              type = {
                ext: "xlsx",
                mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
              };
            }
          }
          if (oxmlFound && type) {
            return type;
          }
          zipHeaderIndex = findNextZipHeaderIndex(buffer, offset);
        } while (zipHeaderIndex >= 0);
        if (type) {
          return type;
        }
      }
      if (check([80, 75]) && (buffer[2] === 3 || buffer[2] === 5 || buffer[2] === 7) && (buffer[3] === 4 || buffer[3] === 6 || buffer[3] === 8)) {
        return {
          ext: "zip",
          mime: "application/zip"
        };
      }
      if (check([48, 48, 48, 48, 48, 48], { offset: 148, mask: [248, 248, 248, 248, 248, 248] }) && tarHeaderChecksumMatches(buffer)) {
        return {
          ext: "tar",
          mime: "application/x-tar"
        };
      }
      if (check([82, 97, 114, 33, 26, 7]) && (buffer[6] === 0 || buffer[6] === 1)) {
        return {
          ext: "rar",
          mime: "application/x-rar-compressed"
        };
      }
      if (check([31, 139, 8])) {
        return {
          ext: "gz",
          mime: "application/gzip"
        };
      }
      if (check([66, 90, 104])) {
        return {
          ext: "bz2",
          mime: "application/x-bzip2"
        };
      }
      if (check([55, 122, 188, 175, 39, 28])) {
        return {
          ext: "7z",
          mime: "application/x-7z-compressed"
        };
      }
      if (check([120, 1])) {
        return {
          ext: "dmg",
          mime: "application/x-apple-diskimage"
        };
      }
      if (check([102, 114, 101, 101], { offset: 4 }) || check([109, 100, 97, 116], { offset: 4 }) || check([109, 111, 111, 118], { offset: 4 }) || check([119, 105, 100, 101], { offset: 4 })) {
        return {
          ext: "mov",
          mime: "video/quicktime"
        };
      }
      if (check([102, 116, 121, 112], { offset: 4 }) && (buffer[8] & 96) !== 0 && (buffer[9] & 96) !== 0 && (buffer[10] & 96) !== 0 && (buffer[11] & 96) !== 0) {
        const brandMajor = uint8ArrayUtf8ByteString(buffer, 8, 12);
        switch (brandMajor) {
          case "mif1":
            return { ext: "heic", mime: "image/heif" };
          case "msf1":
            return { ext: "heic", mime: "image/heif-sequence" };
          case "heic":
          case "heix":
            return { ext: "heic", mime: "image/heic" };
          case "hevc":
          case "hevx":
            return { ext: "heic", mime: "image/heic-sequence" };
          case "qt  ":
            return { ext: "mov", mime: "video/quicktime" };
          case "M4V ":
          case "M4VH":
          case "M4VP":
            return { ext: "m4v", mime: "video/x-m4v" };
          case "M4P ":
            return { ext: "m4p", mime: "video/mp4" };
          case "M4B ":
            return { ext: "m4b", mime: "audio/mp4" };
          case "M4A ":
            return { ext: "m4a", mime: "audio/x-m4a" };
          case "F4V ":
            return { ext: "f4v", mime: "video/mp4" };
          case "F4P ":
            return { ext: "f4p", mime: "video/mp4" };
          case "F4A ":
            return { ext: "f4a", mime: "audio/mp4" };
          case "F4B ":
            return { ext: "f4b", mime: "audio/mp4" };
          default:
            if (brandMajor.startsWith("3g")) {
              if (brandMajor.startsWith("3g2")) {
                return { ext: "3g2", mime: "video/3gpp2" };
              }
              return { ext: "3gp", mime: "video/3gpp" };
            }
            return { ext: "mp4", mime: "video/mp4" };
        }
      }
      if (check([77, 84, 104, 100])) {
        return {
          ext: "mid",
          mime: "audio/midi"
        };
      }
      if (check([26, 69, 223, 163])) {
        const sliced = buffer.subarray(4, 4 + 4096);
        const idPos = sliced.findIndex((el, i, arr) => arr[i] === 66 && arr[i + 1] === 130);
        if (idPos !== -1) {
          const docTypePos = idPos + 3;
          const findDocType = (type) => [...type].every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));
          if (findDocType("matroska")) {
            return {
              ext: "mkv",
              mime: "video/x-matroska"
            };
          }
          if (findDocType("webm")) {
            return {
              ext: "webm",
              mime: "video/webm"
            };
          }
        }
      }
      if (check([82, 73, 70, 70])) {
        if (check([65, 86, 73], { offset: 8 })) {
          return {
            ext: "avi",
            mime: "video/vnd.avi"
          };
        }
        if (check([87, 65, 86, 69], { offset: 8 })) {
          return {
            ext: "wav",
            mime: "audio/vnd.wave"
          };
        }
        if (check([81, 76, 67, 77], { offset: 8 })) {
          return {
            ext: "qcp",
            mime: "audio/qcelp"
          };
        }
      }
      if (check([48, 38, 178, 117, 142, 102, 207, 17, 166, 217])) {
        let offset = 30;
        do {
          const objectSize = readUInt64LE(buffer, offset + 16);
          if (check([145, 7, 220, 183, 183, 169, 207, 17, 142, 230, 0, 192, 12, 32, 83, 101], { offset })) {
            if (check([64, 158, 105, 248, 77, 91, 207, 17, 168, 253, 0, 128, 95, 92, 68, 43], { offset: offset + 24 })) {
              return {
                ext: "wma",
                mime: "audio/x-ms-wma"
              };
            }
            if (check([192, 239, 25, 188, 77, 91, 207, 17, 168, 253, 0, 128, 95, 92, 68, 43], { offset: offset + 24 })) {
              return {
                ext: "wmv",
                mime: "video/x-ms-asf"
              };
            }
            break;
          }
          offset += objectSize;
        } while (offset + 24 <= buffer.length);
        return {
          ext: "asf",
          mime: "application/vnd.ms-asf"
        };
      }
      if (check([0, 0, 1, 186]) || check([0, 0, 1, 179])) {
        return {
          ext: "mpg",
          mime: "video/mpeg"
        };
      }
      for (let start = 0; start < 2 && start < buffer.length - 16; start++) {
        if (check([73, 68, 51], { offset: start }) || check([255, 226], { offset: start, mask: [255, 230] })) {
          return {
            ext: "mp3",
            mime: "audio/mpeg"
          };
        }
        if (check([255, 228], { offset: start, mask: [255, 230] })) {
          return {
            ext: "mp2",
            mime: "audio/mpeg"
          };
        }
        if (check([255, 248], { offset: start, mask: [255, 252] })) {
          return {
            ext: "mp2",
            mime: "audio/mpeg"
          };
        }
        if (check([255, 240], { offset: start, mask: [255, 252] })) {
          return {
            ext: "mp4",
            mime: "audio/mpeg"
          };
        }
      }
      if (check([79, 112, 117, 115, 72, 101, 97, 100], { offset: 28 })) {
        return {
          ext: "opus",
          mime: "audio/opus"
        };
      }
      if (check([79, 103, 103, 83])) {
        if (check([128, 116, 104, 101, 111, 114, 97], { offset: 28 })) {
          return {
            ext: "ogv",
            mime: "video/ogg"
          };
        }
        if (check([1, 118, 105, 100, 101, 111, 0], { offset: 28 })) {
          return {
            ext: "ogm",
            mime: "video/ogg"
          };
        }
        if (check([127, 70, 76, 65, 67], { offset: 28 })) {
          return {
            ext: "oga",
            mime: "audio/ogg"
          };
        }
        if (check([83, 112, 101, 101, 120, 32, 32], { offset: 28 })) {
          return {
            ext: "spx",
            mime: "audio/ogg"
          };
        }
        if (check([1, 118, 111, 114, 98, 105, 115], { offset: 28 })) {
          return {
            ext: "ogg",
            mime: "audio/ogg"
          };
        }
        return {
          ext: "ogx",
          mime: "application/ogg"
        };
      }
      if (check([102, 76, 97, 67])) {
        return {
          ext: "flac",
          mime: "audio/x-flac"
        };
      }
      if (check([77, 65, 67, 32])) {
        return {
          ext: "ape",
          mime: "audio/ape"
        };
      }
      if (check([119, 118, 112, 107])) {
        return {
          ext: "wv",
          mime: "audio/wavpack"
        };
      }
      if (check([35, 33, 65, 77, 82, 10])) {
        return {
          ext: "amr",
          mime: "audio/amr"
        };
      }
      if (check([37, 80, 68, 70])) {
        return {
          ext: "pdf",
          mime: "application/pdf"
        };
      }
      if (check([77, 90])) {
        return {
          ext: "exe",
          mime: "application/x-msdownload"
        };
      }
      if ((buffer[0] === 67 || buffer[0] === 70) && check([87, 83], { offset: 1 })) {
        return {
          ext: "swf",
          mime: "application/x-shockwave-flash"
        };
      }
      if (check([123, 92, 114, 116, 102])) {
        return {
          ext: "rtf",
          mime: "application/rtf"
        };
      }
      if (check([0, 97, 115, 109])) {
        return {
          ext: "wasm",
          mime: "application/wasm"
        };
      }
      if (check([119, 79, 70, 70]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff",
          mime: "font/woff"
        };
      }
      if (check([119, 79, 70, 50]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff2",
          mime: "font/woff2"
        };
      }
      if (check([76, 80], { offset: 34 }) && (check([0, 0, 1], { offset: 8 }) || check([1, 0, 2], { offset: 8 }) || check([2, 0, 2], { offset: 8 }))) {
        return {
          ext: "eot",
          mime: "application/vnd.ms-fontobject"
        };
      }
      if (check([0, 1, 0, 0, 0])) {
        return {
          ext: "ttf",
          mime: "font/ttf"
        };
      }
      if (check([79, 84, 84, 79, 0])) {
        return {
          ext: "otf",
          mime: "font/otf"
        };
      }
      if (check([0, 0, 1, 0])) {
        return {
          ext: "ico",
          mime: "image/x-icon"
        };
      }
      if (check([0, 0, 2, 0])) {
        return {
          ext: "cur",
          mime: "image/x-icon"
        };
      }
      if (check([70, 76, 86, 1])) {
        return {
          ext: "flv",
          mime: "video/x-flv"
        };
      }
      if (check([37, 33])) {
        return {
          ext: "ps",
          mime: "application/postscript"
        };
      }
      if (check([253, 55, 122, 88, 90, 0])) {
        return {
          ext: "xz",
          mime: "application/x-xz"
        };
      }
      if (check([83, 81, 76, 105])) {
        return {
          ext: "sqlite",
          mime: "application/x-sqlite3"
        };
      }
      if (check([78, 69, 83, 26])) {
        return {
          ext: "nes",
          mime: "application/x-nintendo-nes-rom"
        };
      }
      if (check([67, 114, 50, 52])) {
        return {
          ext: "crx",
          mime: "application/x-google-chrome-extension"
        };
      }
      if (check([77, 83, 67, 70]) || check([73, 83, 99, 40])) {
        return {
          ext: "cab",
          mime: "application/vnd.ms-cab-compressed"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62, 10, 100, 101, 98, 105, 97, 110, 45, 98, 105, 110, 97, 114, 121])) {
        return {
          ext: "deb",
          mime: "application/x-deb"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62])) {
        return {
          ext: "ar",
          mime: "application/x-unix-archive"
        };
      }
      if (check([237, 171, 238, 219])) {
        return {
          ext: "rpm",
          mime: "application/x-rpm"
        };
      }
      if (check([31, 160]) || check([31, 157])) {
        return {
          ext: "Z",
          mime: "application/x-compress"
        };
      }
      if (check([76, 90, 73, 80])) {
        return {
          ext: "lz",
          mime: "application/x-lzip"
        };
      }
      if (check([208, 207, 17, 224, 161, 177, 26, 225])) {
        return {
          ext: "msi",
          mime: "application/x-msi"
        };
      }
      if (check([6, 14, 43, 52, 2, 5, 1, 1, 13, 1, 2, 1, 1, 2])) {
        return {
          ext: "mxf",
          mime: "application/mxf"
        };
      }
      if (check([71], { offset: 4 }) && (check([71], { offset: 192 }) || check([71], { offset: 196 }))) {
        return {
          ext: "mts",
          mime: "video/mp2t"
        };
      }
      if (check([66, 76, 69, 78, 68, 69, 82])) {
        return {
          ext: "blend",
          mime: "application/x-blender"
        };
      }
      if (check([66, 80, 71, 251])) {
        return {
          ext: "bpg",
          mime: "image/bpg"
        };
      }
      if (check([0, 0, 0, 12, 106, 80, 32, 32, 13, 10, 135, 10])) {
        if (check([106, 112, 50, 32], { offset: 20 })) {
          return {
            ext: "jp2",
            mime: "image/jp2"
          };
        }
        if (check([106, 112, 120, 32], { offset: 20 })) {
          return {
            ext: "jpx",
            mime: "image/jpx"
          };
        }
        if (check([106, 112, 109, 32], { offset: 20 })) {
          return {
            ext: "jpm",
            mime: "image/jpm"
          };
        }
        if (check([109, 106, 112, 50], { offset: 20 })) {
          return {
            ext: "mj2",
            mime: "image/mj2"
          };
        }
      }
      if (check([70, 79, 82, 77])) {
        return {
          ext: "aif",
          mime: "audio/aiff"
        };
      }
      if (checkString("<?xml ")) {
        return {
          ext: "xml",
          mime: "application/xml"
        };
      }
      if (check([66, 79, 79, 75, 77, 79, 66, 73], { offset: 60 })) {
        return {
          ext: "mobi",
          mime: "application/x-mobipocket-ebook"
        };
      }
      if (check([171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10])) {
        return {
          ext: "ktx",
          mime: "image/ktx"
        };
      }
      if (check([68, 73, 67, 77], { offset: 128 })) {
        return {
          ext: "dcm",
          mime: "application/dicom"
        };
      }
      if (check([77, 80, 43])) {
        return {
          ext: "mpc",
          mime: "audio/x-musepack"
        };
      }
      if (check([77, 80, 67, 75])) {
        return {
          ext: "mpc",
          mime: "audio/x-musepack"
        };
      }
      if (check([66, 69, 71, 73, 78, 58])) {
        return {
          ext: "ics",
          mime: "text/calendar"
        };
      }
      if (check([103, 108, 84, 70, 2, 0, 0, 0])) {
        return {
          ext: "glb",
          mime: "model/gltf-binary"
        };
      }
      if (check([212, 195, 178, 161]) || check([161, 178, 195, 212])) {
        return {
          ext: "pcap",
          mime: "application/vnd.tcpdump.pcap"
        };
      }
      if (check([68, 83, 68, 32])) {
        return {
          ext: "dsf",
          mime: "audio/x-dsf"
        };
      }
      if (check([76, 0, 0, 0, 1, 20, 2, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 70])) {
        return {
          ext: "lnk",
          mime: "application/x.ms.shortcut"
        };
      }
      if (check([98, 111, 111, 107, 0, 0, 0, 0, 109, 97, 114, 107, 0, 0, 0, 0])) {
        return {
          ext: "alias",
          mime: "application/x.apple.alias"
        };
      }
      if (checkString("Creative Voice File")) {
        return {
          ext: "voc",
          mime: "audio/x-voc"
        };
      }
      if (check([11, 119])) {
        return {
          ext: "ac3",
          mime: "audio/vnd.dolby.dd-raw"
        };
      }
    };
    module.exports = fileType;
    Object.defineProperty(fileType, "minimumBytes", { value: 4100 });
    fileType.stream = (readableStream) => new Promise((resolve, reject) => {
      const stream = eval("require")("stream");
      readableStream.once("readable", () => {
        const pass = new stream.PassThrough();
        const chunk = readableStream.read(module.exports.minimumBytes) || readableStream.read();
        try {
          pass.fileType = fileType(chunk);
        } catch (error) {
          reject(error);
        }
        readableStream.unshift(chunk);
        if (stream.pipeline) {
          resolve(stream.pipeline(readableStream, pass, () => {
          }));
        } else {
          resolve(readableStream.pipe(pass));
        }
      });
    });
  }
});

// node_modules/mime-db/db.json
var require_db = __commonJS({
  "node_modules/mime-db/db.json"(exports2, module2) {
    module2.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/city+json": {
        source: "iana",
        compressible: true
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cpl"]
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dash-patch+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpp"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpf"]
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/oblivious-dns-message": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana",
        extensions: ["asc"]
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.eclipse.ditto+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eu.kasparian.car+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.familysearch.gedcom+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hl7cda+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hl7v2+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxar.archive.3tz+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syft+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wif"]
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana",
        extensions: ["avci"]
      },
      "image/avcs": {
        source: "iana",
        extensions: ["avcs"]
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "node_modules/mime-db/index.js"(exports2, module2) {
    module2.exports = require_db();
  }
});

// node_modules/ext-list/index.js
var require_ext_list = __commonJS({
  "node_modules/ext-list/index.js"(exports2, module2) {
    "use strict";
    var mimeDb = require_mime_db();
    module2.exports = function() {
      var ret = {};
      Object.keys(mimeDb).forEach(function(x) {
        var val = mimeDb[x];
        if (val.extensions && val.extensions.length > 0) {
          val.extensions.forEach(function(y) {
            ret[y] = x;
          });
        }
      });
      return ret;
    };
  }
});

// node_modules/sort-keys-length/node_modules/sort-keys/index.js
var require_sort_keys2 = __commonJS({
  "node_modules/sort-keys-length/node_modules/sort-keys/index.js"(exports2, module2) {
    "use strict";
    var isPlainObj = require_is_plain_obj();
    module2.exports = function(obj, opts) {
      if (!isPlainObj(obj)) {
        throw new TypeError("Expected a plain object");
      }
      opts = opts || {};
      if (typeof opts === "function") {
        opts = { compare: opts };
      }
      var deep = opts.deep;
      var seenInput = [];
      var seenOutput = [];
      var sortKeys = function(x) {
        var seenIndex = seenInput.indexOf(x);
        if (seenIndex !== -1) {
          return seenOutput[seenIndex];
        }
        var ret = {};
        var keys = Object.keys(x).sort(opts.compare);
        seenInput.push(x);
        seenOutput.push(ret);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var val = x[key];
          ret[key] = deep && isPlainObj(val) ? sortKeys(val) : val;
        }
        return ret;
      };
      return sortKeys(obj);
    };
  }
});

// node_modules/sort-keys-length/index.js
var require_sort_keys_length = __commonJS({
  "node_modules/sort-keys-length/index.js"(exports2, module2) {
    "use strict";
    var sortKeys = require_sort_keys2();
    module2.exports.desc = function(obj) {
      return sortKeys(obj, function(a, b) {
        return b.length - a.length;
      });
    };
    module2.exports.asc = function(obj) {
      return sortKeys(obj, function(a, b) {
        return a.length - b.length;
      });
    };
  }
});

// node_modules/ext-name/index.js
var require_ext_name = __commonJS({
  "node_modules/ext-name/index.js"(exports2, module2) {
    "use strict";
    var extList = require_ext_list();
    var sortKeysLength = require_sort_keys_length();
    module2.exports = (str) => {
      const obj = sortKeysLength.desc(extList());
      const exts = Object.keys(obj).filter((x) => str.endsWith(x));
      if (exts.length === 0) {
        return [];
      }
      return exts.map((x) => ({
        ext: x,
        mime: obj[x]
      }));
    };
    module2.exports.mime = (str) => {
      const obj = sortKeysLength.desc(extList());
      const exts = Object.keys(obj).filter((x) => obj[x] === str);
      if (exts.length === 0) {
        return [];
      }
      return exts.map((x) => ({
        ext: x,
        mime: obj[x]
      }));
    };
  }
});

// node_modules/download/index.js
var require_download = __commonJS({
  "node_modules/download/index.js"(exports2, module2) {
    "use strict";
    var fs3 = require("fs");
    var path3 = require("path");
    var { URL } = require("url");
    var contentDisposition = require_content_disposition();
    var archiveType = require_archive_type();
    var decompress = require_decompress();
    var filenamify = require_filenamify();
    var getStream = require_get_stream2();
    var got = require_got();
    var makeDir = require_make_dir2();
    var pify = require_pify5();
    var pEvent = require_p_event();
    var fileType2 = require_file_type6();
    var extName = require_ext_name();
    var fsP = pify(fs3);
    var filenameFromPath = (res) => path3.basename(new URL(res.requestUrl).pathname);
    var getExtFromMime = (res) => {
      const header = res.headers["content-type"];
      if (!header) {
        return null;
      }
      const exts = extName.mime(header);
      if (exts.length !== 1) {
        return null;
      }
      return exts[0].ext;
    };
    var getFilename = (res, data) => {
      const header = res.headers["content-disposition"];
      if (header) {
        const parsed = contentDisposition.parse(header);
        if (parsed.parameters && parsed.parameters.filename) {
          return parsed.parameters.filename;
        }
      }
      let filename = filenameFromPath(res);
      if (!path3.extname(filename)) {
        const ext = (fileType2(data) || {}).ext || getExtFromMime(res);
        if (ext) {
          filename = `${filename}.${ext}`;
        }
      }
      return filename;
    };
    module2.exports = (uri, output, opts) => {
      if (typeof output === "object") {
        opts = output;
        output = null;
      }
      opts = Object.assign({
        encoding: null,
        rejectUnauthorized: process.env.npm_config_strict_ssl !== "false"
      }, opts);
      const stream2 = got.stream(uri, opts);
      const promise = pEvent(stream2, "response").then((res) => {
        const encoding = opts.encoding === null ? "buffer" : opts.encoding;
        return Promise.all([getStream(stream2, { encoding }), res]);
      }).then((result) => {
        const [data, res] = result;
        if (!output) {
          return opts.extract && archiveType(data) ? decompress(data, opts) : data;
        }
        const filename = opts.filename || filenamify(getFilename(res, data));
        const outputFilepath = path3.join(output, filename);
        if (opts.extract && archiveType(data)) {
          return decompress(data, path3.dirname(outputFilepath), opts);
        }
        return makeDir(path3.dirname(outputFilepath)).then(() => fsP.writeFile(outputFilepath, data)).then(() => data);
      });
      stream2.then = promise.then.bind(promise);
      stream2.catch = promise.catch.bind(promise);
      return stream2;
    };
  }
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports2, module2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn2(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext2(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState5(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef2(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect3(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve2, reject2) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve2, reject2);
                    } else {
                      resolve2(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject2(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve2, reject2) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve2, reject2);
                    } else {
                      resolve2(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve2, reject2) {
                    resolve2(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve2, reject2) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve2(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve2, reject2);
                  }
                });
              } catch (error2) {
                reject2(error2);
              }
            } else {
              resolve2(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports2.Children = Children;
        exports2.Component = Component;
        exports2.Fragment = REACT_FRAGMENT_TYPE;
        exports2.Profiler = REACT_PROFILER_TYPE;
        exports2.PureComponent = PureComponent;
        exports2.StrictMode = REACT_STRICT_MODE_TYPE;
        exports2.Suspense = REACT_SUSPENSE_TYPE;
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports2.cloneElement = cloneElement$1;
        exports2.createContext = createContext2;
        exports2.createElement = createElement$1;
        exports2.createFactory = createFactory;
        exports2.createRef = createRef;
        exports2.forwardRef = forwardRef;
        exports2.isValidElement = isValidElement;
        exports2.lazy = lazy;
        exports2.memo = memo;
        exports2.startTransition = startTransition;
        exports2.unstable_act = act;
        exports2.useCallback = useCallback;
        exports2.useContext = useContext;
        exports2.useDebugValue = useDebugValue;
        exports2.useDeferredValue = useDeferredValue;
        exports2.useEffect = useEffect3;
        exports2.useId = useId;
        exports2.useImperativeHandle = useImperativeHandle;
        exports2.useInsertionEffect = useInsertionEffect;
        exports2.useLayoutEffect = useLayoutEffect;
        exports2.useMemo = useMemo;
        exports2.useReducer = useReducer;
        exports2.useRef = useRef2;
        exports2.useState = useState5;
        exports2.useSyncExternalStore = useSyncExternalStore;
        exports2.useTransition = useTransition;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports2.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports2.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports2.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports2.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports2.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports2.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports2.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports2.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports2.unstable_IdlePriority = IdlePriority;
        exports2.unstable_ImmediatePriority = ImmediatePriority;
        exports2.unstable_LowPriority = LowPriority;
        exports2.unstable_NormalPriority = NormalPriority;
        exports2.unstable_Profiling = unstable_Profiling;
        exports2.unstable_UserBlockingPriority = UserBlockingPriority;
        exports2.unstable_cancelCallback = unstable_cancelCallback;
        exports2.unstable_continueExecution = unstable_continueExecution;
        exports2.unstable_forceFrameRate = forceFrameRate;
        exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports2.unstable_next = unstable_next;
        exports2.unstable_pauseExecution = unstable_pauseExecution;
        exports2.unstable_requestPaint = unstable_requestPaint;
        exports2.unstable_runWithPriority = unstable_runWithPriority;
        exports2.unstable_scheduleCallback = unstable_scheduleCallback;
        exports2.unstable_shouldYield = shouldYieldToHost;
        exports2.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React14 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React14.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn2(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React14.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty2 = value == null || typeof value === "boolean" || value === "";
          if (isEmpty2) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_3, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var ChildDeletion = 16;
        var ContentReset = 32;
        var Callback = 64;
        var DidCapture = 128;
        var ForceClientRender = 256;
        var Ref = 512;
        var Snapshot = 1024;
        var Passive = 2048;
        var Hydrating = 4096;
        var Visibility = 8192;
        var StoreConsistency = 16384;
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = 32767;
        var Incomplete = 32768;
        var ShouldCapture = 65536;
        var ForceUpdateForLegacySuspense = 131072;
        var Forked = 1048576;
        var RefStatic = 2097152;
        var LayoutStatic = 4194304;
        var PassiveStatic = 8388608;
        var MountLayoutDev = 16777216;
        var MountPassiveDev = 33554432;
        var BeforeMutationMask = Update | Snapshot | 0;
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = 0;
        var ConcurrentMode = 1;
        var ProfileMode = 2;
        var StrictLegacyMode = 8;
        var StrictEffectsMode = 16;
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var InputContinuousHydrationLane = 2;
        var InputContinuousLane = 4;
        var DefaultHydrationLane = 8;
        var DefaultLane = 16;
        var TransitionHydrationLane = 32;
        var TransitionLanes = 4194240;
        var TransitionLane1 = 64;
        var TransitionLane2 = 128;
        var TransitionLane3 = 256;
        var TransitionLane4 = 512;
        var TransitionLane5 = 1024;
        var TransitionLane6 = 2048;
        var TransitionLane7 = 4096;
        var TransitionLane8 = 8192;
        var TransitionLane9 = 16384;
        var TransitionLane10 = 32768;
        var TransitionLane11 = 65536;
        var TransitionLane12 = 131072;
        var TransitionLane13 = 262144;
        var TransitionLane14 = 524288;
        var TransitionLane15 = 1048576;
        var TransitionLane16 = 2097152;
        var RetryLanes = 130023424;
        var RetryLane1 = 4194304;
        var RetryLane2 = 8388608;
        var RetryLane3 = 16777216;
        var RetryLane4 = 33554432;
        var RetryLane5 = 67108864;
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = 134217728;
        var NonIdleLanes = 268435455;
        var IdleHydrationLane = 268435456;
        var IdleLane = 536870912;
        var OffscreenLane = 1073741824;
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
          var eventTimes = root2.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React14.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Insertion = 2;
        var Layout = 4;
        var Passive$1 = 8;
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root2, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root2 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root2 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root2 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root2 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (deletedFiber.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (finishedWork.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root2, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(child, root2, committedLanes);
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = 0;
        var BatchedContext = 1;
        var RenderContext = 2;
        var CommitContext = 4;
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root2, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
          var current2 = root2.current;
          current2.lanes = lane;
          markRootUpdated(root2, lane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (executionContext & RenderContext) !== NoContext;
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root2.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended$1(root2, lanes);
                  ensureRootIsScheduled(root2, now());
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function recoverFromConcurrentError(root2, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root2)) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root2, now());
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root2, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root2, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root2 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root2 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.2.0";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current2 = root2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root2, lane, eventTime);
          return root2;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(current$1, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path3, index2) {
            var key = path3[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path3.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path3, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path3) {
            return copyWithDeleteImpl(obj, path3, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn2("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn2("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path3, index2, value) {
            if (index2 >= path3.length) {
              return value;
            }
            var key = path3[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path3, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path3, value) {
            return copyWithSetImpl(obj, path3, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path3, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path3, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path3) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path3);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path3, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path3, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path3) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path3);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools,
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          if (root2 !== null) {
            this._internalRoot = null;
            var container = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot3(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = root2;
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root2;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root2, parentComponent, callback);
          }
          return getPublicRootInstance(root2);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot3(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports2.createPortal = createPortal$1;
        exports2.createRoot = createRoot$1;
        exports2.findDOMNode = findDOMNode;
        exports2.flushSync = flushSync$1;
        exports2.hydrate = hydrate;
        exports2.hydrateRoot = hydrateRoot$1;
        exports2.render = render;
        exports2.unmountComponentAtNode = unmountComponentAtNode;
        exports2.unstable_batchedUpdates = batchedUpdates$1;
        exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      checkDCE();
      module2.exports = null;
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports2) {
    "use strict";
    var m = require_react_dom();
    if (false) {
      exports2.createRoot = m.createRoot;
      exports2.hydrateRoot = m.hydrateRoot;
    } else {
      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports2.createRoot = function(c, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.createRoot(c, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
      exports2.hydrateRoot = function(c, h, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.hydrateRoot(c, h, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
    }
    var i;
  }
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports2, module2) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _3.defaults(root.Object(), context, _3.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          "escape": reEscape,
          "evaluate": reEvaluate,
          "interpolate": reInterpolate,
          "variable": "",
          "imports": {
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack2(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack2.prototype.clear = stackClear;
        Stack2.prototype["delete"] = stackDelete;
        Stack2.prototype.get = stackGet;
        Stack2.prototype.has = stackHas;
        Stack2.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack2());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path3) {
          path3 = castPath(path3, object);
          var index = 0, length = path3.length;
          while (object != null && index < length) {
            object = object[toKey(path3[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path3, args) {
          path3 = castPath(path3, object);
          object = parent(object, path3);
          var func = object == null ? object : object[toKey(last(path3))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack2());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack2());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack2());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack2();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path3, srcValue) {
          if (isKey(path3) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path3), srcValue);
          }
          return function(object) {
            var objValue = get(object, path3);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path3) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack2());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path3) {
            return hasIn(object, path3);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path3 = paths[index], value = baseGet(object, path3);
            if (predicate(value, path3)) {
              baseSet(result2, castPath(path3, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path3) {
          return function(object) {
            return baseGet(object, path3);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path3, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path3 = castPath(path3, object);
          var index = -1, length = path3.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path3[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path3[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path3) {
          path3 = castPath(path3, object);
          object = parent(object, path3);
          return object == null || delete object[toKey(last(path3))];
        }
        function baseUpdate(object, path3, updater, customizer) {
          return baseSet(object, path3, updater(baseGet(object, path3)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path3, hasFunc) {
          path3 = castPath(path3, object);
          var index = -1, length = path3.length, result2 = false;
          while (++index < length) {
            var key = toKey(path3[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path3) {
          return path3.length < 2 ? object : baseGet(object, baseSlice(path3, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path3, args) {
          var index = -1, isFunc = typeof path3 == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path3, value, args) : baseInvoke(value, path3, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject2(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce2(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce2(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty2(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path3, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path3);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path3) {
          return object != null && hasPath(object, path3, baseHas);
        }
        function hasIn(object, path3) {
          return object != null && hasPath(object, path3, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path3) {
            path3 = castPath(path3, object);
            isDeep || (isDeep = path3.length > 1);
            return path3;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path3) {
            return predicate(value, path3[0]);
          });
        }
        function result(object, path3, defaultValue) {
          path3 = castPath(path3, object);
          var index = -1, length = path3.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path3[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path3, value) {
          return object == null ? object : baseSet(object, path3, value);
        }
        function setWith(object, path3, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path3, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path3) {
          return object == null ? true : baseUnset(object, path3);
        }
        function update(object, path3, updater) {
          return object == null ? object : baseUpdate(object, path3, castFunction(updater));
        }
        function updateWith(object, path3, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path3, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path3, srcValue) {
          return baseMatchesProperty(path3, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path3, args) {
          return function(object) {
            return baseInvoke(object, path3, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path3) {
            return baseInvoke(object, path3, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path3) {
          return isKey(path3) ? baseProperty(toKey(path3)) : basePropertyDeep(path3);
        }
        function propertyOf(object) {
          return function(path3) {
            return object == null ? undefined2 : baseGet(object, path3);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce2;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject2;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty2;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path3, args) {
          if (typeof path3 == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path3, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _3 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _3;
        define(function() {
          return _3;
        });
      } else if (freeModule) {
        (freeModule.exports = _3)._ = _3;
        freeExports._ = _3;
      } else {
        root._ = _3;
      }
    }).call(exports2);
  }
});

// node_modules/@retorquere/bibtex-parser/grammar.js
var require_grammar = __commonJS({
  "node_modules/@retorquere/bibtex-parser/grammar.js"(exports2, module2) {
    "use strict";
    function peg$subclass(child, parent) {
      function C() {
        this.constructor = child;
      }
      C.prototype = parent.prototype;
      child.prototype = new C();
    }
    function peg$SyntaxError(message, expected, found, location) {
      var self2 = Error.call(this, message);
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
      }
      self2.expected = expected;
      self2.found = found;
      self2.location = location;
      self2.name = "SyntaxError";
      return self2;
    }
    peg$subclass(peg$SyntaxError, Error);
    function peg$padEnd(str, targetLength, padString) {
      padString = padString || " ";
      if (str.length > targetLength) {
        return str;
      }
      targetLength -= str.length;
      padString += padString.repeat(targetLength);
      return str + padString.slice(0, targetLength);
    }
    peg$SyntaxError.prototype.format = function(sources) {
      var str = "Error: " + this.message;
      if (this.location) {
        var src = null;
        var k;
        for (k = 0; k < sources.length; k++) {
          if (sources[k].source === this.location.source) {
            src = sources[k].text.split(/\r\n|\n|\r/g);
            break;
          }
        }
        var s = this.location.start;
        var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
        var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
        if (src) {
          var e = this.location.end;
          var filler = peg$padEnd("", offset_s.line.toString().length, " ");
          var line = src[s.line - 1];
          var last = s.line === e.line ? e.column : line.length + 1;
          var hatLen = last - s.column || 1;
          str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
        } else {
          str += "\n at " + loc;
        }
      }
      return str;
    };
    peg$SyntaxError.buildMessage = function(expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return '"' + literalEscape(expectation.text) + '"';
        },
        class: function(expectation) {
          var escapedParts = expectation.parts.map(function(part) {
            return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
          });
          return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
        },
        any: function() {
          return "any character";
        },
        end: function() {
          return "end of input";
        },
        other: function(expectation) {
          return expectation.description;
        }
      };
      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }
      function literalEscape(s) {
        return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function classEscape(s) {
        return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }
      function describeExpected(expected2) {
        var descriptions = expected2.map(describeExpectation);
        var i, j;
        descriptions.sort();
        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i];
              j++;
            }
          }
          descriptions.length = j;
        }
        switch (descriptions.length) {
          case 1:
            return descriptions[0];
          case 2:
            return descriptions[0] + " or " + descriptions[1];
          default:
            return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
        }
      }
      function describeFound(found2) {
        return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
      }
      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    function peg$parse(input, options) {
      options = options !== void 0 ? options : {};
      var peg$FAILED = {};
      var peg$source = options.grammarSource;
      var peg$startRuleFunctions = { Bibliography: peg$parseBibliography };
      var peg$startRuleFunction = peg$parseBibliography;
      var peg$c0 = "@";
      var peg$c1 = "comment";
      var peg$c2 = "{";
      var peg$c3 = "}";
      var peg$c4 = "preamble";
      var peg$c5 = "string";
      var peg$c6 = ",";
      var peg$c7 = '"';
      var peg$c8 = "{\\verb";
      var peg$c9 = "\\begin{";
      var peg$c10 = "\\end{";
      var peg$c11 = "{\\";
      var peg$c12 = "\\";
      var peg$c13 = "$";
      var peg$c14 = "$$";
      var peg$c15 = "\\[";
      var peg$c16 = "\\]";
      var peg$c17 = "%";
      var peg$c18 = "\\\\";
      var peg$c19 = "\r";
      var peg$c20 = "\n";
      var peg$c21 = "newcommand";
      var peg$c22 = "href";
      var peg$c23 = "begin";
      var peg$c24 = "end";
      var peg$c25 = "[";
      var peg$c26 = "]";
      var peg$c27 = "=";
      var peg$c28 = "#";
      var peg$r0 = /^[^\n\r]/;
      var peg$r1 = /^[\n\r]/;
      var peg$r2 = /^[^@]/;
      var peg$r3 = /^[^{}]/;
      var peg$r4 = /^[_A-Za-z]/;
      var peg$r5 = /^[({]/;
      var peg$r6 = /^[})]/;
      var peg$r7 = /^[^ \t\r\n,]/;
      var peg$r8 = /^[_:a-zA-Z0-9\-]/;
      var peg$r9 = /^[^{}"]/;
      var peg$r10 = /^[a-zA-Z]/;
      var peg$r11 = /^[^\^_${}\\]/;
      var peg$r12 = /^[^\^_${}"\\]/;
      var peg$r13 = /^[0-9]/;
      var peg$r14 = /^[a-zA-Z0-9]/;
      var peg$r15 = /^[ij]/;
      var peg$r16 = /^[^\r\n]/;
      var peg$r17 = /^[_\^]/;
      var peg$r18 = /^[^A-Za-z0-9\t\r\n]/;
      var peg$r19 = /^[A-Za-z]/;
      var peg$r20 = /^[^\]]/;
      var peg$r21 = /^[^ \t\^_${}\\]/;
      var peg$r22 = /^[a-zA-Z\-_]/;
      var peg$r23 = /^[a-zA-Z0-9\-&_:]/;
      var peg$r24 = /^['`"=~\^.]/;
      var peg$r25 = /^['`"=~\^.cbuvdrHk]/;
      var peg$r26 = /^[\r\n]/;
      var peg$r27 = /^[ \t]/;
      var peg$r28 = /^[ \t\n\r]/;
      var peg$e0 = peg$literalExpectation("@", false);
      var peg$e1 = peg$literalExpectation("comment", true);
      var peg$e2 = peg$classExpectation(["\n", "\r"], true, false);
      var peg$e3 = peg$classExpectation(["\n", "\r"], false, false);
      var peg$e4 = peg$classExpectation(["@"], true, false);
      var peg$e5 = peg$literalExpectation("{", false);
      var peg$e6 = peg$classExpectation(["{", "}"], true, false);
      var peg$e7 = peg$literalExpectation("}", false);
      var peg$e8 = peg$classExpectation(["_", ["A", "Z"], ["a", "z"]], false, false);
      var peg$e9 = peg$classExpectation(["(", "{"], false, false);
      var peg$e10 = peg$classExpectation(["}", ")"], false, false);
      var peg$e11 = peg$literalExpectation("preamble", true);
      var peg$e12 = peg$literalExpectation("string", true);
      var peg$e13 = peg$classExpectation([" ", "	", "\r", "\n", ","], true, false);
      var peg$e14 = peg$literalExpectation(",", false);
      var peg$e15 = peg$classExpectation(["_", ":", ["a", "z"], ["A", "Z"], ["0", "9"], "-"], false, false);
      var peg$e16 = peg$literalExpectation('"', false);
      var peg$e17 = peg$classExpectation(["{", "}", '"'], true, false);
      var peg$e18 = peg$literalExpectation("{\\verb", false);
      var peg$e19 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
      var peg$e20 = peg$classExpectation(["^", "_", "$", "{", "}", "\\"], true, false);
      var peg$e21 = peg$classExpectation(["^", "_", "$", "{", "}", '"', "\\"], true, false);
      var peg$e22 = peg$classExpectation([["0", "9"]], false, false);
      var peg$e23 = peg$literalExpectation("\\begin{", false);
      var peg$e24 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
      var peg$e25 = peg$literalExpectation("\\end{", false);
      var peg$e26 = peg$literalExpectation("{\\", false);
      var peg$e27 = peg$literalExpectation("\\", false);
      var peg$e28 = peg$classExpectation(["i", "j"], false, false);
      var peg$e29 = peg$literalExpectation("$", false);
      var peg$e30 = peg$literalExpectation("$$", false);
      var peg$e31 = peg$literalExpectation("\\[", false);
      var peg$e32 = peg$literalExpectation("\\]", false);
      var peg$e33 = peg$literalExpectation("%", false);
      var peg$e34 = peg$classExpectation(["\r", "\n"], true, false);
      var peg$e35 = peg$literalExpectation("\\\\", false);
      var peg$e36 = peg$literalExpectation("\r", false);
      var peg$e37 = peg$literalExpectation("\n", false);
      var peg$e38 = peg$classExpectation(["_", "^"], false, false);
      var peg$e39 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "	", "\r", "\n"], true, false);
      var peg$e40 = peg$literalExpectation("newcommand", false);
      var peg$e41 = peg$literalExpectation("href", false);
      var peg$e42 = peg$literalExpectation("begin", false);
      var peg$e43 = peg$literalExpectation("end", false);
      var peg$e44 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false);
      var peg$e45 = peg$literalExpectation("[", false);
      var peg$e46 = peg$classExpectation(["]"], true, false);
      var peg$e47 = peg$literalExpectation("]", false);
      var peg$e48 = peg$classExpectation([" ", "	", "^", "_", "$", "{", "}", "\\"], true, false);
      var peg$e49 = peg$classExpectation([["a", "z"], ["A", "Z"], "-", "_"], false, false);
      var peg$e50 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "&", "_", ":"], false, false);
      var peg$e51 = peg$classExpectation(["'", "`", '"', "=", "~", "^", "."], false, false);
      var peg$e52 = peg$classExpectation(["'", "`", '"', "=", "~", "^", ".", "c", "b", "u", "v", "d", "r", "H", "k"], false, false);
      var peg$e53 = peg$literalExpectation("=", false);
      var peg$e54 = peg$literalExpectation("#", false);
      var peg$e55 = peg$classExpectation(["\r", "\n"], false, false);
      var peg$e56 = peg$otherExpectation("Mandatory Horizontal Whitespace");
      var peg$e57 = peg$classExpectation([" ", "	"], false, false);
      var peg$e58 = peg$otherExpectation("Optional Horizontal Whitespace");
      var peg$e59 = peg$otherExpectation("Mandatory Vertical Whitespace");
      var peg$e60 = peg$otherExpectation("Optional Vertical Whitespace");
      var peg$e61 = peg$otherExpectation("Mandatory Whitespace");
      var peg$e62 = peg$classExpectation([" ", "	", "\n", "\r"], false, false);
      var peg$e63 = peg$otherExpectation("Optional Whitespace");
      var peg$f0 = function(r) {
        return {
          kind: "Bibliography",
          loc: location(),
          source: text(),
          children: r
        };
      };
      var peg$f1 = function(v) {
        return {
          kind: "BracedComment",
          loc: location(),
          source: text(),
          value: v.slice(1, -1)
        };
      };
      var peg$f2 = function(v) {
        return {
          kind: "LineComment",
          loc: location(),
          source: text(),
          value: normalizeWhitespace(v)
        };
      };
      var peg$f3 = function(v) {
        return {
          kind: "NonEntryText",
          loc: location(),
          source: text(),
          value: normalizeWhitespace(v)
        };
      };
      var peg$f4 = function(n) {
        return n;
      };
      var peg$f5 = function(comment) {
        return "{" + comment.join("") + "}";
      };
      var peg$f6 = function(type, id, fields) {
        return {
          kind: "Entry",
          id: id || "",
          type: type.toLowerCase(),
          loc: location(),
          source: text(),
          fields
        };
      };
      var peg$f7 = function(opener, v, closer) {
        switch (opener + closer) {
          case "{}":
          case "()":
            break;
          default:
            throw new Error(`Unbalanced opener-closer for preamble: ${opener}...${closer}`);
            break;
        }
        return {
          kind: "PreambleExpression",
          loc: location(),
          source: text(),
          value: v.reduce((a, b) => a.concat(b), [])
        };
      };
      var peg$f8 = function(k, v) {
        return {
          kind: "StringDeclaration",
          loc: location(),
          source: text(),
          name: k,
          value: v.reduce((a, b) => a.concat(b), [])
        };
      };
      var peg$f9 = function(id) {
        return id;
      };
      var peg$f10 = function(name) {
        return isVerbatimField(name) && unnestFields.includes(name);
      };
      var peg$f11 = function(name, value) {
        return {
          kind: "Field",
          loc: location(),
          source: text(),
          name,
          loc: location(),
          value: [protect(value)]
        };
      };
      var peg$f12 = function(name) {
        return isVerbatimField(name);
      };
      var peg$f13 = function(name, value) {
        return {
          kind: "Field",
          loc: location(),
          source: text(),
          name,
          loc: location(),
          value: [protect(value)]
        };
      };
      var peg$f14 = function(name, value) {
        if (unnestFields.includes(name) && Array.isArray(value) && value.length === 1 && value[0].kind === "Block") {
          if (options.unnestMode === "preserve") {
            value[0].case = "preserve";
          } else {
            value = value[0].value;
          }
        }
        return handle_markup_switches({
          kind: "Field",
          loc: location(),
          source: text(),
          name,
          value
        });
      };
      var peg$f15 = function(name) {
        return name.toLowerCase();
      };
      var peg$f16 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v || "",
          mode: "verbatim"
        });
      };
      var peg$f17 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v.join(""),
          mode: "verbatim"
        });
      };
      var peg$f18 = function(v) {
        return v;
      };
      var peg$f19 = function(v) {
        return "{" + v + "}";
      };
      var peg$f20 = function(v) {
        return v;
      };
      var peg$f21 = function(v) {
        return "{" + v + "}";
      };
      var peg$f22 = function() {
        return math.set(false);
      };
      var peg$f23 = function(v) {
        return v.reduce((a, b) => a.concat(b), []);
      };
      var peg$f24 = function(v) {
        return v;
      };
      var peg$f25 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v.join("").trim(),
          mode: "verbatim"
        });
      };
      var peg$f26 = function(v) {
        return v;
      };
      var peg$f27 = function(v) {
        return v;
      };
      var peg$f28 = function(v) {
        return v;
      };
      var peg$f29 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: normalizeWhitespace(v),
          mode: math.on ? "math" : "text"
        });
      };
      var peg$f30 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: normalizeWhitespace(v),
          mode: math.on ? "math" : "text"
        });
      };
      var peg$f31 = function(v) {
        return {
          kind: "Number",
          loc: location(),
          source: text(),
          value: parseInt(v, 10)
        };
      };
      var peg$f32 = function(v) {
        return {
          kind: "StringReference",
          loc: location(),
          source: text(),
          name: v
        };
      };
      var peg$f33 = function(env, v, cenv) {
        return env === cenv;
      };
      var peg$f34 = function(env, v, cenv) {
        if (markup[env]) {
          return {
            kind: "Block",
            loc: location(),
            source: text(),
            value: v,
            markup: { [markup[env]]: true }
          };
        } else {
          return {
            kind: "Environment",
            loc: location(),
            source: text(),
            value: v,
            env
          };
        }
      };
      var peg$f35 = function(mark, chr) {
        return {
          kind: "DiacriticCommand",
          loc: location(),
          source: text(),
          mark,
          dotless: !!chr[1],
          character: chr[1] || chr[0]
        };
      };
      var peg$f36 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v.join("").trim(),
          mode: "verbatim"
        });
      };
      var peg$f37 = function(v) {
        const block = {
          kind: "Block",
          loc: location(),
          source: text(),
          value: v,
          markup: {},
          case: "protect"
        };
        let leadingcmd = block.value.length && (block.value[0].kind.endsWith("Command") || block.value[0].kind === "Environment") ? block.value[0] : null;
        let leadingcmdblockarg = leadingcmd && leadingcmd.kind === "RegularCommand" && leadingcmd.arguments.required.length && leadingcmd.arguments.required[0].kind === "Block" && leadingcmd.arguments.required[0];
        if (leadingcmd) {
          delete block.case;
          if (leadingcmdblockarg && leadingcmdblockarg.case === "protect")
            delete leadingcmdblockarg.case;
          if (markup[leadingcmd.command] && leadingcmd.arguments.required.length === 0) {
            block.markup[markup[leadingcmd.command]] = true;
            block.value.shift();
          }
        }
        return handle_markup_switches(block);
      };
      var peg$f38 = function() {
        return !math.on;
      };
      var peg$f39 = function(mode) {
        return math.set(true);
      };
      var peg$f40 = function(mode, v) {
        return math.set(false);
      };
      var peg$f41 = function(mode, v) {
        return {
          kind: mode == "$$" ? "DisplayMath" : "InlineMath",
          loc: location(),
          source: text(),
          value: v,
          case: "protect",
          markup: {}
        };
      };
      var peg$f42 = function(v) {
        return {
          kind: "LineComment",
          loc: location(),
          source: text(),
          value: v
        };
      };
      var peg$f43 = function() {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: "\\",
          arguments: {
            optional: [],
            required: []
          }
        };
      };
      var peg$f44 = function() {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: "par",
          arguments: {
            optional: [],
            required: []
          }
        };
      };
      var peg$f45 = function(mode, v) {
        if (v.kind === "Block")
          v = v.value;
        return {
          kind: mode === "_" ? "SubscriptCommand" : "SuperscriptCommand",
          loc: location(),
          source: text(),
          value: v
        };
      };
      var peg$f46 = function(mark, chr) {
        return {
          kind: "DiacriticCommand",
          loc: location(),
          source: text(),
          mark,
          dotless: !!chr[1],
          character: chr[1] || chr[0]
        };
      };
      var peg$f47 = function(mark, chr) {
        return {
          kind: "DiacriticCommand",
          loc: location(),
          source: text(),
          mark,
          dotless: !!chr[1],
          character: chr[1] || chr[0]
        };
      };
      var peg$f48 = function(mark, v) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: mark,
          arguments: {
            optional: [],
            required: [protect(v)]
          }
        };
      };
      var peg$f49 = function(v) {
        return {
          kind: "SymbolCommand",
          loc: location(),
          source: text(),
          command: v
        };
      };
      var peg$f50 = function(cmd, name) {
        return name.value.length == 1 && name.value[0].kind === "RegularCommand";
      };
      var peg$f51 = function(cmd, name, optional, def) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional: [],
            required: [name, def]
          }
        };
      };
      var peg$f52 = function(cmd, url, label) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional: [],
            required: [url, label]
          }
        };
      };
      var peg$f53 = function(cmd) {
        return verbatimCommands.includes(cmd) && has_arguments[cmd] === 2;
      };
      var peg$f54 = function(cmd, optional, req1, req2) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: [protect(req1), protect(req2)]
          }
        };
      };
      var peg$f55 = function(cmd) {
        return verbatimCommands.includes(cmd) && has_arguments[cmd] === 1;
      };
      var peg$f56 = function(cmd, optional, req) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: [protect(req)]
          }
        };
      };
      var peg$f57 = function(cmd) {
        return has_arguments[cmd] === 2;
      };
      var peg$f58 = function(cmd, optional, req1, req2) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: [req1, req2]
          }
        };
      };
      var peg$f59 = function(cmd) {
        return has_arguments[cmd] === 1;
      };
      var peg$f60 = function(cmd, optional, req) {
        let m;
        if (req.kind === "Block") {
          switch (cmd) {
            case "textsuperscript":
            case "sp":
              req.markup.sup = true;
              break;
            case "textsubscript":
            case "sb":
              req.markup.sub = true;
              break;
            case "textsc":
              req.markup.smallCaps = true;
              break;
            case "enquote":
            case "mkbibquote":
              req.markup.enquote = true;
              break;
            case "textbf":
            case "mkbibbold":
              req.markup.bold = true;
              break;
            case "emph":
            case "textit":
            case "mkbibitalic":
            case "mkbibemph":
              req.markup.italics = true;
              break;
            default:
              if (m = cmd.match(/^((sub)*)section$/)) {
                req.markup[`h${m[1].length / 3 + 1}`] = true;
              }
          }
        }
        if (cmd === "bibcyr")
          delete req.case;
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: [req]
          }
        };
      };
      var peg$f61 = function(cmd, optional) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: []
          }
        };
      };
      var peg$f62 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v,
          mode: math.on ? "math" : "text"
        });
      };
      var peg$f63 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: normalizeWhitespace([v]),
          mode: math.on ? "math" : "text"
        });
      };
      var peg$f64 = function(v) {
        return v;
      };
      var peg$currPos = 0;
      var peg$savedPos = 0;
      var peg$posDetailsCache = [{ line: 1, column: 1 }];
      var peg$maxFailPos = 0;
      var peg$maxFailExpected = [];
      var peg$silentFails = 0;
      var peg$result;
      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }
      function text() {
        return input.substring(peg$savedPos, peg$currPos);
      }
      function offset() {
        return peg$savedPos;
      }
      function range() {
        return {
          source: peg$source,
          start: peg$savedPos,
          end: peg$currPos
        };
      }
      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }
      function expected(description, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
      }
      function error(message, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location2);
      }
      function peg$literalExpectation(text2, ignoreCase) {
        return { type: "literal", text: text2, ignoreCase };
      }
      function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts, inverted, ignoreCase };
      }
      function peg$anyExpectation() {
        return { type: "any" };
      }
      function peg$endExpectation() {
        return { type: "end" };
      }
      function peg$otherExpectation(description) {
        return { type: "other", description };
      }
      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
          return details;
        } else {
          p = pos - 1;
          while (!peg$posDetailsCache[p]) {
            p--;
          }
          details = peg$posDetailsCache[p];
          details = {
            line: details.line,
            column: details.column
          };
          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++;
              details.column = 1;
            } else {
              details.column++;
            }
            p++;
          }
          peg$posDetailsCache[pos] = details;
          return details;
        }
      }
      function peg$computeLocation(startPos, endPos, offset2) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        var res = {
          source: peg$source,
          start: {
            offset: startPos,
            line: startPosDetails.line,
            column: startPosDetails.column
          },
          end: {
            offset: endPos,
            line: endPosDetails.line,
            column: endPosDetails.column
          }
        };
        if (offset2 && peg$source && typeof peg$source.offset === "function") {
          res.start = peg$source.offset(res.start);
          res.end = peg$source.offset(res.end);
        }
        return res;
      }
      function peg$fail(expected2) {
        if (peg$currPos < peg$maxFailPos) {
          return;
        }
        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos;
          peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected2);
      }
      function peg$buildSimpleError(message, location2) {
        return new peg$SyntaxError(message, null, null, location2);
      }
      function peg$buildStructuredError(expected2, found, location2) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
      }
      function peg$parseBibliography() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = [];
        s3 = peg$parseNode();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseNode();
        }
        s3 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f0(s2);
        return s0;
      }
      function peg$parseComment() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1) {
            s3 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e1);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__h();
            s5 = peg$parseBracedComment();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f1(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c0;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e0);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1) {
              s3 = input.substr(peg$currPos, 7);
              peg$currPos += 7;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e1);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__h();
              s5 = [];
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$r0.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
              }
              s6 = [];
              if (peg$r1.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e3);
                }
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
              }
              peg$savedPos = s0;
              s0 = peg$f2(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e4);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$r0.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
              }
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (peg$r1.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e3);
                }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
              }
              peg$savedPos = s0;
              s0 = peg$f3(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
        return s0;
      }
      function peg$parseNode() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseComment();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePreambleExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parseStringDeclaration();
            if (s1 === peg$FAILED) {
              s1 = peg$parseEntry();
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f4(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseBracedComment() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c2;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e5);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e6);
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseBracedComment();
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseBracedComment();
            }
          }
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e7);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f5(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseEntry() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          s3 = peg$currPos;
          s4 = [];
          if (peg$r4.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e8);
            }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$r4.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e8);
                }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (peg$r5.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              s7 = peg$parseEntryId();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s8 = peg$parse__();
              s9 = [];
              s10 = peg$parseField();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parseField();
              }
              s10 = peg$parse__();
              if (peg$r6.test(input.charAt(peg$currPos))) {
                s11 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e10);
                }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse__();
                peg$savedPos = s0;
                s0 = peg$f6(s3, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parsePreambleExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c4) {
            s3 = input.substr(peg$currPos, 8);
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e11);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (peg$r5.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              s7 = [];
              s8 = peg$parseEnvironment();
              if (s8 === peg$FAILED) {
                s8 = peg$parseBlock();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseMath();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseCommand();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseText();
                    }
                  }
                }
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseEnvironment();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseBlock();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseMath();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseCommand();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseText();
                      }
                    }
                  }
                }
              }
              s8 = peg$parse__();
              if (peg$r6.test(input.charAt(peg$currPos))) {
                s9 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e10);
                }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse__();
                peg$savedPos = s0;
                s0 = peg$f7(s5, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseStringDeclaration() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c5) {
            s3 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e12);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (peg$r5.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              s7 = peg$parseVariableName();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseFieldSeparator();
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parseRegularValue();
                  if (s10 !== peg$FAILED) {
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseRegularValue();
                    }
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse__();
                    if (peg$r6.test(input.charAt(peg$currPos))) {
                      s11 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e10);
                      }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse__();
                      peg$savedPos = s0;
                      s0 = peg$f8(s7, s9);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseEntryId() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$currPos;
        s3 = [];
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e13);
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$r7.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e13);
            }
          }
        }
        s2 = input.substring(s2, peg$currPos);
        s3 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c6;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e14);
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f9(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseField() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        s0 = peg$currPos;
        s1 = peg$parseFieldName();
        if (s1 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s2 = peg$f10(s1);
          if (s2) {
            s2 = void 0;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseFieldSeparator();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 123) {
                  s6 = peg$c2;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                peg$silentFails--;
                if (s6 !== peg$FAILED) {
                  peg$currPos = s5;
                  s5 = void 0;
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseVerbatimFieldValue();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s7 = peg$c3;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e7);
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$parseFieldTerminator();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parseFieldTerminator();
                      }
                      peg$savedPos = s0;
                      s0 = peg$f11(s1, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFieldName();
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$f12(s1);
            if (s2) {
              s2 = void 0;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseFieldSeparator();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseVerbatimFieldValue();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseFieldTerminator();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseFieldTerminator();
                  }
                  peg$savedPos = s0;
                  s0 = peg$f13(s1, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFieldName();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseFieldSeparator();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseFieldValue();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseFieldTerminator();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseFieldTerminator();
                  }
                  peg$savedPos = s0;
                  s0 = peg$f14(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
        return s0;
      }
      function peg$parseFieldName() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$currPos;
        s3 = [];
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r8.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e15);
              }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f15(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseVerbatimFieldValue() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c7;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e16);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseVerbatimString();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e16);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f16(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c2;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e5);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseVerbatimText();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseVerbatimText();
            }
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f17(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseVerbatimText() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e6);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f18(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c2;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e5);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parseVerbatimText();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseVerbatimText();
            }
            s2 = input.substring(s2, peg$currPos);
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f19(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseVerbatimString() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e17);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r9.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e17);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f20(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c2;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e5);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parseVerbatimString();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseVerbatimString();
            }
            s2 = input.substring(s2, peg$currPos);
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f21(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseFieldValue() {
        var s0, s1, s2, s3;
        s0 = peg$parseNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f22();
          if (s1) {
            s1 = void 0;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseRegularValue();
            if (s3 === peg$FAILED) {
              s3 = peg$parseStringValue();
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseRegularValue();
              if (s3 === peg$FAILED) {
                s3 = peg$parseStringValue();
              }
            }
            peg$savedPos = s0;
            s0 = peg$f23(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseRegularValue() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c7;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e16);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseEnvironment();
          if (s3 === peg$FAILED) {
            s3 = peg$parseBlock();
            if (s3 === peg$FAILED) {
              s3 = peg$parseMath();
              if (s3 === peg$FAILED) {
                s3 = peg$parseCommand();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseTextNoQuotes();
                }
              }
            }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseEnvironment();
            if (s3 === peg$FAILED) {
              s3 = peg$parseBlock();
              if (s3 === peg$FAILED) {
                s3 = peg$parseMath();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseCommand();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseTextNoQuotes();
                  }
                }
              }
            }
          }
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e16);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseConcat();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f24(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c8) {
            s1 = peg$c8;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e18);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (peg$r10.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e19);
              }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseVerbatimText();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseVerbatimText();
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c3;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseConcat();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f25(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseEnvironment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseBlock();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseMath();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseCommand();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseText();
                    }
                  }
                }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseEnvironment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseBlock();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseMath();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseCommand();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseText();
                      }
                    }
                  }
                }
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c3;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseConcat();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f26(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseStringReference();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseConcat();
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f27(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
        return s0;
      }
      function peg$parseStringValue() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parseStringReference();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseConcat();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f28(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseText() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r11.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e20);
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r11.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e20);
              }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f29(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseTextNoQuotes() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r12.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e21);
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r12.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e21);
              }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f30(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseNumber() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$r13.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e22);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r13.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e22);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f31(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseStringReference() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseVariableName();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f32(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseEnvironment() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c9) {
          s1 = peg$c9;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e23);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          if (peg$r14.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e24);
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$r14.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e24);
                }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseEnvironment();
              if (s5 === peg$FAILED) {
                s5 = peg$parseBlock();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseCommand();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseMath();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseText();
                    }
                  }
                }
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseEnvironment();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseBlock();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseCommand();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseMath();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseText();
                      }
                    }
                  }
                }
              }
              if (input.substr(peg$currPos, 5) === peg$c10) {
                s5 = peg$c10;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e25);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = [];
                if (peg$r14.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e24);
                  }
                }
                if (s8 !== peg$FAILED) {
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    if (peg$r14.test(input.charAt(peg$currPos))) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e24);
                      }
                    }
                  }
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s6 = input.substring(s6, peg$currPos);
                } else {
                  s6 = s7;
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s7 = peg$c3;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e7);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$f33(s2, s4, s6);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f34(s2, s4, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseBlock() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c11) {
          s1 = peg$c11;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e26);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseExtendedDiacritic();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            if (peg$r14.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e24);
              }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s5 = peg$c12;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s5 !== peg$FAILED) {
                if (peg$r15.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e28);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c3;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f35(s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c8) {
            s1 = peg$c8;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e18);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (peg$r10.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e19);
              }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseVerbatimText();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseVerbatimText();
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c3;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseEnvironment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseBlock();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseCommand();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseMath();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseText();
                    }
                  }
                }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseEnvironment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseBlock();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseCommand();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseMath();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseText();
                      }
                    }
                  }
                }
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c3;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f37(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
        return s0;
      }
      function peg$parseMath() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f38();
        if (s1) {
          s1 = void 0;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 36) {
            s2 = peg$c13;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e29);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c14) {
              s2 = peg$c14;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e30);
              }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c15) {
                s2 = peg$c15;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e31);
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s3 = peg$f39(s2);
            if (s3) {
              s3 = void 0;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseBlock();
              if (s5 === peg$FAILED) {
                s5 = peg$parseCommand();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseText();
                }
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseBlock();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseCommand();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseText();
                  }
                }
              }
              if (input.charCodeAt(peg$currPos) === 36) {
                s5 = peg$c13;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e29);
                }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c14) {
                  s5 = peg$c14;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e30);
                  }
                }
                if (s5 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c16) {
                    s5 = peg$c16;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e32);
                    }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$f40(s2, s4);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f41(s2, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseLineComment() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 37) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e33);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__h();
          s3 = peg$currPos;
          s4 = [];
          if (peg$r16.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e34);
            }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$r16.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e34);
                }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEOL();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseEOL();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f42(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseCommand() {
        var s0;
        s0 = peg$parseScriptCommand();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLineBreak();
          if (s0 === peg$FAILED) {
            s0 = peg$parseParBreak();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDiacriticCommand();
              if (s0 === peg$FAILED) {
                s0 = peg$parseRegularCommand();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSymbolCommand();
                }
              }
            }
          }
        }
        return s0;
      }
      function peg$parseLineBreak() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c18) {
          s2 = peg$c18;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e35);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f43();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseParBreak() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parse__h();
        if (input.charCodeAt(peg$currPos) === 13) {
          s2 = peg$c19;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e36);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e37);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__h();
          if (input.charCodeAt(peg$currPos) === 13) {
            s5 = peg$c19;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e36);
            }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (input.charCodeAt(peg$currPos) === 10) {
            s6 = peg$c20;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e37);
            }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            peg$savedPos = s0;
            s0 = peg$f44();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseScriptCommand() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (peg$r17.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e38);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__h();
          s3 = peg$parseArgument();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f45(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseDiacriticCommand() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e27);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSimpleDiacritic();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            if (peg$r14.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e24);
              }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s5 = peg$c12;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s5 !== peg$FAILED) {
                if (peg$r15.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e28);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f46(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e27);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseExtendedDiacritic();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s3 = peg$c2;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              if (s3 !== peg$FAILED) {
                if (peg$r14.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e24);
                  }
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s5 = peg$c12;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e27);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    if (peg$r15.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e28);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s5 = peg$c3;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e7);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f47(s2, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c12;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e27);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseExtendedDiacritic();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 123) {
                  s4 = peg$c2;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                peg$silentFails--;
                if (s4 !== peg$FAILED) {
                  peg$currPos = s3;
                  s3 = void 0;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseRegularValue();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f48(s2, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
        return s0;
      }
      function peg$parseSymbolCommand() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e27);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          if (peg$r18.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e39);
            }
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f49(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseRegularCommand() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e27);
          }
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c21) {
            s2 = peg$c21;
            peg$currPos += 10;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e40);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseBlock();
            if (s3 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s4 = peg$f50(s2, s3);
              if (s4) {
                s4 = void 0;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseOptionalArgument();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseOptionalArgument();
                }
                s6 = peg$parseArgument();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f51(s2, s3, s5, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e27);
            }
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c22) {
              s2 = peg$c22;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e41);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__h();
              s4 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c2;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              peg$silentFails--;
              if (s5 !== peg$FAILED) {
                peg$currPos = s4;
                s4 = void 0;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseVerbatimFieldValue();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseArgument();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f52(s2, s5, s6);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c12;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e27);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              if (input.substr(peg$currPos, 5) === peg$c23) {
                s3 = peg$c23;
                peg$currPos += 5;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e42);
                }
              }
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = void 0;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 3) === peg$c24) {
                  s4 = peg$c24;
                  peg$currPos += 3;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e43);
                  }
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = [];
                  if (peg$r19.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e44);
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      if (peg$r19.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e44);
                        }
                      }
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = input.substring(s4, peg$currPos);
                  } else {
                    s4 = s5;
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s5 = peg$f53(s4);
                    if (s5) {
                      s5 = void 0;
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parseOptionalArgument();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parseOptionalArgument();
                      }
                      s7 = peg$parse__h();
                      s8 = peg$currPos;
                      peg$silentFails++;
                      if (input.charCodeAt(peg$currPos) === 123) {
                        s9 = peg$c2;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e5);
                        }
                      }
                      peg$silentFails--;
                      if (s9 !== peg$FAILED) {
                        peg$currPos = s8;
                        s8 = void 0;
                      } else {
                        s8 = peg$FAILED;
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseVerbatimFieldValue();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseVerbatimFieldValue();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f54(s4, s6, s9, s10);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c12;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 5) === peg$c23) {
                  s3 = peg$c23;
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e42);
                  }
                }
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                  s2 = void 0;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 3) === peg$c24) {
                    s4 = peg$c24;
                    peg$currPos += 3;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e43);
                    }
                  }
                  peg$silentFails--;
                  if (s4 === peg$FAILED) {
                    s3 = void 0;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = [];
                    if (peg$r19.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e44);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        if (peg$r19.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e44);
                          }
                        }
                      }
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s4 = input.substring(s4, peg$currPos);
                    } else {
                      s4 = s5;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s5 = peg$f55(s4);
                      if (s5) {
                        s5 = void 0;
                      } else {
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parseOptionalArgument();
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parseOptionalArgument();
                        }
                        s7 = peg$parse__h();
                        s8 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 123) {
                          s9 = peg$c2;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e5);
                          }
                        }
                        peg$silentFails--;
                        if (s9 !== peg$FAILED) {
                          peg$currPos = s8;
                          s8 = void 0;
                        } else {
                          s8 = peg$FAILED;
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseVerbatimFieldValue();
                          if (s9 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f56(s4, s6, s9);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s1 = peg$c12;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 5) === peg$c23) {
                    s3 = peg$c23;
                    peg$currPos += 5;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e42);
                    }
                  }
                  peg$silentFails--;
                  if (s3 === peg$FAILED) {
                    s2 = void 0;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 3) === peg$c24) {
                      s4 = peg$c24;
                      peg$currPos += 3;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e43);
                      }
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                      s3 = void 0;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$currPos;
                      s5 = [];
                      if (peg$r19.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e44);
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          if (peg$r19.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e44);
                            }
                          }
                        }
                      } else {
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        s4 = input.substring(s4, peg$currPos);
                      } else {
                        s4 = s5;
                      }
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s5 = peg$f57(s4);
                        if (s5) {
                          s5 = void 0;
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = [];
                          s7 = peg$parseOptionalArgument();
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            s7 = peg$parseOptionalArgument();
                          }
                          s7 = peg$parse__h();
                          s8 = peg$parseArgument();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseArgument();
                            if (s9 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f58(s4, s6, s8, s9);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s1 = peg$c12;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e27);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 5) === peg$c23) {
                      s3 = peg$c23;
                      peg$currPos += 5;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e42);
                      }
                    }
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                      s2 = void 0;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 3) === peg$c24) {
                        s4 = peg$c24;
                        peg$currPos += 3;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e43);
                        }
                      }
                      peg$silentFails--;
                      if (s4 === peg$FAILED) {
                        s3 = void 0;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$currPos;
                        s5 = [];
                        if (peg$r19.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e44);
                          }
                        }
                        if (s6 !== peg$FAILED) {
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            if (peg$r19.test(input.charAt(peg$currPos))) {
                              s6 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e44);
                              }
                            }
                          }
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          s4 = input.substring(s4, peg$currPos);
                        } else {
                          s4 = s5;
                        }
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = peg$currPos;
                          s5 = peg$f59(s4);
                          if (s5) {
                            s5 = void 0;
                          } else {
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parseOptionalArgument();
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              s7 = peg$parseOptionalArgument();
                            }
                            s7 = peg$parse__h();
                            s8 = peg$parseArgument();
                            if (s8 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f60(s4, s6, s8);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                      s1 = peg$c12;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e27);
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 5) === peg$c23) {
                        s3 = peg$c23;
                        peg$currPos += 5;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e42);
                        }
                      }
                      peg$silentFails--;
                      if (s3 === peg$FAILED) {
                        s2 = void 0;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 3) === peg$c24) {
                          s4 = peg$c24;
                          peg$currPos += 3;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e43);
                          }
                        }
                        peg$silentFails--;
                        if (s4 === peg$FAILED) {
                          s3 = void 0;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = [];
                          if (peg$r19.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e44);
                            }
                          }
                          if (s6 !== peg$FAILED) {
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              if (peg$r19.test(input.charAt(peg$currPos))) {
                                s6 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e44);
                                }
                              }
                            }
                          } else {
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s4 = input.substring(s4, peg$currPos);
                          } else {
                            s4 = s5;
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = [];
                            s6 = peg$parseOptionalArgument();
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              s6 = peg$parseOptionalArgument();
                            }
                            s6 = peg$parse__();
                            peg$savedPos = s0;
                            s0 = peg$f61(s4, s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
        return s0;
      }
      function peg$parseOptionalArgument() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c25;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e45);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__h();
          s3 = peg$currPos;
          s4 = [];
          if (peg$r20.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e46);
            }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$r20.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e46);
                }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__h();
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c26;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e47);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f62(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseArgument() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parse__h();
        if (peg$r21.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e48);
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f63(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse__h();
          s2 = peg$parseBlock();
          if (s2 === peg$FAILED) {
            s2 = peg$parseCommand();
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f64(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseVariableName() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (peg$r22.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e49);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$r23.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e50);
            }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r23.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e50);
              }
            }
          }
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        return s0;
      }
      function peg$parseSimpleDiacritic() {
        var s0;
        if (peg$r24.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e51);
          }
        }
        return s0;
      }
      function peg$parseExtendedDiacritic() {
        var s0;
        if (peg$r25.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e52);
          }
        }
        return s0;
      }
      function peg$parseFieldSeparator() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c27;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e53);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseFieldTerminator() {
        var s0;
        s0 = peg$parse_();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s0 = peg$c6;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e14);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseLineComment();
          }
        }
        return s0;
      }
      function peg$parseConcat() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c28;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e54);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseEOL() {
        var s0;
        if (peg$r26.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e55);
          }
        }
        return s0;
      }
      function peg$parse_h() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r27.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e57);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r27.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e57);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e56);
          }
        }
        return s0;
      }
      function peg$parse__h() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r27.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e57);
          }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$r27.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e57);
            }
          }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e58);
        }
        return s0;
      }
      function peg$parse_v() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r26.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e55);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r26.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e55);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e59);
          }
        }
        return s0;
      }
      function peg$parse__v() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r26.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e55);
          }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$r26.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e55);
            }
          }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e60);
        }
        return s0;
      }
      function peg$parse_() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r28.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e62);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r28.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e62);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e61);
          }
        }
        return s0;
      }
      function peg$parse__() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r28.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e62);
          }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$r28.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e62);
            }
          }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e63);
        }
        return s0;
      }
      const markup = {
        sl: "italics",
        em: "italics",
        it: "italics",
        itshape: "italics",
        bf: "bold",
        bfseries: "bold",
        sc: "smallCaps",
        scshape: "smallCaps",
        tt: "fixedWidth",
        texttt: "fixedWidth",
        rm: "roman",
        sf: "sansSerif",
        verb: "verbatim"
      };
      const unnestFields = (options.unnestFields || []).map((field) => field.toLowerCase());
      const verbatimFields = (options.verbatimFields || ["urlraw", "url", "doi", "file", "files", "eprint", "verba", "verbb", "verbc"]).map((field) => typeof field === "string" ? field.toLowerCase() : field);
      const verbatimCommands = options.verbatimCommands || ["texttt", "url"];
      function isVerbatimField(name) {
        return verbatimFields.find((p) => typeof p === "string" ? name === p : name.match(p));
      }
      function normalizeWhitespace(textArr) {
        if (typeof textArr === "string")
          textArr = Array.from(textArr);
        return textArr.reduce((prev, curr) => {
          if (/\s/.test(curr)) {
            if (/\s/.test(prev[prev.length - 1])) {
              return prev;
            } else {
              return prev + " ";
            }
          }
          return prev + curr;
        }, "");
      }
      const has_arguments = {
        ElsevierGlyph: 1,
        end: 1,
        begin: 1,
        bibcyr: 1,
        bibstring: 1,
        chsf: 1,
        cite: 1,
        cyrchar: 1,
        ding: 1,
        emph: 1,
        enquote: 1,
        frac: 2,
        href: 2,
        hspace: 1,
        mathrm: 1,
        mbox: 1,
        mkbibbold: 1,
        mkbibemph: 1,
        mkbibitalic: 1,
        mkbibquote: 1,
        newcommand: 2,
        noopsort: 1,
        ocirc: 1,
        section: 1,
        sb: 1,
        sp: 1,
        subsection: 1,
        subsubsection: 1,
        subsubsubsection: 1,
        t: 1,
        textbf: 1,
        textit: 1,
        textrm: 1,
        textsc: 1,
        textsubscript: 1,
        textsuperscript: 1,
        texttt: 1,
        url: 1,
        vphantom: 1,
        vspace: 1
      };
      if (options.combiningDiacritics) {
        for (const cmd of options.combiningDiacritics) {
          has_arguments[cmd] = 1;
        }
      }
      function say() {
        console.log(JSON.stringify(Array.from(arguments), null, 2));
        return true;
      }
      function peek(n) {
        return input.substr(peg$savedPos, n);
      }
      const math = {
        on: false,
        set: function(state) {
          this.on = state;
          return true;
        }
      };
      function basicTextConversions(node) {
        if (node.kind !== "Text")
          throw new Error(node.kind + " is not a Text node");
        switch (node.mode) {
          case "verbatim":
            break;
          case "math":
            node.value = node.value.replace(/~/g, "\xA0");
            break;
          case "text":
            node.value = node.value.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/</g, "\xA1").replace(/>/g, "\xBF").replace(/~/g, "\xA0").replace(/``/g, options.markup.enquote.open).replace(/''/g, options.markup.enquote.close);
            break;
          default:
            throw new Error(`Unexpected text mode ${node.mode}`);
        }
        return node;
      }
      function protect(v) {
        let source;
        if (Array.isArray(v)) {
          source = v.map((e) => e.source).join("");
        } else {
          v = [v];
          source = v.source;
        }
        return {
          kind: "Block",
          value: v,
          markup: {},
          case: "protect",
          source
        };
      }
      function handle_markup_switches(block) {
        const value = block.value;
        if (!Array.isArray(value))
          return block;
        block.value = [];
        const pseudo = {
          block: null,
          markup: {}
        };
        function pseudo_block() {
          pseudo.block = {
            kind: "Block",
            loc: location(),
            source: "",
            value: [],
            markup: JSON.parse(JSON.stringify(pseudo.markup)),
            pseudo: true
          };
          block.value.push(pseudo.block);
        }
        for (const node of value) {
          if (node.kind === "Environment" || node.kind === "Block") {
            block.value.push(node);
            if (Object.keys(pseudo.markup).length) {
              pseudo_block();
            } else {
              pseudo.block = null;
            }
            continue;
          }
          if (node.kind === "RegularCommand" && markup[node.command]) {
            if (pseudo.markup.italics) {
              delete pseudo.markup.italics;
              if (markup[node.command] !== "italics")
                pseudo.markup[markup[node.command]] = true;
            } else {
              pseudo.markup[markup[node.command]] = true;
            }
            if (Object.keys(pseudo.markup).length) {
              pseudo_block();
            } else {
              pseudo.block = null;
            }
          }
          if (pseudo.block) {
            pseudo.block.source += node.source;
            pseudo.block.value.push(node);
          } else {
            block.value.push(node);
          }
        }
        block.value = block.value.filter((node) => !(node.pseudo && node.value.length === 0));
        return block;
      }
      peg$result = peg$startRuleFunction();
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
      }
    }
    module2.exports = {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse
    };
  }
});

// node_modules/@retorquere/bibtex-parser/chunker.js
var require_chunker = __commonJS({
  "node_modules/@retorquere/bibtex-parser/chunker.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.promises = exports2.parse = void 0;
    var ParseError = class extends Error {
      constructor(message, parser) {
        message += ` @ ${parser.pos}`;
        if (parser.parsing)
          message += ` in ${JSON.stringify(parser.parsing)}`;
        super(message);
        this.name = "ParseError";
      }
    };
    var letter = new RegExp("[" + [
      /\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A/.source,
      /\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC/.source,
      /\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A/.source,
      /\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F/.source,
      /\u00AA\u00BA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source
    ].join("") + "]");
    var BibtexParser = class {
      constructor() {
        this.pos = 0;
        this.entries = 0;
        this.parsing = null;
        this.chunks = [];
      }
      parse(input, options = {}) {
        this.max_entries = options.max_entries || 0;
        this.input = input;
        this.bibtex();
        return this.chunks;
      }
      async parseAsync(input, options = {}) {
        this.max_entries = options.max_entries || 0;
        this.input = input;
        await this.bibtexAsync();
        return this.chunks;
      }
      isWhitespace(s, horizontalOnly = false) {
        return s === " " || s === "	" || !horizontalOnly && (s === "\r" || s === "\n");
      }
      match(s) {
        this.skipWhitespace();
        if (this.input.substr(this.pos, s.length) !== s) {
          throw new ParseError(`Token mismatch, expected ${JSON.stringify(s)}, found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
        }
        this.pos += s.length;
        this.skipWhitespace();
      }
      tryMatch(s) {
        this.skipWhitespace();
        return this.input.substr(this.pos, s.length) === s;
      }
      skipWhitespace() {
        while (this.pos < this.input.length && this.isWhitespace(this.input[this.pos]))
          this.pos++;
        if (this.input[this.pos] === "%") {
          while (this.pos < this.input.length && this.input[this.pos] !== "\n")
            this.pos++;
          while (this.pos < this.input.length && this.isWhitespace(this.input[this.pos]))
            this.pos++;
        }
      }
      value_braces() {
        let bracecount = 0;
        this.match("{");
        const start = this.pos;
        let math = false;
        while (true) {
          switch (this.input[this.pos]) {
            case "\\":
              this.pos += 1;
              break;
            case "{":
              bracecount++;
              break;
            case "}":
              if (bracecount === 0) {
                if (math)
                  throw new ParseError("Unclosed math section", this);
                this.pos++;
                return this.input.substring(start, this.pos - 1);
              }
              bracecount--;
              break;
            case "$":
              math = !math;
              break;
          }
          this.pos++;
          if (this.pos >= this.input.length) {
            throw new ParseError(`Unterminated brace-value ${JSON.stringify(this.input.substr(start, 20))}`, this);
          }
        }
      }
      value_quotes() {
        this.match('"');
        const start = this.pos;
        let bracecount = 0;
        while (true) {
          switch (this.input[this.pos]) {
            case "\\":
              this.pos += 1;
              break;
            case "{":
              bracecount++;
              break;
            case "}":
              bracecount--;
              break;
            case '"':
              if (bracecount <= 0) {
                this.pos++;
                return this.input.substring(start, this.pos - 1);
              }
          }
          this.pos++;
          if (this.pos >= this.input.length) {
            throw new ParseError(`Unterminated quote-value ${JSON.stringify(this.input.substr(start, 20))}`, this);
          }
        }
      }
      single_value() {
        if (this.tryMatch("{")) {
          return this.value_braces();
        } else if (this.tryMatch('"')) {
          return this.value_quotes();
        } else {
          return this.key();
        }
      }
      value() {
        const values = [];
        values.push(this.single_value());
        while (this.tryMatch("#")) {
          this.match("#");
          values.push(this.single_value());
        }
        return values.join("");
      }
      key(allowUnicode = false) {
        const start = this.pos;
        while (true) {
          if (this.pos === this.input.length) {
            throw new ParseError("Runaway key", this);
          }
          if (this.input[this.pos].match(/['a-zA-Z0-9&;_:\\./-]/)) {
            this.pos++;
          } else if (allowUnicode && this.input[this.pos].match(letter)) {
            this.pos++;
          } else {
            return this.input.substring(start, this.pos);
          }
        }
      }
      key_equals_value() {
        const key = this.key();
        if (!this.tryMatch("=")) {
          throw new ParseError(`... = value expected, equals sign missing: ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
        }
        this.match("=");
        const val = this.value();
        return [key, val];
      }
      key_value_list() {
        this.key_equals_value();
        while (this.tryMatch(",")) {
          this.match(",");
          if (this.tryMatch("}")) {
            break;
          }
          this.key_equals_value();
        }
      }
      entry(_d) {
        this.parsing = this.key(true);
        this.match(",");
        this.key_value_list();
      }
      directive() {
        this.match("@");
        return `@${this.key()}`.toLowerCase();
      }
      string() {
        this.key_equals_value();
      }
      preamble() {
        this.value();
      }
      comment() {
        while (this.isWhitespace(this.input[this.pos], true))
          this.pos++;
        if (this.input[this.pos] === "{") {
          this.value_braces();
          return;
        }
        while (this.input[this.pos] !== "\n" && this.pos < this.input.length)
          this.pos++;
      }
      hasMore() {
        if (this.max_entries && this.entries >= this.max_entries)
          return false;
        return this.pos < this.input.length;
      }
      bibtex() {
        while (this.hasMore()) {
          this.parseNext();
        }
      }
      bibtexAsync() {
        return this.hasMore() ? new Promise((resolve2) => resolve2(this.parseNext())).then(() => this.bibtexAsync()) : Promise.resolve(null);
      }
      parseNext() {
        const chunk = {
          offset: {
            pos: this.pos,
            line: this.input.substring(0, this.pos).split("\n").length - 1
          },
          error: null,
          text: null
        };
        this.skipWhitespace();
        if (this.pos >= this.input.length)
          return;
        let guard = "";
        try {
          const d = this.directive();
          switch (d) {
            case "@string":
              this.match("{");
              this.string();
              this.match("}");
              chunk.stringDeclaration = true;
              break;
            case "@preamble":
              this.match("{");
              this.preamble();
              this.match("}");
              chunk.preamble = true;
              break;
            case "@comment":
              this.comment();
              chunk.comment = true;
              break;
            default:
              if (this.tryMatch("{")) {
                guard = "{}";
              } else if (this.tryMatch("(")) {
                guard = "()";
              } else {
                throw new ParseError(`Token mismatch, expected '{' or '(', found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
              }
              this.match(guard[0]);
              this.entry(d);
              this.match(guard[1]);
              chunk.entry = true;
              this.entries++;
              break;
          }
        } catch (err) {
          if (err.name !== "ParseError")
            throw err;
          chunk.error = err.message;
          this.pos = chunk.offset.pos + 1;
          while (this.pos < this.input.length && this.input[this.pos] !== "@")
            this.pos++;
        }
        const text = this.input.substring(chunk.offset.pos, this.pos);
        const last = this.chunks.length - 1;
        if (chunk.error && this.chunks.length && this.chunks[last].error) {
          this.chunks[last].text += text;
        } else {
          chunk.text = text;
          this.chunks.push(chunk);
        }
      }
    };
    function parse2(input, options = {}) {
      return new BibtexParser().parse(input, options);
    }
    exports2.parse = parse2;
    exports2.promises = {
      async parse(input, options = {}) {
        return await new BibtexParser().parseAsync(input, options);
      }
    };
  }
});

// node_modules/@retorquere/bibtex-parser/jabref.js
var require_jabref = __commonJS({
  "node_modules/@retorquere/bibtex-parser/jabref.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parse = void 0;
    function decode(s, sep = ";") {
      s = s.replace(/\r?\n/g, "");
      let pos = 0;
      const records = [""];
      while (pos < s.length) {
        switch (s[pos]) {
          case "\\":
            pos++;
            records[0] += s[pos];
            break;
          case sep:
            records.unshift("");
            break;
          default:
            records[0] += s[pos];
        }
        pos++;
      }
      return records.reverse().filter((record) => record);
    }
    function parse2(comments) {
      const result = {
        root: [],
        groups: {}
      };
      const levels = [];
      const decoded = {
        fileDirectory: null,
        groupsversion: null,
        groupstree: null,
        grouping: null,
        databaseType: null
      };
      comments = comments.filter((comment) => {
        const m = comment.match(/^jabref-meta:\s*([^:]+):([\s\S]*)/);
        if (m) {
          decoded[m[1]] = decode(m[2]);
          return false;
        }
        return true;
      });
      if (decoded.groupsversion)
        result.groupsversion = parseInt(decoded.groupsversion[0].trim()) || decoded.groupsversion[0];
      if (decoded.fileDirectory)
        result.fileDirectory = decoded.fileDirectory[0];
      if (decoded.databaseType)
        result.databaseType = decoded.databaseType[0];
      for (const tree of ["groupstree", "grouping"]) {
        if (!decoded[tree])
          continue;
        for (const encoded of decoded[tree]) {
          const fields = decode(encoded);
          const level_type_name = decode(fields.shift(), ":");
          const m = /^([0-9]+) (.+)/.exec(level_type_name[0]);
          if (!m)
            break;
          const level = parseInt(m[1]);
          const type = m[2];
          if (type === "AllEntriesGroup")
            continue;
          const name = level_type_name[1];
          const intersection = decode(fields.shift())[0];
          const keys = tree === "grouping" ? [] : fields.map((field) => decode(field)[0]);
          const group = {
            name,
            entries: keys,
            groups: []
          };
          result.groups[name] = result.groups[name] || group;
          if (levels.length < level) {
            levels.push(group);
          } else {
            levels[level - 1] = group;
          }
          if (level === 1) {
            result.root.push(group);
          } else {
            const parent = levels[level - 2];
            switch (intersection) {
              case "0":
                break;
              case "1":
                group.entries = group.entries.filter((key) => parent.entries.includes(key));
                break;
              case "2":
                group.entries = group.entries.concat(parent.entries.filter((key) => !group.entries.includes(key)));
                break;
            }
            levels[level - 2].groups.push(group);
          }
        }
      }
      return { comments, jabref: result };
    }
    exports2.parse = parse2;
  }
});

// node_modules/unicode2latex/tables/ascii.json
var require_ascii = __commonJS({
  "node_modules/unicode2latex/tables/ascii.json"(exports2, module2) {
    module2.exports = {
      "#": { math: "\\#", text: "\\#" },
      $: { math: "\\$", text: "\\$" },
      "%": { math: "\\%", text: "\\%" },
      "&": { math: "\\&", text: "\\&" },
      "/\u200B": { text: "\\slash", commandspacer: true },
      "<": { math: "<" },
      ">": { math: ">" },
      "\\": { math: "\\backslash", text: "\\textbackslash", commandspacer: true },
      "^": { math: "\\sphat", text: "\\^" },
      _: { math: "\\_", text: "\\_" },
      i\uFE20a\uFE21: { text: "\\t{ia}" },
      "{": { math: "\\lbrace", text: "\\{" },
      "}": { math: "\\rbrace", text: "\\}" },
      "~": { math: "\\sptilde", text: "\\textasciitilde", commandspacer: true },
      "\xA0": { math: "~", space: true, text: "~" },
      "\xA1": { text: "\\textexclamdown", commandspacer: true },
      "\xA2": { math: "\\cent", text: "\\textcent", commandspacer: true, textpackages: ["textcomp"] },
      "\xA3": { math: "\\pounds", text: "\\textsterling", commandspacer: true, textpackages: ["textcomp"] },
      "\xA4": { text: "\\textcurrency", commandspacer: true, textpackages: ["textcomp"] },
      "\xA5": { math: "\\yen", text: "\\textyen", commandspacer: true, textpackages: ["textcomp"] },
      "\xA6": { text: "\\textbrokenbar", commandspacer: true, textpackages: ["textcomp"] },
      "\xA7": { text: "\\textsection", commandspacer: true, textpackages: ["textcomp"] },
      "\xA8": { math: "\\spddot", text: "\\textasciidieresis", commandspacer: true },
      "\xA9": { text: "\\textcopyright", commandspacer: true, textpackages: ["textcomp"] },
      \u00AA: { text: "\\textordfeminine", commandspacer: true, textpackages: ["textcomp"] },
      "\xAB": { text: "\\guillemotleft", commandspacer: true },
      "\xAC": { math: "\\lnot" },
      "\xAD": { math: "\\-", text: "\\-" },
      "\xAE": { math: "\\circledR", text: "\\textregistered", commandspacer: true, textpackages: ["textcomp"] },
      "\xAF": { text: "\\textasciimacron", commandspacer: true },
      "\xB0": { math: "^\\circ", text: "\\textdegree", commandspacer: true, textpackages: ["textcomp"] },
      "\xB1": { math: "\\pm" },
      "\xB2": { math: "^{2}" },
      "\xB3": { math: "^{3}" },
      "\xB4": { text: "\\textasciiacute", commandspacer: true },
      \u00B5: { text: "\\textmu", commandspacer: true },
      "\xB6": { text: "\\textparagraph", commandspacer: true, textpackages: ["textcomp"] },
      "\xB7": { math: "\\cdot" },
      "\xB8": { text: "\\c", commandspacer: true },
      "\xB9": { math: "^{1}" },
      \u00BA: { text: "\\textordmasculine", commandspacer: true, textpackages: ["textcomp"] },
      "\xBB": { text: "\\guillemotright", commandspacer: true },
      "\xBC": { math: "\\frac{1}{4}" },
      "\xBD": { math: "\\frac{1}{2}" },
      "\xBE": { math: "\\frac{3}{4}" },
      "\xBF": { text: "\\textquestiondown", commandspacer: true },
      \u00C0: { text: "\\`A" },
      \u00C1: { text: "\\'A" },
      \u00C2: { text: "\\^A" },
      \u00C3: { text: "\\~A" },
      \u00C4: { text: '\\"A' },
      \u00C5: { text: "\\AA", commandspacer: true },
      \u00C6: { text: "\\AE", commandspacer: true },
      \u00C7: { text: "\\c{C}" },
      \u00C8: { text: "\\`E" },
      \u00C9: { text: "\\'E" },
      \u00CA: { text: "\\^E" },
      \u00CB: { text: '\\"E' },
      \u00CC: { text: "\\`I" },
      \u00CD: { text: "\\'I" },
      \u00CE: { text: "\\^I" },
      \u00CF: { text: '\\"I' },
      \u00D0: { text: "\\DH", commandspacer: true },
      \u00D1: { text: "\\~N" },
      \u00D2: { text: "\\`O" },
      \u00D3: { text: "\\'O" },
      \u00D4: { text: "\\^O" },
      \u00D5: { text: "\\~O" },
      \u00D6: { text: '\\"O' },
      "\xD7": { math: "\\times", text: "\\texttimes", commandspacer: true },
      \u00D8: { text: "\\O", commandspacer: true },
      \u00D9: { text: "\\`U" },
      \u00DA: { text: "\\'U" },
      \u00DB: { text: "\\^U" },
      \u00DC: { text: '\\"U' },
      \u00DD: { text: "\\'Y" },
      \u00DE: { text: "\\TH", commandspacer: true },
      \u00DF: { text: "\\ss", commandspacer: true },
      \u00E0: { text: "\\`a" },
      \u00E1: { text: "\\'a" },
      \u00E2: { text: "\\^a" },
      \u00E3: { text: "\\~a" },
      \u00E4: { text: '\\"a' },
      \u00E5: { text: "\\aa", commandspacer: true },
      \u00E6: { text: "\\ae", commandspacer: true },
      \u00E7: { text: "\\c{c}" },
      \u00E8: { text: "\\`e" },
      \u00E9: { text: "\\'e" },
      \u00EA: { text: "\\^e" },
      \u00EB: { text: '\\"e' },
      \u00EC: { text: "\\`i" },
      \u00ED: { text: "\\'i" },
      \u00EE: { text: "\\^i" },
      \u00EF: { text: '\\"i' },
      \u00F0: { math: "\\eth", mathpackages: ["amssymb", "arevmath"], text: "\\dh", commandspacer: true },
      \u00F1: { text: "\\~n" },
      \u00F2: { text: "\\`o" },
      \u00F3: { text: "\\'o" },
      \u00F4: { text: "\\^o" },
      \u00F5: { text: "\\~o" },
      \u00F6: { text: '\\"o' },
      "\xF7": { math: "\\div" },
      \u00F8: { text: "\\o", commandspacer: true },
      \u00F9: { text: "\\`u" },
      \u00FA: { text: "\\'u" },
      \u00FB: { text: "\\^u" },
      \u00FC: { text: '\\"u' },
      \u00FD: { text: "\\'y" },
      \u00FE: { text: "\\th", commandspacer: true },
      \u00FF: { text: '\\"y' },
      \u0100: { text: "\\=A" },
      \u0101: { text: "\\=a" },
      \u0102: { text: "\\u{A}" },
      \u0103: { text: "\\u{a}" },
      \u0104: { text: "\\k{A}" },
      \u0105: { text: "\\k{a}" },
      \u0106: { text: "\\'C" },
      \u0107: { text: "\\'c" },
      \u0108: { text: "\\^C" },
      \u0109: { text: "\\^c" },
      \u010A: { text: "\\.C" },
      \u010B: { text: "\\.c" },
      \u010C: { text: "\\v{C}" },
      \u010D: { text: "\\v{c}" },
      \u010E: { text: "\\v{D}" },
      \u010F: { text: "\\v{d}" },
      \u0110: { text: "\\DJ", commandspacer: true },
      \u0111: { text: "\\dj", commandspacer: true },
      \u0112: { text: "\\=E" },
      \u0113: { text: "\\=e" },
      \u0114: { text: "\\u{E}" },
      \u0115: { text: "\\u{e}" },
      \u0116: { text: "\\.E" },
      \u0117: { text: "\\.e" },
      \u0118: { text: "\\k{E}" },
      \u0119: { text: "\\k{e}" },
      \u011A: { text: "\\v{E}" },
      \u011B: { text: "\\v{e}" },
      \u011C: { text: "\\^G" },
      \u011D: { text: "\\^g" },
      \u011E: { text: "\\u{G}" },
      \u011F: { text: "\\u{g}" },
      \u0120: { text: "\\.G" },
      \u0121: { text: "\\.g" },
      \u0122: { text: "\\c{G}" },
      \u0123: { text: "\\c{g}" },
      \u0124: { text: "\\^H" },
      \u0125: { text: "\\^h" },
      \u0126: { text: "{\\fontencoding{LELA}\\selectfont\\char40}" },
      \u0127: { math: "\\Elzxh" },
      \u0128: { text: "\\~I" },
      \u0129: { text: "\\~i" },
      \u012A: { text: "\\=I" },
      \u012B: { text: "\\=i" },
      \u012C: { text: "\\u{I}" },
      \u012D: { text: "{\\u \\i}" },
      \u012E: { text: "\\k{I}" },
      \u012F: { text: "\\k{i}" },
      \u0130: { text: "\\.I" },
      \u0131: { math: "\\imath", text: "\\i", commandspacer: true },
      \u0132: { text: "IJ" },
      \u0133: { text: "ij" },
      \u0134: { text: "\\^J" },
      \u0135: { text: "\\^\\j", commandspacer: true },
      \u0136: { text: "\\c{K}" },
      \u0137: { text: "\\c{k}" },
      \u0138: { text: "{\\fontencoding{LELA}\\selectfont\\char91}" },
      \u0139: { text: "\\'L" },
      \u013A: { text: "\\'l" },
      \u013B: { text: "\\c{L}" },
      \u013C: { text: "\\c{l}" },
      \u013D: { text: "\\v{L}" },
      \u013E: { text: "\\v{l}" },
      \u013F: { text: "{\\fontencoding{LELA}\\selectfont\\char201}" },
      \u0140: { text: "{\\fontencoding{LELA}\\selectfont\\char202}" },
      \u0141: { text: "\\L", commandspacer: true },
      \u0142: { text: "\\l", commandspacer: true },
      \u0143: { text: "\\'N" },
      \u0144: { text: "\\'n" },
      \u0145: { text: "\\c{N}" },
      \u0146: { text: "\\c{n}" },
      \u0147: { text: "\\v{N}" },
      \u0148: { text: "\\v{n}" },
      \u0149: { text: "'n" },
      \u014A: { text: "\\NG", commandspacer: true },
      \u014B: { text: "\\ng", commandspacer: true },
      \u014C: { text: "\\=O" },
      \u014D: { text: "\\=o" },
      \u014E: { text: "\\u{O}" },
      \u014F: { text: "\\u{o}" },
      \u0150: { text: "\\H{O}" },
      \u0151: { text: "\\H{o}" },
      \u0152: { text: "\\OE", commandspacer: true },
      \u0153: { text: "\\oe", commandspacer: true },
      \u0154: { text: "\\'R" },
      \u0155: { text: "\\'r" },
      \u0156: { text: "\\c{R}" },
      \u0157: { text: "\\c{r}" },
      \u0158: { text: "\\v{R}" },
      \u0159: { text: "\\v{r}" },
      \u015A: { text: "\\'S" },
      \u015B: { text: "\\'s" },
      \u015C: { text: "\\^S" },
      \u015D: { text: "\\^s" },
      \u015E: { text: "\\c{S}" },
      \u015F: { text: "\\c{s}" },
      \u0160: { text: "\\v{S}" },
      \u0161: { text: "\\v{s}" },
      \u0162: { text: "\\c{T}" },
      \u0163: { text: "\\c{t}" },
      \u0164: { text: "\\v{T}" },
      \u0165: { text: "\\v{t}" },
      \u0166: { text: "{\\fontencoding{LELA}\\selectfont\\char47}" },
      \u0167: { text: "{\\fontencoding{LELA}\\selectfont\\char63}" },
      \u0168: { text: "\\~U" },
      \u0169: { text: "\\~u" },
      \u016A: { text: "\\=U" },
      \u016B: { text: "\\=u" },
      \u016C: { text: "\\u{U}" },
      \u016D: { text: "\\u{u}" },
      \u016E: { text: "\\r{U}" },
      \u016F: { text: "\\r{u}" },
      \u0170: { text: "\\H{U}" },
      \u0171: { text: "\\H{u}" },
      \u0172: { text: "\\k{U}" },
      \u0173: { text: "\\k{u}" },
      \u0174: { text: "\\^W" },
      \u0175: { text: "\\^w" },
      \u0176: { text: "\\^Y" },
      \u0177: { text: "\\^y" },
      \u0178: { text: '\\"Y' },
      \u0179: { text: "\\'Z" },
      \u017A: { text: "\\'z" },
      \u017B: { text: "\\.Z" },
      \u017C: { text: "\\.z" },
      \u017D: { text: "\\v{Z}" },
      \u017E: { text: "\\v{z}" },
      \u017F: { text: "s" },
      \u0192: { math: "f" },
      \u0195: { text: "\\texthvlig", commandspacer: true },
      \u019E: { text: "\\textnrleg", commandspacer: true },
      \u01AA: { text: "\\textesh", commandspacer: true },
      \u01B5: { math: "\\Zbar" },
      \u01BA: { text: "{\\fontencoding{LELA}\\selectfont\\char195}" },
      \u01C2: { text: "\\textdoublepipe", commandspacer: true },
      \u01CD: { text: "\\v{A}" },
      \u01CE: { text: "\\v{a}" },
      \u01CF: { text: "\\v{I}" },
      \u01D0: { text: "\\v{i}" },
      \u01D1: { text: "\\v{O}" },
      \u01D2: { text: "\\v{o}" },
      \u01D3: { text: "\\v{U}" },
      \u01D4: { text: "\\v{u}" },
      \u01E6: { text: "\\v{G}" },
      \u01E7: { text: "\\v{g}" },
      \u01E8: { text: "\\v{K}" },
      \u01E9: { text: "\\v{k}" },
      \u01EA: { text: "\\k{O}" },
      \u01EB: { text: "\\k{o}" },
      \u01F0: { text: "\\v{j}" },
      \u01F4: { text: "\\'G" },
      \u01F5: { text: "\\'g" },
      \u0228: { text: "\\c{E}" },
      \u0229: { text: "\\c{e}" },
      "\u0237": { math: "\\jmath" },
      \u0250: { math: "\\Elztrna" },
      \u0252: { math: "\\Elztrnsa" },
      \u0254: { math: "\\Elzopeno" },
      \u0256: { math: "\\Elzrtld" },
      \u0258: { text: "{\\fontencoding{LEIP}\\selectfont\\char61}" },
      \u0259: { math: "\\Elzschwa" },
      \u025B: { math: "\\varepsilon" },
      \u0261: { text: "g" },
      \u0263: { math: "\\Elzpgamma" },
      \u0264: { math: "\\Elzpbgam" },
      \u0265: { math: "\\Elztrnh" },
      \u026C: { math: "\\Elzbtdl" },
      \u026D: { math: "\\Elzrtll" },
      \u026F: { math: "\\Elztrnm" },
      \u0270: { math: "\\Elztrnmlr" },
      \u0271: { math: "\\Elzltlmr" },
      \u0272: { text: "\\Elzltln", commandspacer: true },
      \u0273: { math: "\\Elzrtln" },
      \u0277: { math: "\\Elzclomeg" },
      \u0278: { text: "\\textphi", commandspacer: true },
      \u0279: { math: "\\Elztrnr" },
      \u027A: { math: "\\Elztrnrl" },
      \u027B: { math: "\\Elzrttrnr" },
      \u027C: { math: "\\Elzrl" },
      \u027D: { math: "\\Elzrtlr" },
      \u027E: { math: "\\Elzfhr" },
      \u027F: { text: "{\\fontencoding{LEIP}\\selectfont\\char202}" },
      \u0282: { math: "\\Elzrtls" },
      \u0283: { math: "\\Elzesh" },
      \u0287: { math: "\\Elztrnt" },
      \u0288: { math: "\\Elzrtlt" },
      \u028A: { math: "\\Elzpupsil" },
      \u028B: { math: "\\Elzpscrv" },
      \u028C: { math: "\\Elzinvv" },
      \u028D: { math: "\\Elzinvw" },
      \u028E: { math: "\\Elztrny" },
      \u0290: { math: "\\Elzrtlz" },
      \u0292: { math: "\\Elzyogh" },
      \u0294: { math: "\\Elzglst" },
      \u0295: { math: "\\Elzreglst" },
      \u0296: { math: "\\Elzinglst" },
      \u029E: { text: "\\textturnk", commandspacer: true },
      \u02A4: { math: "\\Elzdyogh" },
      \u02A7: { math: "\\Elztesh" },
      \u02B0: { math: "^{h}", text: "\\textsuperscript{h}" },
      \u02B2: { math: "^{j}", text: "\\textsuperscript{j}" },
      \u02B3: { math: "^{r}", text: "\\textsuperscript{r}" },
      \u02B7: { math: "^{w}", text: "\\textsuperscript{w}" },
      \u02B8: { math: "^{y}", text: "\\textsuperscript{y}" },
      "\u02B9": { text: "'" },
      \u02BB: { text: "'" },
      \u02BC: { text: "'" },
      \u02BD: { text: "'" },
      \u02BF: { text: "\\lasp", commandspacer: true, textpackages: ["mathscinet"] },
      "\u02C6": { text: "\\textasciicircum", commandspacer: true },
      "\u02C7": { text: "\\textasciicaron", commandspacer: true },
      "\u02C8": { math: "\\Elzverts" },
      "\u02C9": { text: "-" },
      "\u02CC": { math: "\\Elzverti" },
      \u02D0: { math: "\\Elzlmrk" },
      \u02D1: { math: "\\Elzhlmrk" },
      "\u02D2": { math: "\\Elzsbrhr" },
      "\u02D3": { math: "\\Elzsblhr" },
      "\u02D4": { math: "\\Elzrais" },
      "\u02D5": { math: "\\Elzlow" },
      "\u02D8": { text: "\\textasciibreve", commandspacer: true },
      "\u02D9": { text: "\\textperiodcentered", commandspacer: true, textpackages: ["textcomp"] },
      "\u02DA": { text: "\\r{}" },
      "\u02DB": { text: "\\k{}" },
      "\u02DC": { text: "\\texttildelow", commandspacer: true },
      "\u02DD": { text: "\\H{}" },
      \u02E1: { math: "^{l}", text: "\\textsuperscript{l}" },
      \u02E2: { math: "^{s}", text: "\\textsuperscript{s}" },
      \u02E3: { math: "^{x}", text: "\\textsuperscript{x}" },
      "\u02E5": { text: "\\tone{55}" },
      "\u02E6": { text: "\\tone{44}" },
      "\u02E7": { text: "\\tone{33}" },
      "\u02E8": { text: "\\tone{22}" },
      "\u02E9": { text: "\\tone{11}" },
      "\u0300": { math: "\\grave", combiningdiacritic: true, text: "\\`" },
      "\u0300\u0304": { text: "\\textgravemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0300": { text: "\\textgravemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0300\u0307": { text: "\\textgravedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0300": { text: "\\textgravedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301": { math: "\\acute", combiningdiacritic: true, text: "\\'" },
      "\u0301\u0304": { text: "\\textacutemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0301": { text: "\\textacutemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301\u030C": { text: "\\textacutewedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030C\u0301": { text: "\\textacutewedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0302": { math: "\\hat", combiningdiacritic: true, text: "\\^" },
      "\u0302\u0307": { text: "\\textcircumdot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0302": { text: "\\textcircumdot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0303": { math: "\\tilde", combiningdiacritic: true, text: "\\~" },
      "\u0303\u0307": { text: "\\texttildedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0303": { text: "\\texttildedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304": { math: "\\bar", combiningdiacritic: true, text: "\\=" },
      "\u0305": { math: "\\overline", combiningdiacritic: true },
      "\u0306": { math: "\\breve", combiningdiacritic: true, text: "\\u", commandspacer: true },
      "\u0306\u0304": { text: "\\textbrevemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0306": { text: "\\textbrevemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307": { math: "\\dot", combiningdiacritic: true, text: "\\." },
      "\u0307\u0301": { text: "\\textdotacute", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301\u0307": { text: "\\textdotacute", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0306": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0306\u0307": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0308": { math: "\\ddot", combiningdiacritic: true, text: '\\"' },
      "\u0309": { math: "\\ovhook" },
      "\u030A": { math: "\\mathring", combiningdiacritic: true, text: "\\r", commandspacer: true },
      "\u030A\u0304": { text: "\\textringmacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u030A": { text: "\\textringmacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030B": { text: "\\H", commandspacer: true, combiningdiacritic: true },
      "\u030C": { math: "\\check", text: "\\v", commandspacer: true, combiningdiacritic: true },
      "\u030D": { text: "\\textvbaraccent", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030E": { text: "\\textdoublevbaraccent", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030F": { text: "\\textdoublegrave", commandspacer: true, combiningdiacritic: true },
      "\u0310": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0311": { text: "{\\fontencoding{LECO}\\selectfont\\char177}" },
      "\u0312": { math: "\\oturnedcomma" },
      "\u0315": { math: "\\ocommatopright" },
      "\u0316": { text: "\\textsubgrave", commandspacer: true, combiningdiacritic: true },
      "\u0318": { text: "\\textadvancing", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0319": { text: "\\textretracting", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031A": { math: "\\droang", text: "\\textcorner", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031C": { text: "\\textsublhalfring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031D": { text: "\\textraising", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031E": { text: "\\textlowering", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031F": { text: "\\textsubplus", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0321": { math: "\\Elzpalh" },
      "\u0322": { text: "\\Elzrh", commandspacer: true },
      "\u0323": { text: "\\d", commandspacer: true, combiningdiacritic: true },
      "\u0324": { text: "\\textsubumlaut", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0325": { text: "\\textsubring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0327": { text: "\\c", commandspacer: true, combiningdiacritic: true },
      "\u0328": { text: "\\k", commandspacer: true, combiningdiacritic: true },
      "\u0329": { text: "\\textsyllabic", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032A": { math: "\\Elzsbbrg", text: "\\textsubbridge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032B": { text: "{\\fontencoding{LECO}\\selectfont\\char203}" },
      "\u032C": { text: "\\textsubwedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032F": { text: "\\textsubarch", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0330": { math: "\\utilde", text: "\\textsubtilde", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0331": { math: "\\underbar", combiningdiacritic: true, text: "\\textsubbar", commandspacer: true, textpackages: ["tipa"] },
      "\u0332": { math: "\\underline" },
      "\u0334": { text: "\\textsuperimposetilde", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0335": { text: "\\Elzxl", commandspacer: true },
      "\u0336": { text: "\\Elzbar", commandspacer: true },
      "\u0337": { text: "{\\fontencoding{LECO}\\selectfont\\char215}" },
      "\u0338": { math: "\\not" },
      "\u0339": { text: "\\textsubrhalfring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033A": { text: "\\textinvsubbridge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033B": { text: "\\textsubsquare", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033C": { text: "\\textseagull", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033D": { text: "\\textovercross", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0361": { text: "{\\fontencoding{LECO}\\selectfont\\char225}" },
      "\u0374": { text: "'" },
      "\u0375": { text: "," },
      "\u037E": { text: ";" },
      \u0386: { text: "\\'A" },
      \u0388: { text: "\\'E" },
      \u0389: { text: "\\'H" },
      \u038A: { text: "{\\'{}I}" },
      \u038C: { text: "{\\'{}O}" },
      \u038E: { math: "\\mathrm{'Y}" },
      \u038F: { math: "\\mathrm{'\\Omega}" },
      \u0390: { math: "\\acute{\\ddot{\\iota}}" },
      \u0391: { math: "A" },
      \u0392: { math: "B" },
      \u0393: { math: "\\Gamma" },
      \u0394: { math: "\\Delta" },
      \u0395: { math: "E" },
      \u0396: { math: "Z" },
      \u0397: { math: "H" },
      \u0398: { math: "\\Theta" },
      \u0399: { math: "I" },
      \u039A: { math: "K" },
      \u039B: { math: "\\Lambda" },
      \u039C: { math: "M" },
      \u039D: { math: "N" },
      \u039E: { math: "\\Xi" },
      \u039F: { math: "O" },
      \u03A0: { math: "\\Pi" },
      \u03A1: { math: "P" },
      \u03A3: { math: "\\Sigma" },
      \u03A4: { math: "T" },
      \u03A5: { math: "\\Upsilon" },
      \u03A6: { math: "\\Phi" },
      \u03A7: { math: "X" },
      \u03A8: { math: "\\Psi" },
      \u03A9: { math: "\\Omega" },
      \u03AA: { math: "\\mathrm{\\ddot{I}}" },
      \u03AB: { math: "\\mathrm{\\ddot{Y}}" },
      \u03AC: { text: "{\\'$\\alpha$}" },
      \u03AD: { math: "\\acute{\\epsilon}" },
      \u03AE: { math: "\\acute{\\eta}" },
      \u03AF: { math: "\\acute{\\iota}" },
      \u03B0: { math: "\\acute{\\ddot{\\upsilon}}" },
      \u03B1: { math: "\\alpha" },
      \u03B2: { math: "\\beta" },
      \u03B3: { math: "\\gamma" },
      \u03B4: { math: "\\delta" },
      \u03B5: { math: "\\epsilon" },
      \u03B6: { math: "\\zeta" },
      \u03B7: { math: "\\eta" },
      \u03B8: { math: "\\theta", text: "\\texttheta", commandspacer: true },
      \u03B9: { math: "\\iota" },
      \u03BA: { math: "\\kappa" },
      \u03BB: { math: "\\lambda" },
      \u03BC: { math: "\\mu" },
      \u03BD: { math: "\\nu" },
      \u03BE: { math: "\\xi" },
      \u03BF: { math: "o" },
      \u03C0: { math: "\\pi" },
      \u03C1: { math: "\\rho" },
      \u03C2: { math: "\\varsigma" },
      \u03C3: { math: "\\sigma" },
      \u03C4: { math: "\\tau" },
      \u03C5: { math: "\\upsilon" },
      \u03C6: { math: "\\varphi" },
      \u03C7: { math: "\\chi" },
      \u03C8: { math: "\\psi" },
      \u03C9: { math: "\\omega" },
      \u03CA: { math: "\\ddot{\\iota}" },
      \u03CB: { math: "\\ddot{\\upsilon}" },
      \u03CC: { text: "\\'o" },
      \u03CD: { math: "\\acute{\\upsilon}" },
      \u03CE: { math: "\\acute{\\omega}" },
      \u03D0: { math: "\\varbeta", text: "\\Pisymbol{ppi022}{87}" },
      \u03D1: { math: "\\vartheta", text: "\\textvartheta", commandspacer: true },
      \u03D2: { math: "\\Upsilon" },
      \u03D5: { math: "\\phi" },
      \u03D6: { math: "\\varpi" },
      "\u03D8": { math: "\\Qoppa" },
      "\u03D9": { math: "\\qoppa" },
      \u03DA: { math: "\\Stigma" },
      \u03DB: { math: "\\stigma" },
      \u03DC: { math: "\\Digamma" },
      \u03DD: { math: "\\digamma" },
      \u03DE: { math: "\\Koppa" },
      \u03DF: { math: "\\koppa" },
      \u03E0: { math: "\\Sampi" },
      \u03E1: { math: "\\sampi" },
      \u03F0: { math: "\\varkappa" },
      \u03F1: { math: "\\varrho" },
      "\u03F4": { math: "\\upvarTheta", text: "\\textTheta", commandspacer: true },
      "\u03F5": { math: "\\epsilon" },
      "\u03F6": { math: "\\backepsilon" },
      \u0401: { text: "\\cyrchar\\CYRYO", commandspacer: true },
      \u0402: { text: "\\cyrchar\\CYRDJE", commandspacer: true },
      \u0403: { text: "\\cyrchar{\\'\\CYRG}" },
      \u0404: { text: "\\cyrchar\\CYRIE", commandspacer: true },
      \u0405: { text: "\\cyrchar\\CYRDZE", commandspacer: true },
      \u0406: { text: "\\cyrchar\\CYRII", commandspacer: true },
      \u0407: { text: "\\cyrchar\\CYRYI", commandspacer: true },
      \u0408: { text: "\\cyrchar\\CYRJE", commandspacer: true },
      \u0409: { text: "\\cyrchar\\CYRLJE", commandspacer: true },
      \u040A: { text: "\\cyrchar\\CYRNJE", commandspacer: true },
      \u040B: { text: "\\cyrchar\\CYRTSHE", commandspacer: true },
      \u040C: { text: "\\cyrchar{\\'\\CYRK}" },
      \u040E: { text: "\\cyrchar\\CYRUSHRT", commandspacer: true },
      \u040F: { text: "\\cyrchar\\CYRDZHE", commandspacer: true },
      \u0410: { text: "\\cyrchar\\CYRA", commandspacer: true },
      \u0411: { text: "\\cyrchar\\CYRB", commandspacer: true },
      \u0412: { text: "\\cyrchar\\CYRV", commandspacer: true },
      \u0413: { text: "\\cyrchar\\CYRG", commandspacer: true },
      \u0414: { text: "\\cyrchar\\CYRD", commandspacer: true },
      \u0415: { text: "\\cyrchar\\CYRE", commandspacer: true },
      \u0416: { text: "\\cyrchar\\CYRZH", commandspacer: true },
      \u0417: { text: "\\cyrchar\\CYRZ", commandspacer: true },
      \u0418: { text: "\\cyrchar\\CYRI", commandspacer: true },
      \u0419: { text: "\\cyrchar\\CYRISHRT", commandspacer: true },
      \u041A: { text: "\\cyrchar\\CYRK", commandspacer: true },
      \u041B: { text: "\\cyrchar\\CYRL", commandspacer: true },
      \u041C: { text: "\\cyrchar\\CYRM", commandspacer: true },
      \u041D: { text: "\\cyrchar\\CYRN", commandspacer: true },
      \u041E: { text: "\\cyrchar\\CYRO", commandspacer: true },
      \u041F: { text: "\\cyrchar\\CYRP", commandspacer: true },
      \u0420: { text: "\\cyrchar\\CYRR", commandspacer: true },
      \u0421: { text: "\\cyrchar\\CYRS", commandspacer: true },
      \u0422: { text: "\\cyrchar\\CYRT", commandspacer: true },
      \u0423: { text: "\\cyrchar\\CYRU", commandspacer: true },
      \u0424: { text: "\\cyrchar\\CYRF", commandspacer: true },
      \u0425: { text: "\\cyrchar\\CYRH", commandspacer: true },
      \u0426: { text: "\\cyrchar\\CYRC", commandspacer: true },
      \u0427: { text: "\\cyrchar\\CYRCH", commandspacer: true },
      \u0428: { text: "\\cyrchar\\CYRSH", commandspacer: true },
      \u0429: { text: "\\cyrchar\\CYRSHCH", commandspacer: true },
      \u042A: { text: "\\cyrchar\\CYRHRDSN", commandspacer: true },
      \u042B: { text: "\\cyrchar\\CYRERY", commandspacer: true },
      \u042C: { text: "\\cyrchar\\CYRSFTSN", commandspacer: true },
      \u042D: { text: "\\cyrchar\\CYREREV", commandspacer: true },
      \u042E: { text: "\\cyrchar\\CYRYU", commandspacer: true },
      \u042F: { text: "\\cyrchar\\CYRYA", commandspacer: true },
      \u0430: { text: "\\cyrchar\\cyra", commandspacer: true },
      \u0431: { text: "\\cyrchar\\cyrb", commandspacer: true },
      \u0432: { text: "\\cyrchar\\cyrv", commandspacer: true },
      \u0433: { text: "\\cyrchar\\cyrg", commandspacer: true },
      \u0434: { text: "\\cyrchar\\cyrd", commandspacer: true },
      \u0435: { text: "\\cyrchar\\cyre", commandspacer: true },
      \u0436: { text: "\\cyrchar\\cyrzh", commandspacer: true },
      \u0437: { text: "\\cyrchar\\cyrz", commandspacer: true },
      \u0438: { text: "\\cyrchar\\cyri", commandspacer: true },
      \u0439: { text: "\\cyrchar\\cyrishrt", commandspacer: true },
      \u043A: { text: "\\cyrchar\\cyrk", commandspacer: true },
      \u043B: { text: "\\cyrchar\\cyrl", commandspacer: true },
      \u043C: { text: "\\cyrchar\\cyrm", commandspacer: true },
      \u043D: { text: "\\cyrchar\\cyrn", commandspacer: true },
      \u043E: { text: "\\cyrchar\\cyro", commandspacer: true },
      \u043F: { text: "\\cyrchar\\cyrp", commandspacer: true },
      \u0440: { text: "\\cyrchar\\cyrr", commandspacer: true },
      \u0441: { text: "\\cyrchar\\cyrs", commandspacer: true },
      \u0442: { text: "\\cyrchar\\cyrt", commandspacer: true },
      \u0443: { text: "\\cyrchar\\cyru", commandspacer: true },
      \u0444: { text: "\\cyrchar\\cyrf", commandspacer: true },
      \u0445: { text: "\\cyrchar\\cyrh", commandspacer: true },
      \u0446: { text: "\\cyrchar\\cyrc", commandspacer: true },
      \u0447: { text: "\\cyrchar\\cyrch", commandspacer: true },
      \u0448: { text: "\\cyrchar\\cyrsh", commandspacer: true },
      \u0449: { text: "\\cyrchar\\cyrshch", commandspacer: true },
      \u044A: { text: "\\cyrchar\\cyrhrdsn", commandspacer: true },
      \u044B: { text: "\\cyrchar\\cyrery", commandspacer: true },
      \u044C: { text: "\\cyrchar\\cyrsftsn", commandspacer: true },
      \u044D: { text: "\\cyrchar\\cyrerev", commandspacer: true },
      \u044E: { text: "\\cyrchar\\cyryu", commandspacer: true },
      \u044F: { text: "\\cyrchar\\cyrya", commandspacer: true },
      \u0451: { text: "\\cyrchar\\cyryo", commandspacer: true },
      \u0452: { text: "\\cyrchar\\cyrdje", commandspacer: true },
      \u0453: { text: "\\cyrchar{\\'\\cyrg}" },
      \u0454: { text: "\\cyrchar\\cyrie", commandspacer: true },
      \u0455: { text: "\\cyrchar\\cyrdze", commandspacer: true },
      \u0456: { text: "\\cyrchar\\cyrii", commandspacer: true },
      \u0457: { text: "\\cyrchar\\cyryi", commandspacer: true },
      \u0458: { text: "\\cyrchar\\cyrje", commandspacer: true },
      \u0459: { text: "\\cyrchar\\cyrlje", commandspacer: true },
      \u045A: { text: "\\cyrchar\\cyrnje", commandspacer: true },
      \u045B: { text: "\\cyrchar\\cyrtshe", commandspacer: true },
      \u045C: { text: "\\cyrchar{\\'\\cyrk}" },
      \u045E: { text: "\\cyrchar\\cyrushrt", commandspacer: true },
      \u045F: { text: "\\cyrchar\\cyrdzhe", commandspacer: true },
      \u0460: { text: "\\cyrchar\\CYROMEGA", commandspacer: true },
      \u0461: { text: "\\cyrchar\\cyromega", commandspacer: true },
      \u0462: { text: "\\cyrchar\\CYRYAT", commandspacer: true },
      \u0464: { text: "\\cyrchar\\CYRIOTE", commandspacer: true },
      \u0465: { text: "\\cyrchar\\cyriote", commandspacer: true },
      \u0466: { text: "\\cyrchar\\CYRLYUS", commandspacer: true },
      \u0467: { text: "\\cyrchar\\cyrlyus", commandspacer: true },
      \u0468: { text: "\\cyrchar\\CYRIOTLYUS", commandspacer: true },
      \u0469: { text: "\\cyrchar\\cyriotlyus", commandspacer: true },
      \u046A: { text: "\\cyrchar\\CYRBYUS", commandspacer: true },
      \u046C: { text: "\\cyrchar\\CYRIOTBYUS", commandspacer: true },
      \u046D: { text: "\\cyrchar\\cyriotbyus", commandspacer: true },
      \u046E: { text: "\\cyrchar\\CYRKSI", commandspacer: true },
      \u046F: { text: "\\cyrchar\\cyrksi", commandspacer: true },
      \u0470: { text: "\\cyrchar\\CYRPSI", commandspacer: true },
      \u0471: { text: "\\cyrchar\\cyrpsi", commandspacer: true },
      \u0472: { text: "\\cyrchar\\CYRFITA", commandspacer: true },
      \u0474: { text: "\\cyrchar\\CYRIZH", commandspacer: true },
      \u0478: { text: "\\cyrchar\\CYRUK", commandspacer: true },
      \u0479: { text: "\\cyrchar\\cyruk", commandspacer: true },
      \u047A: { text: "\\cyrchar\\CYROMEGARND", commandspacer: true },
      \u047B: { text: "\\cyrchar\\cyromegarnd", commandspacer: true },
      \u047C: { text: "\\cyrchar\\CYROMEGATITLO", commandspacer: true },
      \u047D: { text: "\\cyrchar\\cyromegatitlo", commandspacer: true },
      \u047E: { text: "\\cyrchar\\CYROT", commandspacer: true },
      \u047F: { text: "\\cyrchar\\cyrot", commandspacer: true },
      \u0480: { text: "\\cyrchar\\CYRKOPPA", commandspacer: true },
      \u0481: { text: "\\cyrchar\\cyrkoppa", commandspacer: true },
      "\u0482": { text: "\\cyrchar\\cyrthousands", commandspacer: true },
      "\u0488": { text: "\\cyrchar\\cyrhundredthousands", commandspacer: true },
      "\u0489": { text: "\\cyrchar\\cyrmillions", commandspacer: true },
      \u048C: { text: "\\cyrchar\\CYRSEMISFTSN", commandspacer: true },
      \u048D: { text: "\\cyrchar\\cyrsemisftsn", commandspacer: true },
      \u048E: { text: "\\cyrchar\\CYRRTICK", commandspacer: true },
      \u048F: { text: "\\cyrchar\\cyrrtick", commandspacer: true },
      \u0490: { text: "\\cyrchar\\CYRGUP", commandspacer: true },
      \u0491: { text: "\\cyrchar\\cyrgup", commandspacer: true },
      \u0492: { text: "\\cyrchar\\CYRGHCRS", commandspacer: true },
      \u0493: { text: "\\cyrchar\\cyrghcrs", commandspacer: true },
      \u0494: { text: "\\cyrchar\\CYRGHK", commandspacer: true },
      \u0495: { text: "\\cyrchar\\cyrghk", commandspacer: true },
      \u0496: { text: "\\cyrchar\\CYRZHDSC", commandspacer: true },
      \u0497: { text: "\\cyrchar\\cyrzhdsc", commandspacer: true },
      \u0498: { text: "\\cyrchar\\CYRZDSC", commandspacer: true },
      \u0499: { text: "\\cyrchar\\cyrzdsc", commandspacer: true },
      \u049A: { text: "\\cyrchar\\CYRKDSC", commandspacer: true },
      \u049B: { text: "\\cyrchar\\cyrkdsc", commandspacer: true },
      \u049C: { text: "\\cyrchar\\CYRKVCRS", commandspacer: true },
      \u049D: { text: "\\cyrchar\\cyrkvcrs", commandspacer: true },
      \u049E: { text: "\\cyrchar\\CYRKHCRS", commandspacer: true },
      \u049F: { text: "\\cyrchar\\cyrkhcrs", commandspacer: true },
      \u04A0: { text: "\\cyrchar\\CYRKBEAK", commandspacer: true },
      \u04A1: { text: "\\cyrchar\\cyrkbeak", commandspacer: true },
      \u04A2: { text: "\\cyrchar\\CYRNDSC", commandspacer: true },
      \u04A3: { text: "\\cyrchar\\cyrndsc", commandspacer: true },
      \u04A4: { text: "\\cyrchar\\CYRNG", commandspacer: true },
      \u04A5: { text: "\\cyrchar\\cyrng", commandspacer: true },
      \u04A6: { text: "\\cyrchar\\CYRPHK", commandspacer: true },
      \u04A7: { text: "\\cyrchar\\cyrphk", commandspacer: true },
      \u04A8: { text: "\\cyrchar\\CYRABHHA", commandspacer: true },
      \u04A9: { text: "\\cyrchar\\cyrabhha", commandspacer: true },
      \u04AA: { text: "\\cyrchar\\CYRSDSC", commandspacer: true },
      \u04AB: { text: "\\cyrchar\\cyrsdsc", commandspacer: true },
      \u04AC: { text: "\\cyrchar\\CYRTDSC", commandspacer: true },
      \u04AD: { text: "\\cyrchar\\cyrtdsc", commandspacer: true },
      \u04AE: { text: "\\cyrchar\\CYRY", commandspacer: true },
      \u04AF: { text: "\\cyrchar\\cyry", commandspacer: true },
      \u04B0: { text: "\\cyrchar\\CYRYHCRS", commandspacer: true },
      \u04B1: { text: "\\cyrchar\\cyryhcrs", commandspacer: true },
      \u04B2: { text: "\\cyrchar\\CYRHDSC", commandspacer: true },
      \u04B3: { text: "\\cyrchar\\cyrhdsc", commandspacer: true },
      \u04B4: { text: "\\cyrchar\\CYRTETSE", commandspacer: true },
      \u04B5: { text: "\\cyrchar\\cyrtetse", commandspacer: true },
      \u04B6: { text: "\\cyrchar\\CYRCHRDSC", commandspacer: true },
      \u04B7: { text: "\\cyrchar\\cyrchrdsc", commandspacer: true },
      \u04B8: { text: "\\cyrchar\\CYRCHVCRS", commandspacer: true },
      \u04B9: { text: "\\cyrchar\\cyrchvcrs", commandspacer: true },
      \u04BA: { text: "\\cyrchar\\CYRSHHA", commandspacer: true },
      \u04BB: { text: "\\cyrchar\\cyrshha", commandspacer: true },
      \u04BC: { text: "\\cyrchar\\CYRABHCH", commandspacer: true },
      \u04BD: { text: "\\cyrchar\\cyrabhch", commandspacer: true },
      \u04BE: { text: "\\cyrchar\\CYRABHCHDSC", commandspacer: true },
      \u04BF: { text: "\\cyrchar\\cyrabhchdsc", commandspacer: true },
      \u04C0: { text: "\\cyrchar\\CYRpalochka", commandspacer: true },
      \u04C3: { text: "\\cyrchar\\CYRKHK", commandspacer: true },
      \u04C4: { text: "\\cyrchar\\cyrkhk", commandspacer: true },
      \u04C7: { text: "\\cyrchar\\CYRNHK", commandspacer: true },
      \u04C8: { text: "\\cyrchar\\cyrnhk", commandspacer: true },
      \u04CB: { text: "\\cyrchar\\CYRCHLDSC", commandspacer: true },
      \u04CC: { text: "\\cyrchar\\cyrchldsc", commandspacer: true },
      \u04D4: { text: "\\cyrchar\\CYRAE", commandspacer: true },
      \u04D5: { text: "\\cyrchar\\cyrae", commandspacer: true },
      \u04D8: { text: "\\cyrchar\\CYRSCHWA", commandspacer: true },
      \u04D9: { text: "\\cyrchar\\cyrschwa", commandspacer: true },
      \u04E0: { text: "\\cyrchar\\CYRABHDZE", commandspacer: true },
      \u04E1: { text: "\\cyrchar\\cyrabhdze", commandspacer: true },
      \u04E8: { text: "\\cyrchar\\CYROTLD", commandspacer: true },
      \u04E9: { text: "\\cyrchar\\cyrotld", commandspacer: true },
      "\u0871": { math: "\\\\backslash" },
      "\u1D43": { math: "^{a}", text: "\\textsuperscript{a}" },
      "\u1D47": { math: "^{b}", text: "\\textsuperscript{b}" },
      "\u1D48": { math: "^{d}", text: "\\textsuperscript{d}" },
      "\u1D49": { math: "^{e}", text: "\\textsuperscript{e}" },
      "\u1D4D": { math: "^{g}", text: "\\textsuperscript{g}" },
      "\u1D4F": { math: "^{k}", text: "\\textsuperscript{k}" },
      "\u1D50": { math: "^{m}", text: "\\textsuperscript{m}" },
      "\u1D52": { math: "^{o}", text: "\\textsuperscript{o}" },
      "\u1D56": { math: "^{p}", text: "\\textsuperscript{p}" },
      "\u1D57": { math: "^{t}", text: "\\textsuperscript{t}" },
      "\u1D58": { math: "^{u}", text: "\\textsuperscript{u}" },
      "\u1D5B": { math: "^{v}", text: "\\textsuperscript{v}" },
      "\u1D9C": { math: "^{c}", text: "\\textsuperscript{c}" },
      "\u1DA0": { math: "^{f}", text: "\\textsuperscript{f}" },
      "\u1DBB": { math: "^{z}", text: "\\textsuperscript{z}" },
      \u1E02: { text: "\\.B" },
      \u1E03: { text: "\\.b" },
      \u1E04: { text: "\\d{B}" },
      \u1E05: { text: "\\d{b}" },
      \u1E06: { text: "\\b{B}" },
      \u1E07: { text: "\\b{b}" },
      \u1E0A: { text: "\\.D" },
      \u1E0B: { text: "\\.d" },
      \u1E0C: { text: "\\d{D}" },
      \u1E0D: { text: "\\d{d}" },
      \u1E0E: { text: "\\b{D}" },
      \u1E0F: { text: "\\b{d}" },
      \u1E10: { text: "\\c{D}" },
      \u1E11: { text: "\\c{d}" },
      \u1E1C: { text: "\\c{\\u{E}}" },
      \u1E1D: { text: "\\c{\\u{e}}" },
      \u1E1E: { text: "\\.F" },
      \u1E1F: { text: "\\.f" },
      \u1E20: { text: "\\=G" },
      \u1E21: { text: "\\=g" },
      \u1E22: { text: "\\.H" },
      \u1E23: { text: "\\.h" },
      \u1E24: { text: "\\d{H}" },
      \u1E25: { text: "\\d{h}" },
      \u1E26: { text: '\\"H' },
      \u1E27: { text: '\\"h' },
      \u1E28: { text: "\\c{H}" },
      \u1E29: { text: "\\c{h}" },
      \u1E30: { text: "\\'K" },
      \u1E31: { text: "\\'k" },
      \u1E32: { text: "\\d{K}" },
      \u1E33: { text: "\\d{k}" },
      \u1E34: { text: "\\b{K}" },
      \u1E35: { text: "\\b{k}" },
      \u1E36: { text: "\\d{L}" },
      \u1E37: { text: "\\d{l}" },
      \u1E3A: { text: "\\b{L}" },
      \u1E3B: { text: "\\b{l}" },
      \u1E3E: { text: "\\'M" },
      \u1E3F: { text: "\\'m" },
      \u1E40: { text: "\\.M" },
      \u1E41: { text: "\\.m" },
      \u1E42: { text: "\\d{M}" },
      \u1E43: { text: "\\d{m}" },
      \u1E44: { text: "\\.N" },
      \u1E45: { text: "\\.n" },
      \u1E46: { text: "\\d{N}" },
      \u1E47: { text: "\\d{n}" },
      \u1E48: { text: "\\b{N}" },
      \u1E49: { text: "\\b{n}" },
      \u1E54: { text: "\\'P" },
      \u1E55: { text: "\\'p" },
      \u1E56: { text: "\\.P" },
      \u1E57: { text: "\\.p" },
      \u1E58: { text: "\\.R" },
      \u1E59: { text: "\\.r" },
      \u1E5A: { text: "\\d{R}" },
      \u1E5B: { text: "\\d{r}" },
      \u1E5E: { text: "\\b{R}" },
      \u1E5F: { text: "\\b{r}" },
      \u1E60: { text: "\\.S" },
      \u1E61: { text: "\\.s" },
      \u1E62: { text: "\\d{S}" },
      \u1E63: { text: "\\d{s}" },
      \u1E6A: { text: "\\.T" },
      \u1E6B: { text: "\\.t" },
      \u1E6C: { text: "\\d{T}" },
      \u1E6D: { text: "\\d{t}" },
      \u1E6E: { text: "\\b{T}" },
      \u1E6F: { text: "\\b{t}" },
      \u1E7C: { text: "\\~V" },
      \u1E7D: { text: "\\~v" },
      \u1E7E: { text: "\\d{V}" },
      \u1E7F: { text: "\\d{v}" },
      \u1E80: { text: "\\`W" },
      \u1E81: { text: "\\`w" },
      \u1E82: { text: "\\'W" },
      \u1E83: { text: "\\'w" },
      \u1E84: { text: '\\"W' },
      \u1E85: { text: '\\"w' },
      \u1E86: { text: "\\.W" },
      \u1E87: { text: "\\.w" },
      \u1E88: { text: "\\d{W}" },
      \u1E89: { text: "\\d{w}" },
      \u1E8A: { text: "\\.X" },
      \u1E8B: { text: "\\.x" },
      \u1E8C: { text: '\\"X' },
      \u1E8D: { text: '\\"x' },
      \u1E8E: { text: "\\.Y" },
      \u1E8F: { text: "\\.y" },
      \u1E90: { text: "\\^Z" },
      \u1E91: { text: "\\^z" },
      \u1E92: { text: "\\d{Z}" },
      \u1E93: { text: "\\d{z}" },
      \u1E94: { text: "\\b{Z}" },
      \u1E95: { text: "\\b{z}" },
      \u1E96: { text: "\\b{h}" },
      \u1E97: { text: '\\"t' },
      \u1E98: { text: "\\r{w}" },
      \u1E99: { text: "\\r{y}" },
      \u1EA0: { text: "\\d{A}" },
      \u1EA1: { text: "\\d{a}" },
      \u1EB8: { text: "\\d{E}" },
      \u1EB9: { text: "\\d{e}" },
      \u1EBC: { text: "\\~E" },
      \u1EBD: { text: "\\~e" },
      \u1ECA: { text: "\\d{I}" },
      \u1ECB: { text: "\\d{i}" },
      \u1ECC: { text: "\\d{O}" },
      \u1ECD: { text: "\\d{o}" },
      \u1EE4: { text: "\\d{U}" },
      \u1EE5: { text: "\\d{u}" },
      \u1EF2: { text: "\\`Y" },
      \u1EF3: { text: "\\`y" },
      \u1EF4: { text: "\\d{Y}" },
      \u1EF5: { text: "\\d{y}" },
      \u1EF8: { text: "\\~Y" },
      \u1EF9: { text: "\\~y" },
      "\u2000": { text: "\\hspace{0.6em}", space: true },
      "\u2001": { math: "\\quad", space: true },
      "\u2002": { text: "\\hspace{0.6em}", space: true },
      "\u2003": { math: "\\quad", space: true },
      "\u2004": { text: "\\;", space: true },
      "\u2005": { text: "\\hspace{0.25em}", space: true },
      "\u2006": { text: "\\hspace{0.166em}", space: true },
      "\u2007": { text: "\\hphantom{0}", space: true },
      "\u2008": { text: "\\hphantom{,}", space: true },
      "\u2009": { text: "\\,", space: true },
      "\u200A": { math: "\\mkern1mu", space: true },
      "\u200B": { text: "\\hspace{0pt}", space: true },
      "\u200C": { text: "{\\aftergroup\\ignorespaces}" },
      "\u2010": { text: "-" },
      "\u2011": { text: "-" },
      "\u2012": { text: "-" },
      "\u2013": { text: "\\textendash", commandspacer: true },
      "\u2014": { text: "\\textemdash", commandspacer: true },
      "\u2015": { math: "\\horizbar", text: "\\rule{1em}{1pt}" },
      "\u2016": { math: "\\Vert" },
      "\u2017": { math: "\\twolowline" },
      "\u2018": { text: "`" },
      "\u2019": { text: "'" },
      "\u201A": { text: "," },
      "\u201B": { math: "\\Elzreapos" },
      "\u201C": { text: "``" },
      "\u201D": { text: "''" },
      "\u201E": { text: ",," },
      "\u201F": { text: "\\quotedblbase", commandspacer: true },
      "\u2020": { math: "\\dagger", text: "\\textdagger", commandspacer: true, textpackages: ["textcomp"] },
      "\u2021": { math: "\\ddagger", text: "\\textdaggerdbl", commandspacer: true, textpackages: ["textcomp"] },
      "\u2022": { math: "\\bullet", text: "\\textbullet", commandspacer: true, textpackages: ["textcomp"] },
      "\u2023": { text: ">" },
      "\u2024": { text: "." },
      "\u2025": { math: "\\enleadertwodots", text: ".." },
      "\u2026": { math: "\\ldots", text: "\\ldots", commandspacer: true },
      "\u2027": { text: "-" },
      "\u202F": { text: "\\,", space: true },
      "\u2030": { text: "\\textperthousand", commandspacer: true, textpackages: ["textcomp"] },
      "\u2031": { text: "\\textpertenthousand", commandspacer: true, textpackages: ["textcomp"] },
      "\u2032": { math: "{'}" },
      "\u2033": { math: "{''}" },
      "\u2034": { math: "{'''}" },
      "\u2035": { math: "\\backprime" },
      "\u2036": { math: "\\backdprime" },
      "\u2037": { math: "\\backtrprime" },
      "\u2038": { math: "\\caretinsert" },
      "\u2039": { text: "\\guilsinglleft", commandspacer: true },
      "\u203A": { text: "\\guilsinglright", commandspacer: true },
      "\u203C": { math: "\\Exclam" },
      "\u203E": { text: "-" },
      "\u2043": { math: "\\hyphenbullet" },
      "\u2044": { math: "\\fracslash" },
      "\u2047": { math: "\\Question" },
      "\u2048": { text: "?!" },
      "\u2049": { text: "!?" },
      "\u204A": { text: "7" },
      "\u2050": { math: "\\closure" },
      "\u2057": { math: "''''" },
      "\u205F": { math: "\\:", space: true, text: "\\:" },
      "\u2060": { text: "\\nolinebreak", commandspacer: true },
      "\u2070": { math: "^{0}" },
      "\u2071": { math: "^{i}", text: "\\textsuperscript{i}" },
      "\u2074": { math: "^{4}" },
      "\u2075": { math: "^{5}" },
      "\u2076": { math: "^{6}" },
      "\u2077": { math: "^{7}" },
      "\u2078": { math: "^{8}" },
      "\u2079": { math: "^{9}" },
      "\u207A": { math: "^{+}" },
      "\u207B": { math: "^{-}" },
      "\u207C": { math: "^{=}" },
      "\u207D": { math: "^{(}" },
      "\u207E": { math: "^{)}" },
      \u207F: { math: "^{n}", text: "\\textsuperscript{n}" },
      "\u2080": { math: "_{0}" },
      "\u2081": { math: "_{1}" },
      "\u2082": { math: "_{2}" },
      "\u2083": { math: "_{3}" },
      "\u2084": { math: "_{4}" },
      "\u2085": { math: "_{5}" },
      "\u2086": { math: "_{6}" },
      "\u2087": { math: "_{7}" },
      "\u2088": { math: "_{8}" },
      "\u2089": { math: "_{9}" },
      "\u208A": { math: "_{+}" },
      "\u208B": { math: "_{-}" },
      "\u208C": { math: "_{=}" },
      "\u208D": { math: "_{(}" },
      "\u208E": { math: "_{)}" },
      "\u2090": { math: "_{a}", text: "\\textsubscript{a}" },
      "\u2091": { math: "_{e}", text: "\\textsubscript{e}" },
      "\u2092": { math: "_{o}", text: "\\textsubscript{o}" },
      "\u2093": { math: "_{x}", text: "\\textsubscript{x}" },
      "\u2094": { text: "\\textsubscript{\\textschwa}", textpackages: ["tipa"] },
      "\u2095": { math: "_{h}", text: "\\textsubscript{h}" },
      "\u2096": { math: "_{k}", text: "\\textsubscript{k}" },
      "\u2097": { math: "_{l}", text: "\\textsubscript{l}" },
      "\u2098": { math: "_{m}", text: "\\textsubscript{m}" },
      "\u2099": { math: "_{n}", text: "\\textsubscript{n}" },
      "\u209A": { math: "_{p}", text: "\\textsubscript{p}" },
      "\u209B": { math: "_{s}", text: "\\textsubscript{s}" },
      "\u209C": { math: "_{t}", text: "\\textsubscript{t}" },
      "\u20A7": { text: "\\ensuremath{\\Elzpes}" },
      "\u20AC": { math: "\\euro", text: "\\texteuro", commandspacer: true },
      "\u20D0": { math: "\\lvec" },
      "\u20D1": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
      "\u20D2": { math: "\\vertoverlay" },
      "\u20D6": { math: "\\LVec" },
      "\u20D7": { math: "\\vec" },
      "\u20DB": { math: "\\dddot" },
      "\u20DC": { math: "\\ddddot" },
      "\u20DD": { math: "\\enclosecircle" },
      "\u20DE": { math: "\\enclosesquare" },
      "\u20DF": { math: "\\enclosediamond" },
      "\u20E1": { math: "\\overleftrightarrow" },
      "\u20E4": { math: "\\enclosetriangle" },
      "\u20E7": { math: "\\annuity" },
      "\u20E8": { math: "\\threeunderdot" },
      "\u20E9": { math: "\\widebridgeabove" },
      "\u20EC": { math: "\\underrightharpoondown" },
      "\u20ED": { math: "\\underleftharpoondown" },
      "\u20EE": { math: "\\underleftarrow" },
      "\u20EF": { math: "\\underrightarrow" },
      "\u20F0": { math: "\\asteraccent" },
      "\u2100": { text: "a/c" },
      "\u2101": { text: "a/s" },
      \u2102: { math: "\\mathbb{C}" },
      "\u2103": { text: "\\textcelsius", commandspacer: true },
      "\u2105": { text: "c/o" },
      "\u2106": { text: "c/u" },
      \u2107: { math: "\\Euler" },
      "\u2109": { text: "F" },
      \u210A: { math: "\\mathscr{g}" },
      \u210B: { math: "\\mathscr{H}" },
      \u210C: { math: "\\mathfrak{H}" },
      \u210D: { math: "\\mathbb{H}" },
      \u210E: { math: "\\Planckconst" },
      \u210F: { math: "\\hslash" },
      \u2110: { math: "\\mathscr{I}" },
      \u2111: { math: "\\mathfrak{I}" },
      \u2112: { math: "\\mathscr{L}" },
      \u2113: { math: "\\mathscr{l}" },
      \u2115: { math: "\\mathbb{N}" },
      "\u2116": { text: "\\cyrchar\\textnumero", commandspacer: true },
      "\u2117": { text: "\\textcircledP", commandspacer: true },
      "\u2118": { math: "\\wp" },
      \u2119: { math: "\\mathbb{P}" },
      \u211A: { math: "\\mathbb{Q}" },
      \u211B: { math: "\\mathscr{R}" },
      \u211C: { math: "\\mathfrak{R}" },
      \u211D: { math: "\\mathbb{R}" },
      "\u211E": { math: "\\Elzxrat" },
      "\u2120": { text: "\\textservicemark", commandspacer: true },
      "\u2121": { text: "TEL" },
      "\u2122": { text: "\\texttrademark", commandspacer: true, textpackages: ["textcomp"] },
      \u2124: { math: "\\mathbb{Z}" },
      \u2126: { math: "\\Omega" },
      "\u2127": { math: "\\mho" },
      \u2128: { math: "\\mathfrak{Z}" },
      "\u2129": { text: "\\textriota", commandspacer: true },
      \u212A: { text: "K" },
      \u212B: { math: "\\Angstroem", text: "\\AA", commandspacer: true },
      \u212C: { math: "\\mathscr{B}" },
      \u212D: { math: "\\mathfrak{C}" },
      "\u212E": { text: "\\textestimated", commandspacer: true },
      \u212F: { math: "\\mathscr{e}" },
      \u2130: { math: "\\mathscr{E}" },
      \u2131: { math: "\\mathscr{F}" },
      "\u2132": { math: "\\Finv" },
      \u2133: { math: "\\mathscr{M}" },
      \u2134: { math: "\\mathscr{o}" },
      \u2135: { math: "\\aleph" },
      \u2136: { math: "\\beth" },
      \u2137: { math: "\\gimel" },
      \u2138: { math: "\\daleth" },
      "\u213C": { math: "\\mathbb{\\pi}" },
      "\u213D": { math: "\\mathbb{\\gamma}" },
      "\u213E": { math: "\\mathbb{\\Gamma}" },
      "\u213F": { math: "\\mathbb{\\Pi}" },
      "\u2140": { math: "\\mathbb{\\Sigma}" },
      "\u2141": { math: "\\Game" },
      "\u2142": { math: "\\sansLturned" },
      "\u2143": { math: "\\sansLmirrored" },
      "\u2144": { math: "\\Yup" },
      "\u2145": { math: "\\CapitalDifferentialD" },
      "\u2146": { math: "\\DifferentialD" },
      "\u2147": { math: "\\ExponetialE" },
      "\u2148": { math: "\\ComplexI" },
      "\u2149": { math: "\\ComplexJ" },
      "\u214A": { math: "\\PropertyLine" },
      "\u214B": { math: "\\invamp" },
      "\u2150": { math: "\\frac{1}{7}" },
      "\u2151": { math: "\\frac{1}{9}" },
      "\u2152": { math: "\\frac{1}{10}" },
      "\u2153": { math: "\\frac{1}{3}" },
      "\u2154": { math: "\\frac{2}{3}" },
      "\u2155": { math: "\\frac{1}{5}" },
      "\u2156": { math: "\\frac{2}{5}" },
      "\u2157": { math: "\\frac{3}{5}" },
      "\u2158": { math: "\\frac{4}{5}" },
      "\u2159": { math: "\\frac{1}{6}" },
      "\u215A": { math: "\\frac{5}{6}" },
      "\u215B": { math: "\\frac{1}{8}" },
      "\u215C": { math: "\\frac{3}{8}" },
      "\u215D": { math: "\\frac{5}{8}" },
      "\u215E": { math: "\\frac{7}{8}" },
      "\u215F": { math: "\\frac{1}" },
      "\u2160": { text: "I" },
      "\u2161": { text: "II" },
      "\u2162": { text: "III" },
      "\u2163": { text: "IV" },
      "\u2164": { text: "V" },
      "\u2165": { text: "VI" },
      "\u2166": { text: "VII" },
      "\u2167": { text: "VIII" },
      "\u2168": { text: "IX" },
      "\u2169": { text: "X" },
      "\u216A": { text: "XI" },
      "\u216B": { text: "XII" },
      "\u216C": { text: "L" },
      "\u216D": { text: "C" },
      "\u216E": { text: "D" },
      "\u216F": { text: "M" },
      "\u2170": { text: "i" },
      "\u2171": { text: "ii" },
      "\u2172": { text: "iii" },
      "\u2173": { text: "iv" },
      "\u2174": { text: "v" },
      "\u2175": { text: "vi" },
      "\u2176": { text: "vii" },
      "\u2177": { text: "viii" },
      "\u2178": { text: "ix" },
      "\u2179": { text: "x" },
      "\u217A": { text: "xi" },
      "\u217B": { text: "xii" },
      "\u217C": { text: "l" },
      "\u217D": { text: "c" },
      "\u217E": { text: "d" },
      "\u217F": { text: "m" },
      "\u2189": { math: "\\frac{0}{3}" },
      "\u2190": { math: "\\leftarrow" },
      "\u2191": { math: "\\uparrow" },
      "\u2192": { math: "\\rightarrow", text: "\\textrightarrow", commandspacer: true, textpackages: ["textcomp"] },
      "\u2193": { math: "\\downarrow" },
      "\u2194": { math: "\\leftrightarrow" },
      "\u2195": { math: "\\updownarrow" },
      "\u2196": { math: "\\nwarrow" },
      "\u2197": { math: "\\nearrow" },
      "\u2198": { math: "\\searrow" },
      "\u2199": { math: "\\swarrow" },
      "\u219A": { math: "\\nleftarrow" },
      "\u219B": { math: "\\nrightarrow" },
      "\u219C": { math: "\\arrowwaveleft" },
      "\u219D": { math: "\\arrowwaveright" },
      "\u219E": { math: "\\twoheadleftarrow" },
      "\u219F": { math: "\\twoheaduparrow" },
      "\u21A0": { math: "\\twoheadrightarrow" },
      "\u21A1": { math: "\\twoheaddownarrow" },
      "\u21A2": { math: "\\leftarrowtail" },
      "\u21A3": { math: "\\rightarrowtail" },
      "\u21A4": { math: "\\mapsfrom" },
      "\u21A5": { math: "\\MapsUp" },
      "\u21A6": { math: "\\mapsto" },
      "\u21A7": { math: "\\MapsDown" },
      "\u21A8": { math: "\\updownarrowbar" },
      "\u21A9": { math: "\\hookleftarrow" },
      "\u21AA": { math: "\\hookrightarrow" },
      "\u21AB": { math: "\\looparrowleft" },
      "\u21AC": { math: "\\looparrowright" },
      "\u21AD": { math: "\\leftrightsquigarrow" },
      "\u21AE": { math: "\\nleftrightarrow" },
      "\u21AF": { math: "\\lightning" },
      "\u21B0": { math: "\\Lsh" },
      "\u21B1": { math: "\\Rsh" },
      "\u21B2": { math: "\\dlsh" },
      "\u21B3": { text: "\\reflectbox{\\carriagereturn}", textpackages: ["graphics", "unicode-math"] },
      "\u21B4": { math: "\\linefeed" },
      "\u21B5": { math: "\\carriagereturn" },
      "\u21B6": { math: "\\curvearrowleft" },
      "\u21B7": { math: "\\curvearrowright" },
      "\u21B8": { math: "\\barovernorthwestarrow" },
      "\u21B9": { math: "\\barleftarrowrightarrowba" },
      "\u21BA": { math: "\\circlearrowleft" },
      "\u21BB": { math: "\\circlearrowright" },
      "\u21BC": { math: "\\leftharpoonup" },
      "\u21BD": { math: "\\leftharpoondown" },
      "\u21BE": { math: "\\upharpoonright" },
      "\u21BF": { math: "\\upharpoonleft" },
      "\u21C0": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
      "\u21C1": { math: "\\rightharpoondown" },
      "\u21C2": { math: "\\downharpoonright" },
      "\u21C3": { math: "\\downharpoonleft" },
      "\u21C4": { math: "\\rightleftarrows" },
      "\u21C5": { math: "\\dblarrowupdown" },
      "\u21C6": { math: "\\leftrightarrows" },
      "\u21C7": { math: "\\leftleftarrows" },
      "\u21C8": { math: "\\upuparrows" },
      "\u21C9": { math: "\\rightrightarrows" },
      "\u21CA": { math: "\\downdownarrows" },
      "\u21CB": { math: "\\leftrightharpoons" },
      "\u21CC": { math: "\\rightleftharpoons" },
      "\u21CD": { math: "\\nLeftarrow" },
      "\u21CE": { math: "\\nLeftrightarrow" },
      "\u21CF": { math: "\\nRightarrow" },
      "\u21D0": { math: "\\Leftarrow" },
      "\u21D1": { math: "\\Uparrow" },
      "\u21D2": { math: "\\Rightarrow" },
      "\u21D3": { math: "\\Downarrow" },
      "\u21D4": { math: "\\Leftrightarrow" },
      "\u21D5": { math: "\\Updownarrow" },
      "\u21D6": { math: "\\Nwarrow" },
      "\u21D7": { math: "\\Nearrow" },
      "\u21D8": { math: "\\Searrow" },
      "\u21D9": { math: "\\Swarrow" },
      "\u21DA": { math: "\\Lleftarrow" },
      "\u21DB": { math: "\\Rrightarrow" },
      "\u21DC": { math: "\\leftsquigarrow" },
      "\u21DD": { math: "\\rightsquigarrow" },
      "\u21DE": { math: "\\nHuparrow" },
      "\u21DF": { math: "\\nHdownarrow" },
      "\u21E0": { math: "\\dashleftarrow" },
      "\u21E1": { math: "\\updasharrow" },
      "\u21E2": { math: "\\dashrightarrow" },
      "\u21E3": { math: "\\downdasharrow" },
      "\u21E4": { math: "\\LeftArrowBar" },
      "\u21E5": { math: "\\RightArrowBar" },
      "\u21E6": { math: "\\leftwhitearrow" },
      "\u21E7": { math: "\\upwhitearrow" },
      "\u21E8": { math: "\\rightwhitearrow" },
      "\u21E9": { math: "\\downwhitearrow" },
      "\u21EA": { math: "\\whitearrowupfrombar" },
      "\u21F4": { math: "\\circleonrightarrow" },
      "\u21F5": { math: "\\DownArrowUpArrow" },
      "\u21F6": { math: "\\rightthreearrows" },
      "\u21F7": { math: "\\nvleftarrow" },
      "\u21F8": { math: "\\pfun" },
      "\u21F9": { math: "\\nvleftrightarrow" },
      "\u21FA": { math: "\\nVleftarrow" },
      "\u21FB": { math: "\\ffun" },
      "\u21FC": { math: "\\nVleftrightarrow" },
      "\u21FD": { math: "\\leftarrowtriangle" },
      "\u21FE": { math: "\\rightarrowtriangle" },
      "\u21FF": { math: "\\leftrightarrowtriangle" },
      "\u2200": { math: "\\forall" },
      "\u2201": { math: "\\complement" },
      "\u2202": { math: "\\partial" },
      "\u2203": { math: "\\exists" },
      "\u2204": { math: "\\nexists" },
      "\u2205": { math: "\\varnothing" },
      "\u2206": { math: "\\increment" },
      "\u2207": { math: "\\nabla" },
      "\u2208": { math: "\\in" },
      "\u2209": { math: "\\not\\in" },
      "\u220A": { math: "\\smallin" },
      "\u220B": { math: "\\ni" },
      "\u220C": { math: "\\not\\ni" },
      "\u220D": { math: "\\smallni" },
      "\u220E": { math: "\\QED" },
      "\u220F": { math: "\\prod" },
      "\u2210": { math: "\\coprod" },
      "\u2211": { math: "\\sum" },
      "\u2212": { math: "-", text: "-" },
      "\u2213": { math: "\\mp" },
      "\u2214": { math: "\\dotplus" },
      "\u2215": { text: "/" },
      "\u2216": { math: "\\setminus" },
      "\u2217": { math: "{_\\ast}" },
      "\u2218": { math: "\\circ" },
      "\u2219": { math: "\\bullet" },
      "\u221A": { math: "\\surd" },
      "\u221B": { math: "\\sqrt[3]" },
      "\u221C": { math: "\\sqrt[4]" },
      "\u221D": { math: "\\propto" },
      "\u221E": { math: "\\infty" },
      "\u221F": { math: "\\rightangle" },
      "\u2220": { math: "\\angle" },
      "\u2221": { math: "\\measuredangle" },
      "\u2222": { math: "\\sphericalangle" },
      "\u2223": { math: "\\mid" },
      "\u2224": { math: "\\nmid" },
      "\u2225": { math: "\\parallel" },
      "\u2226": { math: "\\nparallel" },
      "\u2227": { math: "\\wedge" },
      "\u2228": { math: "\\vee" },
      "\u2229": { math: "\\cap" },
      "\u222A": { math: "\\cup" },
      "\u222B": { math: "\\int" },
      "\u222C": { math: "{\\int\\!\\int}" },
      "\u222D": { math: "{\\int\\!\\int\\!\\int}" },
      "\u222E": { math: "\\oint" },
      "\u222F": { math: "\\surfintegral" },
      "\u2230": { math: "\\volintegral" },
      "\u2231": { math: "\\clwintegral" },
      "\u2232": { math: "\\lcirclerightint", mathpackages: ["MnSymbol"] },
      "\u2233": { math: "\\rcirclerightint", mathpackages: ["MnSymbol"] },
      "\u2234": { math: "\\therefore" },
      "\u2235": { math: "\\because" },
      "\u2236": { math: ":" },
      "\u2237": { math: "\\Colon" },
      "\u2238": { math: "\\dotdiv", mathpackages: ["mathabx"] },
      "\u2239": { math: "\\eqcolon" },
      "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" },
      "\u223B": { math: "\\homothetic" },
      "\u223C": { math: "\\sim" },
      "\u223D": { math: "\\backsim" },
      "\u223E": { math: "\\lazysinv" },
      "\u223F": { math: "\\AC" },
      "\u2240": { math: "\\wr" },
      "\u2241": { math: "\\not\\sim" },
      "\u2242": { math: "\\texteqsim", mathpackages: ["xecjk"] },
      "\u2242\u0338": { math: "\\NotEqualTilde" },
      "\u2243": { math: "\\simeq" },
      "\u2244": { math: "\\not\\simeq" },
      "\u2245": { math: "\\cong" },
      "\u2246": { math: "\\approxnotequal" },
      "\u2247": { math: "\\not\\cong" },
      "\u2248": { math: "\\approx" },
      "\u2249": { math: "\\not\\approx" },
      "\u224A": { math: "\\approxeq" },
      "\u224B": { math: "\\tildetrpl" },
      "\u224B\u0338": { math: "\\not\\apid" },
      "\u224C": { math: "\\allequal" },
      "\u224D": { math: "\\asymp" },
      "\u224E": { math: "\\Bumpeq" },
      "\u224E\u0338": { math: "\\NotHumpDownHump" },
      "\u224F": { math: "\\bumpeq" },
      "\u224F\u0338": { math: "\\NotHumpEqual" },
      "\u2250": { math: "\\doteq" },
      "\u2250\u0338": { math: "\\not\\doteq" },
      "\u2251": { math: "\\doteqdot" },
      "\u2252": { math: "\\fallingdotseq" },
      "\u2253": { math: "\\risingdotseq" },
      "\u2254": { math: "\\coloneq", text: ":=" },
      "\u2255": { math: "=:" },
      "\u2256": { math: "\\eqcirc" },
      "\u2257": { math: "\\circeq" },
      "\u2258": { math: "\\arceq" },
      "\u2259": { math: "\\estimates" },
      "\u225B": { math: "\\starequal" },
      "\u225C": { math: "\\triangleq" },
      "\u225D": { math: "\\eqdef" },
      "\u225E": { math: "\\measeq" },
      "\u2260": { math: "\\neq" },
      "\u2261": { math: "\\equiv" },
      "\u2262": { math: "\\not\\equiv" },
      "\u2263": { math: "\\Equiv" },
      "\u2264": { math: "\\leq" },
      "\u2265": { math: "\\geq" },
      "\u2266": { math: "\\leqq" },
      "\u2267": { math: "\\geqq" },
      "\u2268": { math: "\\lneqq" },
      "\u2268\uFE00": { math: "\\lvertneqq" },
      "\u2269": { math: "\\gneqq" },
      "\u2269\uFE00": { math: "\\gvertneqq" },
      "\u226A": { math: "\\ll" },
      "\u226A\u0338": { math: "\\NotLessLess" },
      "\u226B": { math: "\\gg" },
      "\u226B\u0338": { math: "\\NotGreaterGreater" },
      "\u226C": { math: "\\between" },
      "\u226D": { math: "{\\not\\kern-0.3em\\times}" },
      "\u226E": { math: "\\not<" },
      "\u226F": { math: "\\not>" },
      "\u2270": { math: "\\not\\leq" },
      "\u2271": { math: "\\not\\geq" },
      "\u2272": { math: "\\lessequivlnt" },
      "\u2273": { math: "\\greaterequivlnt" },
      "\u2276": { math: "\\lessgtr" },
      "\u2277": { math: "\\gtrless" },
      "\u2278": { math: "\\notlessgreater" },
      "\u2279": { math: "\\notgreaterless" },
      "\u227A": { math: "\\prec" },
      "\u227B": { math: "\\succ" },
      "\u227C": { math: "\\preccurlyeq" },
      "\u227D": { math: "\\succcurlyeq" },
      "\u227E": { math: "\\precapprox" },
      "\u227E\u0338": { math: "\\NotPrecedesTilde" },
      "\u227F": { math: "\\succapprox" },
      "\u227F\u0338": { math: "\\NotSucceedsTilde" },
      "\u2280": { math: "\\not\\prec" },
      "\u2281": { math: "\\not\\succ" },
      "\u2282": { math: "\\subset" },
      "\u2283": { math: "\\supset" },
      "\u2284": { math: "\\not\\subset" },
      "\u2285": { math: "\\not\\supset" },
      "\u2286": { math: "\\subseteq" },
      "\u2287": { math: "\\supseteq" },
      "\u2288": { math: "\\not\\subseteq" },
      "\u2289": { math: "\\not\\supseteq" },
      "\u228A": { math: "\\subsetneq" },
      "\u228A\uFE00": { math: "\\varsubsetneqq" },
      "\u228B": { math: "\\supsetneq" },
      "\u228B\uFE00": { math: "\\varsupsetneq" },
      "\u228C": { math: "\\cupleftarrow" },
      "\u228D": { math: "\\cupdot" },
      "\u228E": { math: "\\uplus" },
      "\u228F": { math: "\\sqsubset" },
      "\u228F\u0338": { math: "\\NotSquareSubset" },
      "\u2290": { math: "\\sqsupset" },
      "\u2290\u0338": { math: "\\NotSquareSuperset" },
      "\u2291": { math: "\\sqsubseteq" },
      "\u2292": { math: "\\sqsupseteq" },
      "\u2293": { math: "\\sqcap" },
      "\u2294": { math: "\\sqcup" },
      "\u2295": { math: "\\oplus" },
      "\u2296": { math: "\\ominus" },
      "\u2297": { math: "\\otimes" },
      "\u2298": { math: "\\oslash" },
      "\u2299": { math: "\\odot" },
      "\u229A": { math: "\\circledcirc" },
      "\u229B": { math: "\\circledast" },
      "\u229C": { math: "\\circledequal" },
      "\u229D": { math: "\\circleddash" },
      "\u229E": { math: "\\boxplus" },
      "\u229F": { math: "\\boxminus" },
      "\u22A0": { math: "\\boxtimes" },
      "\u22A1": { math: "\\boxdot" },
      "\u22A2": { math: "\\vdash" },
      "\u22A3": { math: "\\dashv" },
      "\u22A4": { math: "\\top" },
      "\u22A5": { math: "\\perp" },
      "\u22A6": { math: "\\assert" },
      "\u22A7": { math: "\\truestate" },
      "\u22A8": { math: "\\forcesextra" },
      "\u22A9": { math: "\\Vdash" },
      "\u22AA": { math: "\\Vvdash" },
      "\u22AB": { math: "\\VDash" },
      "\u22AC": { math: "\\nvdash" },
      "\u22AD": { math: "\\nvDash" },
      "\u22AE": { math: "\\nVdash" },
      "\u22AF": { math: "\\nVDash" },
      "\u22B0": { math: "\\prurel" },
      "\u22B1": { math: "\\scurel" },
      "\u22B2": { math: "\\vartriangleleft" },
      "\u22B3": { math: "\\vartriangleright" },
      "\u22B4": { math: "\\trianglelefteq" },
      "\u22B5": { math: "\\trianglerighteq" },
      "\u22B6": { math: "\\original" },
      "\u22B7": { math: "\\image" },
      "\u22B8": { math: "\\multimap" },
      "\u22B9": { math: "\\hermitconjmatrix" },
      "\u22BA": { math: "\\intercal" },
      "\u22BB": { math: "\\veebar" },
      "\u22BC": { math: "\\barwedge" },
      "\u22BD": { math: "\\barvee" },
      "\u22BE": { math: "\\rightanglearc" },
      "\u22BF": { math: "\\varlrtriangle" },
      "\u22C2": { math: "\\bigcap" },
      "\u22C3": { math: "\\bigcup" },
      "\u22C4": { math: "\\diamond" },
      "\u22C5": { math: "\\cdot" },
      "\u22C6": { math: "\\star" },
      "\u22C7": { math: "\\divideontimes" },
      "\u22C8": { math: "\\bowtie" },
      "\u22C9": { math: "\\ltimes" },
      "\u22CA": { math: "\\rtimes" },
      "\u22CB": { math: "\\leftthreetimes" },
      "\u22CC": { math: "\\rightthreetimes" },
      "\u22CD": { math: "\\backsimeq" },
      "\u22CE": { math: "\\curlyvee" },
      "\u22CF": { math: "\\curlywedge" },
      "\u22D0": { math: "\\Subset" },
      "\u22D1": { math: "\\Supset" },
      "\u22D2": { math: "\\Cap" },
      "\u22D3": { math: "\\Cup" },
      "\u22D4": { math: "\\pitchfork" },
      "\u22D5": { math: "\\hash" },
      "\u22D6": { math: "\\lessdot" },
      "\u22D7": { math: "\\gtrdot" },
      "\u22D8": { math: "\\verymuchless" },
      "\u22D9": { math: "\\verymuchgreater" },
      "\u22DA": { math: "\\lesseqgtr" },
      "\u22DB": { math: "\\gtreqless" },
      "\u22DC": { math: "\\eqless" },
      "\u22DD": { math: "\\eqgtr" },
      "\u22DE": { math: "\\curlyeqprec" },
      "\u22DF": { math: "\\curlyeqsucc" },
      "\u22E0": { math: "\\npreceq" },
      "\u22E1": { math: "\\nsucceq" },
      "\u22E2": { math: "\\not\\sqsubseteq" },
      "\u22E3": { math: "\\not\\sqsupseteq" },
      "\u22E4": { math: "\\sqsubsetneq" },
      "\u22E5": { math: "\\Elzsqspne" },
      "\u22E6": { math: "\\lnsim" },
      "\u22E7": { math: "\\gnsim" },
      "\u22E8": { math: "\\precedesnotsimilar" },
      "\u22E9": { math: "\\succnsim" },
      "\u22EA": { math: "\\ntriangleleft" },
      "\u22EB": { math: "\\ntriangleright" },
      "\u22EC": { math: "\\ntrianglelefteq" },
      "\u22ED": { math: "\\ntrianglerighteq" },
      "\u22EE": { math: "\\vdots" },
      "\u22EF": { math: "\\cdots" },
      "\u22F0": { math: "\\upslopeellipsis" },
      "\u22F1": { math: "\\downslopeellipsis" },
      "\u22F2": { math: "\\disin" },
      "\u22F3": { math: "\\varisins" },
      "\u22F4": { math: "\\isins" },
      "\u22F5": { math: "\\isindot" },
      "\u22F6": { math: "\\barin" },
      "\u22F7": { math: "\\isinobar" },
      "\u22F8": { math: "\\isinvb" },
      "\u22F9": { math: "\\isinE" },
      "\u22FA": { math: "\\nisd" },
      "\u22FB": { math: "\\varnis" },
      "\u22FC": { math: "\\nis" },
      "\u22FD": { math: "\\varniobar" },
      "\u22FE": { math: "\\niobar" },
      "\u22FF": { math: "\\bagmember" },
      "\u2300": { math: "\\diameter" },
      "\u2302": { math: "\\house" },
      "\u2305": { math: "\\varbarwedge", text: "\\barwedge", commandspacer: true },
      "\u2306": { math: "\\perspcorrespond" },
      "\u2308": { math: "\\lceil" },
      "\u2309": { math: "\\rceil" },
      "\u230A": { math: "\\lfloor" },
      "\u230B": { math: "\\rfloor" },
      "\u2310": { math: "\\invneg" },
      "\u2311": { math: "\\wasylozenge" },
      "\u2312": { math: "\\profline" },
      "\u2313": { math: "\\profsurf" },
      "\u2315": { math: "\\recorder" },
      "\u2316": { math: '{\\mathchar"2208}' },
      "\u2317": { math: "\\viewdata" },
      "\u2319": { math: "\\turnednot" },
      "\u231C": { math: "\\ulcorner" },
      "\u231D": { math: "\\urcorner" },
      "\u231E": { math: "\\llcorner" },
      "\u231F": { math: "\\lrcorner" },
      "\u2320": { math: "\\inttop" },
      "\u2321": { math: "\\intbottom" },
      "\u2322": { math: "\\frown" },
      "\u2323": { math: "\\smile" },
      "\u2329": { math: "\\langle" },
      "\u232A": { math: "\\rangle" },
      "\u232C": { math: "\\varhexagonlrbonds" },
      "\u2332": { math: "\\conictaper" },
      "\u2336": { math: "\\topbot" },
      "\u2339": { math: "\\APLinv" },
      "\u233F": { math: "\\notslash" },
      "\u2340": { math: "\\notbackslash" },
      "\u2347": { math: "\\APLleftarrowbox" },
      "\u2348": { math: "\\APLrightarrowbox" },
      "\u2349": { math: "\\invdiameter" },
      "\u2350": { math: "\\APLuparrowbox" },
      "\u2353": { math: "\\APLboxupcaret" },
      "\u2357": { math: "\\APLdownarrowbox" },
      "\u235D": { math: "\\APLcomment" },
      "\u235E": { math: "\\APLinput" },
      "\u235F": { math: "\\APLlog" },
      "\u2370": { math: "\\APLboxquestion" },
      "\u237C": { math: "\\rangledownzigzagarrow" },
      "\u2394": { math: "\\hexagon" },
      "\u239B": { math: "\\lparenuend" },
      "\u239C": { math: "\\lparenextender" },
      "\u239D": { math: "\\lparenlend" },
      "\u239E": { math: "\\rparenuend" },
      "\u239F": { math: "\\rparenextender" },
      "\u23A0": { math: "\\rparenlend" },
      "\u23A1": { math: "\\lbrackuend" },
      "\u23A2": { math: "\\lbrackextender" },
      "\u23A3": { math: "\\Elzdlcorn" },
      "\u23A4": { math: "\\rbrackuend" },
      "\u23A5": { math: "\\rbrackextender" },
      "\u23A6": { math: "\\rbracklend" },
      "\u23A7": { math: "\\lbraceuend" },
      "\u23A8": { math: "\\lbracemid" },
      "\u23A9": { math: "\\lbracelend" },
      "\u23AA": { math: "\\vbraceextender" },
      "\u23AB": { math: "\\rbraceuend" },
      "\u23AC": { math: "\\rbracemid" },
      "\u23AD": { math: "\\rbracelend" },
      "\u23AE": { math: "\\intextender" },
      "\u23AF": { math: "\\harrowextender" },
      "\u23B0": { math: "\\lmoustache" },
      "\u23B1": { math: "\\rmoustache" },
      "\u23B2": { math: "\\sumtop" },
      "\u23B3": { math: "\\sumbottom" },
      "\u23B4": { math: "\\overbracket" },
      "\u23B5": { math: "\\underbracket" },
      "\u23B6": { math: "\\bbrktbrk" },
      "\u23B7": { math: "\\sqrtbottom" },
      "\u23B8": { math: "\\lvboxline" },
      "\u23B9": { math: "\\rvboxline" },
      "\u23CE": { math: "\\varcarriagereturn" },
      "\u23DC": { math: "\\overparen" },
      "\u23DD": { math: "\\underparen" },
      "\u23DE": { math: "\\overbrace" },
      "\u23DF": { math: "\\underbrace" },
      "\u23E0": { math: "\\obrbrak" },
      "\u23E1": { math: "\\ubrbrak" },
      "\u23E2": { math: "\\trapezium" },
      "\u23E3": { math: "\\benzenr" },
      "\u23E4": { math: "\\strns" },
      "\u23E5": { math: "\\fltns" },
      "\u23E6": { math: "\\accurrent" },
      "\u23E7": { math: "\\elinters" },
      "\u2460": { text: "\\ding{172}" },
      "\u2461": { text: "\\ding{173}" },
      "\u2462": { text: "\\ding{174}" },
      "\u2463": { text: "\\ding{175}" },
      "\u2464": { text: "\\ding{176}" },
      "\u2465": { text: "\\ding{177}" },
      "\u2466": { text: "\\ding{178}" },
      "\u2467": { text: "\\ding{179}" },
      "\u2468": { text: "\\ding{180}" },
      "\u2469": { text: "\\ding{181}" },
      "\u246A": { text: "(11)" },
      "\u246B": { text: "(12)" },
      "\u246C": { text: "(13)" },
      "\u246D": { text: "(14)" },
      "\u246E": { text: "(15)" },
      "\u246F": { text: "(16)" },
      "\u2470": { text: "(17)" },
      "\u2471": { text: "(18)" },
      "\u2472": { text: "(19)" },
      "\u2473": { text: "(20)" },
      "\u2474": { text: "(1)" },
      "\u2475": { text: "(2)" },
      "\u2476": { text: "(3)" },
      "\u2477": { text: "(4)" },
      "\u2478": { text: "(5)" },
      "\u2479": { text: "(6)" },
      "\u247A": { text: "(7)" },
      "\u247B": { text: "(8)" },
      "\u247C": { text: "(9)" },
      "\u247D": { text: "(10)" },
      "\u247E": { text: "(11)" },
      "\u247F": { text: "(12)" },
      "\u2480": { text: "(13)" },
      "\u2481": { text: "(14)" },
      "\u2482": { text: "(15)" },
      "\u2483": { text: "(16)" },
      "\u2484": { text: "(17)" },
      "\u2485": { text: "(18)" },
      "\u2486": { text: "(19)" },
      "\u2487": { text: "(20)" },
      "\u2488": { text: "1." },
      "\u2489": { text: "2." },
      "\u248A": { text: "3." },
      "\u248B": { text: "4." },
      "\u248C": { text: "5." },
      "\u248D": { text: "6." },
      "\u248E": { text: "7." },
      "\u248F": { text: "8." },
      "\u2490": { text: "9." },
      "\u2491": { text: "10." },
      "\u2492": { text: "11." },
      "\u2493": { text: "12." },
      "\u2494": { text: "13." },
      "\u2495": { text: "14." },
      "\u2496": { text: "15." },
      "\u2497": { text: "16." },
      "\u2498": { text: "17." },
      "\u2499": { text: "18." },
      "\u249A": { text: "19." },
      "\u249B": { text: "20." },
      "\u249C": { text: "(a)" },
      "\u249D": { text: "(b)" },
      "\u249E": { text: "(c)" },
      "\u249F": { text: "(d)" },
      "\u24A0": { text: "(e)" },
      "\u24A1": { text: "(f)" },
      "\u24A2": { text: "(g)" },
      "\u24A3": { text: "(h)" },
      "\u24A4": { text: "(i)" },
      "\u24A5": { text: "(j)" },
      "\u24A6": { text: "(k)" },
      "\u24A7": { text: "(l)" },
      "\u24A8": { text: "(m)" },
      "\u24A9": { text: "(n)" },
      "\u24AA": { text: "(o)" },
      "\u24AB": { text: "(p)" },
      "\u24AC": { text: "(q)" },
      "\u24AD": { text: "(r)" },
      "\u24AE": { text: "(s)" },
      "\u24AF": { text: "(t)" },
      "\u24B0": { text: "(u)" },
      "\u24B1": { text: "(v)" },
      "\u24B2": { text: "(w)" },
      "\u24B3": { text: "(x)" },
      "\u24B4": { text: "(y)" },
      "\u24B5": { text: "(z)" },
      "\u24B6": { text: "(A)" },
      "\u24B7": { text: "(B)" },
      "\u24B8": { text: "(C)" },
      "\u24B9": { text: "(D)" },
      "\u24BA": { text: "(E)" },
      "\u24BB": { text: "(F)" },
      "\u24BC": { text: "(G)" },
      "\u24BD": { text: "(H)" },
      "\u24BE": { text: "(I)" },
      "\u24BF": { text: "(J)" },
      "\u24C0": { text: "(K)" },
      "\u24C1": { text: "(L)" },
      "\u24C2": { text: "(M)" },
      "\u24C3": { text: "(N)" },
      "\u24C4": { text: "(O)" },
      "\u24C5": { text: "(P)" },
      "\u24C6": { text: "(Q)" },
      "\u24C7": { text: "(R)" },
      "\u24C8": { math: "\\circledS" },
      "\u24C9": { text: "(T)" },
      "\u24CA": { text: "(U)" },
      "\u24CB": { text: "(V)" },
      "\u24CC": { text: "(W)" },
      "\u24CD": { text: "(X)" },
      "\u24CE": { text: "(Y)" },
      "\u24CF": { text: "(Z)" },
      "\u24D0": { text: "(a)" },
      "\u24D1": { text: "(b)" },
      "\u24D2": { text: "(c)" },
      "\u24D3": { text: "(d)" },
      "\u24D4": { text: "(e)" },
      "\u24D5": { text: "(f)" },
      "\u24D6": { text: "(g)" },
      "\u24D7": { text: "(h)" },
      "\u24D8": { text: "(i)" },
      "\u24D9": { text: "(j)" },
      "\u24DA": { text: "(k)" },
      "\u24DB": { text: "(l)" },
      "\u24DC": { text: "(m)" },
      "\u24DD": { text: "(n)" },
      "\u24DE": { text: "(o)" },
      "\u24DF": { text: "(p)" },
      "\u24E0": { text: "(q)" },
      "\u24E1": { text: "(r)" },
      "\u24E2": { text: "(s)" },
      "\u24E3": { text: "(t)" },
      "\u24E4": { text: "(u)" },
      "\u24E5": { text: "(v)" },
      "\u24E6": { text: "(w)" },
      "\u24E7": { text: "(x)" },
      "\u24E8": { text: "(y)" },
      "\u24E9": { text: "(z)" },
      "\u24EA": { text: "(0)" },
      "\u2500": { text: "-" },
      "\u2501": { text: "=" },
      "\u2502": { text: "|" },
      "\u2503": { text: "|" },
      "\u2504": { text: "-" },
      "\u2505": { text: "=" },
      "\u2506": { math: "\\Elzdshfnc" },
      "\u2507": { text: "|" },
      "\u2508": { text: "-" },
      "\u2509": { text: "=" },
      "\u250A": { text: "|" },
      "\u250B": { text: "|" },
      "\u250C": { text: "+" },
      "\u250D": { text: "+" },
      "\u250E": { text: "+" },
      "\u250F": { text: "+" },
      "\u2510": { text: "+" },
      "\u2511": { text: "+" },
      "\u2512": { text: "+" },
      "\u2513": { text: "+" },
      "\u2514": { text: "+" },
      "\u2515": { text: "+" },
      "\u2516": { text: "+" },
      "\u2517": { text: "+" },
      "\u2518": { text: "+" },
      "\u2519": { math: "\\Elzsqfnw" },
      "\u251A": { text: "+" },
      "\u251B": { text: "+" },
      "\u251C": { text: "+" },
      "\u251D": { text: "+" },
      "\u251E": { text: "+" },
      "\u251F": { text: "+" },
      "\u2520": { text: "+" },
      "\u2521": { text: "+" },
      "\u2522": { text: "+" },
      "\u2523": { text: "+" },
      "\u2524": { text: "+" },
      "\u2525": { text: "+" },
      "\u2526": { text: "+" },
      "\u2527": { text: "+" },
      "\u2528": { text: "+" },
      "\u2529": { text: "+" },
      "\u252A": { text: "+" },
      "\u252B": { text: "+" },
      "\u252C": { text: "+" },
      "\u252D": { text: "+" },
      "\u252E": { text: "+" },
      "\u252F": { text: "+" },
      "\u2530": { text: "+" },
      "\u2531": { text: "+" },
      "\u2532": { text: "+" },
      "\u2533": { text: "+" },
      "\u2534": { text: "+" },
      "\u2535": { text: "+" },
      "\u2536": { text: "+" },
      "\u2537": { text: "+" },
      "\u2538": { text: "+" },
      "\u2539": { text: "+" },
      "\u253A": { text: "+" },
      "\u253B": { text: "+" },
      "\u253C": { text: "+" },
      "\u253D": { text: "+" },
      "\u253E": { text: "+" },
      "\u253F": { text: "+" },
      "\u2540": { text: "+" },
      "\u2541": { text: "+" },
      "\u2542": { text: "+" },
      "\u2543": { text: "+" },
      "\u2544": { text: "+" },
      "\u2545": { text: "+" },
      "\u2546": { text: "+" },
      "\u2547": { text: "+" },
      "\u2548": { text: "+" },
      "\u2549": { text: "+" },
      "\u254A": { text: "+" },
      "\u254B": { text: "+" },
      "\u254C": { text: "-" },
      "\u254D": { text: "=" },
      "\u254E": { text: "|" },
      "\u254F": { text: "|" },
      "\u2550": { text: "=" },
      "\u2551": { text: "|" },
      "\u2552": { text: "+" },
      "\u2553": { text: "+" },
      "\u2554": { text: "+" },
      "\u2555": { text: "+" },
      "\u2556": { text: "+" },
      "\u2557": { text: "+" },
      "\u2558": { text: "+" },
      "\u2559": { text: "+" },
      "\u255A": { text: "+" },
      "\u255B": { text: "+" },
      "\u255C": { text: "+" },
      "\u255D": { text: "+" },
      "\u255E": { text: "+" },
      "\u255F": { text: "+" },
      "\u2560": { text: "+" },
      "\u2561": { text: "+" },
      "\u2562": { text: "+" },
      "\u2563": { text: "+" },
      "\u2564": { text: "+" },
      "\u2565": { text: "+" },
      "\u2566": { text: "+" },
      "\u2567": { text: "+" },
      "\u2568": { text: "+" },
      "\u2569": { text: "+" },
      "\u256A": { text: "+" },
      "\u256B": { text: "+" },
      "\u256C": { text: "+" },
      "\u256D": { text: "+" },
      "\u256E": { text: "+" },
      "\u256F": { text: "+" },
      "\u2570": { text: "+" },
      "\u2571": { math: "\\diagup" },
      "\u2572": { text: "\\" },
      "\u2573": { text: "X" },
      "\u257C": { text: "-" },
      "\u257D": { text: "|" },
      "\u257E": { text: "-" },
      "\u257F": { text: "|" },
      "\u2580": { math: "\\blockuphalf" },
      "\u2584": { math: "\\blocklowhalf" },
      "\u2588": { math: "\\blockfull" },
      "\u258C": { math: "\\blocklefthalf" },
      "\u2590": { math: "\\blockrighthalf" },
      "\u2591": { math: "\\blockqtrshaded" },
      "\u2592": { math: "\\blockhalfshaded" },
      "\u2593": { math: "\\blockthreeqtrshaded" },
      "\u25A0": { math: "\\mdlgblksquare", text: "\\ding{110}" },
      "\u25A1": { math: "\\square" },
      "\u25A2": { math: "\\squoval" },
      "\u25A3": { math: "\\blackinwhitesquare" },
      "\u25A4": { math: "\\squarehfill" },
      "\u25A5": { math: "\\squarevfill" },
      "\u25A6": { math: "\\squarehvfill" },
      "\u25A7": { math: "\\squarenwsefill" },
      "\u25A8": { math: "\\squareneswfill" },
      "\u25A9": { math: "\\squarecrossfill" },
      "\u25AA": { math: "\\blacksquare" },
      "\u25AB": { math: "\\smwhtsquare" },
      "\u25AC": { math: "\\hrectangleblack" },
      "\u25AD": { math: "\\fbox{~~}" },
      "\u25AE": { math: "\\vrectangleblack" },
      "\u25AF": { math: "\\Elzvrecto" },
      "\u25B0": { math: "\\parallelogramblack" },
      "\u25B2": { math: "\\bigblacktriangleup", text: "\\ding{115}" },
      "\u25B3": { math: "\\bigtriangleup" },
      "\u25B4": { math: "\\blacktriangle" },
      "\u25B5": { math: "\\vartriangle" },
      "\u25B6": { math: "\\RHD" },
      "\u25B7": { math: "\\rhd" },
      "\u25B8": { math: "\\blacktriangleright" },
      "\u25B9": { math: "\\triangleright" },
      "\u25BA": { math: "\\blackpointerright" },
      "\u25BB": { math: "\\whitepointerright" },
      "\u25BC": { math: "\\bigblacktriangledown", text: "\\ding{116}" },
      "\u25BD": { math: "\\bigtriangledown" },
      "\u25BE": { math: "\\blacktriangledown" },
      "\u25BF": { math: "\\triangledown" },
      "\u25C0": { math: "\\LHD" },
      "\u25C1": { math: "\\lhd" },
      "\u25C2": { math: "\\blacktriangleleft" },
      "\u25C3": { math: "\\triangleleft" },
      "\u25C4": { math: "\\blackpointerleft" },
      "\u25C5": { math: "\\whitepointerleft" },
      "\u25C6": { math: "\\Diamondblack", text: "\\ding{117}" },
      "\u25C7": { math: "\\Diamond" },
      "\u25C8": { math: "\\blackinwhitediamond" },
      "\u25C9": { math: "\\fisheye" },
      "\u25CA": { math: "\\lozenge" },
      "\u25CB": { math: "\\bigcirc" },
      "\u25CC": { math: "\\dottedcircle" },
      "\u25CD": { math: "\\circlevertfill" },
      "\u25CE": { math: "\\bullseye" },
      "\u25CF": { math: "\\CIRCLE", text: "\\ding{108}" },
      "\u25D0": { math: "\\Elzcirfl" },
      "\u25D1": { math: "\\Elzcirfr" },
      "\u25D2": { math: "\\Elzcirfb" },
      "\u25D3": { math: "\\circletophalfblack" },
      "\u25D4": { math: "\\circleurquadblack" },
      "\u25D5": { math: "\\blackcircleulquadwhite" },
      "\u25D6": { math: "\\LEFTCIRCLE" },
      "\u25D7": { math: "\\RIGHTCIRCLE", text: "\\ding{119}" },
      "\u25D8": { math: "\\Elzrvbull" },
      "\u25D9": { math: "\\inversewhitecircle" },
      "\u25DA": { math: "\\invwhiteupperhalfcircle" },
      "\u25DB": { math: "\\invwhitelowerhalfcircle" },
      "\u25DC": { math: "\\ularc" },
      "\u25DD": { math: "\\urarc" },
      "\u25DE": { math: "\\lrarc" },
      "\u25DF": { math: "\\llarc" },
      "\u25E0": { math: "\\topsemicircle" },
      "\u25E1": { math: "\\botsemicircle" },
      "\u25E2": { math: "\\lrblacktriangle" },
      "\u25E3": { math: "\\llblacktriangle" },
      "\u25E4": { math: "\\ulblacktriangle" },
      "\u25E5": { math: "\\urblacktriangle" },
      "\u25E6": { math: "\\smwhtcircle" },
      "\u25E7": { math: "\\Elzsqfl" },
      "\u25E8": { math: "\\Elzsqfr" },
      "\u25E9": { math: "\\squareulblack" },
      "\u25EA": { math: "\\Elzsqfse" },
      "\u25EB": { math: "\\boxbar" },
      "\u25EC": { math: "\\trianglecdot" },
      "\u25ED": { math: "\\triangleleftblack" },
      "\u25EE": { math: "\\trianglerightblack" },
      "\u25EF": { math: "\\bigcirc" },
      "\u25F0": { math: "\\squareulquad" },
      "\u25F1": { math: "\\squarellquad" },
      "\u25F2": { math: "\\squarelrquad" },
      "\u25F3": { math: "\\squareurquad" },
      "\u25F4": { math: "\\circleulquad" },
      "\u25F5": { math: "\\circlellquad" },
      "\u25F6": { math: "\\circlelrquad" },
      "\u25F7": { math: "\\circleurquad" },
      "\u25F8": { math: "\\ultriangle" },
      "\u25F9": { math: "\\urtriangle" },
      "\u25FA": { math: "\\lltriangle" },
      "\u25FB": { math: "\\square" },
      "\u25FC": { math: "\\blacksquare" },
      "\u25FD": { math: "\\mdsmwhtsquare" },
      "\u25FE": { math: "\\mdsmblksquare" },
      "\u25FF": { math: "\\lrtriangle" },
      "\u2605": { math: "\\bigstar", text: "\\ding{72}" },
      "\u2606": { math: "\\bigwhitestar", text: "\\ding{73}" },
      "\u2609": { math: "\\Sun" },
      "\u260E": { text: "\\ding{37}" },
      "\u2610": { math: "\\Square" },
      "\u2611": { math: "\\CheckedBox" },
      "\u2612": { math: "\\XBox" },
      "\u2613": { text: "X" },
      "\u2615": { math: "\\steaming" },
      "\u261B": { text: "\\ding{42}" },
      "\u261E": { math: "\\pointright", text: "\\ding{43}" },
      "\u2620": { math: "\\skull" },
      "\u2621": { math: "\\danger" },
      "\u2622": { math: "\\radiation" },
      "\u2623": { math: "\\biohazard" },
      "\u262F": { math: "\\yinyang" },
      "\u2639": { math: "\\frownie" },
      "\u263A": { math: "\\smiley" },
      "\u263B": { math: "\\blacksmiley" },
      "\u263C": { math: "\\sun" },
      "\u263D": { text: "\\rightmoon", commandspacer: true, textpackages: ["wasysym"] },
      "\u263E": { text: "\\leftmoon", commandspacer: true, textpackages: ["wasysym"] },
      "\u263F": { math: "\\mercury", text: "\\mercury", commandspacer: true },
      "\u2640": { math: "\\female", text: "\\venus", commandspacer: true },
      "\u2641": { math: "\\earth" },
      "\u2642": { math: "\\male", text: "\\male", commandspacer: true },
      "\u2643": { math: "\\jupiter", text: "\\jupiter", commandspacer: true },
      "\u2644": { math: "\\saturn", text: "\\saturn", commandspacer: true },
      "\u2645": { math: "\\uranus", text: "\\uranus", commandspacer: true },
      "\u2646": { math: "\\neptune", text: "\\neptune", commandspacer: true },
      "\u2647": { math: "\\pluto", text: "\\pluto", commandspacer: true },
      "\u2648": { math: "\\aries", text: "\\aries", commandspacer: true },
      "\u2649": { math: "\\taurus", text: "\\taurus", commandspacer: true },
      "\u264A": { math: "\\gemini", text: "\\gemini", commandspacer: true },
      "\u264B": { math: "\\cancer", text: "\\cancer", commandspacer: true },
      "\u264C": { math: "\\leo", text: "\\leo", commandspacer: true },
      "\u264D": { math: "\\virgo", text: "\\virgo", commandspacer: true },
      "\u264E": { math: "\\libra", text: "\\libra", commandspacer: true },
      "\u264F": { math: "\\scorpio", text: "\\scorpio", commandspacer: true },
      "\u2650": { math: "\\sagittarius", text: "\\sagittarius", commandspacer: true },
      "\u2651": { math: "\\capricornus", text: "\\capricornus", commandspacer: true },
      "\u2652": { math: "\\aquarius", text: "\\aquarius", commandspacer: true },
      "\u2653": { math: "\\pisces", text: "\\pisces", commandspacer: true },
      "\u2660": { math: "\\spadesuit", text: "\\ding{171}" },
      "\u2661": { math: "\\heartsuit" },
      "\u2662": { math: "\\diamond" },
      "\u2663": { math: "\\clubsuit", text: "\\ding{168}" },
      "\u2664": { math: "\\varspadesuit" },
      "\u2665": { math: "\\varheartsuit", text: "\\ding{170}" },
      "\u2666": { math: "\\vardiamondsuit", text: "\\ding{169}" },
      "\u2667": { math: "\\varclubsuit" },
      "\u2669": { math: "\\quarternote", text: "\\quarternote", commandspacer: true },
      "\u266A": { math: "\\eighthnote", text: "\\eighthnote", commandspacer: true },
      "\u266B": { math: "\\twonotes" },
      "\u266C": { math: "\\sixteenthnote" },
      "\u266D": { math: "\\flat" },
      "\u266E": { math: "\\natural" },
      "\u266F": { math: "\\sharp" },
      "\u267B": { math: "\\recycle" },
      "\u267E": { math: "\\acidfree" },
      "\u2680": { math: "\\dicei" },
      "\u2681": { math: "\\diceii" },
      "\u2682": { math: "\\diceiii" },
      "\u2683": { math: "\\diceiv" },
      "\u2684": { math: "\\dicev" },
      "\u2685": { math: "\\dicevi" },
      "\u2686": { math: "\\circledrightdot" },
      "\u2687": { math: "\\circledtwodots" },
      "\u2688": { math: "\\blackcircledrightdot" },
      "\u2689": { math: "\\blackcircledtwodots" },
      "\u2693": { math: "\\anchor" },
      "\u2694": { math: "\\swords" },
      "\u26A0": { math: "\\warning" },
      "\u26A5": { math: "\\Hermaphrodite" },
      "\u26AA": { math: "\\medcirc" },
      "\u26AB": { math: "\\medbullet" },
      "\u26AC": { math: "\\mdsmwhtcircle" },
      "\u26B2": { math: "\\neuter" },
      "\u2701": { text: "\\ding{33}" },
      "\u2702": { text: "\\ding{34}" },
      "\u2703": { text: "\\ding{35}" },
      "\u2704": { text: "\\ding{36}" },
      "\u2706": { text: "\\ding{38}" },
      "\u2707": { text: "\\ding{39}" },
      "\u2708": { text: "\\ding{40}" },
      "\u2709": { text: "\\ding{41}" },
      "\u270C": { text: "\\ding{44}" },
      "\u270D": { text: "\\ding{45}" },
      "\u270E": { math: "\\pencil", text: "\\ding{46}" },
      "\u270F": { text: "\\ding{47}" },
      "\u2710": { text: "\\ding{48}" },
      "\u2711": { text: "\\ding{49}" },
      "\u2712": { text: "\\ding{50}" },
      "\u2713": { math: "\\checkmark", text: "\\ding{51}" },
      "\u2714": { text: "\\ding{52}" },
      "\u2715": { text: "\\ding{53}" },
      "\u2716": { text: "\\ding{54}" },
      "\u2717": { math: "\\ballotx", text: "\\ding{55}" },
      "\u2718": { text: "\\ding{56}" },
      "\u2719": { text: "\\ding{57}" },
      "\u271A": { text: "\\ding{58}" },
      "\u271B": { text: "\\ding{59}" },
      "\u271C": { text: "\\ding{60}" },
      "\u271D": { text: "\\ding{61}" },
      "\u271E": { text: "\\ding{62}" },
      "\u271F": { text: "\\ding{63}" },
      "\u2720": { math: "\\maltese", text: "\\ding{64}" },
      "\u2721": { text: "\\ding{65}" },
      "\u2722": { text: "\\ding{66}" },
      "\u2723": { text: "\\ding{67}" },
      "\u2724": { text: "\\ding{68}" },
      "\u2725": { text: "\\ding{69}" },
      "\u2726": { text: "\\ding{70}" },
      "\u2727": { text: "\\ding{71}" },
      "\u2729": { text: "\\ding{73}" },
      "\u272A": { math: "\\circledstar", text: "\\ding{74}" },
      "\u272B": { text: "\\ding{75}" },
      "\u272C": { text: "\\ding{76}" },
      "\u272D": { text: "\\ding{77}" },
      "\u272E": { text: "\\ding{78}" },
      "\u272F": { text: "\\ding{79}" },
      "\u2730": { text: "\\ding{80}" },
      "\u2731": { text: "\\ding{81}" },
      "\u2732": { text: "\\ding{82}" },
      "\u2733": { text: "\\ding{83}" },
      "\u2734": { text: "\\ding{84}" },
      "\u2735": { text: "\\ding{85}" },
      "\u2736": { math: "\\varstar", text: "\\ding{86}" },
      "\u2737": { text: "\\ding{87}" },
      "\u2738": { text: "\\ding{88}" },
      "\u2739": { text: "\\ding{89}" },
      "\u273A": { text: "\\ding{90}" },
      "\u273B": { text: "\\ding{91}" },
      "\u273C": { text: "\\ding{92}" },
      "\u273D": { math: "\\dingasterisk", text: "\\ding{93}" },
      "\u273E": { text: "\\ding{94}" },
      "\u273F": { text: "\\ding{95}" },
      "\u2740": { text: "\\ding{96}" },
      "\u2741": { text: "\\ding{97}" },
      "\u2742": { text: "\\ding{98}" },
      "\u2743": { text: "\\ding{99}" },
      "\u2744": { text: "\\ding{100}" },
      "\u2745": { text: "\\ding{101}" },
      "\u2746": { text: "\\ding{102}" },
      "\u2747": { text: "\\ding{103}" },
      "\u2748": { text: "\\ding{104}" },
      "\u2749": { text: "\\ding{105}" },
      "\u274A": { text: "\\ding{106}" },
      "\u274B": { text: "\\ding{107}" },
      "\u274D": { text: "\\ding{109}" },
      "\u274F": { text: "\\ding{111}" },
      "\u2750": { text: "\\ding{112}" },
      "\u2751": { text: "\\ding{113}" },
      "\u2752": { text: "\\ding{114}" },
      "\u2756": { text: "\\ding{118}" },
      "\u2758": { text: "\\ding{120}" },
      "\u2759": { text: "\\ding{121}" },
      "\u275A": { text: "\\ding{122}" },
      "\u275B": { text: "\\ding{123}" },
      "\u275C": { text: "\\ding{124}" },
      "\u275D": { text: "\\ding{125}" },
      "\u275E": { text: "\\ding{126}" },
      "\u2761": { text: "\\ding{161}" },
      "\u2762": { text: "\\ding{162}" },
      "\u2763": { text: "\\ding{163}" },
      "\u2764": { text: "\\ding{164}" },
      "\u2765": { text: "\\ding{165}" },
      "\u2766": { text: "\\ding{166}" },
      "\u2767": { text: "\\ding{167}" },
      "\u2772": { math: "\\lbrbrak" },
      "\u2773": { math: "\\rbrbrak" },
      "\u2776": { text: "\\ding{182}" },
      "\u2777": { text: "\\ding{183}" },
      "\u2778": { text: "\\ding{184}" },
      "\u2779": { text: "\\ding{185}" },
      "\u277A": { text: "\\ding{186}" },
      "\u277B": { text: "\\ding{187}" },
      "\u277C": { text: "\\ding{188}" },
      "\u277D": { text: "\\ding{189}" },
      "\u277E": { text: "\\ding{190}" },
      "\u277F": { text: "\\ding{191}" },
      "\u2780": { text: "\\ding{192}" },
      "\u2781": { text: "\\ding{193}" },
      "\u2782": { text: "\\ding{194}" },
      "\u2783": { text: "\\ding{195}" },
      "\u2784": { text: "\\ding{196}" },
      "\u2785": { text: "\\ding{197}" },
      "\u2786": { text: "\\ding{198}" },
      "\u2787": { text: "\\ding{199}" },
      "\u2788": { text: "\\ding{200}" },
      "\u2789": { text: "\\ding{201}" },
      "\u278A": { text: "\\ding{202}" },
      "\u278B": { text: "\\ding{203}" },
      "\u278C": { text: "\\ding{204}" },
      "\u278D": { text: "\\ding{205}" },
      "\u278E": { text: "\\ding{206}" },
      "\u278F": { text: "\\ding{207}" },
      "\u2790": { text: "\\ding{208}" },
      "\u2791": { text: "\\ding{209}" },
      "\u2792": { text: "\\ding{210}" },
      "\u2793": { text: "\\ding{211}" },
      "\u2794": { text: "\\ding{212}" },
      "\u2798": { text: "\\ding{216}" },
      "\u2799": { text: "\\ding{217}" },
      "\u279A": { text: "\\ding{218}" },
      "\u279B": { math: "\\draftingarrow", text: "\\ding{219}" },
      "\u279C": { text: "\\ding{220}" },
      "\u279D": { text: "\\ding{221}" },
      "\u279E": { text: "\\ding{222}" },
      "\u279F": { text: "\\ding{223}" },
      "\u27A0": { text: "\\ding{224}" },
      "\u27A1": { text: "\\ding{225}" },
      "\u27A2": { math: "\\arrowbullet", text: "\\ding{226}" },
      "\u27A3": { text: "\\ding{227}" },
      "\u27A4": { text: "\\ding{228}" },
      "\u27A5": { text: "\\ding{229}" },
      "\u27A6": { text: "\\ding{230}" },
      "\u27A7": { text: "\\ding{231}" },
      "\u27A8": { text: "\\ding{232}" },
      "\u27A9": { text: "\\ding{233}" },
      "\u27AA": { text: "\\ding{234}" },
      "\u27AB": { text: "\\ding{235}" },
      "\u27AC": { text: "\\ding{236}" },
      "\u27AD": { text: "\\ding{237}" },
      "\u27AE": { text: "\\ding{238}" },
      "\u27AF": { text: "\\ding{239}" },
      "\u27B1": { text: "\\ding{241}" },
      "\u27B2": { text: "\\ding{242}" },
      "\u27B3": { text: "\\ding{243}" },
      "\u27B4": { text: "\\ding{244}" },
      "\u27B5": { text: "\\ding{245}" },
      "\u27B6": { text: "\\ding{246}" },
      "\u27B7": { text: "\\ding{247}" },
      "\u27B8": { text: "\\ding{248}" },
      "\u27B9": { text: "\\ding{249}" },
      "\u27BA": { text: "\\ding{250}" },
      "\u27BB": { text: "\\ding{251}" },
      "\u27BC": { text: "\\ding{252}" },
      "\u27BD": { text: "\\ding{253}" },
      "\u27BE": { text: "\\ding{254}" },
      "\u27C0": { math: "\\threedangle" },
      "\u27C1": { math: "\\whiteinwhitetriangle" },
      "\u27C2": { math: "\\perp" },
      "\u27C3": { math: "\\subsetcirc" },
      "\u27C4": { math: "\\supsetcirc" },
      "\u27C5": { math: "\\Lbag" },
      "\u27C6": { math: "\\Rbag" },
      "\u27C7": { math: "\\veedot" },
      "\u27C8": { math: "\\bsolhsub" },
      "\u27C9": { math: "\\suphsol" },
      "\u27CC": { math: "\\longdivision" },
      "\u27D0": { math: "\\Diamonddot" },
      "\u27D1": { math: "\\wedgedot" },
      "\u27D2": { math: "\\upin" },
      "\u27D3": { math: "\\pullback" },
      "\u27D4": { math: "\\pushout" },
      "\u27D5": { math: "\\leftouterjoin" },
      "\u27D6": { math: "\\rightouterjoin" },
      "\u27D7": { math: "\\fullouterjoin" },
      "\u27D8": { math: "\\bigbot" },
      "\u27D9": { math: "\\bigtop" },
      "\u27DA": { math: "\\DashVDash" },
      "\u27DB": { math: "\\dashVdash" },
      "\u27DC": { math: "\\multimapinv" },
      "\u27DD": { math: "\\vlongdash" },
      "\u27DE": { math: "\\longdashv" },
      "\u27DF": { math: "\\cirbot" },
      "\u27E0": { math: "\\lozengeminus" },
      "\u27E1": { math: "\\concavediamond" },
      "\u27E2": { math: "\\concavediamondtickleft" },
      "\u27E3": { math: "\\concavediamondtickright" },
      "\u27E4": { math: "\\whitesquaretickleft" },
      "\u27E5": { math: "\\whitesquaretickright" },
      "\u27E6": { math: "\\llbracket" },
      "\u27E7": { math: "\\rrbracket" },
      "\u27E8": { math: "\\langle" },
      "\u27E9": { math: "\\rangle" },
      "\u27EA": { math: "\\lang" },
      "\u27EB": { math: "\\rang" },
      "\u27EC": { math: "\\Lbrbrak" },
      "\u27ED": { math: "\\Rbrbrak" },
      "\u27EE": { math: "\\lgroup" },
      "\u27EF": { math: "\\rgroup" },
      "\u27F0": { math: "\\UUparrow" },
      "\u27F1": { math: "\\DDownarrow" },
      "\u27F2": { math: "\\acwgapcirclearrow" },
      "\u27F3": { math: "\\cwgapcirclearrow" },
      "\u27F4": { math: "\\rightarrowonoplus" },
      "\u27F5": { math: "\\longleftarrow" },
      "\u27F6": { math: "\\longrightarrow" },
      "\u27F7": { math: "\\longleftrightarrow" },
      "\u27F8": { math: "\\Longleftarrow" },
      "\u27F9": { math: "\\Longrightarrow" },
      "\u27FA": { math: "\\Longleftrightarrow" },
      "\u27FB": { math: "\\longmapsfrom" },
      "\u27FC": { math: "\\longmapsto" },
      "\u27FD": { math: "\\Longmapsfrom" },
      "\u27FE": { math: "\\Longmapsto" },
      "\u27FF": { math: "\\sim\\joinrel\\leadsto" },
      "\u2900": { math: "\\psur" },
      "\u2901": { math: "\\nVtwoheadrightarrow" },
      "\u2902": { math: "\\nvLeftarrow" },
      "\u2903": { math: "\\nvRightarrow" },
      "\u2904": { math: "\\nvLeftrightarrow" },
      "\u2906": { math: "\\Mapsfrom" },
      "\u2907": { math: "\\Mapsto" },
      "\u2908": { math: "\\downarrowbarred" },
      "\u2909": { math: "\\uparrowbarred" },
      "\u290A": { math: "\\Uuparrow" },
      "\u290B": { math: "\\Ddownarrow" },
      "\u290C": { math: "\\leftbkarrow" },
      "\u290D": { math: "\\rightbkarrow" },
      "\u290E": { math: "\\leftdbkarrow" },
      "\u290F": { math: "\\dbkarow" },
      "\u2910": { math: "\\drbkarow" },
      "\u2911": { math: "\\rightdotarrow" },
      "\u2912": { math: "\\UpArrowBar" },
      "\u2913": { math: "\\DownArrowBar" },
      "\u2914": { math: "\\pinj" },
      "\u2915": { math: "\\finj" },
      "\u2916": { math: "\\bij" },
      "\u2917": { math: "\\nvtwoheadrightarrowtail" },
      "\u2918": { math: "\\nVtwoheadrightarrowtail" },
      "\u2919": { math: "\\lefttail" },
      "\u291A": { math: "\\righttail" },
      "\u291B": { math: "\\leftdbltail" },
      "\u291C": { math: "\\rightdbltail" },
      "\u291D": { math: "\\diamondleftarrow" },
      "\u291E": { math: "\\rightarrowdiamond" },
      "\u291F": { math: "\\diamondleftarrowbar" },
      "\u2920": { math: "\\barrightarrowdiamond" },
      "\u2921": { math: "\\nwsearrow" },
      "\u2922": { math: "\\neswarrow" },
      "\u292B": { math: "\\rdiagovfdiag" },
      "\u292C": { math: "\\fdiagovrdiag" },
      "\u292D": { math: "\\seovnearrow" },
      "\u292E": { math: "\\neovsearrow" },
      "\u292F": { math: "\\fdiagovnearrow" },
      "\u2930": { math: "\\rdiagovsearrow" },
      "\u2931": { math: "\\neovnwarrow" },
      "\u2932": { math: "\\nwovnearrow" },
      "\u2934": { math: "\\uprightcurvearrow" },
      "\u2935": { math: "\\downrightcurvedarrow" },
      "\u2938": { math: "\\cwrightarcarrow" },
      "\u2939": { math: "\\acwleftarcarrow" },
      "\u293A": { math: "\\acwoverarcarrow" },
      "\u293B": { math: "\\acwunderarcarrow" },
      "\u293C": { math: "\\curvearrowrightminus" },
      "\u293D": { math: "\\curvearrowleftplus" },
      "\u293E": { math: "\\cwundercurvearrow" },
      "\u293F": { math: "\\ccwundercurvearrow" },
      "\u2940": { math: "\\Elolarr" },
      "\u2941": { math: "\\Elorarr" },
      "\u2942": { math: "\\ElzRlarr" },
      "\u2943": { math: "\\leftarrowshortrightarrow" },
      "\u2944": { math: "\\ElzrLarr" },
      "\u2945": { math: "\\rightarrowplus" },
      "\u2946": { math: "\\leftarrowplus" },
      "\u2947": { math: "\\Elzrarrx" },
      "\u2948": { math: "\\leftrightarrowcircle" },
      "\u2949": { math: "\\twoheaduparrowcircle" },
      "\u294A": { math: "\\leftrightharpoon" },
      "\u294B": { math: "\\rightleftharpoon" },
      "\u294C": { math: "\\updownharpoonrightleft" },
      "\u294D": { math: "\\updownharpoonleftright" },
      "\u294E": { math: "\\LeftRightVector" },
      "\u294F": { math: "\\RightUpDownVector" },
      "\u2950": { math: "\\DownLeftRightVector" },
      "\u2951": { math: "\\LeftUpDownVector" },
      "\u2952": { math: "\\LeftVectorBar" },
      "\u2953": { math: "\\RightVectorBar" },
      "\u2954": { math: "\\RightUpVectorBar" },
      "\u2955": { math: "\\RightDownVectorBar" },
      "\u2956": { math: "\\DownLeftVectorBar" },
      "\u2957": { math: "\\DownRightVectorBar" },
      "\u2958": { math: "\\LeftUpVectorBar" },
      "\u2959": { math: "\\LeftDownVectorBar" },
      "\u295A": { math: "\\LeftTeeVector" },
      "\u295B": { math: "\\RightTeeVector" },
      "\u295C": { math: "\\RightUpTeeVector" },
      "\u295D": { math: "\\RightDownTeeVector" },
      "\u295E": { math: "\\DownLeftTeeVector" },
      "\u295F": { math: "\\DownRightTeeVector" },
      "\u2960": { math: "\\LeftUpTeeVector" },
      "\u2961": { math: "\\LeftDownTeeVector" },
      "\u2962": { math: "\\leftleftharpoons" },
      "\u2963": { math: "\\upupharpoons" },
      "\u2964": { math: "\\rightrightharpoons" },
      "\u2965": { math: "\\downdownharpoons" },
      "\u2966": { math: "\\leftrightharpoonsup" },
      "\u2967": { math: "\\leftrightharpoonsdown" },
      "\u2968": { math: "\\rightleftharpoonsup" },
      "\u2969": { math: "\\rightleftharpoonsdown" },
      "\u296A": { math: "\\leftbarharpoon" },
      "\u296B": { math: "\\barleftharpoon" },
      "\u296C": { math: "\\rightbarharpoon" },
      "\u296D": { math: "\\barrightharpoon" },
      "\u296E": { math: "\\UpEquilibrium" },
      "\u296F": { math: "\\ReverseUpEquilibrium" },
      "\u2970": { math: "\\RoundImplies" },
      "\u2971": { math: "\\equalrightarrow" },
      "\u2972": { math: "\\similarrightarrow" },
      "\u2973": { math: "\\leftarrowsimilar" },
      "\u2974": { math: "\\rightarrowsimilar" },
      "\u2975": { math: "\\rightarrowapprox" },
      "\u2976": { math: "\\ltlarr" },
      "\u2977": { math: "\\leftarrowless" },
      "\u2978": { math: "\\gtrarr" },
      "\u2979": { math: "\\subrarr" },
      "\u297A": { math: "\\leftarrowsubset" },
      "\u297B": { math: "\\suplarr" },
      "\u297E": { math: "\\upfishtail" },
      "\u297F": { math: "\\downfishtail" },
      "\u2980": { math: "\\Elztfnc" },
      "\u2981": { math: "\\spot" },
      "\u2982": { math: "\\typecolon" },
      "\u2983": { math: "\\lBrace" },
      "\u2984": { math: "\\rBrace" },
      "\u2986": { math: "\\Elroang" },
      "\u2987": { math: "\\limg" },
      "\u2988": { math: "\\rimg" },
      "\u2989": { math: "\\lblot" },
      "\u298A": { math: "\\rblot" },
      "\u298B": { math: "\\lbrackubar" },
      "\u298C": { math: "\\rbrackubar" },
      "\u298D": { math: "\\lbrackultick" },
      "\u298E": { math: "\\rbracklrtick" },
      "\u298F": { math: "\\lbracklltick" },
      "\u2990": { math: "\\rbrackurtick" },
      "\u2991": { math: "\\langledot" },
      "\u2992": { math: "\\rangledot" },
      "\u2993": { math: "<\\kern-0.58em(" },
      "\u2995": { math: "\\Lparengtr" },
      "\u2996": { math: "\\Rparenless" },
      "\u2997": { math: "\\lblkbrbrak" },
      "\u2998": { math: "\\rblkbrbrak" },
      "\u2999": { math: "\\Elzddfnc" },
      "\u299A": { math: "\\vzigzag" },
      "\u299B": { math: "\\measuredangleleft" },
      "\u299C": { math: "\\Angle" },
      "\u299D": { math: "\\rightanglemdot" },
      "\u299E": { math: "\\angles" },
      "\u299F": { math: "\\angdnr" },
      "\u29A0": { math: "\\Elzlpargt" },
      "\u29A1": { math: "\\sphericalangleup" },
      "\u29A2": { math: "\\turnangle" },
      "\u29A3": { math: "\\revangle" },
      "\u29A4": { math: "\\angleubar" },
      "\u29A5": { math: "\\revangleubar" },
      "\u29A6": { math: "\\wideangledown" },
      "\u29A7": { math: "\\wideangleup" },
      "\u29A8": { math: "\\measanglerutone" },
      "\u29A9": { math: "\\measanglelutonw" },
      "\u29AA": { math: "\\measanglerdtose" },
      "\u29AB": { math: "\\measangleldtosw" },
      "\u29AC": { math: "\\measangleurtone" },
      "\u29AD": { math: "\\measangleultonw" },
      "\u29AE": { math: "\\measangledrtose" },
      "\u29AF": { math: "\\measangledltosw" },
      "\u29B0": { math: "\\revemptyset" },
      "\u29B1": { math: "\\emptysetobar" },
      "\u29B2": { math: "\\emptysetocirc" },
      "\u29B3": { math: "\\emptysetoarr" },
      "\u29B4": { math: "\\emptysetoarrl" },
      "\u29B7": { math: "\\circledparallel" },
      "\u29B8": { math: "\\circledbslash" },
      "\u29B9": { math: "\\operp" },
      "\u29BA": { math: "\\obot" },
      "\u29BB": { math: "\\olcross" },
      "\u29BC": { math: "\\odotslashdot" },
      "\u29BD": { math: "\\uparrowoncircle" },
      "\u29BE": { math: "\\circledwhitebullet" },
      "\u29BF": { math: "\\circledbullet" },
      "\u29C0": { math: "\\circledless" },
      "\u29C1": { math: "\\circledgtr" },
      "\u29C2": { math: "\\cirscir" },
      "\u29C3": { math: "\\cirE" },
      "\u29C4": { math: "\\boxslash" },
      "\u29C5": { math: "\\boxbslash" },
      "\u29C6": { math: "\\boxast" },
      "\u29C7": { math: "\\boxcircle" },
      "\u29C8": { math: "\\boxbox" },
      "\u29C9": { math: "\\boxonbox" },
      "\u29CA": { math: "\\ElzLap" },
      "\u29CB": { math: "\\Elzdefas" },
      "\u29CC": { math: "\\triangles" },
      "\u29CD": { math: "\\triangleserifs" },
      "\u29CE": { math: "\\rtriltri" },
      "\u29CF": { math: "\\LeftTriangleBar" },
      "\u29CF\u0338": { math: "\\NotLeftTriangleBar" },
      "\u29D0": { math: "\\RightTriangleBar" },
      "\u29D0\u0338": { math: "\\NotRightTriangleBar" },
      "\u29D1": { math: "\\lfbowtie" },
      "\u29D2": { math: "\\rfbowtie" },
      "\u29D3": { math: "\\fbowtie" },
      "\u29D4": { math: "\\lftimes" },
      "\u29D5": { math: "\\rftimes" },
      "\u29D6": { math: "\\hourglass" },
      "\u29D7": { math: "\\blackhourglass" },
      "\u29D8": { math: "\\lvzigzag" },
      "\u29D9": { math: "\\rvzigzag" },
      "\u29DA": { math: "\\Lvzigzag" },
      "\u29DB": { math: "\\Rvzigzag" },
      "\u29DD": { math: "\\tieinfty" },
      "\u29DE": { math: "\\nvinfty" },
      "\u29DF": { math: "\\multimapboth" },
      "\u29E0": { math: "\\laplac" },
      "\u29E1": { math: "\\lrtriangleeq" },
      "\u29E2": { math: "\\shuffle" },
      "\u29E3": { math: "\\eparsl" },
      "\u29E4": { math: "\\smeparsl" },
      "\u29E5": { math: "\\eqvparsl" },
      "\u29E6": { math: "\\gleichstark" },
      "\u29E7": { math: "\\thermod" },
      "\u29E8": { math: "\\downtriangleleftblack" },
      "\u29E9": { math: "\\downtrianglerightblack" },
      "\u29EA": { math: "\\blackdiamonddownarrow" },
      "\u29EB": { math: "\\blacklozenge" },
      "\u29EC": { math: "\\circledownarrow" },
      "\u29ED": { math: "\\blackcircledownarrow" },
      "\u29EE": { math: "\\errbarsquare" },
      "\u29EF": { math: "\\errbarblacksquare" },
      "\u29F0": { math: "\\errbardiamond" },
      "\u29F1": { math: "\\errbarblackdiamond" },
      "\u29F2": { math: "\\errbarcircle" },
      "\u29F3": { math: "\\errbarblackcircle" },
      "\u29F4": { math: "\\RuleDelayed" },
      "\u29F5": { math: "\\setminus" },
      "\u29F6": { math: "\\dsol" },
      "\u29F7": { math: "\\rsolbar" },
      "\u29F8": { math: "\\xsol" },
      "\u29F9": { math: "\\zhide" },
      "\u29FA": { math: "\\doubleplus" },
      "\u29FB": { math: "\\tripleplus" },
      "\u29FC": { math: "\\lcurvyangle" },
      "\u29FD": { math: "\\rcurvyangle" },
      "\u29FE": { math: "\\tplus" },
      "\u29FF": { math: "\\tminus" },
      "\u2A00": { math: "\\bigodot" },
      "\u2A01": { math: "\\bigoplus" },
      "\u2A02": { math: "\\bigotimes" },
      "\u2A03": { math: "\\bigcupdot" },
      "\u2A04": { math: "\\Elxuplus" },
      "\u2A05": { math: "\\ElzThr" },
      "\u2A06": { math: "\\Elxsqcup" },
      "\u2A07": { math: "\\ElzInf" },
      "\u2A08": { math: "\\ElzSup" },
      "\u2A09": { math: "\\varprod" },
      "\u2A0A": { math: "\\modtwosum" },
      "\u2A0B": { math: "\\sumint" },
      "\u2A0C": { math: "\\iiiint" },
      "\u2A0D": { math: "\\ElzCint" },
      "\u2A0E": { math: "\\intBar" },
      "\u2A0F": { math: "\\clockoint" },
      "\u2A11": { math: "\\awint" },
      "\u2A12": { math: "\\rppolint" },
      "\u2A13": { math: "\\scpolint" },
      "\u2A14": { math: "\\npolint" },
      "\u2A15": { math: "\\pointint" },
      "\u2A16": { math: "\\sqrint" },
      "\u2A17": { math: "\\intlarhk" },
      "\u2A18": { math: "\\intx" },
      "\u2A19": { math: "\\intcap" },
      "\u2A1A": { math: "\\intcup" },
      "\u2A1B": { math: "\\upint" },
      "\u2A1C": { math: "\\lowint" },
      "\u2A1D": { math: "\\Join" },
      "\u2A1E": { math: "\\bigtriangleleft" },
      "\u2A1F": { math: "\\zcmp" },
      "\u2A20": { math: "\\zpipe" },
      "\u2A21": { math: "\\zproject" },
      "\u2A22": { math: "\\ringplus" },
      "\u2A23": { math: "\\plushat" },
      "\u2A24": { math: "\\simplus" },
      "\u2A26": { math: "\\plussim" },
      "\u2A27": { math: "\\plussubtwo" },
      "\u2A28": { math: "\\plustrif" },
      "\u2A29": { math: "\\commaminus" },
      "\u2A2B": { math: "\\minusfdots" },
      "\u2A2C": { math: "\\minusrdots" },
      "\u2A2F": { math: "\\ElzTimes" },
      "\u2A30": { math: "\\dottimes" },
      "\u2A31": { math: "\\timesbar" },
      "\u2A32": { math: "\\btimes" },
      "\u2A33": { math: "\\smashtimes" },
      "\u2A36": { math: "\\otimeshat" },
      "\u2A37": { math: "\\Otimes" },
      "\u2A38": { math: "\\odiv" },
      "\u2A39": { math: "\\triangleplus" },
      "\u2A3A": { math: "\\triangleminus" },
      "\u2A3B": { math: "\\triangletimes" },
      "\u2A3D": { math: "\\intprodr" },
      "\u2A3E": { math: "\\fcmp" },
      "\u2A3F": { math: "\\amalg" },
      "\u2A40": { math: "\\capdot" },
      "\u2A41": { math: "\\uminus" },
      "\u2A42": { math: "\\barcup" },
      "\u2A43": { math: "\\barcap" },
      "\u2A44": { math: "\\capwedge" },
      "\u2A45": { math: "\\cupvee" },
      "\u2A46": { math: "\\cupovercap" },
      "\u2A47": { math: "\\capovercup" },
      "\u2A48": { math: "\\cupbarcap" },
      "\u2A49": { math: "\\capbarcup" },
      "\u2A4A": { math: "\\twocups" },
      "\u2A4B": { math: "\\twocaps" },
      "\u2A4C": { math: "\\closedvarcup" },
      "\u2A4D": { math: "\\closedvarcap" },
      "\u2A4E": { math: "\\Sqcap" },
      "\u2A4F": { math: "\\Sqcup" },
      "\u2A50": { math: "\\closedvarcupsmashprod" },
      "\u2A51": { math: "\\wedgeodot" },
      "\u2A52": { math: "\\veeodot" },
      "\u2A53": { math: "\\ElzAnd" },
      "\u2A54": { math: "\\ElzOr" },
      "\u2A56": { math: "\\ElOr" },
      "\u2A57": { math: "\\bigslopedvee" },
      "\u2A58": { math: "\\bigslopedwedge" },
      "\u2A59": { math: "\\veeonwedge" },
      "\u2A5A": { math: "\\wedgemidvert" },
      "\u2A5B": { math: "\\veemidvert" },
      "\u2A5C": { math: "\\midbarwedge" },
      "\u2A5D": { math: "\\midbarvee" },
      "\u2A5E": { math: "\\perspcorrespond" },
      "\u2A5F": { math: "\\Elzminhat" },
      "\u2A60": { math: "\\wedgedoublebar" },
      "\u2A61": { math: "\\varveebar" },
      "\u2A62": { math: "\\doublebarvee" },
      "\u2A64": { math: "\\dsub" },
      "\u2A65": { math: "\\rsub" },
      "\u2A66": { math: "\\eqdot" },
      "\u2A67": { math: "\\dotequiv" },
      "\u2A68": { math: "\\equivVert" },
      "\u2A69": { math: "\\equivVvert" },
      "\u2A6A": { math: "\\dotsim" },
      "\u2A6B": { math: "\\simrdots" },
      "\u2A6C": { math: "\\simminussim" },
      "\u2A6D": { math: "\\congdot" },
      "\u2A6E": { math: "\\stackrel{*}{=}" },
      "\u2A6F": { math: "\\hatapprox" },
      "\u2A70": { math: "\\approxeqq" },
      "\u2A71": { math: "\\eqqplus" },
      "\u2A72": { math: "\\pluseqq" },
      "\u2A73": { math: "\\eqqsim" },
      "\u2A74": { math: "\\Coloneqq" },
      "\u2A75": { math: "\\Equal" },
      "\u2A76": { math: "\\Same" },
      "\u2A77": { math: "\\ddotseq" },
      "\u2A78": { math: "\\equivDD" },
      "\u2A79": { math: "\\ltcir" },
      "\u2A7A": { math: "\\gtcir" },
      "\u2A7B": { math: "\\ltquest" },
      "\u2A7C": { math: "\\gtquest" },
      "\u2A7D": { math: "\\leqslant", mathpackages: ["amssymb"] },
      "\u2A7D\u0338": { math: "\\nleqslant", mathpackages: ["amssymb"] },
      "\u2A7E": { math: "\\geqslant", mathpackages: ["amssymb"] },
      "\u2A7E\u0338": { math: "\\ngeqslant", mathpackages: ["amssymb"] },
      "\u2A7F": { math: "\\lesdot" },
      "\u2A80": { math: "\\gesdot" },
      "\u2A81": { math: "\\lesdoto" },
      "\u2A82": { math: "\\gesdoto" },
      "\u2A83": { math: "\\lesdotor" },
      "\u2A84": { math: "\\gesdotol" },
      "\u2A85": { math: "\\lessapprox" },
      "\u2A86": { math: "\\gtrapprox" },
      "\u2A87": { math: "\\lneq" },
      "\u2A88": { math: "\\gneq" },
      "\u2A89": { math: "\\lnapprox" },
      "\u2A8A": { math: "\\gnapprox" },
      "\u2A8B": { math: "\\lesseqqgtr" },
      "\u2A8C": { math: "\\gtreqqless" },
      "\u2A8D": { math: "\\lsime" },
      "\u2A8E": { math: "\\gsime" },
      "\u2A8F": { math: "\\lsimg" },
      "\u2A90": { math: "\\gsiml" },
      "\u2A91": { math: "\\lgE" },
      "\u2A92": { math: "\\glE" },
      "\u2A93": { math: "\\lesges" },
      "\u2A94": { math: "\\gesles" },
      "\u2A95": { math: "\\eqslantless" },
      "\u2A96": { math: "\\eqslantgtr" },
      "\u2A97": { math: "\\elsdot" },
      "\u2A98": { math: "\\egsdot" },
      "\u2A99": { math: "\\eqqless" },
      "\u2A9A": { math: "\\eqqgtr" },
      "\u2A9B": { math: "\\eqqslantless" },
      "\u2A9C": { math: "\\eqqslantgtr" },
      "\u2A9D": { math: "\\Pisymbol{ppi020}{117}" },
      "\u2A9E": { math: "\\Pisymbol{ppi020}{105}" },
      "\u2A9F": { math: "\\simlE" },
      "\u2AA0": { math: "\\simgE" },
      "\u2AA1": { math: "\\NestedLessLess" },
      "\u2AA1\u0338": { math: "\\NotNestedLessLess" },
      "\u2AA2": { math: "\\NestedGreaterGreater" },
      "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" },
      "\u2AA3": { math: "\\partialmeetcontraction" },
      "\u2AA4": { math: "\\glj" },
      "\u2AA5": { math: "\\gla" },
      "\u2AA6": { math: "\\leftslice" },
      "\u2AA7": { math: "\\rightslice" },
      "\u2AA8": { math: "\\lescc" },
      "\u2AA9": { math: "\\gescc" },
      "\u2AAA": { math: "\\smt" },
      "\u2AAB": { math: "\\lat" },
      "\u2AAC": { math: "\\smte" },
      "\u2AAD": { math: "\\late" },
      "\u2AAE": { math: "\\bumpeqq" },
      "\u2AAF": { math: "\\preceq" },
      "\u2AAF\u0338": { math: "\\not\\preceq" },
      "\u2AB0": { math: "\\succeq" },
      "\u2AB0\u0338": { math: "\\not\\succeq" },
      "\u2AB1": { math: "\\precneq" },
      "\u2AB2": { math: "\\succneq" },
      "\u2AB3": { math: "\\preceqq" },
      "\u2AB4": { math: "\\succeqq" },
      "\u2AB5": { math: "\\precneqq" },
      "\u2AB6": { math: "\\succneqq" },
      "\u2AB7": { math: "\\precapprox" },
      "\u2AB8": { math: "\\succapprox" },
      "\u2AB9": { math: "\\precnapprox" },
      "\u2ABA": { math: "\\succnapprox" },
      "\u2ABB": { math: "\\llcurly" },
      "\u2ABC": { math: "\\ggcurly" },
      "\u2ABD": { math: "\\subsetdot" },
      "\u2ABE": { math: "\\supsetdot" },
      "\u2ABF": { math: "\\subsetplus" },
      "\u2AC0": { math: "\\supsetplus" },
      "\u2AC1": { math: "\\submult" },
      "\u2AC2": { math: "\\supmult" },
      "\u2AC3": { math: "\\subedot" },
      "\u2AC4": { math: "\\supedot" },
      "\u2AC5": { math: "\\subseteqq" },
      "\u2AC5\u0338": { math: "\\nsubseteqq" },
      "\u2AC6": { math: "\\supseteqq" },
      "\u2AC6\u0338": { math: "\\nsupseteqq" },
      "\u2AC7": { math: "\\subsim" },
      "\u2AC8": { math: "\\supsim" },
      "\u2AC9": { math: "\\subsetapprox" },
      "\u2ACA": { math: "\\supsetapprox" },
      "\u2ACB": { math: "\\subsetneqq" },
      "\u2ACC": { math: "\\supsetneqq" },
      "\u2ACD": { math: "\\lsqhook" },
      "\u2ACE": { math: "\\rsqhook" },
      "\u2ACF": { math: "\\csub" },
      "\u2AD0": { math: "\\csup" },
      "\u2AD1": { math: "\\csube" },
      "\u2AD2": { math: "\\csupe" },
      "\u2AD3": { math: "\\subsup" },
      "\u2AD4": { math: "\\supsub" },
      "\u2AD5": { math: "\\subsub" },
      "\u2AD6": { math: "\\supsup" },
      "\u2AD7": { math: "\\suphsub" },
      "\u2AD8": { math: "\\supdsub" },
      "\u2AD9": { math: "\\forkv" },
      "\u2ADA": { math: "\\topfork" },
      "\u2ADB": { math: "\\mlcp" },
      "\u2ADC": { math: "\\forks" },
      "\u2ADD": { math: "\\forksnot" },
      "\u2ADD\u0338": { math: "\\forks" },
      "\u2ADE": { math: "\\shortlefttack" },
      "\u2ADF": { math: "\\shortdowntack" },
      "\u2AE0": { math: "\\shortuptack" },
      "\u2AE1": { math: "\\perps" },
      "\u2AE2": { math: "\\vDdash" },
      "\u2AE3": { math: "\\dashV" },
      "\u2AE4": { math: "\\Dashv" },
      "\u2AE5": { math: "\\DashV" },
      "\u2AE6": { math: "\\varVdash" },
      "\u2AE7": { math: "\\Barv" },
      "\u2AE8": { math: "\\vBar" },
      "\u2AE9": { math: "\\vBarv" },
      "\u2AEA": { math: "\\Top" },
      "\u2AEC": { math: "\\Not" },
      "\u2AED": { math: "\\bNot" },
      "\u2AEE": { math: "\\revnmid" },
      "\u2AEF": { math: "\\cirmid" },
      "\u2AF0": { math: "\\midcir" },
      "\u2AF1": { math: "\\topcir" },
      "\u2AF2": { math: "\\nhpar" },
      "\u2AF3": { math: "\\parsim" },
      "\u2AF4": { math: "\\interleave" },
      "\u2AF5": { math: "\\nhVvert" },
      "\u2AF6": { math: "\\Elztdcol" },
      "\u2AF7": { math: "\\lllnest" },
      "\u2AF8": { math: "\\gggnest" },
      "\u2AF9": { math: "\\leqqslant" },
      "\u2AFA": { math: "\\geqqslant" },
      "\u2AFB": { math: "\\trslash" },
      "\u2AFC": { math: "\\biginterleave" },
      "\u2AFD": { math: "{{/}\\!\\!{/}}" },
      "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" },
      "\u2AFE": { math: "\\talloblong" },
      "\u2AFF": { math: "\\bigtalloblong" },
      "\u2B12": { math: "\\squaretopblack" },
      "\u2B13": { math: "\\squarebotblack" },
      "\u2B14": { math: "\\squareurblack" },
      "\u2B15": { math: "\\squarellblack" },
      "\u2B16": { math: "\\diamondleftblack" },
      "\u2B17": { math: "\\diamondrightblack" },
      "\u2B18": { math: "\\diamondtopblack" },
      "\u2B19": { math: "\\diamondbotblack" },
      "\u2B1A": { math: "\\dottedsquare" },
      "\u2B1B": { math: "\\blacksquare" },
      "\u2B1C": { math: "\\square" },
      "\u2B1D": { math: "\\vysmblksquare" },
      "\u2B1E": { math: "\\vysmwhtsquare" },
      "\u2B1F": { math: "\\pentagonblack" },
      "\u2B20": { math: "\\pentagon" },
      "\u2B21": { math: "\\varhexagon" },
      "\u2B22": { math: "\\varhexagonblack" },
      "\u2B23": { math: "\\hexagonblack" },
      "\u2B24": { math: "\\lgblkcircle" },
      "\u2B25": { math: "\\mdblkdiamond" },
      "\u2B26": { math: "\\mdwhtdiamond" },
      "\u2B27": { math: "\\mdblklozenge" },
      "\u2B28": { math: "\\mdwhtlozenge" },
      "\u2B29": { math: "\\smblkdiamond" },
      "\u2B2A": { math: "\\smblklozenge" },
      "\u2B2B": { math: "\\smwhtlozenge" },
      "\u2B2C": { math: "\\blkhorzoval" },
      "\u2B2D": { math: "\\whthorzoval" },
      "\u2B2E": { math: "\\blkvertoval" },
      "\u2B2F": { math: "\\whtvertoval" },
      "\u2B30": { math: "\\circleonleftarrow" },
      "\u2B31": { math: "\\leftthreearrows" },
      "\u2B32": { math: "\\leftarrowonoplus" },
      "\u2B33": { math: "\\longleftsquigarrow" },
      "\u2B34": { math: "\\nvtwoheadleftarrow" },
      "\u2B35": { math: "\\nVtwoheadleftarrow" },
      "\u2B36": { math: "\\twoheadmapsfrom" },
      "\u2B37": { math: "\\twoheadleftdbkarrow" },
      "\u2B38": { math: "\\leftdotarrow" },
      "\u2B39": { math: "\\nvleftarrowtail" },
      "\u2B3A": { math: "\\nVleftarrowtail" },
      "\u2B3B": { math: "\\twoheadleftarrowtail" },
      "\u2B3C": { math: "\\nvtwoheadleftarrowtail" },
      "\u2B3D": { math: "\\nVtwoheadleftarrowtail" },
      "\u2B3E": { math: "\\leftarrowx" },
      "\u2B3F": { math: "\\leftcurvedarrow" },
      "\u2B40": { math: "\\equalleftarrow" },
      "\u2B41": { math: "\\bsimilarleftarrow" },
      "\u2B42": { math: "\\leftarrowbackapprox" },
      "\u2B43": { math: "\\rightarrowgtr" },
      "\u2B44": { math: "\\rightarrowsupset" },
      "\u2B45": { math: "\\LLeftarrow" },
      "\u2B46": { math: "\\RRightarrow" },
      "\u2B47": { math: "\\bsimilarrightarrow" },
      "\u2B48": { math: "\\rightarrowbackapprox" },
      "\u2B49": { math: "\\similarleftarrow" },
      "\u2B4A": { math: "\\leftarrowapprox" },
      "\u2B4B": { math: "\\leftarrowbsimilar" },
      "\u2B4C": { math: "\\rightarrowbsimilar" },
      "\u2B50": { math: "\\medwhitestar" },
      "\u2B51": { math: "\\medblackstar" },
      "\u2B52": { math: "\\smwhitestar" },
      "\u2B53": { math: "\\rightpentagonblack" },
      "\u2B54": { math: "\\rightpentagon" },
      "\u3008": { math: "\\langle" },
      "\u3009": { math: "\\rangle" },
      "\u3012": { math: "\\postalmark" },
      "\u3014": { math: "\\lbrbrak" },
      "\u3015": { math: "\\rbrbrak" },
      "\u301A": { math: "\\openbracketleft" },
      "\u301B": { math: "\\openbracketright" },
      "\u3030": { math: "\\hzigzag" },
      \uFB00: { text: "ff" },
      \uFB01: { text: "fi" },
      \uFB02: { text: "fl" },
      \uFB03: { text: "ffi" },
      \uFB04: { text: "ffl" },
      \uFB05: { text: "st" },
      \uFB06: { text: "st" },
      "\uFFFD": { text: "\\dbend", commandspacer: true },
      "\u{1D400}": { math: "\\mathbf{A}" },
      "\u{1D401}": { math: "\\mathbf{B}" },
      "\u{1D402}": { math: "\\mathbf{C}" },
      "\u{1D403}": { math: "\\mathbf{D}" },
      "\u{1D404}": { math: "\\mathbf{E}" },
      "\u{1D405}": { math: "\\mathbf{F}" },
      "\u{1D406}": { math: "\\mathbf{G}" },
      "\u{1D407}": { math: "\\mathbf{H}" },
      "\u{1D408}": { math: "\\mathbf{I}" },
      "\u{1D409}": { math: "\\mathbf{J}" },
      "\u{1D40A}": { math: "\\mathbf{K}" },
      "\u{1D40B}": { math: "\\mathbf{L}" },
      "\u{1D40C}": { math: "\\mathbf{M}" },
      "\u{1D40D}": { math: "\\mathbf{N}" },
      "\u{1D40E}": { math: "\\mathbf{O}" },
      "\u{1D40F}": { math: "\\mathbf{P}" },
      "\u{1D410}": { math: "\\mathbf{Q}" },
      "\u{1D411}": { math: "\\mathbf{R}" },
      "\u{1D412}": { math: "\\mathbf{S}" },
      "\u{1D413}": { math: "\\mathbf{T}" },
      "\u{1D414}": { math: "\\mathbf{U}" },
      "\u{1D415}": { math: "\\mathbf{V}" },
      "\u{1D416}": { math: "\\mathbf{W}" },
      "\u{1D417}": { math: "\\mathbf{X}" },
      "\u{1D418}": { math: "\\mathbf{Y}" },
      "\u{1D419}": { math: "\\mathbf{Z}" },
      "\u{1D41A}": { math: "\\mathbf{a}" },
      "\u{1D41B}": { math: "\\mathbf{b}" },
      "\u{1D41C}": { math: "\\mathbf{c}" },
      "\u{1D41D}": { math: "\\mathbf{d}" },
      "\u{1D41E}": { math: "\\mathbf{e}" },
      "\u{1D41F}": { math: "\\mathbf{f}" },
      "\u{1D420}": { math: "\\mathbf{g}" },
      "\u{1D421}": { math: "\\mathbf{h}" },
      "\u{1D422}": { math: "\\mathbf{i}" },
      "\u{1D423}": { math: "\\mathbf{j}" },
      "\u{1D424}": { math: "\\mathbf{k}" },
      "\u{1D425}": { math: "\\mathbf{l}" },
      "\u{1D426}": { math: "\\mathbf{m}" },
      "\u{1D427}": { math: "\\mathbf{n}" },
      "\u{1D428}": { math: "\\mathbf{o}" },
      "\u{1D429}": { math: "\\mathbf{p}" },
      "\u{1D42A}": { math: "\\mathbf{q}" },
      "\u{1D42B}": { math: "\\mathbf{r}" },
      "\u{1D42C}": { math: "\\mathbf{s}" },
      "\u{1D42D}": { math: "\\mathbf{t}" },
      "\u{1D42E}": { math: "\\mathbf{u}" },
      "\u{1D42F}": { math: "\\mathbf{v}" },
      "\u{1D430}": { math: "\\mathbf{w}" },
      "\u{1D431}": { math: "\\mathbf{x}" },
      "\u{1D432}": { math: "\\mathbf{y}" },
      "\u{1D433}": { math: "\\mathbf{z}" },
      "\u{1D434}": { math: "\\mathsl{A}" },
      "\u{1D435}": { math: "\\mathsl{B}" },
      "\u{1D436}": { math: "\\mathsl{C}" },
      "\u{1D437}": { math: "\\mathsl{D}" },
      "\u{1D438}": { math: "\\mathsl{E}" },
      "\u{1D439}": { math: "\\mathsl{F}" },
      "\u{1D43A}": { math: "\\mathsl{G}" },
      "\u{1D43B}": { math: "\\mathsl{H}" },
      "\u{1D43C}": { math: "\\mathsl{I}" },
      "\u{1D43D}": { math: "\\mathsl{J}" },
      "\u{1D43E}": { math: "\\mathsl{K}" },
      "\u{1D43F}": { math: "\\mathsl{L}" },
      "\u{1D440}": { math: "\\mathsl{M}" },
      "\u{1D441}": { math: "\\mathsl{N}" },
      "\u{1D442}": { math: "\\mathsl{O}" },
      "\u{1D443}": { math: "\\mathsl{P}" },
      "\u{1D444}": { math: "\\mathsl{Q}" },
      "\u{1D445}": { math: "\\mathsl{R}" },
      "\u{1D446}": { math: "\\mathsl{S}" },
      "\u{1D447}": { math: "\\mathsl{T}" },
      "\u{1D448}": { math: "\\mathsl{U}" },
      "\u{1D449}": { math: "\\mathsl{V}" },
      "\u{1D44A}": { math: "\\mathsl{W}" },
      "\u{1D44B}": { math: "\\mathsl{X}" },
      "\u{1D44C}": { math: "\\mathsl{Y}" },
      "\u{1D44D}": { math: "\\mathsl{Z}" },
      "\u{1D44E}": { math: "\\mathsl{a}" },
      "\u{1D44F}": { math: "\\mathsl{b}" },
      "\u{1D450}": { math: "\\mathsl{c}" },
      "\u{1D451}": { math: "\\mathsl{d}" },
      "\u{1D452}": { math: "\\mathsl{e}" },
      "\u{1D453}": { math: "\\mathsl{f}" },
      "\u{1D454}": { math: "\\mathsl{g}" },
      "\u{1D456}": { math: "\\mathsl{i}" },
      "\u{1D457}": { math: "\\mathsl{j}" },
      "\u{1D458}": { math: "\\mathsl{k}" },
      "\u{1D459}": { math: "\\mathsl{l}" },
      "\u{1D45A}": { math: "\\mathsl{m}" },
      "\u{1D45B}": { math: "\\mathsl{n}" },
      "\u{1D45C}": { math: "\\mathsl{o}" },
      "\u{1D45D}": { math: "\\mathsl{p}" },
      "\u{1D45E}": { math: "\\mathsl{q}" },
      "\u{1D45F}": { math: "\\mathsl{r}" },
      "\u{1D460}": { math: "\\mathsl{s}" },
      "\u{1D461}": { math: "\\mathsl{t}" },
      "\u{1D462}": { math: "\\mathsl{u}" },
      "\u{1D463}": { math: "\\mathsl{v}" },
      "\u{1D464}": { math: "\\mathsl{w}" },
      "\u{1D465}": { math: "\\mathsl{x}" },
      "\u{1D466}": { math: "\\mathsl{y}" },
      "\u{1D467}": { math: "\\mathsl{z}" },
      "\u{1D468}": { math: "\\mathbit{A}" },
      "\u{1D469}": { math: "\\mathbit{B}" },
      "\u{1D46A}": { math: "\\mathbit{C}" },
      "\u{1D46B}": { math: "\\mathbit{D}" },
      "\u{1D46C}": { math: "\\mathbit{E}" },
      "\u{1D46D}": { math: "\\mathbit{F}" },
      "\u{1D46E}": { math: "\\mathbit{G}" },
      "\u{1D46F}": { math: "\\mathbit{H}" },
      "\u{1D470}": { math: "\\mathbit{I}" },
      "\u{1D471}": { math: "\\mathbit{J}" },
      "\u{1D472}": { math: "\\mathbit{K}" },
      "\u{1D473}": { math: "\\mathbit{L}" },
      "\u{1D474}": { math: "\\mathbit{M}" },
      "\u{1D475}": { math: "\\mathbit{N}" },
      "\u{1D476}": { math: "\\mathbit{O}" },
      "\u{1D477}": { math: "\\mathbit{P}" },
      "\u{1D478}": { math: "\\mathbit{Q}" },
      "\u{1D479}": { math: "\\mathbit{R}" },
      "\u{1D47A}": { math: "\\mathbit{S}" },
      "\u{1D47B}": { math: "\\mathbit{T}" },
      "\u{1D47C}": { math: "\\mathbit{U}" },
      "\u{1D47D}": { math: "\\mathbit{V}" },
      "\u{1D47E}": { math: "\\mathbit{W}" },
      "\u{1D47F}": { math: "\\mathbit{X}" },
      "\u{1D480}": { math: "\\mathbit{Y}" },
      "\u{1D481}": { math: "\\mathbit{Z}" },
      "\u{1D482}": { math: "\\mathbit{a}" },
      "\u{1D483}": { math: "\\mathbit{b}" },
      "\u{1D484}": { math: "\\mathbit{c}" },
      "\u{1D485}": { math: "\\mathbit{d}" },
      "\u{1D486}": { math: "\\mathbit{e}" },
      "\u{1D487}": { math: "\\mathbit{f}" },
      "\u{1D488}": { math: "\\mathbit{g}" },
      "\u{1D489}": { math: "\\mathbit{h}" },
      "\u{1D48A}": { math: "\\mathbit{i}" },
      "\u{1D48B}": { math: "\\mathbit{j}" },
      "\u{1D48C}": { math: "\\mathbit{k}" },
      "\u{1D48D}": { math: "\\mathbit{l}" },
      "\u{1D48E}": { math: "\\mathbit{m}" },
      "\u{1D48F}": { math: "\\mathbit{n}" },
      "\u{1D490}": { math: "\\mathbit{o}" },
      "\u{1D491}": { math: "\\mathbit{p}" },
      "\u{1D492}": { math: "\\mathbit{q}" },
      "\u{1D493}": { math: "\\mathbit{r}" },
      "\u{1D494}": { math: "\\mathbit{s}" },
      "\u{1D495}": { math: "\\mathbit{t}" },
      "\u{1D496}": { math: "\\mathbit{u}" },
      "\u{1D497}": { math: "\\mathbit{v}" },
      "\u{1D498}": { math: "\\mathbit{w}" },
      "\u{1D499}": { math: "\\mathbit{x}" },
      "\u{1D49A}": { math: "\\mathbit{y}" },
      "\u{1D49B}": { math: "\\mathbit{z}" },
      "\u{1D49C}": { math: "\\mathscr{A}" },
      "\u{1D49E}": { math: "\\mathscr{C}" },
      "\u{1D49F}": { math: "\\mathscr{D}" },
      "\u{1D4A2}": { math: "\\mathscr{G}" },
      "\u{1D4A5}": { math: "\\mathscr{J}" },
      "\u{1D4A6}": { math: "\\mathscr{K}" },
      "\u{1D4A9}": { math: "\\mathscr{N}" },
      "\u{1D4AA}": { math: "\\mathscr{O}" },
      "\u{1D4AB}": { math: "\\mathscr{P}" },
      "\u{1D4AC}": { math: "\\mathscr{Q}" },
      "\u{1D4AE}": { math: "\\mathscr{S}" },
      "\u{1D4AF}": { math: "\\mathscr{T}" },
      "\u{1D4B0}": { math: "\\mathscr{U}" },
      "\u{1D4B1}": { math: "\\mathscr{V}" },
      "\u{1D4B2}": { math: "\\mathscr{W}" },
      "\u{1D4B3}": { math: "\\mathscr{X}" },
      "\u{1D4B4}": { math: "\\mathscr{Y}" },
      "\u{1D4B5}": { math: "\\mathscr{Z}" },
      "\u{1D4B6}": { math: "\\mathscr{a}" },
      "\u{1D4B7}": { math: "\\mathscr{b}" },
      "\u{1D4B8}": { math: "\\mathscr{c}" },
      "\u{1D4B9}": { math: "\\mathscr{d}" },
      "\u{1D4BB}": { math: "\\mathscr{f}" },
      "\u{1D4BD}": { math: "\\mathscr{h}" },
      "\u{1D4BE}": { math: "\\mathscr{i}" },
      "\u{1D4BF}": { math: "\\mathscr{j}" },
      "\u{1D4C0}": { math: "\\mathscr{k}" },
      "\u{1D4C1}": { math: "\\mathscr{l}" },
      "\u{1D4C2}": { math: "\\mathscr{m}" },
      "\u{1D4C3}": { math: "\\mathscr{n}" },
      "\u{1D4C5}": { math: "\\mathscr{p}" },
      "\u{1D4C6}": { math: "\\mathscr{q}" },
      "\u{1D4C7}": { math: "\\mathscr{r}" },
      "\u{1D4C8}": { math: "\\mathscr{s}" },
      "\u{1D4C9}": { math: "\\mathscr{t}" },
      "\u{1D4CA}": { math: "\\mathscr{u}" },
      "\u{1D4CB}": { math: "\\mathscr{v}" },
      "\u{1D4CC}": { math: "\\mathscr{w}" },
      "\u{1D4CD}": { math: "\\mathscr{x}" },
      "\u{1D4CE}": { math: "\\mathscr{y}" },
      "\u{1D4CF}": { math: "\\mathscr{z}" },
      "\u{1D4D0}": { math: "\\mathmit{A}" },
      "\u{1D4D1}": { math: "\\mathmit{B}" },
      "\u{1D4D2}": { math: "\\mathmit{C}" },
      "\u{1D4D3}": { math: "\\mathmit{D}" },
      "\u{1D4D4}": { math: "\\mathmit{E}" },
      "\u{1D4D5}": { math: "\\mathmit{F}" },
      "\u{1D4D6}": { math: "\\mathmit{G}" },
      "\u{1D4D7}": { math: "\\mathmit{H}" },
      "\u{1D4D8}": { math: "\\mathmit{I}" },
      "\u{1D4D9}": { math: "\\mathmit{J}" },
      "\u{1D4DA}": { math: "\\mathmit{K}" },
      "\u{1D4DB}": { math: "\\mathmit{L}" },
      "\u{1D4DC}": { math: "\\mathmit{M}" },
      "\u{1D4DD}": { math: "\\mathmit{N}" },
      "\u{1D4DE}": { math: "\\mathmit{O}" },
      "\u{1D4DF}": { math: "\\mathmit{P}" },
      "\u{1D4E0}": { math: "\\mathmit{Q}" },
      "\u{1D4E1}": { math: "\\mathmit{R}" },
      "\u{1D4E2}": { math: "\\mathmit{S}" },
      "\u{1D4E3}": { math: "\\mathmit{T}" },
      "\u{1D4E4}": { math: "\\mathmit{U}" },
      "\u{1D4E5}": { math: "\\mathmit{V}" },
      "\u{1D4E6}": { math: "\\mathmit{W}" },
      "\u{1D4E7}": { math: "\\mathmit{X}" },
      "\u{1D4E8}": { math: "\\mathmit{Y}" },
      "\u{1D4E9}": { math: "\\mathmit{Z}" },
      "\u{1D4EA}": { math: "\\mathmit{a}" },
      "\u{1D4EB}": { math: "\\mathmit{b}" },
      "\u{1D4EC}": { math: "\\mathmit{c}" },
      "\u{1D4ED}": { math: "\\mathmit{d}" },
      "\u{1D4EE}": { math: "\\mathmit{e}" },
      "\u{1D4EF}": { math: "\\mathmit{f}" },
      "\u{1D4F0}": { math: "\\mathmit{g}" },
      "\u{1D4F1}": { math: "\\mathmit{h}" },
      "\u{1D4F2}": { math: "\\mathmit{i}" },
      "\u{1D4F3}": { math: "\\mathmit{j}" },
      "\u{1D4F4}": { math: "\\mathmit{k}" },
      "\u{1D4F5}": { math: "\\mathmit{l}" },
      "\u{1D4F6}": { math: "\\mathmit{m}" },
      "\u{1D4F7}": { math: "\\mathmit{n}" },
      "\u{1D4F8}": { math: "\\mathmit{o}" },
      "\u{1D4F9}": { math: "\\mathmit{p}" },
      "\u{1D4FA}": { math: "\\mathmit{q}" },
      "\u{1D4FB}": { math: "\\mathmit{r}" },
      "\u{1D4FC}": { math: "\\mathmit{s}" },
      "\u{1D4FD}": { math: "\\mathmit{t}" },
      "\u{1D4FE}": { math: "\\mathmit{u}" },
      "\u{1D4FF}": { math: "\\mathmit{v}" },
      "\u{1D500}": { math: "\\mathmit{w}" },
      "\u{1D501}": { math: "\\mathmit{x}" },
      "\u{1D502}": { math: "\\mathmit{y}" },
      "\u{1D503}": { math: "\\mathmit{z}" },
      "\u{1D504}": { math: "\\mathfrak{A}" },
      "\u{1D505}": { math: "\\mathfrak{B}" },
      "\u{1D507}": { math: "\\mathfrak{D}" },
      "\u{1D508}": { math: "\\mathfrak{E}" },
      "\u{1D509}": { math: "\\mathfrak{F}" },
      "\u{1D50A}": { math: "\\mathfrak{G}" },
      "\u{1D50D}": { math: "\\mathfrak{J}" },
      "\u{1D50E}": { math: "\\mathfrak{K}" },
      "\u{1D50F}": { math: "\\mathfrak{L}" },
      "\u{1D510}": { math: "\\mathfrak{M}" },
      "\u{1D511}": { math: "\\mathfrak{N}" },
      "\u{1D512}": { math: "\\mathfrak{O}" },
      "\u{1D513}": { math: "\\mathfrak{P}" },
      "\u{1D514}": { math: "\\mathfrak{Q}" },
      "\u{1D516}": { math: "\\mathfrak{S}" },
      "\u{1D517}": { math: "\\mathfrak{T}" },
      "\u{1D518}": { math: "\\mathfrak{U}" },
      "\u{1D519}": { math: "\\mathfrak{V}" },
      "\u{1D51A}": { math: "\\mathfrak{W}" },
      "\u{1D51B}": { math: "\\mathfrak{X}" },
      "\u{1D51C}": { math: "\\mathfrak{Y}" },
      "\u{1D51E}": { math: "\\mathfrak{a}" },
      "\u{1D51F}": { math: "\\mathfrak{b}" },
      "\u{1D520}": { math: "\\mathfrak{c}" },
      "\u{1D521}": { math: "\\mathfrak{d}" },
      "\u{1D522}": { math: "\\mathfrak{e}" },
      "\u{1D523}": { math: "\\mathfrak{f}" },
      "\u{1D524}": { math: "\\mathfrak{g}" },
      "\u{1D525}": { math: "\\mathfrak{h}" },
      "\u{1D526}": { math: "\\mathfrak{i}" },
      "\u{1D527}": { math: "\\mathfrak{j}" },
      "\u{1D528}": { math: "\\mathfrak{k}" },
      "\u{1D529}": { math: "\\mathfrak{l}" },
      "\u{1D52A}": { math: "\\mathfrak{m}" },
      "\u{1D52B}": { math: "\\mathfrak{n}" },
      "\u{1D52C}": { math: "\\mathfrak{o}" },
      "\u{1D52D}": { math: "\\mathfrak{p}" },
      "\u{1D52E}": { math: "\\mathfrak{q}" },
      "\u{1D52F}": { math: "\\mathfrak{r}" },
      "\u{1D530}": { math: "\\mathfrak{s}" },
      "\u{1D531}": { math: "\\mathfrak{t}" },
      "\u{1D532}": { math: "\\mathfrak{u}" },
      "\u{1D533}": { math: "\\mathfrak{v}" },
      "\u{1D534}": { math: "\\mathfrak{w}" },
      "\u{1D535}": { math: "\\mathfrak{x}" },
      "\u{1D536}": { math: "\\mathfrak{y}" },
      "\u{1D537}": { math: "\\mathfrak{z}" },
      "\u{1D538}": { math: "\\mathbb{A}" },
      "\u{1D539}": { math: "\\mathbb{B}" },
      "\u{1D53B}": { math: "\\mathbb{D}" },
      "\u{1D53C}": { math: "\\mathbb{E}" },
      "\u{1D53D}": { math: "\\mathbb{F}" },
      "\u{1D53E}": { math: "\\mathbb{G}" },
      "\u{1D540}": { math: "\\mathbb{I}" },
      "\u{1D541}": { math: "\\mathbb{J}" },
      "\u{1D542}": { math: "\\mathbb{K}" },
      "\u{1D543}": { math: "\\mathbb{L}" },
      "\u{1D544}": { math: "\\mathbb{M}" },
      "\u{1D546}": { math: "\\mathbb{O}" },
      "\u{1D54A}": { math: "\\mathbb{S}" },
      "\u{1D54B}": { math: "\\mathbb{T}" },
      "\u{1D54C}": { math: "\\mathbb{U}" },
      "\u{1D54D}": { math: "\\mathbb{V}" },
      "\u{1D54E}": { math: "\\mathbb{W}" },
      "\u{1D54F}": { math: "\\mathbb{X}" },
      "\u{1D550}": { math: "\\mathbb{Y}" },
      "\u{1D552}": { math: "\\mathbb{a}" },
      "\u{1D553}": { math: "\\mathbb{b}" },
      "\u{1D554}": { math: "\\mathbb{c}" },
      "\u{1D555}": { math: "\\mathbb{d}" },
      "\u{1D556}": { math: "\\mathbb{e}" },
      "\u{1D557}": { math: "\\mathbb{f}" },
      "\u{1D558}": { math: "\\mathbb{g}" },
      "\u{1D559}": { math: "\\mathbb{h}" },
      "\u{1D55A}": { math: "\\mathbb{i}" },
      "\u{1D55B}": { math: "\\mathbb{j}" },
      "\u{1D55C}": { math: "\\mathbb{k}" },
      "\u{1D55D}": { math: "\\mathbb{l}" },
      "\u{1D55E}": { math: "\\mathbb{m}" },
      "\u{1D55F}": { math: "\\mathbb{n}" },
      "\u{1D560}": { math: "\\mathbb{o}" },
      "\u{1D561}": { math: "\\mathbb{p}" },
      "\u{1D562}": { math: "\\mathbb{q}" },
      "\u{1D563}": { math: "\\mathbb{r}" },
      "\u{1D564}": { math: "\\mathbb{s}" },
      "\u{1D565}": { math: "\\mathbb{t}" },
      "\u{1D566}": { math: "\\mathbb{u}" },
      "\u{1D567}": { math: "\\mathbb{v}" },
      "\u{1D568}": { math: "\\mathbb{w}" },
      "\u{1D569}": { math: "\\mathbb{x}" },
      "\u{1D56A}": { math: "\\mathbb{y}" },
      "\u{1D56B}": { math: "\\mathbb{z}" },
      "\u{1D56C}": { math: "\\mathslbb{A}" },
      "\u{1D56D}": { math: "\\mathslbb{B}" },
      "\u{1D56E}": { math: "\\mathslbb{C}" },
      "\u{1D56F}": { math: "\\mathslbb{D}" },
      "\u{1D570}": { math: "\\mathslbb{E}" },
      "\u{1D571}": { math: "\\mathslbb{F}" },
      "\u{1D572}": { math: "\\mathslbb{G}" },
      "\u{1D573}": { math: "\\mathslbb{H}" },
      "\u{1D574}": { math: "\\mathslbb{I}" },
      "\u{1D575}": { math: "\\mathslbb{J}" },
      "\u{1D576}": { math: "\\mathslbb{K}" },
      "\u{1D577}": { math: "\\mathslbb{L}" },
      "\u{1D578}": { math: "\\mathslbb{M}" },
      "\u{1D579}": { math: "\\mathslbb{N}" },
      "\u{1D57A}": { math: "\\mathslbb{O}" },
      "\u{1D57B}": { math: "\\mathslbb{P}" },
      "\u{1D57C}": { math: "\\mathslbb{Q}" },
      "\u{1D57D}": { math: "\\mathslbb{R}" },
      "\u{1D57E}": { math: "\\mathslbb{S}" },
      "\u{1D57F}": { math: "\\mathslbb{T}" },
      "\u{1D580}": { math: "\\mathslbb{U}" },
      "\u{1D581}": { math: "\\mathslbb{V}" },
      "\u{1D582}": { math: "\\mathslbb{W}" },
      "\u{1D583}": { math: "\\mathslbb{X}" },
      "\u{1D584}": { math: "\\mathslbb{Y}" },
      "\u{1D585}": { math: "\\mathslbb{Z}" },
      "\u{1D586}": { math: "\\mathslbb{a}" },
      "\u{1D587}": { math: "\\mathslbb{b}" },
      "\u{1D588}": { math: "\\mathslbb{c}" },
      "\u{1D589}": { math: "\\mathslbb{d}" },
      "\u{1D58A}": { math: "\\mathslbb{e}" },
      "\u{1D58B}": { math: "\\mathslbb{f}" },
      "\u{1D58C}": { math: "\\mathslbb{g}" },
      "\u{1D58D}": { math: "\\mathslbb{h}" },
      "\u{1D58E}": { math: "\\mathslbb{i}" },
      "\u{1D58F}": { math: "\\mathslbb{j}" },
      "\u{1D590}": { math: "\\mathslbb{k}" },
      "\u{1D591}": { math: "\\mathslbb{l}" },
      "\u{1D592}": { math: "\\mathslbb{m}" },
      "\u{1D593}": { math: "\\mathslbb{n}" },
      "\u{1D594}": { math: "\\mathslbb{o}" },
      "\u{1D595}": { math: "\\mathslbb{p}" },
      "\u{1D596}": { math: "\\mathslbb{q}" },
      "\u{1D597}": { math: "\\mathslbb{r}" },
      "\u{1D598}": { math: "\\mathslbb{s}" },
      "\u{1D599}": { math: "\\mathslbb{t}" },
      "\u{1D59A}": { math: "\\mathslbb{u}" },
      "\u{1D59B}": { math: "\\mathslbb{v}" },
      "\u{1D59C}": { math: "\\mathslbb{w}" },
      "\u{1D59D}": { math: "\\mathslbb{x}" },
      "\u{1D59E}": { math: "\\mathslbb{y}" },
      "\u{1D59F}": { math: "\\mathslbb{z}" },
      "\u{1D5A0}": { math: "\\mathsf{A}" },
      "\u{1D5A1}": { math: "\\mathsf{B}" },
      "\u{1D5A2}": { math: "\\mathsf{C}" },
      "\u{1D5A3}": { math: "\\mathsf{D}" },
      "\u{1D5A4}": { math: "\\mathsf{E}" },
      "\u{1D5A5}": { math: "\\mathsf{F}" },
      "\u{1D5A6}": { math: "\\mathsf{G}" },
      "\u{1D5A7}": { math: "\\mathsf{H}" },
      "\u{1D5A8}": { math: "\\mathsf{I}" },
      "\u{1D5A9}": { math: "\\mathsf{J}" },
      "\u{1D5AA}": { math: "\\mathsf{K}" },
      "\u{1D5AB}": { math: "\\mathsf{L}" },
      "\u{1D5AC}": { math: "\\mathsf{M}" },
      "\u{1D5AD}": { math: "\\mathsf{N}" },
      "\u{1D5AE}": { math: "\\mathsf{O}" },
      "\u{1D5AF}": { math: "\\mathsf{P}" },
      "\u{1D5B0}": { math: "\\mathsf{Q}" },
      "\u{1D5B1}": { math: "\\mathsf{R}" },
      "\u{1D5B2}": { math: "\\mathsf{S}" },
      "\u{1D5B3}": { math: "\\mathsf{T}" },
      "\u{1D5B4}": { math: "\\mathsf{U}" },
      "\u{1D5B5}": { math: "\\mathsf{V}" },
      "\u{1D5B6}": { math: "\\mathsf{W}" },
      "\u{1D5B7}": { math: "\\mathsf{X}" },
      "\u{1D5B8}": { math: "\\mathsf{Y}" },
      "\u{1D5B9}": { math: "\\mathsf{Z}" },
      "\u{1D5BA}": { math: "\\mathsf{a}" },
      "\u{1D5BB}": { math: "\\mathsf{b}" },
      "\u{1D5BC}": { math: "\\mathsf{c}" },
      "\u{1D5BD}": { math: "\\mathsf{d}" },
      "\u{1D5BE}": { math: "\\mathsf{e}" },
      "\u{1D5BF}": { math: "\\mathsf{f}" },
      "\u{1D5C0}": { math: "\\mathsf{g}" },
      "\u{1D5C1}": { math: "\\mathsf{h}" },
      "\u{1D5C2}": { math: "\\mathsf{i}" },
      "\u{1D5C3}": { math: "\\mathsf{j}" },
      "\u{1D5C4}": { math: "\\mathsf{k}" },
      "\u{1D5C5}": { math: "\\mathsf{l}" },
      "\u{1D5C6}": { math: "\\mathsf{m}" },
      "\u{1D5C7}": { math: "\\mathsf{n}" },
      "\u{1D5C8}": { math: "\\mathsf{o}" },
      "\u{1D5C9}": { math: "\\mathsf{p}" },
      "\u{1D5CA}": { math: "\\mathsf{q}" },
      "\u{1D5CB}": { math: "\\mathsf{r}" },
      "\u{1D5CC}": { math: "\\mathsf{s}" },
      "\u{1D5CD}": { math: "\\mathsf{t}" },
      "\u{1D5CE}": { math: "\\mathsf{u}" },
      "\u{1D5CF}": { math: "\\mathsf{v}" },
      "\u{1D5D0}": { math: "\\mathsf{w}" },
      "\u{1D5D1}": { math: "\\mathsf{x}" },
      "\u{1D5D2}": { math: "\\mathsf{y}" },
      "\u{1D5D3}": { math: "\\mathsf{z}" },
      "\u{1D5D4}": { math: "\\mathsfbf{A}" },
      "\u{1D5D5}": { math: "\\mathsfbf{B}" },
      "\u{1D5D6}": { math: "\\mathsfbf{C}" },
      "\u{1D5D7}": { math: "\\mathsfbf{D}" },
      "\u{1D5D8}": { math: "\\mathsfbf{E}" },
      "\u{1D5D9}": { math: "\\mathsfbf{F}" },
      "\u{1D5DA}": { math: "\\mathsfbf{G}" },
      "\u{1D5DB}": { math: "\\mathsfbf{H}" },
      "\u{1D5DC}": { math: "\\mathsfbf{I}" },
      "\u{1D5DD}": { math: "\\mathsfbf{J}" },
      "\u{1D5DE}": { math: "\\mathsfbf{K}" },
      "\u{1D5DF}": { math: "\\mathsfbf{L}" },
      "\u{1D5E0}": { math: "\\mathsfbf{M}" },
      "\u{1D5E1}": { math: "\\mathsfbf{N}" },
      "\u{1D5E2}": { math: "\\mathsfbf{O}" },
      "\u{1D5E3}": { math: "\\mathsfbf{P}" },
      "\u{1D5E4}": { math: "\\mathsfbf{Q}" },
      "\u{1D5E5}": { math: "\\mathsfbf{R}" },
      "\u{1D5E6}": { math: "\\mathsfbf{S}" },
      "\u{1D5E7}": { math: "\\mathsfbf{T}" },
      "\u{1D5E8}": { math: "\\mathsfbf{U}" },
      "\u{1D5E9}": { math: "\\mathsfbf{V}" },
      "\u{1D5EA}": { math: "\\mathsfbf{W}" },
      "\u{1D5EB}": { math: "\\mathsfbf{X}" },
      "\u{1D5EC}": { math: "\\mathsfbf{Y}" },
      "\u{1D5ED}": { math: "\\mathsfbf{Z}" },
      "\u{1D5EE}": { math: "\\mathsfbf{a}" },
      "\u{1D5EF}": { math: "\\mathsfbf{b}" },
      "\u{1D5F0}": { math: "\\mathsfbf{c}" },
      "\u{1D5F1}": { math: "\\mathsfbf{d}" },
      "\u{1D5F2}": { math: "\\mathsfbf{e}" },
      "\u{1D5F3}": { math: "\\mathsfbf{f}" },
      "\u{1D5F4}": { math: "\\mathsfbf{g}" },
      "\u{1D5F5}": { math: "\\mathsfbf{h}" },
      "\u{1D5F6}": { math: "\\mathsfbf{i}" },
      "\u{1D5F7}": { math: "\\mathsfbf{j}" },
      "\u{1D5F8}": { math: "\\mathsfbf{k}" },
      "\u{1D5F9}": { math: "\\mathsfbf{l}" },
      "\u{1D5FA}": { math: "\\mathsfbf{m}" },
      "\u{1D5FB}": { math: "\\mathsfbf{n}" },
      "\u{1D5FC}": { math: "\\mathsfbf{o}" },
      "\u{1D5FD}": { math: "\\mathsfbf{p}" },
      "\u{1D5FE}": { math: "\\mathsfbf{q}" },
      "\u{1D5FF}": { math: "\\mathsfbf{r}" },
      "\u{1D600}": { math: "\\mathsfbf{s}" },
      "\u{1D601}": { math: "\\mathsfbf{t}" },
      "\u{1D602}": { math: "\\mathsfbf{u}" },
      "\u{1D603}": { math: "\\mathsfbf{v}" },
      "\u{1D604}": { math: "\\mathsfbf{w}" },
      "\u{1D605}": { math: "\\mathsfbf{x}" },
      "\u{1D606}": { math: "\\mathsfbf{y}" },
      "\u{1D607}": { math: "\\mathsfbf{z}" },
      "\u{1D608}": { math: "\\mathsfsl{A}" },
      "\u{1D609}": { math: "\\mathsfsl{B}" },
      "\u{1D60A}": { math: "\\mathsfsl{C}" },
      "\u{1D60B}": { math: "\\mathsfsl{D}" },
      "\u{1D60C}": { math: "\\mathsfsl{E}" },
      "\u{1D60D}": { math: "\\mathsfsl{F}" },
      "\u{1D60E}": { math: "\\mathsfsl{G}" },
      "\u{1D60F}": { math: "\\mathsfsl{H}" },
      "\u{1D610}": { math: "\\mathsfsl{I}" },
      "\u{1D611}": { math: "\\mathsfsl{J}" },
      "\u{1D612}": { math: "\\mathsfsl{K}" },
      "\u{1D613}": { math: "\\mathsfsl{L}" },
      "\u{1D614}": { math: "\\mathsfsl{M}" },
      "\u{1D615}": { math: "\\mathsfsl{N}" },
      "\u{1D616}": { math: "\\mathsfsl{O}" },
      "\u{1D617}": { math: "\\mathsfsl{P}" },
      "\u{1D618}": { math: "\\mathsfsl{Q}" },
      "\u{1D619}": { math: "\\mathsfsl{R}" },
      "\u{1D61A}": { math: "\\mathsfsl{S}" },
      "\u{1D61B}": { math: "\\mathsfsl{T}" },
      "\u{1D61C}": { math: "\\mathsfsl{U}" },
      "\u{1D61D}": { math: "\\mathsfsl{V}" },
      "\u{1D61E}": { math: "\\mathsfsl{W}" },
      "\u{1D61F}": { math: "\\mathsfsl{X}" },
      "\u{1D620}": { math: "\\mathsfsl{Y}" },
      "\u{1D621}": { math: "\\mathsfsl{Z}" },
      "\u{1D622}": { math: "\\mathsfsl{a}" },
      "\u{1D623}": { math: "\\mathsfsl{b}" },
      "\u{1D624}": { math: "\\mathsfsl{c}" },
      "\u{1D625}": { math: "\\mathsfsl{d}" },
      "\u{1D626}": { math: "\\mathsfsl{e}" },
      "\u{1D627}": { math: "\\mathsfsl{f}" },
      "\u{1D628}": { math: "\\mathsfsl{g}" },
      "\u{1D629}": { math: "\\mathsfsl{h}" },
      "\u{1D62A}": { math: "\\mathsfsl{i}" },
      "\u{1D62B}": { math: "\\mathsfsl{j}" },
      "\u{1D62C}": { math: "\\mathsfsl{k}" },
      "\u{1D62D}": { math: "\\mathsfsl{l}" },
      "\u{1D62E}": { math: "\\mathsfsl{m}" },
      "\u{1D62F}": { math: "\\mathsfsl{n}" },
      "\u{1D630}": { math: "\\mathsfsl{o}" },
      "\u{1D631}": { math: "\\mathsfsl{p}" },
      "\u{1D632}": { math: "\\mathsfsl{q}" },
      "\u{1D633}": { math: "\\mathsfsl{r}" },
      "\u{1D634}": { math: "\\mathsfsl{s}" },
      "\u{1D635}": { math: "\\mathsfsl{t}" },
      "\u{1D636}": { math: "\\mathsfsl{u}" },
      "\u{1D637}": { math: "\\mathsfsl{v}" },
      "\u{1D638}": { math: "\\mathsfsl{w}" },
      "\u{1D639}": { math: "\\mathsfsl{x}" },
      "\u{1D63A}": { math: "\\mathsfsl{y}" },
      "\u{1D63B}": { math: "\\mathsfsl{z}" },
      "\u{1D63C}": { math: "\\mathsfbfsl{A}" },
      "\u{1D63D}": { math: "\\mathsfbfsl{B}" },
      "\u{1D63E}": { math: "\\mathsfbfsl{C}" },
      "\u{1D63F}": { math: "\\mathsfbfsl{D}" },
      "\u{1D640}": { math: "\\mathsfbfsl{E}" },
      "\u{1D641}": { math: "\\mathsfbfsl{F}" },
      "\u{1D642}": { math: "\\mathsfbfsl{G}" },
      "\u{1D643}": { math: "\\mathsfbfsl{H}" },
      "\u{1D644}": { math: "\\mathsfbfsl{I}" },
      "\u{1D645}": { math: "\\mathsfbfsl{J}" },
      "\u{1D646}": { math: "\\mathsfbfsl{K}" },
      "\u{1D647}": { math: "\\mathsfbfsl{L}" },
      "\u{1D648}": { math: "\\mathsfbfsl{M}" },
      "\u{1D649}": { math: "\\mathsfbfsl{N}" },
      "\u{1D64A}": { math: "\\mathsfbfsl{O}" },
      "\u{1D64B}": { math: "\\mathsfbfsl{P}" },
      "\u{1D64C}": { math: "\\mathsfbfsl{Q}" },
      "\u{1D64D}": { math: "\\mathsfbfsl{R}" },
      "\u{1D64E}": { math: "\\mathsfbfsl{S}" },
      "\u{1D64F}": { math: "\\mathsfbfsl{T}" },
      "\u{1D650}": { math: "\\mathsfbfsl{U}" },
      "\u{1D651}": { math: "\\mathsfbfsl{V}" },
      "\u{1D652}": { math: "\\mathsfbfsl{W}" },
      "\u{1D653}": { math: "\\mathsfbfsl{X}" },
      "\u{1D654}": { math: "\\mathsfbfsl{Y}" },
      "\u{1D655}": { math: "\\mathsfbfsl{Z}" },
      "\u{1D656}": { math: "\\mathsfbfsl{a}" },
      "\u{1D657}": { math: "\\mathsfbfsl{b}" },
      "\u{1D658}": { math: "\\mathsfbfsl{c}" },
      "\u{1D659}": { math: "\\mathsfbfsl{d}" },
      "\u{1D65A}": { math: "\\mathsfbfsl{e}" },
      "\u{1D65B}": { math: "\\mathsfbfsl{f}" },
      "\u{1D65C}": { math: "\\mathsfbfsl{g}" },
      "\u{1D65D}": { math: "\\mathsfbfsl{h}" },
      "\u{1D65E}": { math: "\\mathsfbfsl{i}" },
      "\u{1D65F}": { math: "\\mathsfbfsl{j}" },
      "\u{1D660}": { math: "\\mathsfbfsl{k}" },
      "\u{1D661}": { math: "\\mathsfbfsl{l}" },
      "\u{1D662}": { math: "\\mathsfbfsl{m}" },
      "\u{1D663}": { math: "\\mathsfbfsl{n}" },
      "\u{1D664}": { math: "\\mathsfbfsl{o}" },
      "\u{1D665}": { math: "\\mathsfbfsl{p}" },
      "\u{1D666}": { math: "\\mathsfbfsl{q}" },
      "\u{1D667}": { math: "\\mathsfbfsl{r}" },
      "\u{1D668}": { math: "\\mathsfbfsl{s}" },
      "\u{1D669}": { math: "\\mathsfbfsl{t}" },
      "\u{1D66A}": { math: "\\mathsfbfsl{u}" },
      "\u{1D66B}": { math: "\\mathsfbfsl{v}" },
      "\u{1D66C}": { math: "\\mathsfbfsl{w}" },
      "\u{1D66D}": { math: "\\mathsfbfsl{x}" },
      "\u{1D66E}": { math: "\\mathsfbfsl{y}" },
      "\u{1D66F}": { math: "\\mathsfbfsl{z}" },
      "\u{1D670}": { math: "\\mathtt{A}" },
      "\u{1D671}": { math: "\\mathtt{B}" },
      "\u{1D672}": { math: "\\mathtt{C}" },
      "\u{1D673}": { math: "\\mathtt{D}" },
      "\u{1D674}": { math: "\\mathtt{E}" },
      "\u{1D675}": { math: "\\mathtt{F}" },
      "\u{1D676}": { math: "\\mathtt{G}" },
      "\u{1D677}": { math: "\\mathtt{H}" },
      "\u{1D678}": { math: "\\mathtt{I}" },
      "\u{1D679}": { math: "\\mathtt{J}" },
      "\u{1D67A}": { math: "\\mathtt{K}" },
      "\u{1D67B}": { math: "\\mathtt{L}" },
      "\u{1D67C}": { math: "\\mathtt{M}" },
      "\u{1D67D}": { math: "\\mathtt{N}" },
      "\u{1D67E}": { math: "\\mathtt{O}" },
      "\u{1D67F}": { math: "\\mathtt{P}" },
      "\u{1D680}": { math: "\\mathtt{Q}" },
      "\u{1D681}": { math: "\\mathtt{R}" },
      "\u{1D682}": { math: "\\mathtt{S}" },
      "\u{1D683}": { math: "\\mathtt{T}" },
      "\u{1D684}": { math: "\\mathtt{U}" },
      "\u{1D685}": { math: "\\mathtt{V}" },
      "\u{1D686}": { math: "\\mathtt{W}" },
      "\u{1D687}": { math: "\\mathtt{X}" },
      "\u{1D688}": { math: "\\mathtt{Y}" },
      "\u{1D689}": { math: "\\mathtt{Z}" },
      "\u{1D68A}": { math: "\\mathtt{a}" },
      "\u{1D68B}": { math: "\\mathtt{b}" },
      "\u{1D68C}": { math: "\\mathtt{c}" },
      "\u{1D68D}": { math: "\\mathtt{d}" },
      "\u{1D68E}": { math: "\\mathtt{e}" },
      "\u{1D68F}": { math: "\\mathtt{f}" },
      "\u{1D690}": { math: "\\mathtt{g}" },
      "\u{1D691}": { math: "\\mathtt{h}" },
      "\u{1D692}": { math: "\\mathtt{i}" },
      "\u{1D693}": { math: "\\mathtt{j}" },
      "\u{1D694}": { math: "\\mathtt{k}" },
      "\u{1D695}": { math: "\\mathtt{l}" },
      "\u{1D696}": { math: "\\mathtt{m}" },
      "\u{1D697}": { math: "\\mathtt{n}" },
      "\u{1D698}": { math: "\\mathtt{o}" },
      "\u{1D699}": { math: "\\mathtt{p}" },
      "\u{1D69A}": { math: "\\mathtt{q}" },
      "\u{1D69B}": { math: "\\mathtt{r}" },
      "\u{1D69C}": { math: "\\mathtt{s}" },
      "\u{1D69D}": { math: "\\mathtt{t}" },
      "\u{1D69E}": { math: "\\mathtt{u}" },
      "\u{1D69F}": { math: "\\mathtt{v}" },
      "\u{1D6A0}": { math: "\\mathtt{w}" },
      "\u{1D6A1}": { math: "\\mathtt{x}" },
      "\u{1D6A2}": { math: "\\mathtt{y}" },
      "\u{1D6A3}": { math: "\\mathtt{z}" },
      "\u{1D6A4}": { math: "\\imath" },
      "\u{1D6A5}": { math: "\\jmath" },
      "\u{1D6A8}": { math: "\\mathbf{A}" },
      "\u{1D6A9}": { math: "\\mathbf{B}" },
      "\u{1D6AA}": { math: "\\mathbf{\\Gamma}" },
      "\u{1D6AB}": { math: "\\mathbf{\\Delta}" },
      "\u{1D6AC}": { math: "\\mathbf{E}" },
      "\u{1D6AD}": { math: "\\mathbf{Z}" },
      "\u{1D6AE}": { math: "\\mathbf{H}" },
      "\u{1D6AF}": { math: "\\mathbf{\\Theta}" },
      "\u{1D6B0}": { math: "\\mathbf{I}" },
      "\u{1D6B1}": { math: "\\mathbf{K}" },
      "\u{1D6B2}": { math: "\\mathbf{\\Lambda}" },
      "\u{1D6B3}": { math: "M" },
      "\u{1D6B4}": { math: "N" },
      "\u{1D6B5}": { math: "\\mathbf{\\Xi}" },
      "\u{1D6B6}": { math: "O" },
      "\u{1D6B7}": { math: "\\mathbf{\\Pi}" },
      "\u{1D6B8}": { math: "\\mathbf{P}" },
      "\u{1D6B9}": { math: "\\mathbf{\\vartheta}" },
      "\u{1D6BA}": { math: "\\mathbf{\\Sigma}" },
      "\u{1D6BB}": { math: "\\mathbf{T}" },
      "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}" },
      "\u{1D6BD}": { math: "\\mathbf{\\Phi}" },
      "\u{1D6BE}": { math: "\\mathbf{X}" },
      "\u{1D6BF}": { math: "\\mathbf{\\Psi}" },
      "\u{1D6C0}": { math: "\\mathbf{\\Omega}" },
      "\u{1D6C1}": { math: "\\mathbf{\\nabla}" },
      "\u{1D6C2}": { math: "\\mathbf{\\alpha}" },
      "\u{1D6C3}": { math: "\\mathbf{\\beta}" },
      "\u{1D6C4}": { math: "\\mathbf{\\gamma}" },
      "\u{1D6C5}": { math: "\\mathbf{\\delta}" },
      "\u{1D6C6}": { math: "\\mathbf{\\epsilon}" },
      "\u{1D6C7}": { math: "\\mathbf{\\zeta}" },
      "\u{1D6C8}": { math: "\\mathbf{\\eta}" },
      "\u{1D6C9}": { math: "\\mathbf{\\theta}" },
      "\u{1D6CA}": { math: "\\mathbf{I}" },
      "\u{1D6CB}": { math: "\\mathbf{K}" },
      "\u{1D6CC}": { math: "\\mathbf{\\lambda}" },
      "\u{1D6CD}": { math: "M" },
      "\u{1D6CE}": { math: "N" },
      "\u{1D6CF}": { math: "\\mathbf{\\xi}" },
      "\u{1D6D0}": { math: "O" },
      "\u{1D6D1}": { math: "\\mathbf{\\pi}" },
      "\u{1D6D2}": { math: "\\mathbf{P}" },
      "\u{1D6D3}": { math: "\\mathbf{\\varsigma}" },
      "\u{1D6D4}": { math: "\\mathbf{\\sigma}" },
      "\u{1D6D5}": { math: "\\mathbf{T}" },
      "\u{1D6D6}": { math: "\\mathbf{\\upsilon}" },
      "\u{1D6D7}": { math: "\\mathbf{\\phi}" },
      "\u{1D6D8}": { math: "\\mathbf{X}" },
      "\u{1D6D9}": { math: "\\mathbf{\\psi}" },
      "\u{1D6DA}": { math: "\\mathbf{\\omega}" },
      "\u{1D6DB}": { math: "\\partial" },
      "\u{1D6DC}": { math: "\\in" },
      "\u{1D6DD}": { math: "\\mathbf{\\vartheta}" },
      "\u{1D6DE}": { math: "\\mathbf{\\varkappa}" },
      "\u{1D6DF}": { math: "\\mathbf{\\phi}" },
      "\u{1D6E0}": { math: "\\mathbf{\\varrho}" },
      "\u{1D6E1}": { math: "\\mathbf{\\varpi}" },
      "\u{1D6E2}": { math: "\\mathsl{A}" },
      "\u{1D6E3}": { math: "\\mathsl{B}" },
      "\u{1D6E4}": { math: "\\mathsl{\\Gamma}" },
      "\u{1D6E5}": { math: "\\mathsl{\\Delta}" },
      "\u{1D6E6}": { math: "\\mathsl{E}" },
      "\u{1D6E7}": { math: "\\mathsl{Z}" },
      "\u{1D6E8}": { math: "\\mathsl{H}" },
      "\u{1D6E9}": { math: "\\mathsl{\\Theta}" },
      "\u{1D6EA}": { math: "\\mathsl{I}" },
      "\u{1D6EB}": { math: "\\mathsl{K}" },
      "\u{1D6EC}": { math: "\\mathsl{\\Lambda}" },
      "\u{1D6ED}": { math: "M" },
      "\u{1D6EE}": { math: "N" },
      "\u{1D6EF}": { math: "\\mathsl{\\Xi}" },
      "\u{1D6F0}": { math: "O" },
      "\u{1D6F1}": { math: "\\mathsl{\\Pi}" },
      "\u{1D6F2}": { math: "\\mathsl{P}" },
      "\u{1D6F3}": { math: "\\mathsl{\\Theta}" },
      "\u{1D6F4}": { math: "\\mathsl{\\Sigma}" },
      "\u{1D6F5}": { math: "\\mathsl{T}" },
      "\u{1D6F6}": { math: "\\mathsl{\\Upsilon}" },
      "\u{1D6F7}": { math: "\\mathsl{\\Phi}" },
      "\u{1D6F8}": { math: "\\mathsl{X}" },
      "\u{1D6F9}": { math: "\\mathsl{\\Psi}" },
      "\u{1D6FA}": { math: "\\mathsl{\\Omega}" },
      "\u{1D6FB}": { math: "\\mathsl{\\nabla}" },
      "\u{1D6FC}": { math: "\\mathsl{A}" },
      "\u{1D6FD}": { math: "\\mathsl{B}" },
      "\u{1D6FE}": { math: "\\mathsl{\\gamma}" },
      "\u{1D6FF}": { math: "\\mathsl{\\delta}" },
      "\u{1D700}": { math: "\\mathsl{E}" },
      "\u{1D701}": { math: "\\mathsl{Z}" },
      "\u{1D702}": { math: "\\mathsl{H}" },
      "\u{1D703}": { math: "\\mathsl{\\theta}" },
      "\u{1D704}": { math: "\\mathsl{I}" },
      "\u{1D705}": { math: "\\mathsl{K}" },
      "\u{1D706}": { math: "\\mathsl{\\lambda}" },
      "\u{1D707}": { math: "\\mu" },
      "\u{1D708}": { math: "\\nu" },
      "\u{1D709}": { math: "\\mathsl{\\xi}" },
      "\u{1D70A}": { math: "o" },
      "\u{1D70B}": { math: "\\mathsl{\\pi}" },
      "\u{1D70C}": { math: "\\mathsl{P}" },
      "\u{1D70D}": { math: "\\mathsl{\\varsigma}" },
      "\u{1D70E}": { math: "\\mathsl{\\sigma}" },
      "\u{1D70F}": { math: "\\mathsl{T}" },
      "\u{1D710}": { math: "\\mathsl{\\upsilon}" },
      "\u{1D711}": { math: "\\mathsl{\\varphi}" },
      "\u{1D712}": { math: "\\mathsl{X}" },
      "\u{1D713}": { math: "\\mathsl{\\psi}" },
      "\u{1D714}": { math: "\\mathsl{\\omega}" },
      "\u{1D715}": { math: "\\partial" },
      "\u{1D716}": { math: "\\in" },
      "\u{1D717}": { math: "\\mathsl{\\vartheta}" },
      "\u{1D718}": { math: "\\mathsl{\\varkappa}" },
      "\u{1D719}": { math: "\\mathsl{\\phi}" },
      "\u{1D71A}": { math: "\\mathsl{\\varrho}" },
      "\u{1D71B}": { math: "\\mathsl{\\varpi}" },
      "\u{1D71C}": { math: "\\mathbit{A}" },
      "\u{1D71D}": { math: "\\mathbit{B}" },
      "\u{1D71E}": { math: "\\mathbit{\\Gamma}" },
      "\u{1D71F}": { math: "\\mathbit{\\Delta}" },
      "\u{1D720}": { math: "\\mathbit{E}" },
      "\u{1D721}": { math: "\\mathbit{Z}" },
      "\u{1D722}": { math: "\\mathbit{H}" },
      "\u{1D723}": { math: "\\mathbit{\\Theta}" },
      "\u{1D724}": { math: "\\mathbit{I}" },
      "\u{1D725}": { math: "\\mathbit{K}" },
      "\u{1D726}": { math: "\\mathbit{\\Lambda}" },
      "\u{1D727}": { math: "M" },
      "\u{1D728}": { math: "N" },
      "\u{1D729}": { math: "\\mathbit{\\Xi}" },
      "\u{1D72A}": { math: "O" },
      "\u{1D72B}": { math: "\\mathbit{\\Pi}" },
      "\u{1D72C}": { math: "\\mathbit{P}" },
      "\u{1D72D}": { math: "\\mathbit{O}" },
      "\u{1D72E}": { math: "\\mathbit{\\Sigma}" },
      "\u{1D72F}": { math: "\\mathbit{T}" },
      "\u{1D730}": { math: "\\mathbit{\\Upsilon}" },
      "\u{1D731}": { math: "\\mathbit{\\Phi}" },
      "\u{1D732}": { math: "\\mathbit{X}" },
      "\u{1D733}": { math: "\\mathbit{\\Psi}" },
      "\u{1D734}": { math: "\\mathbit{\\Omega}" },
      "\u{1D735}": { math: "\\mathbit{\\nabla}" },
      "\u{1D736}": { math: "\\mathbit{\\alpha}" },
      "\u{1D737}": { math: "\\mathbit{\\beta}" },
      "\u{1D738}": { math: "\\mathbit{\\gamma}" },
      "\u{1D739}": { math: "\\mathbit{\\delta}" },
      "\u{1D73A}": { math: "\\mathbit{\\epsilon}" },
      "\u{1D73B}": { math: "\\mathbit{\\zeta}" },
      "\u{1D73C}": { math: "\\mathbit{\\eta}" },
      "\u{1D73D}": { math: "\\mathbit{\\theta}" },
      "\u{1D73E}": { math: "\\mathbit{\\imath}" },
      "\u{1D73F}": { math: "\\mathbit{\\kappa}" },
      "\u{1D740}": { math: "\\mathbit{\\lambda}" },
      "\u{1D741}": { math: "\\mu" },
      "\u{1D742}": { math: "N" },
      "\u{1D743}": { math: "\\mathbit{\\xi}" },
      "\u{1D744}": { math: "O" },
      "\u{1D745}": { math: "\\mathbit{\\pi}" },
      "\u{1D746}": { math: "\\mathbit{\\rho}" },
      "\u{1D747}": { math: "\\mathbit{\\varsigma}" },
      "\u{1D748}": { math: "\\mathbit{\\sigma}" },
      "\u{1D749}": { math: "\\mathbit{\\tau}" },
      "\u{1D74A}": { math: "\\mathbit{\\upsilon}" },
      "\u{1D74B}": { math: "\\mathbit{\\varphi}" },
      "\u{1D74C}": { math: "\\mathbit{\\chi}" },
      "\u{1D74D}": { math: "\\mathbit{\\psi}" },
      "\u{1D74E}": { math: "\\mathbit{\\omega}" },
      "\u{1D74F}": { math: "\\partial" },
      "\u{1D750}": { math: "\\in" },
      "\u{1D751}": { math: "\\mathbit{\\vartheta}" },
      "\u{1D752}": { math: "\\mathbit{\\varkappa}" },
      "\u{1D753}": { math: "\\mathbit{\\phi}" },
      "\u{1D754}": { math: "\\mathbit{\\varrho}" },
      "\u{1D755}": { math: "\\mathbit{\\varpi}" },
      "\u{1D756}": { math: "\\mathsfbf{A}" },
      "\u{1D757}": { math: "\\mathsfbf{B}" },
      "\u{1D758}": { math: "\\mathsfbf{\\Gamma}" },
      "\u{1D759}": { math: "\\mathsfbf{\\Delta}" },
      "\u{1D75A}": { math: "\\mathsfbf{E}" },
      "\u{1D75B}": { math: "\\mathsfbf{Z}" },
      "\u{1D75C}": { math: "\\mathsfbf{H}" },
      "\u{1D75D}": { math: "\\mathsfbf{\\Theta}" },
      "\u{1D75E}": { math: "\\mathsfbf{I}" },
      "\u{1D75F}": { math: "\\mathsfbf{K}" },
      "\u{1D760}": { math: "\\mathsfbf{\\Lambda}" },
      "\u{1D761}": { math: "M" },
      "\u{1D762}": { math: "N" },
      "\u{1D763}": { math: "\\mathsfbf{\\Xi}" },
      "\u{1D764}": { math: "O" },
      "\u{1D765}": { math: "\\mathsfbf{\\Pi}" },
      "\u{1D766}": { math: "\\mathsfbf{P}" },
      "\u{1D767}": { math: "\\mathsfbf{\\Theta}" },
      "\u{1D768}": { math: "\\mathsfbf{\\Sigma}" },
      "\u{1D769}": { math: "\\mathsfbf{T}" },
      "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}" },
      "\u{1D76B}": { math: "\\mathsfbf{\\Phi}" },
      "\u{1D76C}": { math: "\\mathsfbf{X}" },
      "\u{1D76D}": { math: "\\mathsfbf{\\Psi}" },
      "\u{1D76E}": { math: "\\mathsfbf{\\Omega}" },
      "\u{1D76F}": { math: "\\mathsfbf{\\nabla}" },
      "\u{1D770}": { math: "\\mathsfbf{\\alpha}" },
      "\u{1D771}": { math: "\\mathsfbf{\\beta}" },
      "\u{1D772}": { math: "\\mathsfbf{\\gamma}" },
      "\u{1D773}": { math: "\\mathsfbf{\\delta}" },
      "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}" },
      "\u{1D775}": { math: "\\mathsfbf{\\zeta}" },
      "\u{1D776}": { math: "\\mathsfbf{\\eta}" },
      "\u{1D777}": { math: "\\mathsfbf{\\theta}" },
      "\u{1D778}": { math: "\\mathsfbf{\\imath}" },
      "\u{1D779}": { math: "\\mathsfbf{\\kappa}" },
      "\u{1D77A}": { math: "\\mathsfbf{\\lambda}" },
      "\u{1D77B}": { math: "\\mu" },
      "\u{1D77C}": { math: "\\nu" },
      "\u{1D77D}": { math: "\\mathsfbf{\\xi}" },
      "\u{1D77E}": { math: "o" },
      "\u{1D77F}": { math: "\\mathsfbf{\\pi}" },
      "\u{1D780}": { math: "\\mathsfbf{\\rho}" },
      "\u{1D781}": { math: "\\mathsfbf{\\varsigma}" },
      "\u{1D782}": { math: "\\mathsfbf{\\sigma}" },
      "\u{1D783}": { math: "\\mathsfbf{\\tau}" },
      "\u{1D784}": { math: "\\mathsfbf{\\upsilon}" },
      "\u{1D785}": { math: "\\mathsfbf{\\varphi}" },
      "\u{1D786}": { math: "\\mathsfbf{\\chi}" },
      "\u{1D787}": { math: "\\mathsfbf{\\psi}" },
      "\u{1D788}": { math: "\\mathsfbf{\\omega}" },
      "\u{1D789}": { math: "\\partial" },
      "\u{1D78A}": { math: "\\in" },
      "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}" },
      "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}" },
      "\u{1D78D}": { math: "\\mathsfbf{\\phi}" },
      "\u{1D78E}": { math: "\\mathsfbf{\\varrho}" },
      "\u{1D78F}": { math: "\\mathsfbf{\\varpi}" },
      "\u{1D790}": { math: "\\mathsfbfsl{A}" },
      "\u{1D791}": { math: "\\mathsfbfsl{B}" },
      "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}" },
      "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}" },
      "\u{1D794}": { math: "\\mathsfbfsl{E}" },
      "\u{1D795}": { math: "\\mathsfbfsl{Z}" },
      "\u{1D796}": { math: "\\mathsfbfsl{H}" },
      "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}" },
      "\u{1D798}": { math: "\\mathsfbfsl{I}" },
      "\u{1D799}": { math: "\\mathsfbfsl{K}" },
      "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}" },
      "\u{1D79B}": { math: "\\mathsfbfsl{M}" },
      "\u{1D79C}": { math: "\\mathsfbfsl{N}" },
      "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}" },
      "\u{1D79E}": { math: "\\mathsfbfsl{O}" },
      "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}" },
      "\u{1D7A0}": { math: "\\mathsfbfsl{P}" },
      "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}" },
      "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}" },
      "\u{1D7A3}": { math: "\\mathsfbfsl{T}" },
      "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}" },
      "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}" },
      "\u{1D7A6}": { math: "\\mathsfbfsl{X}" },
      "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}" },
      "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}" },
      "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}" },
      "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}" },
      "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}" },
      "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}" },
      "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}" },
      "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}" },
      "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}" },
      "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}" },
      "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}" },
      "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}" },
      "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}" },
      "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}" },
      "\u{1D7B5}": { math: "\\mu" },
      "\u{1D7B6}": { math: "\\nu" },
      "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}" },
      "\u{1D7B8}": { math: "o" },
      "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}" },
      "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}" },
      "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}" },
      "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}" },
      "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}" },
      "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}" },
      "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}" },
      "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}" },
      "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}" },
      "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}" },
      "\u{1D7C3}": { math: "\\partial" },
      "\u{1D7C4}": { math: "\\in" },
      "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}" },
      "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}" },
      "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}" },
      "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}" },
      "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}" },
      "\u{1D7CA}": { math: "\\mbfDigamma" },
      "\u{1D7CB}": { math: "\\mbfdigamma" },
      "\u{1D7CE}": { math: "\\mathbf{0}" },
      "\u{1D7CF}": { math: "\\mathbf{1}" },
      "\u{1D7D0}": { math: "\\mathbf{2}" },
      "\u{1D7D1}": { math: "\\mathbf{3}" },
      "\u{1D7D2}": { math: "\\mathbf{4}" },
      "\u{1D7D3}": { math: "\\mathbf{5}" },
      "\u{1D7D4}": { math: "\\mathbf{6}" },
      "\u{1D7D5}": { math: "\\mathbf{7}" },
      "\u{1D7D6}": { math: "\\mathbf{8}" },
      "\u{1D7D7}": { math: "\\mathbf{9}" },
      "\u{1D7D8}": { math: "\\mathbb{0}" },
      "\u{1D7D9}": { math: "\\mathbb{1}" },
      "\u{1D7DA}": { math: "\\mathbb{2}" },
      "\u{1D7DB}": { math: "\\mathbb{3}" },
      "\u{1D7DC}": { math: "\\mathbb{4}" },
      "\u{1D7DD}": { math: "\\mathbb{5}" },
      "\u{1D7DE}": { math: "\\mathbb{6}" },
      "\u{1D7DF}": { math: "\\mathbb{7}" },
      "\u{1D7E0}": { math: "\\mathbb{8}" },
      "\u{1D7E1}": { math: "\\mathbb{9}" },
      "\u{1D7E2}": { math: "\\mathsf{0}" },
      "\u{1D7E3}": { math: "\\mathsf{1}" },
      "\u{1D7E4}": { math: "\\mathsf{2}" },
      "\u{1D7E5}": { math: "\\mathsf{3}" },
      "\u{1D7E6}": { math: "\\mathsf{4}" },
      "\u{1D7E7}": { math: "\\mathsf{5}" },
      "\u{1D7E8}": { math: "\\mathsf{6}" },
      "\u{1D7E9}": { math: "\\mathsf{7}" },
      "\u{1D7EA}": { math: "\\mathsf{8}" },
      "\u{1D7EB}": { math: "\\mathsf{9}" },
      "\u{1D7EC}": { math: "\\mathsfbf{0}" },
      "\u{1D7ED}": { math: "\\mathsfbf{1}" },
      "\u{1D7EE}": { math: "\\mathsfbf{2}" },
      "\u{1D7EF}": { math: "\\mathsfbf{3}" },
      "\u{1D7F0}": { math: "\\mathsfbf{4}" },
      "\u{1D7F1}": { math: "\\mathsfbf{5}" },
      "\u{1D7F2}": { math: "\\mathsfbf{6}" },
      "\u{1D7F3}": { math: "\\mathsfbf{7}" },
      "\u{1D7F4}": { math: "\\mathsfbf{8}" },
      "\u{1D7F5}": { math: "\\mathsfbf{9}" },
      "\u{1D7F6}": { math: "\\mathtt{0}" },
      "\u{1D7F7}": { math: "\\mathtt{1}" },
      "\u{1D7F8}": { math: "\\mathtt{2}" },
      "\u{1D7F9}": { math: "\\mathtt{3}" },
      "\u{1D7FA}": { math: "\\mathtt{4}" },
      "\u{1D7FB}": { math: "\\mathtt{5}" },
      "\u{1D7FC}": { math: "\\mathtt{6}" },
      "\u{1D7FD}": { math: "\\mathtt{7}" },
      "\u{1D7FE}": { math: "\\mathtt{8}" },
      "\u{1D7FF}": { math: "\\mathtt{9}" }
    };
  }
});

// node_modules/unicode2latex/tables/ascii-bibtex-creator.json
var require_ascii_bibtex_creator = __commonJS({
  "node_modules/unicode2latex/tables/ascii-bibtex-creator.json"(exports2, module2) {
    module2.exports = {
      "#": { math: "\\#", text: "\\#" },
      $: { math: "\\$", text: "\\$" },
      "%": { math: "\\%", text: "\\%" },
      "&": { math: "\\&", text: "\\&" },
      "/\u200B": { text: "{\\slash}" },
      "<": { math: "<" },
      ">": { math: ">" },
      "\\": { math: "\\backslash", text: "{\\textbackslash}" },
      "^": { math: "\\sphat", text: "\\^" },
      _: { math: "\\_", text: "\\_" },
      i\uFE20a\uFE21: { text: "\\t{ia}" },
      "{": { math: "\\lbrace", text: "\\{" },
      "}": { math: "\\rbrace", text: "\\}" },
      "~": { math: "\\sptilde", text: "{\\textasciitilde}" },
      "\xA0": { math: "~", space: true, text: "~" },
      "\xA1": { text: "{\\textexclamdown}" },
      "\xA2": { math: "\\cent", text: "{\\textcent}", textpackages: ["textcomp"] },
      "\xA3": { math: "\\pounds", text: "{\\textsterling}", textpackages: ["textcomp"] },
      "\xA4": { text: "{\\textcurrency}", textpackages: ["textcomp"] },
      "\xA5": { math: "\\yen", text: "{\\textyen}", textpackages: ["textcomp"] },
      "\xA6": { text: "{\\textbrokenbar}", textpackages: ["textcomp"] },
      "\xA7": { text: "{\\textsection}", textpackages: ["textcomp"] },
      "\xA8": { math: "\\spddot", text: "{\\textasciidieresis}" },
      "\xA9": { text: "{\\textcopyright}", textpackages: ["textcomp"] },
      \u00AA: { text: "{\\textordfeminine}", textpackages: ["textcomp"] },
      "\xAB": { text: "{\\guillemotleft}" },
      "\xAC": { math: "\\lnot" },
      "\xAD": { math: "\\-", text: "\\-" },
      "\xAE": { math: "\\circledR", text: "{\\textregistered}", textpackages: ["textcomp"] },
      "\xAF": { text: "{\\textasciimacron}" },
      "\xB0": { math: "^\\circ", text: "{\\textdegree}", textpackages: ["textcomp"] },
      "\xB1": { math: "\\pm" },
      "\xB2": { math: "^{2}" },
      "\xB3": { math: "^{3}" },
      "\xB4": { text: "{\\textasciiacute}" },
      \u00B5: { text: "{\\textmu}" },
      "\xB6": { text: "{\\textparagraph}", textpackages: ["textcomp"] },
      "\xB7": { math: "\\cdot" },
      "\xB8": { text: "{\\c}" },
      "\xB9": { math: "^{1}" },
      \u00BA: { text: "{\\textordmasculine}", textpackages: ["textcomp"] },
      "\xBB": { text: "{\\guillemotright}" },
      "\xBC": { math: "\\frac{1}{4}" },
      "\xBD": { math: "\\frac{1}{2}" },
      "\xBE": { math: "\\frac{3}{4}" },
      "\xBF": { text: "{\\textquestiondown}" },
      \u00C0: { text: "{\\`A}" },
      \u00C1: { text: "{\\'A}" },
      \u00C2: { text: "{\\^A}" },
      \u00C3: { text: "{\\~A}" },
      \u00C4: { text: '{\\"A}' },
      \u00C5: { text: "{\\AA}" },
      \u00C6: { text: "{\\AE}" },
      \u00C7: { text: "{\\c C}" },
      \u00C8: { text: "{\\`E}" },
      \u00C9: { text: "{\\'E}" },
      \u00CA: { text: "{\\^E}" },
      \u00CB: { text: '{\\"E}' },
      \u00CC: { text: "{\\`I}" },
      \u00CD: { text: "{\\'I}" },
      \u00CE: { text: "{\\^I}" },
      \u00CF: { text: '{\\"I}' },
      \u00D0: { text: "{\\DH}" },
      \u00D1: { text: "{\\~N}" },
      \u00D2: { text: "{\\`O}" },
      \u00D3: { text: "{\\'O}" },
      \u00D4: { text: "{\\^O}" },
      \u00D5: { text: "{\\~O}" },
      \u00D6: { text: '{\\"O}' },
      "\xD7": { math: "\\times", text: "{\\texttimes}" },
      \u00D8: { text: "{\\O}" },
      \u00D9: { text: "{\\`U}" },
      \u00DA: { text: "{\\'U}" },
      \u00DB: { text: "{\\^U}" },
      \u00DC: { text: '{\\"U}' },
      \u00DD: { text: "{\\'Y}" },
      \u00DE: { text: "{\\TH}" },
      \u00DF: { text: "{\\ss}" },
      \u00E0: { text: "{\\`a}" },
      \u00E1: { text: "{\\'a}" },
      \u00E2: { text: "{\\^a}" },
      \u00E3: { text: "{\\~a}" },
      \u00E4: { text: '{\\"a}' },
      \u00E5: { text: "{\\aa}" },
      \u00E6: { text: "{\\ae}" },
      \u00E7: { text: "{\\c c}" },
      \u00E8: { text: "{\\`e}" },
      \u00E9: { text: "{\\'e}" },
      \u00EA: { text: "{\\^e}" },
      \u00EB: { text: '{\\"e}' },
      \u00EC: { text: "{\\`i}" },
      \u00ED: { text: "{\\'i}" },
      \u00EE: { text: "{\\^i}" },
      \u00EF: { text: '{\\"i}' },
      \u00F0: { math: "\\eth", mathpackages: ["amssymb", "arevmath"], text: "{\\dh}" },
      \u00F1: { text: "{\\~n}" },
      \u00F2: { text: "{\\`o}" },
      \u00F3: { text: "{\\'o}" },
      \u00F4: { text: "{\\^o}" },
      \u00F5: { text: "{\\~o}" },
      \u00F6: { text: '{\\"o}' },
      "\xF7": { math: "\\div" },
      \u00F8: { text: "{\\o}" },
      \u00F9: { text: "{\\`u}" },
      \u00FA: { text: "{\\'u}" },
      \u00FB: { text: "{\\^u}" },
      \u00FC: { text: '{\\"u}' },
      \u00FD: { text: "{\\'y}" },
      \u00FE: { text: "{\\th}" },
      \u00FF: { text: '{\\"y}' },
      \u0100: { text: "{\\=A}" },
      \u0101: { text: "{\\=a}" },
      \u0102: { text: "{\\u A}" },
      \u0103: { text: "{\\u a}" },
      \u0104: { text: "{\\k{A}}" },
      \u0105: { text: "{\\k{a}}" },
      \u0106: { text: "{\\'C}" },
      \u0107: { text: "{\\'c}" },
      \u0108: { text: "{\\^C}" },
      \u0109: { text: "{\\^c}" },
      \u010A: { text: "{\\.C}" },
      \u010B: { text: "{\\.c}" },
      \u010C: { text: "{\\v C}" },
      \u010D: { text: "{\\v c}" },
      \u010E: { text: "{\\v D}" },
      \u010F: { text: "{\\v d}" },
      \u0110: { text: "{\\DJ}" },
      \u0111: { text: "{\\dj}" },
      \u0112: { text: "{\\=E}" },
      \u0113: { text: "{\\=e}" },
      \u0114: { text: "{\\u E}" },
      \u0115: { text: "{\\u e}" },
      \u0116: { text: "{\\.E}" },
      \u0117: { text: "{\\.e}" },
      \u0118: { text: "{\\k{E}}" },
      \u0119: { text: "{\\k{e}}" },
      \u011A: { text: "{\\v E}" },
      \u011B: { text: "{\\v e}" },
      \u011C: { text: "{\\^G}" },
      \u011D: { text: "{\\^g}" },
      \u011E: { text: "{\\u G}" },
      \u011F: { text: "{\\u g}" },
      \u0120: { text: "{\\.G}" },
      \u0121: { text: "{\\.g}" },
      \u0122: { text: "{\\c G}" },
      \u0123: { text: "{\\c g}" },
      \u0124: { text: "{\\^H}" },
      \u0125: { text: "{\\^h}" },
      \u0126: { text: "{\\fontencoding{LELA}\\selectfont\\char40}" },
      \u0127: { math: "\\Elzxh" },
      \u0128: { text: "{\\~I}" },
      \u0129: { text: "{\\~i}" },
      \u012A: { text: "{\\=I}" },
      \u012B: { text: "{\\=i}" },
      \u012C: { text: "{\\u I}" },
      \u012D: { text: "{\\u \\i}" },
      \u012E: { text: "{\\k{I}}" },
      \u012F: { text: "{\\k{i}}" },
      \u0130: { text: "{\\.I}" },
      \u0131: { math: "\\imath", text: "{\\i}" },
      \u0132: { text: "IJ" },
      \u0133: { text: "ij" },
      \u0134: { text: "{\\^J}" },
      \u0135: { text: "{\\^\\j}" },
      \u0136: { text: "{\\c K}" },
      \u0137: { text: "{\\c k}" },
      \u0138: { text: "{\\fontencoding{LELA}\\selectfont\\char91}" },
      \u0139: { text: "{\\'L}" },
      \u013A: { text: "{\\'l}" },
      \u013B: { text: "{\\c L}" },
      \u013C: { text: "{\\c l}" },
      \u013D: { text: "{\\v L}" },
      \u013E: { text: "{\\v l}" },
      \u013F: { text: "{\\fontencoding{LELA}\\selectfont\\char201}" },
      \u0140: { text: "{\\fontencoding{LELA}\\selectfont\\char202}" },
      \u0141: { text: "{\\L}" },
      \u0142: { text: "{\\l}" },
      \u0143: { text: "{\\'N}" },
      \u0144: { text: "{\\'n}" },
      \u0145: { text: "{\\c N}" },
      \u0146: { text: "{\\c n}" },
      \u0147: { text: "{\\v N}" },
      \u0148: { text: "{\\v n}" },
      \u0149: { text: "'n" },
      \u014A: { text: "{\\NG}" },
      \u014B: { text: "{\\ng}" },
      \u014C: { text: "{\\=O}" },
      \u014D: { text: "{\\=o}" },
      \u014E: { text: "{\\u O}" },
      \u014F: { text: "{\\u o}" },
      \u0150: { text: "{\\H O}" },
      \u0151: { text: "{\\H o}" },
      \u0152: { text: "{\\OE}" },
      \u0153: { text: "{\\oe}" },
      \u0154: { text: "{\\'R}" },
      \u0155: { text: "{\\'r}" },
      \u0156: { text: "{\\c R}" },
      \u0157: { text: "{\\c r}" },
      \u0158: { text: "{\\v R}" },
      \u0159: { text: "{\\v r}" },
      \u015A: { text: "{\\'S}" },
      \u015B: { text: "{\\'s}" },
      \u015C: { text: "{\\^S}" },
      \u015D: { text: "{\\^s}" },
      \u015E: { text: "{\\c S}" },
      \u015F: { text: "{\\c s}" },
      \u0160: { text: "{\\v S}" },
      \u0161: { text: "{\\v s}" },
      \u0162: { text: "{\\c T}" },
      \u0163: { text: "{\\c t}" },
      \u0164: { text: "{\\v T}" },
      \u0165: { text: "{\\v t}" },
      \u0166: { text: "{\\fontencoding{LELA}\\selectfont\\char47}" },
      \u0167: { text: "{\\fontencoding{LELA}\\selectfont\\char63}" },
      \u0168: { text: "{\\~U}" },
      \u0169: { text: "{\\~u}" },
      \u016A: { text: "{\\=U}" },
      \u016B: { text: "{\\=u}" },
      \u016C: { text: "{\\u U}" },
      \u016D: { text: "{\\u u}" },
      \u016E: { text: "{\\r{U}}" },
      \u016F: { text: "{\\r{u}}" },
      \u0170: { text: "{\\H U}" },
      \u0171: { text: "{\\H u}" },
      \u0172: { text: "{\\k{U}}" },
      \u0173: { text: "{\\k{u}}" },
      \u0174: { text: "{\\^W}" },
      \u0175: { text: "{\\^w}" },
      \u0176: { text: "{\\^Y}" },
      \u0177: { text: "{\\^y}" },
      \u0178: { text: '{\\"Y}' },
      \u0179: { text: "{\\'Z}" },
      \u017A: { text: "{\\'z}" },
      \u017B: { text: "{\\.Z}" },
      \u017C: { text: "{\\.z}" },
      \u017D: { text: "{\\v Z}" },
      \u017E: { text: "{\\v z}" },
      \u017F: { text: "s" },
      \u0192: { math: "f" },
      \u0195: { text: "{\\texthvlig}" },
      \u019E: { text: "{\\textnrleg}" },
      \u01AA: { text: "{\\textesh}" },
      \u01B5: { math: "\\Zbar" },
      \u01BA: { text: "{\\fontencoding{LELA}\\selectfont\\char195}" },
      \u01C2: { text: "{\\textdoublepipe}" },
      \u01CD: { text: "{\\v A}" },
      \u01CE: { text: "{\\v a}" },
      \u01CF: { text: "{\\v I}" },
      \u01D0: { text: "{\\v i}" },
      \u01D1: { text: "{\\v O}" },
      \u01D2: { text: "{\\v o}" },
      \u01D3: { text: "{\\v U}" },
      \u01D4: { text: "{\\v u}" },
      \u01E6: { text: "{\\v G}" },
      \u01E7: { text: "{\\v g}" },
      \u01E8: { text: "{\\v K}" },
      \u01E9: { text: "{\\v k}" },
      \u01EA: { text: "{\\k{O}}" },
      \u01EB: { text: "{\\k{o}}" },
      \u01F0: { text: "{\\v j}" },
      \u01F4: { text: "{\\'G}" },
      \u01F5: { text: "{\\'g}" },
      \u0228: { text: "{\\c E}" },
      \u0229: { text: "{\\c e}" },
      "\u0237": { math: "\\jmath" },
      \u0250: { math: "\\Elztrna" },
      \u0252: { math: "\\Elztrnsa" },
      \u0254: { math: "\\Elzopeno" },
      \u0256: { math: "\\Elzrtld" },
      \u0258: { text: "{\\fontencoding{LEIP}\\selectfont\\char61}" },
      \u0259: { math: "\\Elzschwa" },
      \u025B: { math: "\\varepsilon" },
      \u0261: { text: "g" },
      \u0263: { math: "\\Elzpgamma" },
      \u0264: { math: "\\Elzpbgam" },
      \u0265: { math: "\\Elztrnh" },
      \u026C: { math: "\\Elzbtdl" },
      \u026D: { math: "\\Elzrtll" },
      \u026F: { math: "\\Elztrnm" },
      \u0270: { math: "\\Elztrnmlr" },
      \u0271: { math: "\\Elzltlmr" },
      \u0272: { text: "{\\Elzltln}" },
      \u0273: { math: "\\Elzrtln" },
      \u0277: { math: "\\Elzclomeg" },
      \u0278: { text: "{\\textphi}" },
      \u0279: { math: "\\Elztrnr" },
      \u027A: { math: "\\Elztrnrl" },
      \u027B: { math: "\\Elzrttrnr" },
      \u027C: { math: "\\Elzrl" },
      \u027D: { math: "\\Elzrtlr" },
      \u027E: { math: "\\Elzfhr" },
      \u027F: { text: "{\\fontencoding{LEIP}\\selectfont\\char202}" },
      \u0282: { math: "\\Elzrtls" },
      \u0283: { math: "\\Elzesh" },
      \u0287: { math: "\\Elztrnt" },
      \u0288: { math: "\\Elzrtlt" },
      \u028A: { math: "\\Elzpupsil" },
      \u028B: { math: "\\Elzpscrv" },
      \u028C: { math: "\\Elzinvv" },
      \u028D: { math: "\\Elzinvw" },
      \u028E: { math: "\\Elztrny" },
      \u0290: { math: "\\Elzrtlz" },
      \u0292: { math: "\\Elzyogh" },
      \u0294: { math: "\\Elzglst" },
      \u0295: { math: "\\Elzreglst" },
      \u0296: { math: "\\Elzinglst" },
      \u029E: { text: "{\\textturnk}" },
      \u02A4: { math: "\\Elzdyogh" },
      \u02A7: { math: "\\Elztesh" },
      \u02B0: { math: "^{h}", text: "\\textsuperscript{h}" },
      \u02B2: { math: "^{j}", text: "\\textsuperscript{j}" },
      \u02B3: { math: "^{r}", text: "\\textsuperscript{r}" },
      \u02B7: { math: "^{w}", text: "\\textsuperscript{w}" },
      \u02B8: { math: "^{y}", text: "\\textsuperscript{y}" },
      "\u02B9": { text: "'" },
      \u02BB: { text: "'" },
      \u02BC: { text: "'" },
      \u02BD: { text: "'" },
      \u02BF: { text: "{\\lasp}", textpackages: ["mathscinet"] },
      "\u02C6": { text: "{\\textasciicircum}" },
      "\u02C7": { text: "{\\textasciicaron}" },
      "\u02C8": { math: "\\Elzverts" },
      "\u02C9": { text: "-" },
      "\u02CC": { math: "\\Elzverti" },
      \u02D0: { math: "\\Elzlmrk" },
      \u02D1: { math: "\\Elzhlmrk" },
      "\u02D2": { math: "\\Elzsbrhr" },
      "\u02D3": { math: "\\Elzsblhr" },
      "\u02D4": { math: "\\Elzrais" },
      "\u02D5": { math: "\\Elzlow" },
      "\u02D8": { text: "{\\textasciibreve}" },
      "\u02D9": { text: "{\\textperiodcentered}", textpackages: ["textcomp"] },
      "\u02DA": { text: "{\\r{}}" },
      "\u02DB": { text: "{\\k{}}" },
      "\u02DC": { text: "{\\texttildelow}" },
      "\u02DD": { text: "{\\H{}}" },
      \u02E1: { math: "^{l}", text: "\\textsuperscript{l}" },
      \u02E2: { math: "^{s}", text: "\\textsuperscript{s}" },
      \u02E3: { math: "^{x}", text: "\\textsuperscript{x}" },
      "\u02E5": { text: "\\tone{55}" },
      "\u02E6": { text: "\\tone{44}" },
      "\u02E7": { text: "\\tone{33}" },
      "\u02E8": { text: "\\tone{22}" },
      "\u02E9": { text: "\\tone{11}" },
      "\u0300": { math: "\\grave", combiningdiacritic: true, text: "\\`" },
      "\u0300\u0304": { text: "{\\textgravemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0300": { text: "{\\textgravemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0300\u0307": { text: "{\\textgravedot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0300": { text: "{\\textgravedot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301": { math: "\\acute", combiningdiacritic: true, text: "\\'" },
      "\u0301\u0304": { text: "{\\textacutemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0301": { text: "{\\textacutemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301\u030C": { text: "{\\textacutewedge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030C\u0301": { text: "{\\textacutewedge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0302": { math: "\\hat", combiningdiacritic: true, text: "\\^" },
      "\u0302\u0307": { text: "{\\textcircumdot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0302": { text: "{\\textcircumdot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0303": { math: "\\tilde", combiningdiacritic: true, text: "\\~" },
      "\u0303\u0307": { text: "{\\texttildedot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0303": { text: "{\\texttildedot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304": { math: "\\bar", combiningdiacritic: true, text: "\\=" },
      "\u0305": { math: "\\overline", combiningdiacritic: true },
      "\u0306": { math: "\\breve", combiningdiacritic: true, text: "{\\u}" },
      "\u0306\u0304": { text: "{\\textbrevemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0306": { text: "{\\textbrevemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307": { math: "\\dot", combiningdiacritic: true, text: "\\." },
      "\u0307\u0301": { text: "{\\textdotacute}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301\u0307": { text: "{\\textdotacute}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0306": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0306\u0307": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0308": { math: "\\ddot", combiningdiacritic: true, text: '\\"' },
      "\u0309": { math: "\\ovhook" },
      "\u030A": { math: "\\mathring", combiningdiacritic: true, text: "{\\r}" },
      "\u030A\u0304": { text: "{\\textringmacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u030A": { text: "{\\textringmacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030B": { text: "{\\H}", combiningdiacritic: true },
      "\u030C": { math: "\\check", text: "{\\v}", combiningdiacritic: true },
      "\u030D": { text: "{\\textvbaraccent}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030E": { text: "{\\textdoublevbaraccent}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030F": { text: "{\\textdoublegrave}", combiningdiacritic: true },
      "\u0310": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0311": { text: "{\\fontencoding{LECO}\\selectfont\\char177}" },
      "\u0312": { math: "\\oturnedcomma" },
      "\u0315": { math: "\\ocommatopright" },
      "\u0316": { text: "{\\textsubgrave}", combiningdiacritic: true },
      "\u0318": { text: "{\\textadvancing}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0319": { text: "{\\textretracting}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031A": { math: "\\droang", text: "{\\textcorner}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031C": { text: "{\\textsublhalfring}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031D": { text: "{\\textraising}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031E": { text: "{\\textlowering}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031F": { text: "{\\textsubplus}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0321": { math: "\\Elzpalh" },
      "\u0322": { text: "{\\Elzrh}" },
      "\u0323": { text: "{\\d}", combiningdiacritic: true },
      "\u0324": { text: "{\\textsubumlaut}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0325": { text: "{\\textsubring}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0327": { text: "{\\c}", combiningdiacritic: true },
      "\u0328": { text: "{\\k}", combiningdiacritic: true },
      "\u0329": { text: "{\\textsyllabic}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032A": { math: "\\Elzsbbrg", text: "{\\textsubbridge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032B": { text: "{\\fontencoding{LECO}\\selectfont\\char203}" },
      "\u032C": { text: "{\\textsubwedge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032F": { text: "{\\textsubarch}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0330": { math: "\\utilde", text: "{\\textsubtilde}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0331": { math: "\\underbar", combiningdiacritic: true, text: "{\\textsubbar}", textpackages: ["tipa"] },
      "\u0332": { math: "\\underline" },
      "\u0334": { text: "{\\textsuperimposetilde}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0335": { text: "{\\Elzxl}" },
      "\u0336": { text: "{\\Elzbar}" },
      "\u0337": { text: "{\\fontencoding{LECO}\\selectfont\\char215}" },
      "\u0338": { math: "\\not" },
      "\u0339": { text: "{\\textsubrhalfring}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033A": { text: "{\\textinvsubbridge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033B": { text: "{\\textsubsquare}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033C": { text: "{\\textseagull}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033D": { text: "{\\textovercross}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0361": { text: "{\\fontencoding{LECO}\\selectfont\\char225}" },
      "\u0374": { text: "'" },
      "\u0375": { text: "," },
      "\u037E": { text: ";" },
      \u0386: { text: "{\\'A}" },
      \u0388: { text: "{\\'E}" },
      \u0389: { text: "{\\'H}" },
      \u038A: { text: "{\\'{}I}" },
      \u038C: { text: "{\\'{}O}" },
      \u038E: { math: "\\mathrm{'Y}" },
      \u038F: { math: "\\mathrm{'\\Omega}" },
      \u0390: { math: "\\acute{\\ddot{\\iota}}" },
      \u0391: { math: "A" },
      \u0392: { math: "B" },
      \u0393: { math: "\\Gamma" },
      \u0394: { math: "\\Delta" },
      \u0395: { math: "E" },
      \u0396: { math: "Z" },
      \u0397: { math: "H" },
      \u0398: { math: "\\Theta" },
      \u0399: { math: "I" },
      \u039A: { math: "K" },
      \u039B: { math: "\\Lambda" },
      \u039C: { math: "M" },
      \u039D: { math: "N" },
      \u039E: { math: "\\Xi" },
      \u039F: { math: "O" },
      \u03A0: { math: "\\Pi" },
      \u03A1: { math: "P" },
      \u03A3: { math: "\\Sigma" },
      \u03A4: { math: "T" },
      \u03A5: { math: "\\Upsilon" },
      \u03A6: { math: "\\Phi" },
      \u03A7: { math: "X" },
      \u03A8: { math: "\\Psi" },
      \u03A9: { math: "\\Omega" },
      \u03AA: { math: "\\mathrm{\\ddot{I}}" },
      \u03AB: { math: "\\mathrm{\\ddot{Y}}" },
      \u03AC: { text: "{\\'$\\alpha$}" },
      \u03AD: { math: "\\acute{\\epsilon}" },
      \u03AE: { math: "\\acute{\\eta}" },
      \u03AF: { math: "\\acute{\\iota}" },
      \u03B0: { math: "\\acute{\\ddot{\\upsilon}}" },
      \u03B1: { math: "\\alpha" },
      \u03B2: { math: "\\beta" },
      \u03B3: { math: "\\gamma" },
      \u03B4: { math: "\\delta" },
      \u03B5: { math: "\\epsilon" },
      \u03B6: { math: "\\zeta" },
      \u03B7: { math: "\\eta" },
      \u03B8: { math: "\\theta", text: "{\\texttheta}" },
      \u03B9: { math: "\\iota" },
      \u03BA: { math: "\\kappa" },
      \u03BB: { math: "\\lambda" },
      \u03BC: { math: "\\mu" },
      \u03BD: { math: "\\nu" },
      \u03BE: { math: "\\xi" },
      \u03BF: { math: "o" },
      \u03C0: { math: "\\pi" },
      \u03C1: { math: "\\rho" },
      \u03C2: { math: "\\varsigma" },
      \u03C3: { math: "\\sigma" },
      \u03C4: { math: "\\tau" },
      \u03C5: { math: "\\upsilon" },
      \u03C6: { math: "\\varphi" },
      \u03C7: { math: "\\chi" },
      \u03C8: { math: "\\psi" },
      \u03C9: { math: "\\omega" },
      \u03CA: { math: "\\ddot{\\iota}" },
      \u03CB: { math: "\\ddot{\\upsilon}" },
      \u03CC: { text: "{\\'o}" },
      \u03CD: { math: "\\acute{\\upsilon}" },
      \u03CE: { math: "\\acute{\\omega}" },
      \u03D0: { math: "\\varbeta", text: "\\Pisymbol{ppi022}{87}" },
      \u03D1: { math: "\\vartheta", text: "{\\textvartheta}" },
      \u03D2: { math: "\\Upsilon" },
      \u03D5: { math: "\\phi" },
      \u03D6: { math: "\\varpi" },
      "\u03D8": { math: "\\Qoppa" },
      "\u03D9": { math: "\\qoppa" },
      \u03DA: { math: "\\Stigma" },
      \u03DB: { math: "\\stigma" },
      \u03DC: { math: "\\Digamma" },
      \u03DD: { math: "\\digamma" },
      \u03DE: { math: "\\Koppa" },
      \u03DF: { math: "\\koppa" },
      \u03E0: { math: "\\Sampi" },
      \u03E1: { math: "\\sampi" },
      \u03F0: { math: "\\varkappa" },
      \u03F1: { math: "\\varrho" },
      "\u03F4": { math: "\\upvarTheta", text: "{\\textTheta}" },
      "\u03F5": { math: "\\epsilon" },
      "\u03F6": { math: "\\backepsilon" },
      \u0401: { text: "{\\cyrchar\\CYRYO}" },
      \u0402: { text: "{\\cyrchar\\CYRDJE}" },
      \u0403: { text: "{\\cyrchar{\\'\\CYRG}}" },
      \u0404: { text: "{\\cyrchar\\CYRIE}" },
      \u0405: { text: "{\\cyrchar\\CYRDZE}" },
      \u0406: { text: "{\\cyrchar\\CYRII}" },
      \u0407: { text: "{\\cyrchar\\CYRYI}" },
      \u0408: { text: "{\\cyrchar\\CYRJE}" },
      \u0409: { text: "{\\cyrchar\\CYRLJE}" },
      \u040A: { text: "{\\cyrchar\\CYRNJE}" },
      \u040B: { text: "{\\cyrchar\\CYRTSHE}" },
      \u040C: { text: "{\\cyrchar{\\'\\CYRK}}" },
      \u040E: { text: "{\\cyrchar\\CYRUSHRT}" },
      \u040F: { text: "{\\cyrchar\\CYRDZHE}" },
      \u0410: { text: "{\\cyrchar\\CYRA}" },
      \u0411: { text: "{\\cyrchar\\CYRB}" },
      \u0412: { text: "{\\cyrchar\\CYRV}" },
      \u0413: { text: "{\\cyrchar\\CYRG}" },
      \u0414: { text: "{\\cyrchar\\CYRD}" },
      \u0415: { text: "{\\cyrchar\\CYRE}" },
      \u0416: { text: "{\\cyrchar\\CYRZH}" },
      \u0417: { text: "{\\cyrchar\\CYRZ}" },
      \u0418: { text: "{\\cyrchar\\CYRI}" },
      \u0419: { text: "{\\cyrchar\\CYRISHRT}" },
      \u041A: { text: "{\\cyrchar\\CYRK}" },
      \u041B: { text: "{\\cyrchar\\CYRL}" },
      \u041C: { text: "{\\cyrchar\\CYRM}" },
      \u041D: { text: "{\\cyrchar\\CYRN}" },
      \u041E: { text: "{\\cyrchar\\CYRO}" },
      \u041F: { text: "{\\cyrchar\\CYRP}" },
      \u0420: { text: "{\\cyrchar\\CYRR}" },
      \u0421: { text: "{\\cyrchar\\CYRS}" },
      \u0422: { text: "{\\cyrchar\\CYRT}" },
      \u0423: { text: "{\\cyrchar\\CYRU}" },
      \u0424: { text: "{\\cyrchar\\CYRF}" },
      \u0425: { text: "{\\cyrchar\\CYRH}" },
      \u0426: { text: "{\\cyrchar\\CYRC}" },
      \u0427: { text: "{\\cyrchar\\CYRCH}" },
      \u0428: { text: "{\\cyrchar\\CYRSH}" },
      \u0429: { text: "{\\cyrchar\\CYRSHCH}" },
      \u042A: { text: "{\\cyrchar\\CYRHRDSN}" },
      \u042B: { text: "{\\cyrchar\\CYRERY}" },
      \u042C: { text: "{\\cyrchar\\CYRSFTSN}" },
      \u042D: { text: "{\\cyrchar\\CYREREV}" },
      \u042E: { text: "{\\cyrchar\\CYRYU}" },
      \u042F: { text: "{\\cyrchar\\CYRYA}" },
      \u0430: { text: "{\\cyrchar\\cyra}" },
      \u0431: { text: "{\\cyrchar\\cyrb}" },
      \u0432: { text: "{\\cyrchar\\cyrv}" },
      \u0433: { text: "{\\cyrchar\\cyrg}" },
      \u0434: { text: "{\\cyrchar\\cyrd}" },
      \u0435: { text: "{\\cyrchar\\cyre}" },
      \u0436: { text: "{\\cyrchar\\cyrzh}" },
      \u0437: { text: "{\\cyrchar\\cyrz}" },
      \u0438: { text: "{\\cyrchar\\cyri}" },
      \u0439: { text: "{\\cyrchar\\cyrishrt}" },
      \u043A: { text: "{\\cyrchar\\cyrk}" },
      \u043B: { text: "{\\cyrchar\\cyrl}" },
      \u043C: { text: "{\\cyrchar\\cyrm}" },
      \u043D: { text: "{\\cyrchar\\cyrn}" },
      \u043E: { text: "{\\cyrchar\\cyro}" },
      \u043F: { text: "{\\cyrchar\\cyrp}" },
      \u0440: { text: "{\\cyrchar\\cyrr}" },
      \u0441: { text: "{\\cyrchar\\cyrs}" },
      \u0442: { text: "{\\cyrchar\\cyrt}" },
      \u0443: { text: "{\\cyrchar\\cyru}" },
      \u0444: { text: "{\\cyrchar\\cyrf}" },
      \u0445: { text: "{\\cyrchar\\cyrh}" },
      \u0446: { text: "{\\cyrchar\\cyrc}" },
      \u0447: { text: "{\\cyrchar\\cyrch}" },
      \u0448: { text: "{\\cyrchar\\cyrsh}" },
      \u0449: { text: "{\\cyrchar\\cyrshch}" },
      \u044A: { text: "{\\cyrchar\\cyrhrdsn}" },
      \u044B: { text: "{\\cyrchar\\cyrery}" },
      \u044C: { text: "{\\cyrchar\\cyrsftsn}" },
      \u044D: { text: "{\\cyrchar\\cyrerev}" },
      \u044E: { text: "{\\cyrchar\\cyryu}" },
      \u044F: { text: "{\\cyrchar\\cyrya}" },
      \u0451: { text: "{\\cyrchar\\cyryo}" },
      \u0452: { text: "{\\cyrchar\\cyrdje}" },
      \u0453: { text: "{\\cyrchar{\\'\\cyrg}}" },
      \u0454: { text: "{\\cyrchar\\cyrie}" },
      \u0455: { text: "{\\cyrchar\\cyrdze}" },
      \u0456: { text: "{\\cyrchar\\cyrii}" },
      \u0457: { text: "{\\cyrchar\\cyryi}" },
      \u0458: { text: "{\\cyrchar\\cyrje}" },
      \u0459: { text: "{\\cyrchar\\cyrlje}" },
      \u045A: { text: "{\\cyrchar\\cyrnje}" },
      \u045B: { text: "{\\cyrchar\\cyrtshe}" },
      \u045C: { text: "{\\cyrchar{\\'\\cyrk}}" },
      \u045E: { text: "{\\cyrchar\\cyrushrt}" },
      \u045F: { text: "{\\cyrchar\\cyrdzhe}" },
      \u0460: { text: "{\\cyrchar\\CYROMEGA}" },
      \u0461: { text: "{\\cyrchar\\cyromega}" },
      \u0462: { text: "{\\cyrchar\\CYRYAT}" },
      \u0464: { text: "{\\cyrchar\\CYRIOTE}" },
      \u0465: { text: "{\\cyrchar\\cyriote}" },
      \u0466: { text: "{\\cyrchar\\CYRLYUS}" },
      \u0467: { text: "{\\cyrchar\\cyrlyus}" },
      \u0468: { text: "{\\cyrchar\\CYRIOTLYUS}" },
      \u0469: { text: "{\\cyrchar\\cyriotlyus}" },
      \u046A: { text: "{\\cyrchar\\CYRBYUS}" },
      \u046C: { text: "{\\cyrchar\\CYRIOTBYUS}" },
      \u046D: { text: "{\\cyrchar\\cyriotbyus}" },
      \u046E: { text: "{\\cyrchar\\CYRKSI}" },
      \u046F: { text: "{\\cyrchar\\cyrksi}" },
      \u0470: { text: "{\\cyrchar\\CYRPSI}" },
      \u0471: { text: "{\\cyrchar\\cyrpsi}" },
      \u0472: { text: "{\\cyrchar\\CYRFITA}" },
      \u0474: { text: "{\\cyrchar\\CYRIZH}" },
      \u0478: { text: "{\\cyrchar\\CYRUK}" },
      \u0479: { text: "{\\cyrchar\\cyruk}" },
      \u047A: { text: "{\\cyrchar\\CYROMEGARND}" },
      \u047B: { text: "{\\cyrchar\\cyromegarnd}" },
      \u047C: { text: "{\\cyrchar\\CYROMEGATITLO}" },
      \u047D: { text: "{\\cyrchar\\cyromegatitlo}" },
      \u047E: { text: "{\\cyrchar\\CYROT}" },
      \u047F: { text: "{\\cyrchar\\cyrot}" },
      \u0480: { text: "{\\cyrchar\\CYRKOPPA}" },
      \u0481: { text: "{\\cyrchar\\cyrkoppa}" },
      "\u0482": { text: "{\\cyrchar\\cyrthousands}" },
      "\u0488": { text: "{\\cyrchar\\cyrhundredthousands}" },
      "\u0489": { text: "{\\cyrchar\\cyrmillions}" },
      \u048C: { text: "{\\cyrchar\\CYRSEMISFTSN}" },
      \u048D: { text: "{\\cyrchar\\cyrsemisftsn}" },
      \u048E: { text: "{\\cyrchar\\CYRRTICK}" },
      \u048F: { text: "{\\cyrchar\\cyrrtick}" },
      \u0490: { text: "{\\cyrchar\\CYRGUP}" },
      \u0491: { text: "{\\cyrchar\\cyrgup}" },
      \u0492: { text: "{\\cyrchar\\CYRGHCRS}" },
      \u0493: { text: "{\\cyrchar\\cyrghcrs}" },
      \u0494: { text: "{\\cyrchar\\CYRGHK}" },
      \u0495: { text: "{\\cyrchar\\cyrghk}" },
      \u0496: { text: "{\\cyrchar\\CYRZHDSC}" },
      \u0497: { text: "{\\cyrchar\\cyrzhdsc}" },
      \u0498: { text: "{\\cyrchar\\CYRZDSC}" },
      \u0499: { text: "{\\cyrchar\\cyrzdsc}" },
      \u049A: { text: "{\\cyrchar\\CYRKDSC}" },
      \u049B: { text: "{\\cyrchar\\cyrkdsc}" },
      \u049C: { text: "{\\cyrchar\\CYRKVCRS}" },
      \u049D: { text: "{\\cyrchar\\cyrkvcrs}" },
      \u049E: { text: "{\\cyrchar\\CYRKHCRS}" },
      \u049F: { text: "{\\cyrchar\\cyrkhcrs}" },
      \u04A0: { text: "{\\cyrchar\\CYRKBEAK}" },
      \u04A1: { text: "{\\cyrchar\\cyrkbeak}" },
      \u04A2: { text: "{\\cyrchar\\CYRNDSC}" },
      \u04A3: { text: "{\\cyrchar\\cyrndsc}" },
      \u04A4: { text: "{\\cyrchar\\CYRNG}" },
      \u04A5: { text: "{\\cyrchar\\cyrng}" },
      \u04A6: { text: "{\\cyrchar\\CYRPHK}" },
      \u04A7: { text: "{\\cyrchar\\cyrphk}" },
      \u04A8: { text: "{\\cyrchar\\CYRABHHA}" },
      \u04A9: { text: "{\\cyrchar\\cyrabhha}" },
      \u04AA: { text: "{\\cyrchar\\CYRSDSC}" },
      \u04AB: { text: "{\\cyrchar\\cyrsdsc}" },
      \u04AC: { text: "{\\cyrchar\\CYRTDSC}" },
      \u04AD: { text: "{\\cyrchar\\cyrtdsc}" },
      \u04AE: { text: "{\\cyrchar\\CYRY}" },
      \u04AF: { text: "{\\cyrchar\\cyry}" },
      \u04B0: { text: "{\\cyrchar\\CYRYHCRS}" },
      \u04B1: { text: "{\\cyrchar\\cyryhcrs}" },
      \u04B2: { text: "{\\cyrchar\\CYRHDSC}" },
      \u04B3: { text: "{\\cyrchar\\cyrhdsc}" },
      \u04B4: { text: "{\\cyrchar\\CYRTETSE}" },
      \u04B5: { text: "{\\cyrchar\\cyrtetse}" },
      \u04B6: { text: "{\\cyrchar\\CYRCHRDSC}" },
      \u04B7: { text: "{\\cyrchar\\cyrchrdsc}" },
      \u04B8: { text: "{\\cyrchar\\CYRCHVCRS}" },
      \u04B9: { text: "{\\cyrchar\\cyrchvcrs}" },
      \u04BA: { text: "{\\cyrchar\\CYRSHHA}" },
      \u04BB: { text: "{\\cyrchar\\cyrshha}" },
      \u04BC: { text: "{\\cyrchar\\CYRABHCH}" },
      \u04BD: { text: "{\\cyrchar\\cyrabhch}" },
      \u04BE: { text: "{\\cyrchar\\CYRABHCHDSC}" },
      \u04BF: { text: "{\\cyrchar\\cyrabhchdsc}" },
      \u04C0: { text: "{\\cyrchar\\CYRpalochka}" },
      \u04C3: { text: "{\\cyrchar\\CYRKHK}" },
      \u04C4: { text: "{\\cyrchar\\cyrkhk}" },
      \u04C7: { text: "{\\cyrchar\\CYRNHK}" },
      \u04C8: { text: "{\\cyrchar\\cyrnhk}" },
      \u04CB: { text: "{\\cyrchar\\CYRCHLDSC}" },
      \u04CC: { text: "{\\cyrchar\\cyrchldsc}" },
      \u04D4: { text: "{\\cyrchar\\CYRAE}" },
      \u04D5: { text: "{\\cyrchar\\cyrae}" },
      \u04D8: { text: "{\\cyrchar\\CYRSCHWA}" },
      \u04D9: { text: "{\\cyrchar\\cyrschwa}" },
      \u04E0: { text: "{\\cyrchar\\CYRABHDZE}" },
      \u04E1: { text: "{\\cyrchar\\cyrabhdze}" },
      \u04E8: { text: "{\\cyrchar\\CYROTLD}" },
      \u04E9: { text: "{\\cyrchar\\cyrotld}" },
      "\u0871": { math: "\\\\backslash" },
      "\u1D43": { math: "^{a}", text: "\\textsuperscript{a}" },
      "\u1D47": { math: "^{b}", text: "\\textsuperscript{b}" },
      "\u1D48": { math: "^{d}", text: "\\textsuperscript{d}" },
      "\u1D49": { math: "^{e}", text: "\\textsuperscript{e}" },
      "\u1D4D": { math: "^{g}", text: "\\textsuperscript{g}" },
      "\u1D4F": { math: "^{k}", text: "\\textsuperscript{k}" },
      "\u1D50": { math: "^{m}", text: "\\textsuperscript{m}" },
      "\u1D52": { math: "^{o}", text: "\\textsuperscript{o}" },
      "\u1D56": { math: "^{p}", text: "\\textsuperscript{p}" },
      "\u1D57": { math: "^{t}", text: "\\textsuperscript{t}" },
      "\u1D58": { math: "^{u}", text: "\\textsuperscript{u}" },
      "\u1D5B": { math: "^{v}", text: "\\textsuperscript{v}" },
      "\u1D9C": { math: "^{c}", text: "\\textsuperscript{c}" },
      "\u1DA0": { math: "^{f}", text: "\\textsuperscript{f}" },
      "\u1DBB": { math: "^{z}", text: "\\textsuperscript{z}" },
      \u1E02: { text: "{\\.B}" },
      \u1E03: { text: "{\\.b}" },
      \u1E04: { text: "{\\d B}" },
      \u1E05: { text: "{\\d b}" },
      \u1E06: { text: "{\\b B}" },
      \u1E07: { text: "{\\b b}" },
      \u1E0A: { text: "{\\.D}" },
      \u1E0B: { text: "{\\.d}" },
      \u1E0C: { text: "{\\d D}" },
      \u1E0D: { text: "{\\d d}" },
      \u1E0E: { text: "{\\b D}" },
      \u1E0F: { text: "{\\b d}" },
      \u1E10: { text: "{\\c D}" },
      \u1E11: { text: "{\\c d}" },
      \u1E1C: { text: "{\\c{\\u{E}}}" },
      \u1E1D: { text: "{\\c{\\u{e}}}" },
      \u1E1E: { text: "{\\.F}" },
      \u1E1F: { text: "{\\.f}" },
      \u1E20: { text: "{\\=G}" },
      \u1E21: { text: "{\\=g}" },
      \u1E22: { text: "{\\.H}" },
      \u1E23: { text: "{\\.h}" },
      \u1E24: { text: "{\\d H}" },
      \u1E25: { text: "{\\d h}" },
      \u1E26: { text: '{\\"H}' },
      \u1E27: { text: '{\\"h}' },
      \u1E28: { text: "{\\c H}" },
      \u1E29: { text: "{\\c h}" },
      \u1E30: { text: "{\\'K}" },
      \u1E31: { text: "{\\'k}" },
      \u1E32: { text: "{\\d K}" },
      \u1E33: { text: "{\\d k}" },
      \u1E34: { text: "{\\b K}" },
      \u1E35: { text: "{\\b k}" },
      \u1E36: { text: "{\\d L}" },
      \u1E37: { text: "{\\d l}" },
      \u1E3A: { text: "{\\b L}" },
      \u1E3B: { text: "{\\b l}" },
      \u1E3E: { text: "{\\'M}" },
      \u1E3F: { text: "{\\'m}" },
      \u1E40: { text: "{\\.M}" },
      \u1E41: { text: "{\\.m}" },
      \u1E42: { text: "{\\d M}" },
      \u1E43: { text: "{\\d m}" },
      \u1E44: { text: "{\\.N}" },
      \u1E45: { text: "{\\.n}" },
      \u1E46: { text: "{\\d N}" },
      \u1E47: { text: "{\\d n}" },
      \u1E48: { text: "{\\b N}" },
      \u1E49: { text: "{\\b n}" },
      \u1E54: { text: "{\\'P}" },
      \u1E55: { text: "{\\'p}" },
      \u1E56: { text: "{\\.P}" },
      \u1E57: { text: "{\\.p}" },
      \u1E58: { text: "{\\.R}" },
      \u1E59: { text: "{\\.r}" },
      \u1E5A: { text: "{\\d R}" },
      \u1E5B: { text: "{\\d r}" },
      \u1E5E: { text: "{\\b R}" },
      \u1E5F: { text: "{\\b r}" },
      \u1E60: { text: "{\\.S}" },
      \u1E61: { text: "{\\.s}" },
      \u1E62: { text: "{\\d S}" },
      \u1E63: { text: "{\\d s}" },
      \u1E6A: { text: "{\\.T}" },
      \u1E6B: { text: "{\\.t}" },
      \u1E6C: { text: "{\\d T}" },
      \u1E6D: { text: "{\\d t}" },
      \u1E6E: { text: "{\\b T}" },
      \u1E6F: { text: "{\\b t}" },
      \u1E7C: { text: "{\\~V}" },
      \u1E7D: { text: "{\\~v}" },
      \u1E7E: { text: "{\\d V}" },
      \u1E7F: { text: "{\\d v}" },
      \u1E80: { text: "{\\`W}" },
      \u1E81: { text: "{\\`w}" },
      \u1E82: { text: "{\\'W}" },
      \u1E83: { text: "{\\'w}" },
      \u1E84: { text: '{\\"W}' },
      \u1E85: { text: '{\\"w}' },
      \u1E86: { text: "{\\.W}" },
      \u1E87: { text: "{\\.w}" },
      \u1E88: { text: "{\\d W}" },
      \u1E89: { text: "{\\d w}" },
      \u1E8A: { text: "{\\.X}" },
      \u1E8B: { text: "{\\.x}" },
      \u1E8C: { text: '{\\"X}' },
      \u1E8D: { text: '{\\"x}' },
      \u1E8E: { text: "{\\.Y}" },
      \u1E8F: { text: "{\\.y}" },
      \u1E90: { text: "{\\^Z}" },
      \u1E91: { text: "{\\^z}" },
      \u1E92: { text: "{\\d Z}" },
      \u1E93: { text: "{\\d z}" },
      \u1E94: { text: "{\\b Z}" },
      \u1E95: { text: "{\\b z}" },
      \u1E96: { text: "{\\b h}" },
      \u1E97: { text: '{\\"t}' },
      \u1E98: { text: "{\\r{w}}" },
      \u1E99: { text: "{\\r{y}}" },
      \u1EA0: { text: "{\\d A}" },
      \u1EA1: { text: "{\\d a}" },
      \u1EB8: { text: "{\\d E}" },
      \u1EB9: { text: "{\\d e}" },
      \u1EBC: { text: "{\\~E}" },
      \u1EBD: { text: "{\\~e}" },
      \u1ECA: { text: "{\\d I}" },
      \u1ECB: { text: "{\\d i}" },
      \u1ECC: { text: "{\\d O}" },
      \u1ECD: { text: "{\\d o}" },
      \u1EE4: { text: "{\\d U}" },
      \u1EE5: { text: "{\\d u}" },
      \u1EF2: { text: "{\\`Y}" },
      \u1EF3: { text: "{\\`y}" },
      \u1EF4: { text: "{\\d Y}" },
      \u1EF5: { text: "{\\d y}" },
      \u1EF8: { text: "{\\~Y}" },
      \u1EF9: { text: "{\\~y}" },
      "\u2000": { text: "\\hspace{0.6em}", space: true },
      "\u2001": { math: "\\quad", space: true },
      "\u2002": { text: "\\hspace{0.6em}", space: true },
      "\u2003": { math: "\\quad", space: true },
      "\u2004": { text: "\\;", space: true },
      "\u2005": { text: "\\hspace{0.25em}", space: true },
      "\u2006": { text: "\\hspace{0.166em}", space: true },
      "\u2007": { text: "\\hphantom{0}", space: true },
      "\u2008": { text: "\\hphantom{,}", space: true },
      "\u2009": { text: "\\,", space: true },
      "\u200A": { math: "\\mkern1mu", space: true },
      "\u200B": { text: "\\hspace{0pt}", space: true },
      "\u200C": { text: "{\\aftergroup\\ignorespaces}" },
      "\u2010": { text: "-" },
      "\u2011": { text: "-" },
      "\u2012": { text: "-" },
      "\u2013": { text: "{\\textendash}" },
      "\u2014": { text: "{\\textemdash}" },
      "\u2015": { math: "\\horizbar", text: "\\rule{1em}{1pt}" },
      "\u2016": { math: "\\Vert" },
      "\u2017": { math: "\\twolowline" },
      "\u2018": { text: "`" },
      "\u2019": { text: "'" },
      "\u201A": { text: "," },
      "\u201B": { math: "\\Elzreapos" },
      "\u201C": { text: "``" },
      "\u201D": { text: "''" },
      "\u201E": { text: ",," },
      "\u201F": { text: "{\\quotedblbase}" },
      "\u2020": { math: "\\dagger", text: "{\\textdagger}", textpackages: ["textcomp"] },
      "\u2021": { math: "\\ddagger", text: "{\\textdaggerdbl}", textpackages: ["textcomp"] },
      "\u2022": { math: "\\bullet", text: "{\\textbullet}", textpackages: ["textcomp"] },
      "\u2023": { text: ">" },
      "\u2024": { text: "." },
      "\u2025": { math: "\\enleadertwodots", text: ".." },
      "\u2026": { math: "\\ldots", text: "{\\ldots}" },
      "\u2027": { text: "-" },
      "\u202F": { text: "\\,", space: true },
      "\u2030": { text: "{\\textperthousand}", textpackages: ["textcomp"] },
      "\u2031": { text: "{\\textpertenthousand}", textpackages: ["textcomp"] },
      "\u2032": { math: "{'}" },
      "\u2033": { math: "{''}" },
      "\u2034": { math: "{'''}" },
      "\u2035": { math: "\\backprime" },
      "\u2036": { math: "\\backdprime" },
      "\u2037": { math: "\\backtrprime" },
      "\u2038": { math: "\\caretinsert" },
      "\u2039": { text: "{\\guilsinglleft}" },
      "\u203A": { text: "{\\guilsinglright}" },
      "\u203C": { math: "\\Exclam" },
      "\u203E": { text: "-" },
      "\u2043": { math: "\\hyphenbullet" },
      "\u2044": { math: "\\fracslash" },
      "\u2047": { math: "\\Question" },
      "\u2048": { text: "?!" },
      "\u2049": { text: "!?" },
      "\u204A": { text: "7" },
      "\u2050": { math: "\\closure" },
      "\u2057": { math: "''''" },
      "\u205F": { math: "\\:", space: true, text: "\\:" },
      "\u2060": { text: "{\\nolinebreak}" },
      "\u2070": { math: "^{0}" },
      "\u2071": { math: "^{i}", text: "\\textsuperscript{i}" },
      "\u2074": { math: "^{4}" },
      "\u2075": { math: "^{5}" },
      "\u2076": { math: "^{6}" },
      "\u2077": { math: "^{7}" },
      "\u2078": { math: "^{8}" },
      "\u2079": { math: "^{9}" },
      "\u207A": { math: "^{+}" },
      "\u207B": { math: "^{-}" },
      "\u207C": { math: "^{=}" },
      "\u207D": { math: "^{(}" },
      "\u207E": { math: "^{)}" },
      \u207F: { math: "^{n}", text: "\\textsuperscript{n}" },
      "\u2080": { math: "_{0}" },
      "\u2081": { math: "_{1}" },
      "\u2082": { math: "_{2}" },
      "\u2083": { math: "_{3}" },
      "\u2084": { math: "_{4}" },
      "\u2085": { math: "_{5}" },
      "\u2086": { math: "_{6}" },
      "\u2087": { math: "_{7}" },
      "\u2088": { math: "_{8}" },
      "\u2089": { math: "_{9}" },
      "\u208A": { math: "_{+}" },
      "\u208B": { math: "_{-}" },
      "\u208C": { math: "_{=}" },
      "\u208D": { math: "_{(}" },
      "\u208E": { math: "_{)}" },
      "\u2090": { math: "_{a}", text: "\\textsubscript{a}" },
      "\u2091": { math: "_{e}", text: "\\textsubscript{e}" },
      "\u2092": { math: "_{o}", text: "\\textsubscript{o}" },
      "\u2093": { math: "_{x}", text: "\\textsubscript{x}" },
      "\u2094": { text: "\\textsubscript{\\textschwa}", textpackages: ["tipa"] },
      "\u2095": { math: "_{h}", text: "\\textsubscript{h}" },
      "\u2096": { math: "_{k}", text: "\\textsubscript{k}" },
      "\u2097": { math: "_{l}", text: "\\textsubscript{l}" },
      "\u2098": { math: "_{m}", text: "\\textsubscript{m}" },
      "\u2099": { math: "_{n}", text: "\\textsubscript{n}" },
      "\u209A": { math: "_{p}", text: "\\textsubscript{p}" },
      "\u209B": { math: "_{s}", text: "\\textsubscript{s}" },
      "\u209C": { math: "_{t}", text: "\\textsubscript{t}" },
      "\u20A7": { text: "\\ensuremath{\\Elzpes}" },
      "\u20AC": { math: "\\euro", text: "{\\texteuro}" },
      "\u20D0": { math: "\\lvec" },
      "\u20D1": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
      "\u20D2": { math: "\\vertoverlay" },
      "\u20D6": { math: "\\LVec" },
      "\u20D7": { math: "\\vec" },
      "\u20DB": { math: "\\dddot" },
      "\u20DC": { math: "\\ddddot" },
      "\u20DD": { math: "\\enclosecircle" },
      "\u20DE": { math: "\\enclosesquare" },
      "\u20DF": { math: "\\enclosediamond" },
      "\u20E1": { math: "\\overleftrightarrow" },
      "\u20E4": { math: "\\enclosetriangle" },
      "\u20E7": { math: "\\annuity" },
      "\u20E8": { math: "\\threeunderdot" },
      "\u20E9": { math: "\\widebridgeabove" },
      "\u20EC": { math: "\\underrightharpoondown" },
      "\u20ED": { math: "\\underleftharpoondown" },
      "\u20EE": { math: "\\underleftarrow" },
      "\u20EF": { math: "\\underrightarrow" },
      "\u20F0": { math: "\\asteraccent" },
      "\u2100": { text: "a/c" },
      "\u2101": { text: "a/s" },
      \u2102: { math: "\\mathbb{C}" },
      "\u2103": { text: "{\\textcelsius}" },
      "\u2105": { text: "c/o" },
      "\u2106": { text: "c/u" },
      \u2107: { math: "\\Euler" },
      "\u2109": { text: "F" },
      \u210A: { math: "\\mathscr{g}" },
      \u210B: { math: "\\mathscr{H}" },
      \u210C: { math: "\\mathfrak{H}" },
      \u210D: { math: "\\mathbb{H}" },
      \u210E: { math: "\\Planckconst" },
      \u210F: { math: "\\hslash" },
      \u2110: { math: "\\mathscr{I}" },
      \u2111: { math: "\\mathfrak{I}" },
      \u2112: { math: "\\mathscr{L}" },
      \u2113: { math: "\\mathscr{l}" },
      \u2115: { math: "\\mathbb{N}" },
      "\u2116": { text: "{\\cyrchar\\textnumero}" },
      "\u2117": { text: "{\\textcircledP}" },
      "\u2118": { math: "\\wp" },
      \u2119: { math: "\\mathbb{P}" },
      \u211A: { math: "\\mathbb{Q}" },
      \u211B: { math: "\\mathscr{R}" },
      \u211C: { math: "\\mathfrak{R}" },
      \u211D: { math: "\\mathbb{R}" },
      "\u211E": { math: "\\Elzxrat" },
      "\u2120": { text: "{\\textservicemark}" },
      "\u2121": { text: "TEL" },
      "\u2122": { text: "{\\texttrademark}", textpackages: ["textcomp"] },
      \u2124: { math: "\\mathbb{Z}" },
      \u2126: { math: "\\Omega" },
      "\u2127": { math: "\\mho" },
      \u2128: { math: "\\mathfrak{Z}" },
      "\u2129": { text: "{\\textriota}" },
      \u212A: { text: "K" },
      \u212B: { math: "\\Angstroem", text: "{\\AA}" },
      \u212C: { math: "\\mathscr{B}" },
      \u212D: { math: "\\mathfrak{C}" },
      "\u212E": { text: "{\\textestimated}" },
      \u212F: { math: "\\mathscr{e}" },
      \u2130: { math: "\\mathscr{E}" },
      \u2131: { math: "\\mathscr{F}" },
      "\u2132": { math: "\\Finv" },
      \u2133: { math: "\\mathscr{M}" },
      \u2134: { math: "\\mathscr{o}" },
      \u2135: { math: "\\aleph" },
      \u2136: { math: "\\beth" },
      \u2137: { math: "\\gimel" },
      \u2138: { math: "\\daleth" },
      "\u213C": { math: "\\mathbb{\\pi}" },
      "\u213D": { math: "\\mathbb{\\gamma}" },
      "\u213E": { math: "\\mathbb{\\Gamma}" },
      "\u213F": { math: "\\mathbb{\\Pi}" },
      "\u2140": { math: "\\mathbb{\\Sigma}" },
      "\u2141": { math: "\\Game" },
      "\u2142": { math: "\\sansLturned" },
      "\u2143": { math: "\\sansLmirrored" },
      "\u2144": { math: "\\Yup" },
      "\u2145": { math: "\\CapitalDifferentialD" },
      "\u2146": { math: "\\DifferentialD" },
      "\u2147": { math: "\\ExponetialE" },
      "\u2148": { math: "\\ComplexI" },
      "\u2149": { math: "\\ComplexJ" },
      "\u214A": { math: "\\PropertyLine" },
      "\u214B": { math: "\\invamp" },
      "\u2150": { math: "\\frac{1}{7}" },
      "\u2151": { math: "\\frac{1}{9}" },
      "\u2152": { math: "\\frac{1}{10}" },
      "\u2153": { math: "\\frac{1}{3}" },
      "\u2154": { math: "\\frac{2}{3}" },
      "\u2155": { math: "\\frac{1}{5}" },
      "\u2156": { math: "\\frac{2}{5}" },
      "\u2157": { math: "\\frac{3}{5}" },
      "\u2158": { math: "\\frac{4}{5}" },
      "\u2159": { math: "\\frac{1}{6}" },
      "\u215A": { math: "\\frac{5}{6}" },
      "\u215B": { math: "\\frac{1}{8}" },
      "\u215C": { math: "\\frac{3}{8}" },
      "\u215D": { math: "\\frac{5}{8}" },
      "\u215E": { math: "\\frac{7}{8}" },
      "\u215F": { math: "\\frac{1}" },
      "\u2160": { text: "I" },
      "\u2161": { text: "II" },
      "\u2162": { text: "III" },
      "\u2163": { text: "IV" },
      "\u2164": { text: "V" },
      "\u2165": { text: "VI" },
      "\u2166": { text: "VII" },
      "\u2167": { text: "VIII" },
      "\u2168": { text: "IX" },
      "\u2169": { text: "X" },
      "\u216A": { text: "XI" },
      "\u216B": { text: "XII" },
      "\u216C": { text: "L" },
      "\u216D": { text: "C" },
      "\u216E": { text: "D" },
      "\u216F": { text: "M" },
      "\u2170": { text: "i" },
      "\u2171": { text: "ii" },
      "\u2172": { text: "iii" },
      "\u2173": { text: "iv" },
      "\u2174": { text: "v" },
      "\u2175": { text: "vi" },
      "\u2176": { text: "vii" },
      "\u2177": { text: "viii" },
      "\u2178": { text: "ix" },
      "\u2179": { text: "x" },
      "\u217A": { text: "xi" },
      "\u217B": { text: "xii" },
      "\u217C": { text: "l" },
      "\u217D": { text: "c" },
      "\u217E": { text: "d" },
      "\u217F": { text: "m" },
      "\u2189": { math: "\\frac{0}{3}" },
      "\u2190": { math: "\\leftarrow" },
      "\u2191": { math: "\\uparrow" },
      "\u2192": { math: "\\rightarrow", text: "{\\textrightarrow}", textpackages: ["textcomp"] },
      "\u2193": { math: "\\downarrow" },
      "\u2194": { math: "\\leftrightarrow" },
      "\u2195": { math: "\\updownarrow" },
      "\u2196": { math: "\\nwarrow" },
      "\u2197": { math: "\\nearrow" },
      "\u2198": { math: "\\searrow" },
      "\u2199": { math: "\\swarrow" },
      "\u219A": { math: "\\nleftarrow" },
      "\u219B": { math: "\\nrightarrow" },
      "\u219C": { math: "\\arrowwaveleft" },
      "\u219D": { math: "\\arrowwaveright" },
      "\u219E": { math: "\\twoheadleftarrow" },
      "\u219F": { math: "\\twoheaduparrow" },
      "\u21A0": { math: "\\twoheadrightarrow" },
      "\u21A1": { math: "\\twoheaddownarrow" },
      "\u21A2": { math: "\\leftarrowtail" },
      "\u21A3": { math: "\\rightarrowtail" },
      "\u21A4": { math: "\\mapsfrom" },
      "\u21A5": { math: "\\MapsUp" },
      "\u21A6": { math: "\\mapsto" },
      "\u21A7": { math: "\\MapsDown" },
      "\u21A8": { math: "\\updownarrowbar" },
      "\u21A9": { math: "\\hookleftarrow" },
      "\u21AA": { math: "\\hookrightarrow" },
      "\u21AB": { math: "\\looparrowleft" },
      "\u21AC": { math: "\\looparrowright" },
      "\u21AD": { math: "\\leftrightsquigarrow" },
      "\u21AE": { math: "\\nleftrightarrow" },
      "\u21AF": { math: "\\lightning" },
      "\u21B0": { math: "\\Lsh" },
      "\u21B1": { math: "\\Rsh" },
      "\u21B2": { math: "\\dlsh" },
      "\u21B3": { text: "\\reflectbox{\\carriagereturn}", textpackages: ["graphics", "unicode-math"] },
      "\u21B4": { math: "\\linefeed" },
      "\u21B5": { math: "\\carriagereturn" },
      "\u21B6": { math: "\\curvearrowleft" },
      "\u21B7": { math: "\\curvearrowright" },
      "\u21B8": { math: "\\barovernorthwestarrow" },
      "\u21B9": { math: "\\barleftarrowrightarrowba" },
      "\u21BA": { math: "\\circlearrowleft" },
      "\u21BB": { math: "\\circlearrowright" },
      "\u21BC": { math: "\\leftharpoonup" },
      "\u21BD": { math: "\\leftharpoondown" },
      "\u21BE": { math: "\\upharpoonright" },
      "\u21BF": { math: "\\upharpoonleft" },
      "\u21C0": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
      "\u21C1": { math: "\\rightharpoondown" },
      "\u21C2": { math: "\\downharpoonright" },
      "\u21C3": { math: "\\downharpoonleft" },
      "\u21C4": { math: "\\rightleftarrows" },
      "\u21C5": { math: "\\dblarrowupdown" },
      "\u21C6": { math: "\\leftrightarrows" },
      "\u21C7": { math: "\\leftleftarrows" },
      "\u21C8": { math: "\\upuparrows" },
      "\u21C9": { math: "\\rightrightarrows" },
      "\u21CA": { math: "\\downdownarrows" },
      "\u21CB": { math: "\\leftrightharpoons" },
      "\u21CC": { math: "\\rightleftharpoons" },
      "\u21CD": { math: "\\nLeftarrow" },
      "\u21CE": { math: "\\nLeftrightarrow" },
      "\u21CF": { math: "\\nRightarrow" },
      "\u21D0": { math: "\\Leftarrow" },
      "\u21D1": { math: "\\Uparrow" },
      "\u21D2": { math: "\\Rightarrow" },
      "\u21D3": { math: "\\Downarrow" },
      "\u21D4": { math: "\\Leftrightarrow" },
      "\u21D5": { math: "\\Updownarrow" },
      "\u21D6": { math: "\\Nwarrow" },
      "\u21D7": { math: "\\Nearrow" },
      "\u21D8": { math: "\\Searrow" },
      "\u21D9": { math: "\\Swarrow" },
      "\u21DA": { math: "\\Lleftarrow" },
      "\u21DB": { math: "\\Rrightarrow" },
      "\u21DC": { math: "\\leftsquigarrow" },
      "\u21DD": { math: "\\rightsquigarrow" },
      "\u21DE": { math: "\\nHuparrow" },
      "\u21DF": { math: "\\nHdownarrow" },
      "\u21E0": { math: "\\dashleftarrow" },
      "\u21E1": { math: "\\updasharrow" },
      "\u21E2": { math: "\\dashrightarrow" },
      "\u21E3": { math: "\\downdasharrow" },
      "\u21E4": { math: "\\LeftArrowBar" },
      "\u21E5": { math: "\\RightArrowBar" },
      "\u21E6": { math: "\\leftwhitearrow" },
      "\u21E7": { math: "\\upwhitearrow" },
      "\u21E8": { math: "\\rightwhitearrow" },
      "\u21E9": { math: "\\downwhitearrow" },
      "\u21EA": { math: "\\whitearrowupfrombar" },
      "\u21F4": { math: "\\circleonrightarrow" },
      "\u21F5": { math: "\\DownArrowUpArrow" },
      "\u21F6": { math: "\\rightthreearrows" },
      "\u21F7": { math: "\\nvleftarrow" },
      "\u21F8": { math: "\\pfun" },
      "\u21F9": { math: "\\nvleftrightarrow" },
      "\u21FA": { math: "\\nVleftarrow" },
      "\u21FB": { math: "\\ffun" },
      "\u21FC": { math: "\\nVleftrightarrow" },
      "\u21FD": { math: "\\leftarrowtriangle" },
      "\u21FE": { math: "\\rightarrowtriangle" },
      "\u21FF": { math: "\\leftrightarrowtriangle" },
      "\u2200": { math: "\\forall" },
      "\u2201": { math: "\\complement" },
      "\u2202": { math: "\\partial" },
      "\u2203": { math: "\\exists" },
      "\u2204": { math: "\\nexists" },
      "\u2205": { math: "\\varnothing" },
      "\u2206": { math: "\\increment" },
      "\u2207": { math: "\\nabla" },
      "\u2208": { math: "\\in" },
      "\u2209": { math: "\\not\\in" },
      "\u220A": { math: "\\smallin" },
      "\u220B": { math: "\\ni" },
      "\u220C": { math: "\\not\\ni" },
      "\u220D": { math: "\\smallni" },
      "\u220E": { math: "\\QED" },
      "\u220F": { math: "\\prod" },
      "\u2210": { math: "\\coprod" },
      "\u2211": { math: "\\sum" },
      "\u2212": { math: "-", text: "-" },
      "\u2213": { math: "\\mp" },
      "\u2214": { math: "\\dotplus" },
      "\u2215": { text: "/" },
      "\u2216": { math: "\\setminus" },
      "\u2217": { math: "{_\\ast}" },
      "\u2218": { math: "\\circ" },
      "\u2219": { math: "\\bullet" },
      "\u221A": { math: "\\surd" },
      "\u221B": { math: "\\sqrt[3]" },
      "\u221C": { math: "\\sqrt[4]" },
      "\u221D": { math: "\\propto" },
      "\u221E": { math: "\\infty" },
      "\u221F": { math: "\\rightangle" },
      "\u2220": { math: "\\angle" },
      "\u2221": { math: "\\measuredangle" },
      "\u2222": { math: "\\sphericalangle" },
      "\u2223": { math: "\\mid" },
      "\u2224": { math: "\\nmid" },
      "\u2225": { math: "\\parallel" },
      "\u2226": { math: "\\nparallel" },
      "\u2227": { math: "\\wedge" },
      "\u2228": { math: "\\vee" },
      "\u2229": { math: "\\cap" },
      "\u222A": { math: "\\cup" },
      "\u222B": { math: "\\int" },
      "\u222C": { math: "{\\int\\!\\int}" },
      "\u222D": { math: "{\\int\\!\\int\\!\\int}" },
      "\u222E": { math: "\\oint" },
      "\u222F": { math: "\\surfintegral" },
      "\u2230": { math: "\\volintegral" },
      "\u2231": { math: "\\clwintegral" },
      "\u2232": { math: "\\lcirclerightint", mathpackages: ["MnSymbol"] },
      "\u2233": { math: "\\rcirclerightint", mathpackages: ["MnSymbol"] },
      "\u2234": { math: "\\therefore" },
      "\u2235": { math: "\\because" },
      "\u2236": { math: ":" },
      "\u2237": { math: "\\Colon" },
      "\u2238": { math: "\\dotdiv", mathpackages: ["mathabx"] },
      "\u2239": { math: "\\eqcolon" },
      "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" },
      "\u223B": { math: "\\homothetic" },
      "\u223C": { math: "\\sim" },
      "\u223D": { math: "\\backsim" },
      "\u223E": { math: "\\lazysinv" },
      "\u223F": { math: "\\AC" },
      "\u2240": { math: "\\wr" },
      "\u2241": { math: "\\not\\sim" },
      "\u2242": { math: "\\texteqsim", mathpackages: ["xecjk"] },
      "\u2242\u0338": { math: "\\NotEqualTilde" },
      "\u2243": { math: "\\simeq" },
      "\u2244": { math: "\\not\\simeq" },
      "\u2245": { math: "\\cong" },
      "\u2246": { math: "\\approxnotequal" },
      "\u2247": { math: "\\not\\cong" },
      "\u2248": { math: "\\approx" },
      "\u2249": { math: "\\not\\approx" },
      "\u224A": { math: "\\approxeq" },
      "\u224B": { math: "\\tildetrpl" },
      "\u224B\u0338": { math: "\\not\\apid" },
      "\u224C": { math: "\\allequal" },
      "\u224D": { math: "\\asymp" },
      "\u224E": { math: "\\Bumpeq" },
      "\u224E\u0338": { math: "\\NotHumpDownHump" },
      "\u224F": { math: "\\bumpeq" },
      "\u224F\u0338": { math: "\\NotHumpEqual" },
      "\u2250": { math: "\\doteq" },
      "\u2250\u0338": { math: "\\not\\doteq" },
      "\u2251": { math: "\\doteqdot" },
      "\u2252": { math: "\\fallingdotseq" },
      "\u2253": { math: "\\risingdotseq" },
      "\u2254": { math: "\\coloneq", text: ":=" },
      "\u2255": { math: "=:" },
      "\u2256": { math: "\\eqcirc" },
      "\u2257": { math: "\\circeq" },
      "\u2258": { math: "\\arceq" },
      "\u2259": { math: "\\estimates" },
      "\u225B": { math: "\\starequal" },
      "\u225C": { math: "\\triangleq" },
      "\u225D": { math: "\\eqdef" },
      "\u225E": { math: "\\measeq" },
      "\u2260": { math: "\\neq" },
      "\u2261": { math: "\\equiv" },
      "\u2262": { math: "\\not\\equiv" },
      "\u2263": { math: "\\Equiv" },
      "\u2264": { math: "\\leq" },
      "\u2265": { math: "\\geq" },
      "\u2266": { math: "\\leqq" },
      "\u2267": { math: "\\geqq" },
      "\u2268": { math: "\\lneqq" },
      "\u2268\uFE00": { math: "\\lvertneqq" },
      "\u2269": { math: "\\gneqq" },
      "\u2269\uFE00": { math: "\\gvertneqq" },
      "\u226A": { math: "\\ll" },
      "\u226A\u0338": { math: "\\NotLessLess" },
      "\u226B": { math: "\\gg" },
      "\u226B\u0338": { math: "\\NotGreaterGreater" },
      "\u226C": { math: "\\between" },
      "\u226D": { math: "{\\not\\kern-0.3em\\times}" },
      "\u226E": { math: "\\not<" },
      "\u226F": { math: "\\not>" },
      "\u2270": { math: "\\not\\leq" },
      "\u2271": { math: "\\not\\geq" },
      "\u2272": { math: "\\lessequivlnt" },
      "\u2273": { math: "\\greaterequivlnt" },
      "\u2276": { math: "\\lessgtr" },
      "\u2277": { math: "\\gtrless" },
      "\u2278": { math: "\\notlessgreater" },
      "\u2279": { math: "\\notgreaterless" },
      "\u227A": { math: "\\prec" },
      "\u227B": { math: "\\succ" },
      "\u227C": { math: "\\preccurlyeq" },
      "\u227D": { math: "\\succcurlyeq" },
      "\u227E": { math: "\\precapprox" },
      "\u227E\u0338": { math: "\\NotPrecedesTilde" },
      "\u227F": { math: "\\succapprox" },
      "\u227F\u0338": { math: "\\NotSucceedsTilde" },
      "\u2280": { math: "\\not\\prec" },
      "\u2281": { math: "\\not\\succ" },
      "\u2282": { math: "\\subset" },
      "\u2283": { math: "\\supset" },
      "\u2284": { math: "\\not\\subset" },
      "\u2285": { math: "\\not\\supset" },
      "\u2286": { math: "\\subseteq" },
      "\u2287": { math: "\\supseteq" },
      "\u2288": { math: "\\not\\subseteq" },
      "\u2289": { math: "\\not\\supseteq" },
      "\u228A": { math: "\\subsetneq" },
      "\u228A\uFE00": { math: "\\varsubsetneqq" },
      "\u228B": { math: "\\supsetneq" },
      "\u228B\uFE00": { math: "\\varsupsetneq" },
      "\u228C": { math: "\\cupleftarrow" },
      "\u228D": { math: "\\cupdot" },
      "\u228E": { math: "\\uplus" },
      "\u228F": { math: "\\sqsubset" },
      "\u228F\u0338": { math: "\\NotSquareSubset" },
      "\u2290": { math: "\\sqsupset" },
      "\u2290\u0338": { math: "\\NotSquareSuperset" },
      "\u2291": { math: "\\sqsubseteq" },
      "\u2292": { math: "\\sqsupseteq" },
      "\u2293": { math: "\\sqcap" },
      "\u2294": { math: "\\sqcup" },
      "\u2295": { math: "\\oplus" },
      "\u2296": { math: "\\ominus" },
      "\u2297": { math: "\\otimes" },
      "\u2298": { math: "\\oslash" },
      "\u2299": { math: "\\odot" },
      "\u229A": { math: "\\circledcirc" },
      "\u229B": { math: "\\circledast" },
      "\u229C": { math: "\\circledequal" },
      "\u229D": { math: "\\circleddash" },
      "\u229E": { math: "\\boxplus" },
      "\u229F": { math: "\\boxminus" },
      "\u22A0": { math: "\\boxtimes" },
      "\u22A1": { math: "\\boxdot" },
      "\u22A2": { math: "\\vdash" },
      "\u22A3": { math: "\\dashv" },
      "\u22A4": { math: "\\top" },
      "\u22A5": { math: "\\perp" },
      "\u22A6": { math: "\\assert" },
      "\u22A7": { math: "\\truestate" },
      "\u22A8": { math: "\\forcesextra" },
      "\u22A9": { math: "\\Vdash" },
      "\u22AA": { math: "\\Vvdash" },
      "\u22AB": { math: "\\VDash" },
      "\u22AC": { math: "\\nvdash" },
      "\u22AD": { math: "\\nvDash" },
      "\u22AE": { math: "\\nVdash" },
      "\u22AF": { math: "\\nVDash" },
      "\u22B0": { math: "\\prurel" },
      "\u22B1": { math: "\\scurel" },
      "\u22B2": { math: "\\vartriangleleft" },
      "\u22B3": { math: "\\vartriangleright" },
      "\u22B4": { math: "\\trianglelefteq" },
      "\u22B5": { math: "\\trianglerighteq" },
      "\u22B6": { math: "\\original" },
      "\u22B7": { math: "\\image" },
      "\u22B8": { math: "\\multimap" },
      "\u22B9": { math: "\\hermitconjmatrix" },
      "\u22BA": { math: "\\intercal" },
      "\u22BB": { math: "\\veebar" },
      "\u22BC": { math: "\\barwedge" },
      "\u22BD": { math: "\\barvee" },
      "\u22BE": { math: "\\rightanglearc" },
      "\u22BF": { math: "\\varlrtriangle" },
      "\u22C2": { math: "\\bigcap" },
      "\u22C3": { math: "\\bigcup" },
      "\u22C4": { math: "\\diamond" },
      "\u22C5": { math: "\\cdot" },
      "\u22C6": { math: "\\star" },
      "\u22C7": { math: "\\divideontimes" },
      "\u22C8": { math: "\\bowtie" },
      "\u22C9": { math: "\\ltimes" },
      "\u22CA": { math: "\\rtimes" },
      "\u22CB": { math: "\\leftthreetimes" },
      "\u22CC": { math: "\\rightthreetimes" },
      "\u22CD": { math: "\\backsimeq" },
      "\u22CE": { math: "\\curlyvee" },
      "\u22CF": { math: "\\curlywedge" },
      "\u22D0": { math: "\\Subset" },
      "\u22D1": { math: "\\Supset" },
      "\u22D2": { math: "\\Cap" },
      "\u22D3": { math: "\\Cup" },
      "\u22D4": { math: "\\pitchfork" },
      "\u22D5": { math: "\\hash" },
      "\u22D6": { math: "\\lessdot" },
      "\u22D7": { math: "\\gtrdot" },
      "\u22D8": { math: "\\verymuchless" },
      "\u22D9": { math: "\\verymuchgreater" },
      "\u22DA": { math: "\\lesseqgtr" },
      "\u22DB": { math: "\\gtreqless" },
      "\u22DC": { math: "\\eqless" },
      "\u22DD": { math: "\\eqgtr" },
      "\u22DE": { math: "\\curlyeqprec" },
      "\u22DF": { math: "\\curlyeqsucc" },
      "\u22E0": { math: "\\npreceq" },
      "\u22E1": { math: "\\nsucceq" },
      "\u22E2": { math: "\\not\\sqsubseteq" },
      "\u22E3": { math: "\\not\\sqsupseteq" },
      "\u22E4": { math: "\\sqsubsetneq" },
      "\u22E5": { math: "\\Elzsqspne" },
      "\u22E6": { math: "\\lnsim" },
      "\u22E7": { math: "\\gnsim" },
      "\u22E8": { math: "\\precedesnotsimilar" },
      "\u22E9": { math: "\\succnsim" },
      "\u22EA": { math: "\\ntriangleleft" },
      "\u22EB": { math: "\\ntriangleright" },
      "\u22EC": { math: "\\ntrianglelefteq" },
      "\u22ED": { math: "\\ntrianglerighteq" },
      "\u22EE": { math: "\\vdots" },
      "\u22EF": { math: "\\cdots" },
      "\u22F0": { math: "\\upslopeellipsis" },
      "\u22F1": { math: "\\downslopeellipsis" },
      "\u22F2": { math: "\\disin" },
      "\u22F3": { math: "\\varisins" },
      "\u22F4": { math: "\\isins" },
      "\u22F5": { math: "\\isindot" },
      "\u22F6": { math: "\\barin" },
      "\u22F7": { math: "\\isinobar" },
      "\u22F8": { math: "\\isinvb" },
      "\u22F9": { math: "\\isinE" },
      "\u22FA": { math: "\\nisd" },
      "\u22FB": { math: "\\varnis" },
      "\u22FC": { math: "\\nis" },
      "\u22FD": { math: "\\varniobar" },
      "\u22FE": { math: "\\niobar" },
      "\u22FF": { math: "\\bagmember" },
      "\u2300": { math: "\\diameter" },
      "\u2302": { math: "\\house" },
      "\u2305": { math: "\\varbarwedge", text: "{\\barwedge}" },
      "\u2306": { math: "\\perspcorrespond" },
      "\u2308": { math: "\\lceil" },
      "\u2309": { math: "\\rceil" },
      "\u230A": { math: "\\lfloor" },
      "\u230B": { math: "\\rfloor" },
      "\u2310": { math: "\\invneg" },
      "\u2311": { math: "\\wasylozenge" },
      "\u2312": { math: "\\profline" },
      "\u2313": { math: "\\profsurf" },
      "\u2315": { math: "\\recorder" },
      "\u2316": { math: '{\\mathchar"2208}' },
      "\u2317": { math: "\\viewdata" },
      "\u2319": { math: "\\turnednot" },
      "\u231C": { math: "\\ulcorner" },
      "\u231D": { math: "\\urcorner" },
      "\u231E": { math: "\\llcorner" },
      "\u231F": { math: "\\lrcorner" },
      "\u2320": { math: "\\inttop" },
      "\u2321": { math: "\\intbottom" },
      "\u2322": { math: "\\frown" },
      "\u2323": { math: "\\smile" },
      "\u2329": { math: "\\langle" },
      "\u232A": { math: "\\rangle" },
      "\u232C": { math: "\\varhexagonlrbonds" },
      "\u2332": { math: "\\conictaper" },
      "\u2336": { math: "\\topbot" },
      "\u2339": { math: "\\APLinv" },
      "\u233F": { math: "\\notslash" },
      "\u2340": { math: "\\notbackslash" },
      "\u2347": { math: "\\APLleftarrowbox" },
      "\u2348": { math: "\\APLrightarrowbox" },
      "\u2349": { math: "\\invdiameter" },
      "\u2350": { math: "\\APLuparrowbox" },
      "\u2353": { math: "\\APLboxupcaret" },
      "\u2357": { math: "\\APLdownarrowbox" },
      "\u235D": { math: "\\APLcomment" },
      "\u235E": { math: "\\APLinput" },
      "\u235F": { math: "\\APLlog" },
      "\u2370": { math: "\\APLboxquestion" },
      "\u237C": { math: "\\rangledownzigzagarrow" },
      "\u2394": { math: "\\hexagon" },
      "\u239B": { math: "\\lparenuend" },
      "\u239C": { math: "\\lparenextender" },
      "\u239D": { math: "\\lparenlend" },
      "\u239E": { math: "\\rparenuend" },
      "\u239F": { math: "\\rparenextender" },
      "\u23A0": { math: "\\rparenlend" },
      "\u23A1": { math: "\\lbrackuend" },
      "\u23A2": { math: "\\lbrackextender" },
      "\u23A3": { math: "\\Elzdlcorn" },
      "\u23A4": { math: "\\rbrackuend" },
      "\u23A5": { math: "\\rbrackextender" },
      "\u23A6": { math: "\\rbracklend" },
      "\u23A7": { math: "\\lbraceuend" },
      "\u23A8": { math: "\\lbracemid" },
      "\u23A9": { math: "\\lbracelend" },
      "\u23AA": { math: "\\vbraceextender" },
      "\u23AB": { math: "\\rbraceuend" },
      "\u23AC": { math: "\\rbracemid" },
      "\u23AD": { math: "\\rbracelend" },
      "\u23AE": { math: "\\intextender" },
      "\u23AF": { math: "\\harrowextender" },
      "\u23B0": { math: "\\lmoustache" },
      "\u23B1": { math: "\\rmoustache" },
      "\u23B2": { math: "\\sumtop" },
      "\u23B3": { math: "\\sumbottom" },
      "\u23B4": { math: "\\overbracket" },
      "\u23B5": { math: "\\underbracket" },
      "\u23B6": { math: "\\bbrktbrk" },
      "\u23B7": { math: "\\sqrtbottom" },
      "\u23B8": { math: "\\lvboxline" },
      "\u23B9": { math: "\\rvboxline" },
      "\u23CE": { math: "\\varcarriagereturn" },
      "\u23DC": { math: "\\overparen" },
      "\u23DD": { math: "\\underparen" },
      "\u23DE": { math: "\\overbrace" },
      "\u23DF": { math: "\\underbrace" },
      "\u23E0": { math: "\\obrbrak" },
      "\u23E1": { math: "\\ubrbrak" },
      "\u23E2": { math: "\\trapezium" },
      "\u23E3": { math: "\\benzenr" },
      "\u23E4": { math: "\\strns" },
      "\u23E5": { math: "\\fltns" },
      "\u23E6": { math: "\\accurrent" },
      "\u23E7": { math: "\\elinters" },
      "\u2460": { text: "\\ding{172}" },
      "\u2461": { text: "\\ding{173}" },
      "\u2462": { text: "\\ding{174}" },
      "\u2463": { text: "\\ding{175}" },
      "\u2464": { text: "\\ding{176}" },
      "\u2465": { text: "\\ding{177}" },
      "\u2466": { text: "\\ding{178}" },
      "\u2467": { text: "\\ding{179}" },
      "\u2468": { text: "\\ding{180}" },
      "\u2469": { text: "\\ding{181}" },
      "\u246A": { text: "(11)" },
      "\u246B": { text: "(12)" },
      "\u246C": { text: "(13)" },
      "\u246D": { text: "(14)" },
      "\u246E": { text: "(15)" },
      "\u246F": { text: "(16)" },
      "\u2470": { text: "(17)" },
      "\u2471": { text: "(18)" },
      "\u2472": { text: "(19)" },
      "\u2473": { text: "(20)" },
      "\u2474": { text: "(1)" },
      "\u2475": { text: "(2)" },
      "\u2476": { text: "(3)" },
      "\u2477": { text: "(4)" },
      "\u2478": { text: "(5)" },
      "\u2479": { text: "(6)" },
      "\u247A": { text: "(7)" },
      "\u247B": { text: "(8)" },
      "\u247C": { text: "(9)" },
      "\u247D": { text: "(10)" },
      "\u247E": { text: "(11)" },
      "\u247F": { text: "(12)" },
      "\u2480": { text: "(13)" },
      "\u2481": { text: "(14)" },
      "\u2482": { text: "(15)" },
      "\u2483": { text: "(16)" },
      "\u2484": { text: "(17)" },
      "\u2485": { text: "(18)" },
      "\u2486": { text: "(19)" },
      "\u2487": { text: "(20)" },
      "\u2488": { text: "1." },
      "\u2489": { text: "2." },
      "\u248A": { text: "3." },
      "\u248B": { text: "4." },
      "\u248C": { text: "5." },
      "\u248D": { text: "6." },
      "\u248E": { text: "7." },
      "\u248F": { text: "8." },
      "\u2490": { text: "9." },
      "\u2491": { text: "10." },
      "\u2492": { text: "11." },
      "\u2493": { text: "12." },
      "\u2494": { text: "13." },
      "\u2495": { text: "14." },
      "\u2496": { text: "15." },
      "\u2497": { text: "16." },
      "\u2498": { text: "17." },
      "\u2499": { text: "18." },
      "\u249A": { text: "19." },
      "\u249B": { text: "20." },
      "\u249C": { text: "(a)" },
      "\u249D": { text: "(b)" },
      "\u249E": { text: "(c)" },
      "\u249F": { text: "(d)" },
      "\u24A0": { text: "(e)" },
      "\u24A1": { text: "(f)" },
      "\u24A2": { text: "(g)" },
      "\u24A3": { text: "(h)" },
      "\u24A4": { text: "(i)" },
      "\u24A5": { text: "(j)" },
      "\u24A6": { text: "(k)" },
      "\u24A7": { text: "(l)" },
      "\u24A8": { text: "(m)" },
      "\u24A9": { text: "(n)" },
      "\u24AA": { text: "(o)" },
      "\u24AB": { text: "(p)" },
      "\u24AC": { text: "(q)" },
      "\u24AD": { text: "(r)" },
      "\u24AE": { text: "(s)" },
      "\u24AF": { text: "(t)" },
      "\u24B0": { text: "(u)" },
      "\u24B1": { text: "(v)" },
      "\u24B2": { text: "(w)" },
      "\u24B3": { text: "(x)" },
      "\u24B4": { text: "(y)" },
      "\u24B5": { text: "(z)" },
      "\u24B6": { text: "(A)" },
      "\u24B7": { text: "(B)" },
      "\u24B8": { text: "(C)" },
      "\u24B9": { text: "(D)" },
      "\u24BA": { text: "(E)" },
      "\u24BB": { text: "(F)" },
      "\u24BC": { text: "(G)" },
      "\u24BD": { text: "(H)" },
      "\u24BE": { text: "(I)" },
      "\u24BF": { text: "(J)" },
      "\u24C0": { text: "(K)" },
      "\u24C1": { text: "(L)" },
      "\u24C2": { text: "(M)" },
      "\u24C3": { text: "(N)" },
      "\u24C4": { text: "(O)" },
      "\u24C5": { text: "(P)" },
      "\u24C6": { text: "(Q)" },
      "\u24C7": { text: "(R)" },
      "\u24C8": { math: "\\circledS" },
      "\u24C9": { text: "(T)" },
      "\u24CA": { text: "(U)" },
      "\u24CB": { text: "(V)" },
      "\u24CC": { text: "(W)" },
      "\u24CD": { text: "(X)" },
      "\u24CE": { text: "(Y)" },
      "\u24CF": { text: "(Z)" },
      "\u24D0": { text: "(a)" },
      "\u24D1": { text: "(b)" },
      "\u24D2": { text: "(c)" },
      "\u24D3": { text: "(d)" },
      "\u24D4": { text: "(e)" },
      "\u24D5": { text: "(f)" },
      "\u24D6": { text: "(g)" },
      "\u24D7": { text: "(h)" },
      "\u24D8": { text: "(i)" },
      "\u24D9": { text: "(j)" },
      "\u24DA": { text: "(k)" },
      "\u24DB": { text: "(l)" },
      "\u24DC": { text: "(m)" },
      "\u24DD": { text: "(n)" },
      "\u24DE": { text: "(o)" },
      "\u24DF": { text: "(p)" },
      "\u24E0": { text: "(q)" },
      "\u24E1": { text: "(r)" },
      "\u24E2": { text: "(s)" },
      "\u24E3": { text: "(t)" },
      "\u24E4": { text: "(u)" },
      "\u24E5": { text: "(v)" },
      "\u24E6": { text: "(w)" },
      "\u24E7": { text: "(x)" },
      "\u24E8": { text: "(y)" },
      "\u24E9": { text: "(z)" },
      "\u24EA": { text: "(0)" },
      "\u2500": { text: "-" },
      "\u2501": { text: "=" },
      "\u2502": { text: "|" },
      "\u2503": { text: "|" },
      "\u2504": { text: "-" },
      "\u2505": { text: "=" },
      "\u2506": { math: "\\Elzdshfnc" },
      "\u2507": { text: "|" },
      "\u2508": { text: "-" },
      "\u2509": { text: "=" },
      "\u250A": { text: "|" },
      "\u250B": { text: "|" },
      "\u250C": { text: "+" },
      "\u250D": { text: "+" },
      "\u250E": { text: "+" },
      "\u250F": { text: "+" },
      "\u2510": { text: "+" },
      "\u2511": { text: "+" },
      "\u2512": { text: "+" },
      "\u2513": { text: "+" },
      "\u2514": { text: "+" },
      "\u2515": { text: "+" },
      "\u2516": { text: "+" },
      "\u2517": { text: "+" },
      "\u2518": { text: "+" },
      "\u2519": { math: "\\Elzsqfnw" },
      "\u251A": { text: "+" },
      "\u251B": { text: "+" },
      "\u251C": { text: "+" },
      "\u251D": { text: "+" },
      "\u251E": { text: "+" },
      "\u251F": { text: "+" },
      "\u2520": { text: "+" },
      "\u2521": { text: "+" },
      "\u2522": { text: "+" },
      "\u2523": { text: "+" },
      "\u2524": { text: "+" },
      "\u2525": { text: "+" },
      "\u2526": { text: "+" },
      "\u2527": { text: "+" },
      "\u2528": { text: "+" },
      "\u2529": { text: "+" },
      "\u252A": { text: "+" },
      "\u252B": { text: "+" },
      "\u252C": { text: "+" },
      "\u252D": { text: "+" },
      "\u252E": { text: "+" },
      "\u252F": { text: "+" },
      "\u2530": { text: "+" },
      "\u2531": { text: "+" },
      "\u2532": { text: "+" },
      "\u2533": { text: "+" },
      "\u2534": { text: "+" },
      "\u2535": { text: "+" },
      "\u2536": { text: "+" },
      "\u2537": { text: "+" },
      "\u2538": { text: "+" },
      "\u2539": { text: "+" },
      "\u253A": { text: "+" },
      "\u253B": { text: "+" },
      "\u253C": { text: "+" },
      "\u253D": { text: "+" },
      "\u253E": { text: "+" },
      "\u253F": { text: "+" },
      "\u2540": { text: "+" },
      "\u2541": { text: "+" },
      "\u2542": { text: "+" },
      "\u2543": { text: "+" },
      "\u2544": { text: "+" },
      "\u2545": { text: "+" },
      "\u2546": { text: "+" },
      "\u2547": { text: "+" },
      "\u2548": { text: "+" },
      "\u2549": { text: "+" },
      "\u254A": { text: "+" },
      "\u254B": { text: "+" },
      "\u254C": { text: "-" },
      "\u254D": { text: "=" },
      "\u254E": { text: "|" },
      "\u254F": { text: "|" },
      "\u2550": { text: "=" },
      "\u2551": { text: "|" },
      "\u2552": { text: "+" },
      "\u2553": { text: "+" },
      "\u2554": { text: "+" },
      "\u2555": { text: "+" },
      "\u2556": { text: "+" },
      "\u2557": { text: "+" },
      "\u2558": { text: "+" },
      "\u2559": { text: "+" },
      "\u255A": { text: "+" },
      "\u255B": { text: "+" },
      "\u255C": { text: "+" },
      "\u255D": { text: "+" },
      "\u255E": { text: "+" },
      "\u255F": { text: "+" },
      "\u2560": { text: "+" },
      "\u2561": { text: "+" },
      "\u2562": { text: "+" },
      "\u2563": { text: "+" },
      "\u2564": { text: "+" },
      "\u2565": { text: "+" },
      "\u2566": { text: "+" },
      "\u2567": { text: "+" },
      "\u2568": { text: "+" },
      "\u2569": { text: "+" },
      "\u256A": { text: "+" },
      "\u256B": { text: "+" },
      "\u256C": { text: "+" },
      "\u256D": { text: "+" },
      "\u256E": { text: "+" },
      "\u256F": { text: "+" },
      "\u2570": { text: "+" },
      "\u2571": { math: "\\diagup" },
      "\u2572": { text: "\\" },
      "\u2573": { text: "X" },
      "\u257C": { text: "-" },
      "\u257D": { text: "|" },
      "\u257E": { text: "-" },
      "\u257F": { text: "|" },
      "\u2580": { math: "\\blockuphalf" },
      "\u2584": { math: "\\blocklowhalf" },
      "\u2588": { math: "\\blockfull" },
      "\u258C": { math: "\\blocklefthalf" },
      "\u2590": { math: "\\blockrighthalf" },
      "\u2591": { math: "\\blockqtrshaded" },
      "\u2592": { math: "\\blockhalfshaded" },
      "\u2593": { math: "\\blockthreeqtrshaded" },
      "\u25A0": { math: "\\mdlgblksquare", text: "\\ding{110}" },
      "\u25A1": { math: "\\square" },
      "\u25A2": { math: "\\squoval" },
      "\u25A3": { math: "\\blackinwhitesquare" },
      "\u25A4": { math: "\\squarehfill" },
      "\u25A5": { math: "\\squarevfill" },
      "\u25A6": { math: "\\squarehvfill" },
      "\u25A7": { math: "\\squarenwsefill" },
      "\u25A8": { math: "\\squareneswfill" },
      "\u25A9": { math: "\\squarecrossfill" },
      "\u25AA": { math: "\\blacksquare" },
      "\u25AB": { math: "\\smwhtsquare" },
      "\u25AC": { math: "\\hrectangleblack" },
      "\u25AD": { math: "\\fbox{~~}" },
      "\u25AE": { math: "\\vrectangleblack" },
      "\u25AF": { math: "\\Elzvrecto" },
      "\u25B0": { math: "\\parallelogramblack" },
      "\u25B2": { math: "\\bigblacktriangleup", text: "\\ding{115}" },
      "\u25B3": { math: "\\bigtriangleup" },
      "\u25B4": { math: "\\blacktriangle" },
      "\u25B5": { math: "\\vartriangle" },
      "\u25B6": { math: "\\RHD" },
      "\u25B7": { math: "\\rhd" },
      "\u25B8": { math: "\\blacktriangleright" },
      "\u25B9": { math: "\\triangleright" },
      "\u25BA": { math: "\\blackpointerright" },
      "\u25BB": { math: "\\whitepointerright" },
      "\u25BC": { math: "\\bigblacktriangledown", text: "\\ding{116}" },
      "\u25BD": { math: "\\bigtriangledown" },
      "\u25BE": { math: "\\blacktriangledown" },
      "\u25BF": { math: "\\triangledown" },
      "\u25C0": { math: "\\LHD" },
      "\u25C1": { math: "\\lhd" },
      "\u25C2": { math: "\\blacktriangleleft" },
      "\u25C3": { math: "\\triangleleft" },
      "\u25C4": { math: "\\blackpointerleft" },
      "\u25C5": { math: "\\whitepointerleft" },
      "\u25C6": { math: "\\Diamondblack", text: "\\ding{117}" },
      "\u25C7": { math: "\\Diamond" },
      "\u25C8": { math: "\\blackinwhitediamond" },
      "\u25C9": { math: "\\fisheye" },
      "\u25CA": { math: "\\lozenge" },
      "\u25CB": { math: "\\bigcirc" },
      "\u25CC": { math: "\\dottedcircle" },
      "\u25CD": { math: "\\circlevertfill" },
      "\u25CE": { math: "\\bullseye" },
      "\u25CF": { math: "\\CIRCLE", text: "\\ding{108}" },
      "\u25D0": { math: "\\Elzcirfl" },
      "\u25D1": { math: "\\Elzcirfr" },
      "\u25D2": { math: "\\Elzcirfb" },
      "\u25D3": { math: "\\circletophalfblack" },
      "\u25D4": { math: "\\circleurquadblack" },
      "\u25D5": { math: "\\blackcircleulquadwhite" },
      "\u25D6": { math: "\\LEFTCIRCLE" },
      "\u25D7": { math: "\\RIGHTCIRCLE", text: "\\ding{119}" },
      "\u25D8": { math: "\\Elzrvbull" },
      "\u25D9": { math: "\\inversewhitecircle" },
      "\u25DA": { math: "\\invwhiteupperhalfcircle" },
      "\u25DB": { math: "\\invwhitelowerhalfcircle" },
      "\u25DC": { math: "\\ularc" },
      "\u25DD": { math: "\\urarc" },
      "\u25DE": { math: "\\lrarc" },
      "\u25DF": { math: "\\llarc" },
      "\u25E0": { math: "\\topsemicircle" },
      "\u25E1": { math: "\\botsemicircle" },
      "\u25E2": { math: "\\lrblacktriangle" },
      "\u25E3": { math: "\\llblacktriangle" },
      "\u25E4": { math: "\\ulblacktriangle" },
      "\u25E5": { math: "\\urblacktriangle" },
      "\u25E6": { math: "\\smwhtcircle" },
      "\u25E7": { math: "\\Elzsqfl" },
      "\u25E8": { math: "\\Elzsqfr" },
      "\u25E9": { math: "\\squareulblack" },
      "\u25EA": { math: "\\Elzsqfse" },
      "\u25EB": { math: "\\boxbar" },
      "\u25EC": { math: "\\trianglecdot" },
      "\u25ED": { math: "\\triangleleftblack" },
      "\u25EE": { math: "\\trianglerightblack" },
      "\u25EF": { math: "\\bigcirc" },
      "\u25F0": { math: "\\squareulquad" },
      "\u25F1": { math: "\\squarellquad" },
      "\u25F2": { math: "\\squarelrquad" },
      "\u25F3": { math: "\\squareurquad" },
      "\u25F4": { math: "\\circleulquad" },
      "\u25F5": { math: "\\circlellquad" },
      "\u25F6": { math: "\\circlelrquad" },
      "\u25F7": { math: "\\circleurquad" },
      "\u25F8": { math: "\\ultriangle" },
      "\u25F9": { math: "\\urtriangle" },
      "\u25FA": { math: "\\lltriangle" },
      "\u25FB": { math: "\\square" },
      "\u25FC": { math: "\\blacksquare" },
      "\u25FD": { math: "\\mdsmwhtsquare" },
      "\u25FE": { math: "\\mdsmblksquare" },
      "\u25FF": { math: "\\lrtriangle" },
      "\u2605": { math: "\\bigstar", text: "\\ding{72}" },
      "\u2606": { math: "\\bigwhitestar", text: "\\ding{73}" },
      "\u2609": { math: "\\Sun" },
      "\u260E": { text: "\\ding{37}" },
      "\u2610": { math: "\\Square" },
      "\u2611": { math: "\\CheckedBox" },
      "\u2612": { math: "\\XBox" },
      "\u2613": { text: "X" },
      "\u2615": { math: "\\steaming" },
      "\u261B": { text: "\\ding{42}" },
      "\u261E": { math: "\\pointright", text: "\\ding{43}" },
      "\u2620": { math: "\\skull" },
      "\u2621": { math: "\\danger" },
      "\u2622": { math: "\\radiation" },
      "\u2623": { math: "\\biohazard" },
      "\u262F": { math: "\\yinyang" },
      "\u2639": { math: "\\frownie" },
      "\u263A": { math: "\\smiley" },
      "\u263B": { math: "\\blacksmiley" },
      "\u263C": { math: "\\sun" },
      "\u263D": { text: "{\\rightmoon}", textpackages: ["wasysym"] },
      "\u263E": { text: "{\\leftmoon}", textpackages: ["wasysym"] },
      "\u263F": { math: "\\mercury", text: "{\\mercury}" },
      "\u2640": { math: "\\female", text: "{\\venus}" },
      "\u2641": { math: "\\earth" },
      "\u2642": { math: "\\male", text: "{\\male}" },
      "\u2643": { math: "\\jupiter", text: "{\\jupiter}" },
      "\u2644": { math: "\\saturn", text: "{\\saturn}" },
      "\u2645": { math: "\\uranus", text: "{\\uranus}" },
      "\u2646": { math: "\\neptune", text: "{\\neptune}" },
      "\u2647": { math: "\\pluto", text: "{\\pluto}" },
      "\u2648": { math: "\\aries", text: "{\\aries}" },
      "\u2649": { math: "\\taurus", text: "{\\taurus}" },
      "\u264A": { math: "\\gemini", text: "{\\gemini}" },
      "\u264B": { math: "\\cancer", text: "{\\cancer}" },
      "\u264C": { math: "\\leo", text: "{\\leo}" },
      "\u264D": { math: "\\virgo", text: "{\\virgo}" },
      "\u264E": { math: "\\libra", text: "{\\libra}" },
      "\u264F": { math: "\\scorpio", text: "{\\scorpio}" },
      "\u2650": { math: "\\sagittarius", text: "{\\sagittarius}" },
      "\u2651": { math: "\\capricornus", text: "{\\capricornus}" },
      "\u2652": { math: "\\aquarius", text: "{\\aquarius}" },
      "\u2653": { math: "\\pisces", text: "{\\pisces}" },
      "\u2660": { math: "\\spadesuit", text: "\\ding{171}" },
      "\u2661": { math: "\\heartsuit" },
      "\u2662": { math: "\\diamond" },
      "\u2663": { math: "\\clubsuit", text: "\\ding{168}" },
      "\u2664": { math: "\\varspadesuit" },
      "\u2665": { math: "\\varheartsuit", text: "\\ding{170}" },
      "\u2666": { math: "\\vardiamondsuit", text: "\\ding{169}" },
      "\u2667": { math: "\\varclubsuit" },
      "\u2669": { math: "\\quarternote", text: "{\\quarternote}" },
      "\u266A": { math: "\\eighthnote", text: "{\\eighthnote}" },
      "\u266B": { math: "\\twonotes" },
      "\u266C": { math: "\\sixteenthnote" },
      "\u266D": { math: "\\flat" },
      "\u266E": { math: "\\natural" },
      "\u266F": { math: "\\sharp" },
      "\u267B": { math: "\\recycle" },
      "\u267E": { math: "\\acidfree" },
      "\u2680": { math: "\\dicei" },
      "\u2681": { math: "\\diceii" },
      "\u2682": { math: "\\diceiii" },
      "\u2683": { math: "\\diceiv" },
      "\u2684": { math: "\\dicev" },
      "\u2685": { math: "\\dicevi" },
      "\u2686": { math: "\\circledrightdot" },
      "\u2687": { math: "\\circledtwodots" },
      "\u2688": { math: "\\blackcircledrightdot" },
      "\u2689": { math: "\\blackcircledtwodots" },
      "\u2693": { math: "\\anchor" },
      "\u2694": { math: "\\swords" },
      "\u26A0": { math: "\\warning" },
      "\u26A5": { math: "\\Hermaphrodite" },
      "\u26AA": { math: "\\medcirc" },
      "\u26AB": { math: "\\medbullet" },
      "\u26AC": { math: "\\mdsmwhtcircle" },
      "\u26B2": { math: "\\neuter" },
      "\u2701": { text: "\\ding{33}" },
      "\u2702": { text: "\\ding{34}" },
      "\u2703": { text: "\\ding{35}" },
      "\u2704": { text: "\\ding{36}" },
      "\u2706": { text: "\\ding{38}" },
      "\u2707": { text: "\\ding{39}" },
      "\u2708": { text: "\\ding{40}" },
      "\u2709": { text: "\\ding{41}" },
      "\u270C": { text: "\\ding{44}" },
      "\u270D": { text: "\\ding{45}" },
      "\u270E": { math: "\\pencil", text: "\\ding{46}" },
      "\u270F": { text: "\\ding{47}" },
      "\u2710": { text: "\\ding{48}" },
      "\u2711": { text: "\\ding{49}" },
      "\u2712": { text: "\\ding{50}" },
      "\u2713": { math: "\\checkmark", text: "\\ding{51}" },
      "\u2714": { text: "\\ding{52}" },
      "\u2715": { text: "\\ding{53}" },
      "\u2716": { text: "\\ding{54}" },
      "\u2717": { math: "\\ballotx", text: "\\ding{55}" },
      "\u2718": { text: "\\ding{56}" },
      "\u2719": { text: "\\ding{57}" },
      "\u271A": { text: "\\ding{58}" },
      "\u271B": { text: "\\ding{59}" },
      "\u271C": { text: "\\ding{60}" },
      "\u271D": { text: "\\ding{61}" },
      "\u271E": { text: "\\ding{62}" },
      "\u271F": { text: "\\ding{63}" },
      "\u2720": { math: "\\maltese", text: "\\ding{64}" },
      "\u2721": { text: "\\ding{65}" },
      "\u2722": { text: "\\ding{66}" },
      "\u2723": { text: "\\ding{67}" },
      "\u2724": { text: "\\ding{68}" },
      "\u2725": { text: "\\ding{69}" },
      "\u2726": { text: "\\ding{70}" },
      "\u2727": { text: "\\ding{71}" },
      "\u2729": { text: "\\ding{73}" },
      "\u272A": { math: "\\circledstar", text: "\\ding{74}" },
      "\u272B": { text: "\\ding{75}" },
      "\u272C": { text: "\\ding{76}" },
      "\u272D": { text: "\\ding{77}" },
      "\u272E": { text: "\\ding{78}" },
      "\u272F": { text: "\\ding{79}" },
      "\u2730": { text: "\\ding{80}" },
      "\u2731": { text: "\\ding{81}" },
      "\u2732": { text: "\\ding{82}" },
      "\u2733": { text: "\\ding{83}" },
      "\u2734": { text: "\\ding{84}" },
      "\u2735": { text: "\\ding{85}" },
      "\u2736": { math: "\\varstar", text: "\\ding{86}" },
      "\u2737": { text: "\\ding{87}" },
      "\u2738": { text: "\\ding{88}" },
      "\u2739": { text: "\\ding{89}" },
      "\u273A": { text: "\\ding{90}" },
      "\u273B": { text: "\\ding{91}" },
      "\u273C": { text: "\\ding{92}" },
      "\u273D": { math: "\\dingasterisk", text: "\\ding{93}" },
      "\u273E": { text: "\\ding{94}" },
      "\u273F": { text: "\\ding{95}" },
      "\u2740": { text: "\\ding{96}" },
      "\u2741": { text: "\\ding{97}" },
      "\u2742": { text: "\\ding{98}" },
      "\u2743": { text: "\\ding{99}" },
      "\u2744": { text: "\\ding{100}" },
      "\u2745": { text: "\\ding{101}" },
      "\u2746": { text: "\\ding{102}" },
      "\u2747": { text: "\\ding{103}" },
      "\u2748": { text: "\\ding{104}" },
      "\u2749": { text: "\\ding{105}" },
      "\u274A": { text: "\\ding{106}" },
      "\u274B": { text: "\\ding{107}" },
      "\u274D": { text: "\\ding{109}" },
      "\u274F": { text: "\\ding{111}" },
      "\u2750": { text: "\\ding{112}" },
      "\u2751": { text: "\\ding{113}" },
      "\u2752": { text: "\\ding{114}" },
      "\u2756": { text: "\\ding{118}" },
      "\u2758": { text: "\\ding{120}" },
      "\u2759": { text: "\\ding{121}" },
      "\u275A": { text: "\\ding{122}" },
      "\u275B": { text: "\\ding{123}" },
      "\u275C": { text: "\\ding{124}" },
      "\u275D": { text: "\\ding{125}" },
      "\u275E": { text: "\\ding{126}" },
      "\u2761": { text: "\\ding{161}" },
      "\u2762": { text: "\\ding{162}" },
      "\u2763": { text: "\\ding{163}" },
      "\u2764": { text: "\\ding{164}" },
      "\u2765": { text: "\\ding{165}" },
      "\u2766": { text: "\\ding{166}" },
      "\u2767": { text: "\\ding{167}" },
      "\u2772": { math: "\\lbrbrak" },
      "\u2773": { math: "\\rbrbrak" },
      "\u2776": { text: "\\ding{182}" },
      "\u2777": { text: "\\ding{183}" },
      "\u2778": { text: "\\ding{184}" },
      "\u2779": { text: "\\ding{185}" },
      "\u277A": { text: "\\ding{186}" },
      "\u277B": { text: "\\ding{187}" },
      "\u277C": { text: "\\ding{188}" },
      "\u277D": { text: "\\ding{189}" },
      "\u277E": { text: "\\ding{190}" },
      "\u277F": { text: "\\ding{191}" },
      "\u2780": { text: "\\ding{192}" },
      "\u2781": { text: "\\ding{193}" },
      "\u2782": { text: "\\ding{194}" },
      "\u2783": { text: "\\ding{195}" },
      "\u2784": { text: "\\ding{196}" },
      "\u2785": { text: "\\ding{197}" },
      "\u2786": { text: "\\ding{198}" },
      "\u2787": { text: "\\ding{199}" },
      "\u2788": { text: "\\ding{200}" },
      "\u2789": { text: "\\ding{201}" },
      "\u278A": { text: "\\ding{202}" },
      "\u278B": { text: "\\ding{203}" },
      "\u278C": { text: "\\ding{204}" },
      "\u278D": { text: "\\ding{205}" },
      "\u278E": { text: "\\ding{206}" },
      "\u278F": { text: "\\ding{207}" },
      "\u2790": { text: "\\ding{208}" },
      "\u2791": { text: "\\ding{209}" },
      "\u2792": { text: "\\ding{210}" },
      "\u2793": { text: "\\ding{211}" },
      "\u2794": { text: "\\ding{212}" },
      "\u2798": { text: "\\ding{216}" },
      "\u2799": { text: "\\ding{217}" },
      "\u279A": { text: "\\ding{218}" },
      "\u279B": { math: "\\draftingarrow", text: "\\ding{219}" },
      "\u279C": { text: "\\ding{220}" },
      "\u279D": { text: "\\ding{221}" },
      "\u279E": { text: "\\ding{222}" },
      "\u279F": { text: "\\ding{223}" },
      "\u27A0": { text: "\\ding{224}" },
      "\u27A1": { text: "\\ding{225}" },
      "\u27A2": { math: "\\arrowbullet", text: "\\ding{226}" },
      "\u27A3": { text: "\\ding{227}" },
      "\u27A4": { text: "\\ding{228}" },
      "\u27A5": { text: "\\ding{229}" },
      "\u27A6": { text: "\\ding{230}" },
      "\u27A7": { text: "\\ding{231}" },
      "\u27A8": { text: "\\ding{232}" },
      "\u27A9": { text: "\\ding{233}" },
      "\u27AA": { text: "\\ding{234}" },
      "\u27AB": { text: "\\ding{235}" },
      "\u27AC": { text: "\\ding{236}" },
      "\u27AD": { text: "\\ding{237}" },
      "\u27AE": { text: "\\ding{238}" },
      "\u27AF": { text: "\\ding{239}" },
      "\u27B1": { text: "\\ding{241}" },
      "\u27B2": { text: "\\ding{242}" },
      "\u27B3": { text: "\\ding{243}" },
      "\u27B4": { text: "\\ding{244}" },
      "\u27B5": { text: "\\ding{245}" },
      "\u27B6": { text: "\\ding{246}" },
      "\u27B7": { text: "\\ding{247}" },
      "\u27B8": { text: "\\ding{248}" },
      "\u27B9": { text: "\\ding{249}" },
      "\u27BA": { text: "\\ding{250}" },
      "\u27BB": { text: "\\ding{251}" },
      "\u27BC": { text: "\\ding{252}" },
      "\u27BD": { text: "\\ding{253}" },
      "\u27BE": { text: "\\ding{254}" },
      "\u27C0": { math: "\\threedangle" },
      "\u27C1": { math: "\\whiteinwhitetriangle" },
      "\u27C2": { math: "\\perp" },
      "\u27C3": { math: "\\subsetcirc" },
      "\u27C4": { math: "\\supsetcirc" },
      "\u27C5": { math: "\\Lbag" },
      "\u27C6": { math: "\\Rbag" },
      "\u27C7": { math: "\\veedot" },
      "\u27C8": { math: "\\bsolhsub" },
      "\u27C9": { math: "\\suphsol" },
      "\u27CC": { math: "\\longdivision" },
      "\u27D0": { math: "\\Diamonddot" },
      "\u27D1": { math: "\\wedgedot" },
      "\u27D2": { math: "\\upin" },
      "\u27D3": { math: "\\pullback" },
      "\u27D4": { math: "\\pushout" },
      "\u27D5": { math: "\\leftouterjoin" },
      "\u27D6": { math: "\\rightouterjoin" },
      "\u27D7": { math: "\\fullouterjoin" },
      "\u27D8": { math: "\\bigbot" },
      "\u27D9": { math: "\\bigtop" },
      "\u27DA": { math: "\\DashVDash" },
      "\u27DB": { math: "\\dashVdash" },
      "\u27DC": { math: "\\multimapinv" },
      "\u27DD": { math: "\\vlongdash" },
      "\u27DE": { math: "\\longdashv" },
      "\u27DF": { math: "\\cirbot" },
      "\u27E0": { math: "\\lozengeminus" },
      "\u27E1": { math: "\\concavediamond" },
      "\u27E2": { math: "\\concavediamondtickleft" },
      "\u27E3": { math: "\\concavediamondtickright" },
      "\u27E4": { math: "\\whitesquaretickleft" },
      "\u27E5": { math: "\\whitesquaretickright" },
      "\u27E6": { math: "\\llbracket" },
      "\u27E7": { math: "\\rrbracket" },
      "\u27E8": { math: "\\langle" },
      "\u27E9": { math: "\\rangle" },
      "\u27EA": { math: "\\lang" },
      "\u27EB": { math: "\\rang" },
      "\u27EC": { math: "\\Lbrbrak" },
      "\u27ED": { math: "\\Rbrbrak" },
      "\u27EE": { math: "\\lgroup" },
      "\u27EF": { math: "\\rgroup" },
      "\u27F0": { math: "\\UUparrow" },
      "\u27F1": { math: "\\DDownarrow" },
      "\u27F2": { math: "\\acwgapcirclearrow" },
      "\u27F3": { math: "\\cwgapcirclearrow" },
      "\u27F4": { math: "\\rightarrowonoplus" },
      "\u27F5": { math: "\\longleftarrow" },
      "\u27F6": { math: "\\longrightarrow" },
      "\u27F7": { math: "\\longleftrightarrow" },
      "\u27F8": { math: "\\Longleftarrow" },
      "\u27F9": { math: "\\Longrightarrow" },
      "\u27FA": { math: "\\Longleftrightarrow" },
      "\u27FB": { math: "\\longmapsfrom" },
      "\u27FC": { math: "\\longmapsto" },
      "\u27FD": { math: "\\Longmapsfrom" },
      "\u27FE": { math: "\\Longmapsto" },
      "\u27FF": { math: "\\sim\\joinrel\\leadsto" },
      "\u2900": { math: "\\psur" },
      "\u2901": { math: "\\nVtwoheadrightarrow" },
      "\u2902": { math: "\\nvLeftarrow" },
      "\u2903": { math: "\\nvRightarrow" },
      "\u2904": { math: "\\nvLeftrightarrow" },
      "\u2906": { math: "\\Mapsfrom" },
      "\u2907": { math: "\\Mapsto" },
      "\u2908": { math: "\\downarrowbarred" },
      "\u2909": { math: "\\uparrowbarred" },
      "\u290A": { math: "\\Uuparrow" },
      "\u290B": { math: "\\Ddownarrow" },
      "\u290C": { math: "\\leftbkarrow" },
      "\u290D": { math: "\\rightbkarrow" },
      "\u290E": { math: "\\leftdbkarrow" },
      "\u290F": { math: "\\dbkarow" },
      "\u2910": { math: "\\drbkarow" },
      "\u2911": { math: "\\rightdotarrow" },
      "\u2912": { math: "\\UpArrowBar" },
      "\u2913": { math: "\\DownArrowBar" },
      "\u2914": { math: "\\pinj" },
      "\u2915": { math: "\\finj" },
      "\u2916": { math: "\\bij" },
      "\u2917": { math: "\\nvtwoheadrightarrowtail" },
      "\u2918": { math: "\\nVtwoheadrightarrowtail" },
      "\u2919": { math: "\\lefttail" },
      "\u291A": { math: "\\righttail" },
      "\u291B": { math: "\\leftdbltail" },
      "\u291C": { math: "\\rightdbltail" },
      "\u291D": { math: "\\diamondleftarrow" },
      "\u291E": { math: "\\rightarrowdiamond" },
      "\u291F": { math: "\\diamondleftarrowbar" },
      "\u2920": { math: "\\barrightarrowdiamond" },
      "\u2921": { math: "\\nwsearrow" },
      "\u2922": { math: "\\neswarrow" },
      "\u292B": { math: "\\rdiagovfdiag" },
      "\u292C": { math: "\\fdiagovrdiag" },
      "\u292D": { math: "\\seovnearrow" },
      "\u292E": { math: "\\neovsearrow" },
      "\u292F": { math: "\\fdiagovnearrow" },
      "\u2930": { math: "\\rdiagovsearrow" },
      "\u2931": { math: "\\neovnwarrow" },
      "\u2932": { math: "\\nwovnearrow" },
      "\u2934": { math: "\\uprightcurvearrow" },
      "\u2935": { math: "\\downrightcurvedarrow" },
      "\u2938": { math: "\\cwrightarcarrow" },
      "\u2939": { math: "\\acwleftarcarrow" },
      "\u293A": { math: "\\acwoverarcarrow" },
      "\u293B": { math: "\\acwunderarcarrow" },
      "\u293C": { math: "\\curvearrowrightminus" },
      "\u293D": { math: "\\curvearrowleftplus" },
      "\u293E": { math: "\\cwundercurvearrow" },
      "\u293F": { math: "\\ccwundercurvearrow" },
      "\u2940": { math: "\\Elolarr" },
      "\u2941": { math: "\\Elorarr" },
      "\u2942": { math: "\\ElzRlarr" },
      "\u2943": { math: "\\leftarrowshortrightarrow" },
      "\u2944": { math: "\\ElzrLarr" },
      "\u2945": { math: "\\rightarrowplus" },
      "\u2946": { math: "\\leftarrowplus" },
      "\u2947": { math: "\\Elzrarrx" },
      "\u2948": { math: "\\leftrightarrowcircle" },
      "\u2949": { math: "\\twoheaduparrowcircle" },
      "\u294A": { math: "\\leftrightharpoon" },
      "\u294B": { math: "\\rightleftharpoon" },
      "\u294C": { math: "\\updownharpoonrightleft" },
      "\u294D": { math: "\\updownharpoonleftright" },
      "\u294E": { math: "\\LeftRightVector" },
      "\u294F": { math: "\\RightUpDownVector" },
      "\u2950": { math: "\\DownLeftRightVector" },
      "\u2951": { math: "\\LeftUpDownVector" },
      "\u2952": { math: "\\LeftVectorBar" },
      "\u2953": { math: "\\RightVectorBar" },
      "\u2954": { math: "\\RightUpVectorBar" },
      "\u2955": { math: "\\RightDownVectorBar" },
      "\u2956": { math: "\\DownLeftVectorBar" },
      "\u2957": { math: "\\DownRightVectorBar" },
      "\u2958": { math: "\\LeftUpVectorBar" },
      "\u2959": { math: "\\LeftDownVectorBar" },
      "\u295A": { math: "\\LeftTeeVector" },
      "\u295B": { math: "\\RightTeeVector" },
      "\u295C": { math: "\\RightUpTeeVector" },
      "\u295D": { math: "\\RightDownTeeVector" },
      "\u295E": { math: "\\DownLeftTeeVector" },
      "\u295F": { math: "\\DownRightTeeVector" },
      "\u2960": { math: "\\LeftUpTeeVector" },
      "\u2961": { math: "\\LeftDownTeeVector" },
      "\u2962": { math: "\\leftleftharpoons" },
      "\u2963": { math: "\\upupharpoons" },
      "\u2964": { math: "\\rightrightharpoons" },
      "\u2965": { math: "\\downdownharpoons" },
      "\u2966": { math: "\\leftrightharpoonsup" },
      "\u2967": { math: "\\leftrightharpoonsdown" },
      "\u2968": { math: "\\rightleftharpoonsup" },
      "\u2969": { math: "\\rightleftharpoonsdown" },
      "\u296A": { math: "\\leftbarharpoon" },
      "\u296B": { math: "\\barleftharpoon" },
      "\u296C": { math: "\\rightbarharpoon" },
      "\u296D": { math: "\\barrightharpoon" },
      "\u296E": { math: "\\UpEquilibrium" },
      "\u296F": { math: "\\ReverseUpEquilibrium" },
      "\u2970": { math: "\\RoundImplies" },
      "\u2971": { math: "\\equalrightarrow" },
      "\u2972": { math: "\\similarrightarrow" },
      "\u2973": { math: "\\leftarrowsimilar" },
      "\u2974": { math: "\\rightarrowsimilar" },
      "\u2975": { math: "\\rightarrowapprox" },
      "\u2976": { math: "\\ltlarr" },
      "\u2977": { math: "\\leftarrowless" },
      "\u2978": { math: "\\gtrarr" },
      "\u2979": { math: "\\subrarr" },
      "\u297A": { math: "\\leftarrowsubset" },
      "\u297B": { math: "\\suplarr" },
      "\u297E": { math: "\\upfishtail" },
      "\u297F": { math: "\\downfishtail" },
      "\u2980": { math: "\\Elztfnc" },
      "\u2981": { math: "\\spot" },
      "\u2982": { math: "\\typecolon" },
      "\u2983": { math: "\\lBrace" },
      "\u2984": { math: "\\rBrace" },
      "\u2986": { math: "\\Elroang" },
      "\u2987": { math: "\\limg" },
      "\u2988": { math: "\\rimg" },
      "\u2989": { math: "\\lblot" },
      "\u298A": { math: "\\rblot" },
      "\u298B": { math: "\\lbrackubar" },
      "\u298C": { math: "\\rbrackubar" },
      "\u298D": { math: "\\lbrackultick" },
      "\u298E": { math: "\\rbracklrtick" },
      "\u298F": { math: "\\lbracklltick" },
      "\u2990": { math: "\\rbrackurtick" },
      "\u2991": { math: "\\langledot" },
      "\u2992": { math: "\\rangledot" },
      "\u2993": { math: "<\\kern-0.58em(" },
      "\u2995": { math: "\\Lparengtr" },
      "\u2996": { math: "\\Rparenless" },
      "\u2997": { math: "\\lblkbrbrak" },
      "\u2998": { math: "\\rblkbrbrak" },
      "\u2999": { math: "\\Elzddfnc" },
      "\u299A": { math: "\\vzigzag" },
      "\u299B": { math: "\\measuredangleleft" },
      "\u299C": { math: "\\Angle" },
      "\u299D": { math: "\\rightanglemdot" },
      "\u299E": { math: "\\angles" },
      "\u299F": { math: "\\angdnr" },
      "\u29A0": { math: "\\Elzlpargt" },
      "\u29A1": { math: "\\sphericalangleup" },
      "\u29A2": { math: "\\turnangle" },
      "\u29A3": { math: "\\revangle" },
      "\u29A4": { math: "\\angleubar" },
      "\u29A5": { math: "\\revangleubar" },
      "\u29A6": { math: "\\wideangledown" },
      "\u29A7": { math: "\\wideangleup" },
      "\u29A8": { math: "\\measanglerutone" },
      "\u29A9": { math: "\\measanglelutonw" },
      "\u29AA": { math: "\\measanglerdtose" },
      "\u29AB": { math: "\\measangleldtosw" },
      "\u29AC": { math: "\\measangleurtone" },
      "\u29AD": { math: "\\measangleultonw" },
      "\u29AE": { math: "\\measangledrtose" },
      "\u29AF": { math: "\\measangledltosw" },
      "\u29B0": { math: "\\revemptyset" },
      "\u29B1": { math: "\\emptysetobar" },
      "\u29B2": { math: "\\emptysetocirc" },
      "\u29B3": { math: "\\emptysetoarr" },
      "\u29B4": { math: "\\emptysetoarrl" },
      "\u29B7": { math: "\\circledparallel" },
      "\u29B8": { math: "\\circledbslash" },
      "\u29B9": { math: "\\operp" },
      "\u29BA": { math: "\\obot" },
      "\u29BB": { math: "\\olcross" },
      "\u29BC": { math: "\\odotslashdot" },
      "\u29BD": { math: "\\uparrowoncircle" },
      "\u29BE": { math: "\\circledwhitebullet" },
      "\u29BF": { math: "\\circledbullet" },
      "\u29C0": { math: "\\circledless" },
      "\u29C1": { math: "\\circledgtr" },
      "\u29C2": { math: "\\cirscir" },
      "\u29C3": { math: "\\cirE" },
      "\u29C4": { math: "\\boxslash" },
      "\u29C5": { math: "\\boxbslash" },
      "\u29C6": { math: "\\boxast" },
      "\u29C7": { math: "\\boxcircle" },
      "\u29C8": { math: "\\boxbox" },
      "\u29C9": { math: "\\boxonbox" },
      "\u29CA": { math: "\\ElzLap" },
      "\u29CB": { math: "\\Elzdefas" },
      "\u29CC": { math: "\\triangles" },
      "\u29CD": { math: "\\triangleserifs" },
      "\u29CE": { math: "\\rtriltri" },
      "\u29CF": { math: "\\LeftTriangleBar" },
      "\u29CF\u0338": { math: "\\NotLeftTriangleBar" },
      "\u29D0": { math: "\\RightTriangleBar" },
      "\u29D0\u0338": { math: "\\NotRightTriangleBar" },
      "\u29D1": { math: "\\lfbowtie" },
      "\u29D2": { math: "\\rfbowtie" },
      "\u29D3": { math: "\\fbowtie" },
      "\u29D4": { math: "\\lftimes" },
      "\u29D5": { math: "\\rftimes" },
      "\u29D6": { math: "\\hourglass" },
      "\u29D7": { math: "\\blackhourglass" },
      "\u29D8": { math: "\\lvzigzag" },
      "\u29D9": { math: "\\rvzigzag" },
      "\u29DA": { math: "\\Lvzigzag" },
      "\u29DB": { math: "\\Rvzigzag" },
      "\u29DD": { math: "\\tieinfty" },
      "\u29DE": { math: "\\nvinfty" },
      "\u29DF": { math: "\\multimapboth" },
      "\u29E0": { math: "\\laplac" },
      "\u29E1": { math: "\\lrtriangleeq" },
      "\u29E2": { math: "\\shuffle" },
      "\u29E3": { math: "\\eparsl" },
      "\u29E4": { math: "\\smeparsl" },
      "\u29E5": { math: "\\eqvparsl" },
      "\u29E6": { math: "\\gleichstark" },
      "\u29E7": { math: "\\thermod" },
      "\u29E8": { math: "\\downtriangleleftblack" },
      "\u29E9": { math: "\\downtrianglerightblack" },
      "\u29EA": { math: "\\blackdiamonddownarrow" },
      "\u29EB": { math: "\\blacklozenge" },
      "\u29EC": { math: "\\circledownarrow" },
      "\u29ED": { math: "\\blackcircledownarrow" },
      "\u29EE": { math: "\\errbarsquare" },
      "\u29EF": { math: "\\errbarblacksquare" },
      "\u29F0": { math: "\\errbardiamond" },
      "\u29F1": { math: "\\errbarblackdiamond" },
      "\u29F2": { math: "\\errbarcircle" },
      "\u29F3": { math: "\\errbarblackcircle" },
      "\u29F4": { math: "\\RuleDelayed" },
      "\u29F5": { math: "\\setminus" },
      "\u29F6": { math: "\\dsol" },
      "\u29F7": { math: "\\rsolbar" },
      "\u29F8": { math: "\\xsol" },
      "\u29F9": { math: "\\zhide" },
      "\u29FA": { math: "\\doubleplus" },
      "\u29FB": { math: "\\tripleplus" },
      "\u29FC": { math: "\\lcurvyangle" },
      "\u29FD": { math: "\\rcurvyangle" },
      "\u29FE": { math: "\\tplus" },
      "\u29FF": { math: "\\tminus" },
      "\u2A00": { math: "\\bigodot" },
      "\u2A01": { math: "\\bigoplus" },
      "\u2A02": { math: "\\bigotimes" },
      "\u2A03": { math: "\\bigcupdot" },
      "\u2A04": { math: "\\Elxuplus" },
      "\u2A05": { math: "\\ElzThr" },
      "\u2A06": { math: "\\Elxsqcup" },
      "\u2A07": { math: "\\ElzInf" },
      "\u2A08": { math: "\\ElzSup" },
      "\u2A09": { math: "\\varprod" },
      "\u2A0A": { math: "\\modtwosum" },
      "\u2A0B": { math: "\\sumint" },
      "\u2A0C": { math: "\\iiiint" },
      "\u2A0D": { math: "\\ElzCint" },
      "\u2A0E": { math: "\\intBar" },
      "\u2A0F": { math: "\\clockoint" },
      "\u2A11": { math: "\\awint" },
      "\u2A12": { math: "\\rppolint" },
      "\u2A13": { math: "\\scpolint" },
      "\u2A14": { math: "\\npolint" },
      "\u2A15": { math: "\\pointint" },
      "\u2A16": { math: "\\sqrint" },
      "\u2A17": { math: "\\intlarhk" },
      "\u2A18": { math: "\\intx" },
      "\u2A19": { math: "\\intcap" },
      "\u2A1A": { math: "\\intcup" },
      "\u2A1B": { math: "\\upint" },
      "\u2A1C": { math: "\\lowint" },
      "\u2A1D": { math: "\\Join" },
      "\u2A1E": { math: "\\bigtriangleleft" },
      "\u2A1F": { math: "\\zcmp" },
      "\u2A20": { math: "\\zpipe" },
      "\u2A21": { math: "\\zproject" },
      "\u2A22": { math: "\\ringplus" },
      "\u2A23": { math: "\\plushat" },
      "\u2A24": { math: "\\simplus" },
      "\u2A26": { math: "\\plussim" },
      "\u2A27": { math: "\\plussubtwo" },
      "\u2A28": { math: "\\plustrif" },
      "\u2A29": { math: "\\commaminus" },
      "\u2A2B": { math: "\\minusfdots" },
      "\u2A2C": { math: "\\minusrdots" },
      "\u2A2F": { math: "\\ElzTimes" },
      "\u2A30": { math: "\\dottimes" },
      "\u2A31": { math: "\\timesbar" },
      "\u2A32": { math: "\\btimes" },
      "\u2A33": { math: "\\smashtimes" },
      "\u2A36": { math: "\\otimeshat" },
      "\u2A37": { math: "\\Otimes" },
      "\u2A38": { math: "\\odiv" },
      "\u2A39": { math: "\\triangleplus" },
      "\u2A3A": { math: "\\triangleminus" },
      "\u2A3B": { math: "\\triangletimes" },
      "\u2A3D": { math: "\\intprodr" },
      "\u2A3E": { math: "\\fcmp" },
      "\u2A3F": { math: "\\amalg" },
      "\u2A40": { math: "\\capdot" },
      "\u2A41": { math: "\\uminus" },
      "\u2A42": { math: "\\barcup" },
      "\u2A43": { math: "\\barcap" },
      "\u2A44": { math: "\\capwedge" },
      "\u2A45": { math: "\\cupvee" },
      "\u2A46": { math: "\\cupovercap" },
      "\u2A47": { math: "\\capovercup" },
      "\u2A48": { math: "\\cupbarcap" },
      "\u2A49": { math: "\\capbarcup" },
      "\u2A4A": { math: "\\twocups" },
      "\u2A4B": { math: "\\twocaps" },
      "\u2A4C": { math: "\\closedvarcup" },
      "\u2A4D": { math: "\\closedvarcap" },
      "\u2A4E": { math: "\\Sqcap" },
      "\u2A4F": { math: "\\Sqcup" },
      "\u2A50": { math: "\\closedvarcupsmashprod" },
      "\u2A51": { math: "\\wedgeodot" },
      "\u2A52": { math: "\\veeodot" },
      "\u2A53": { math: "\\ElzAnd" },
      "\u2A54": { math: "\\ElzOr" },
      "\u2A56": { math: "\\ElOr" },
      "\u2A57": { math: "\\bigslopedvee" },
      "\u2A58": { math: "\\bigslopedwedge" },
      "\u2A59": { math: "\\veeonwedge" },
      "\u2A5A": { math: "\\wedgemidvert" },
      "\u2A5B": { math: "\\veemidvert" },
      "\u2A5C": { math: "\\midbarwedge" },
      "\u2A5D": { math: "\\midbarvee" },
      "\u2A5E": { math: "\\perspcorrespond" },
      "\u2A5F": { math: "\\Elzminhat" },
      "\u2A60": { math: "\\wedgedoublebar" },
      "\u2A61": { math: "\\varveebar" },
      "\u2A62": { math: "\\doublebarvee" },
      "\u2A64": { math: "\\dsub" },
      "\u2A65": { math: "\\rsub" },
      "\u2A66": { math: "\\eqdot" },
      "\u2A67": { math: "\\dotequiv" },
      "\u2A68": { math: "\\equivVert" },
      "\u2A69": { math: "\\equivVvert" },
      "\u2A6A": { math: "\\dotsim" },
      "\u2A6B": { math: "\\simrdots" },
      "\u2A6C": { math: "\\simminussim" },
      "\u2A6D": { math: "\\congdot" },
      "\u2A6E": { math: "\\stackrel{*}{=}" },
      "\u2A6F": { math: "\\hatapprox" },
      "\u2A70": { math: "\\approxeqq" },
      "\u2A71": { math: "\\eqqplus" },
      "\u2A72": { math: "\\pluseqq" },
      "\u2A73": { math: "\\eqqsim" },
      "\u2A74": { math: "\\Coloneqq" },
      "\u2A75": { math: "\\Equal" },
      "\u2A76": { math: "\\Same" },
      "\u2A77": { math: "\\ddotseq" },
      "\u2A78": { math: "\\equivDD" },
      "\u2A79": { math: "\\ltcir" },
      "\u2A7A": { math: "\\gtcir" },
      "\u2A7B": { math: "\\ltquest" },
      "\u2A7C": { math: "\\gtquest" },
      "\u2A7D": { math: "\\leqslant", mathpackages: ["amssymb"] },
      "\u2A7D\u0338": { math: "\\nleqslant", mathpackages: ["amssymb"] },
      "\u2A7E": { math: "\\geqslant", mathpackages: ["amssymb"] },
      "\u2A7E\u0338": { math: "\\ngeqslant", mathpackages: ["amssymb"] },
      "\u2A7F": { math: "\\lesdot" },
      "\u2A80": { math: "\\gesdot" },
      "\u2A81": { math: "\\lesdoto" },
      "\u2A82": { math: "\\gesdoto" },
      "\u2A83": { math: "\\lesdotor" },
      "\u2A84": { math: "\\gesdotol" },
      "\u2A85": { math: "\\lessapprox" },
      "\u2A86": { math: "\\gtrapprox" },
      "\u2A87": { math: "\\lneq" },
      "\u2A88": { math: "\\gneq" },
      "\u2A89": { math: "\\lnapprox" },
      "\u2A8A": { math: "\\gnapprox" },
      "\u2A8B": { math: "\\lesseqqgtr" },
      "\u2A8C": { math: "\\gtreqqless" },
      "\u2A8D": { math: "\\lsime" },
      "\u2A8E": { math: "\\gsime" },
      "\u2A8F": { math: "\\lsimg" },
      "\u2A90": { math: "\\gsiml" },
      "\u2A91": { math: "\\lgE" },
      "\u2A92": { math: "\\glE" },
      "\u2A93": { math: "\\lesges" },
      "\u2A94": { math: "\\gesles" },
      "\u2A95": { math: "\\eqslantless" },
      "\u2A96": { math: "\\eqslantgtr" },
      "\u2A97": { math: "\\elsdot" },
      "\u2A98": { math: "\\egsdot" },
      "\u2A99": { math: "\\eqqless" },
      "\u2A9A": { math: "\\eqqgtr" },
      "\u2A9B": { math: "\\eqqslantless" },
      "\u2A9C": { math: "\\eqqslantgtr" },
      "\u2A9D": { math: "\\Pisymbol{ppi020}{117}" },
      "\u2A9E": { math: "\\Pisymbol{ppi020}{105}" },
      "\u2A9F": { math: "\\simlE" },
      "\u2AA0": { math: "\\simgE" },
      "\u2AA1": { math: "\\NestedLessLess" },
      "\u2AA1\u0338": { math: "\\NotNestedLessLess" },
      "\u2AA2": { math: "\\NestedGreaterGreater" },
      "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" },
      "\u2AA3": { math: "\\partialmeetcontraction" },
      "\u2AA4": { math: "\\glj" },
      "\u2AA5": { math: "\\gla" },
      "\u2AA6": { math: "\\leftslice" },
      "\u2AA7": { math: "\\rightslice" },
      "\u2AA8": { math: "\\lescc" },
      "\u2AA9": { math: "\\gescc" },
      "\u2AAA": { math: "\\smt" },
      "\u2AAB": { math: "\\lat" },
      "\u2AAC": { math: "\\smte" },
      "\u2AAD": { math: "\\late" },
      "\u2AAE": { math: "\\bumpeqq" },
      "\u2AAF": { math: "\\preceq" },
      "\u2AAF\u0338": { math: "\\not\\preceq" },
      "\u2AB0": { math: "\\succeq" },
      "\u2AB0\u0338": { math: "\\not\\succeq" },
      "\u2AB1": { math: "\\precneq" },
      "\u2AB2": { math: "\\succneq" },
      "\u2AB3": { math: "\\preceqq" },
      "\u2AB4": { math: "\\succeqq" },
      "\u2AB5": { math: "\\precneqq" },
      "\u2AB6": { math: "\\succneqq" },
      "\u2AB7": { math: "\\precapprox" },
      "\u2AB8": { math: "\\succapprox" },
      "\u2AB9": { math: "\\precnapprox" },
      "\u2ABA": { math: "\\succnapprox" },
      "\u2ABB": { math: "\\llcurly" },
      "\u2ABC": { math: "\\ggcurly" },
      "\u2ABD": { math: "\\subsetdot" },
      "\u2ABE": { math: "\\supsetdot" },
      "\u2ABF": { math: "\\subsetplus" },
      "\u2AC0": { math: "\\supsetplus" },
      "\u2AC1": { math: "\\submult" },
      "\u2AC2": { math: "\\supmult" },
      "\u2AC3": { math: "\\subedot" },
      "\u2AC4": { math: "\\supedot" },
      "\u2AC5": { math: "\\subseteqq" },
      "\u2AC5\u0338": { math: "\\nsubseteqq" },
      "\u2AC6": { math: "\\supseteqq" },
      "\u2AC6\u0338": { math: "\\nsupseteqq" },
      "\u2AC7": { math: "\\subsim" },
      "\u2AC8": { math: "\\supsim" },
      "\u2AC9": { math: "\\subsetapprox" },
      "\u2ACA": { math: "\\supsetapprox" },
      "\u2ACB": { math: "\\subsetneqq" },
      "\u2ACC": { math: "\\supsetneqq" },
      "\u2ACD": { math: "\\lsqhook" },
      "\u2ACE": { math: "\\rsqhook" },
      "\u2ACF": { math: "\\csub" },
      "\u2AD0": { math: "\\csup" },
      "\u2AD1": { math: "\\csube" },
      "\u2AD2": { math: "\\csupe" },
      "\u2AD3": { math: "\\subsup" },
      "\u2AD4": { math: "\\supsub" },
      "\u2AD5": { math: "\\subsub" },
      "\u2AD6": { math: "\\supsup" },
      "\u2AD7": { math: "\\suphsub" },
      "\u2AD8": { math: "\\supdsub" },
      "\u2AD9": { math: "\\forkv" },
      "\u2ADA": { math: "\\topfork" },
      "\u2ADB": { math: "\\mlcp" },
      "\u2ADC": { math: "\\forks" },
      "\u2ADD": { math: "\\forksnot" },
      "\u2ADD\u0338": { math: "\\forks" },
      "\u2ADE": { math: "\\shortlefttack" },
      "\u2ADF": { math: "\\shortdowntack" },
      "\u2AE0": { math: "\\shortuptack" },
      "\u2AE1": { math: "\\perps" },
      "\u2AE2": { math: "\\vDdash" },
      "\u2AE3": { math: "\\dashV" },
      "\u2AE4": { math: "\\Dashv" },
      "\u2AE5": { math: "\\DashV" },
      "\u2AE6": { math: "\\varVdash" },
      "\u2AE7": { math: "\\Barv" },
      "\u2AE8": { math: "\\vBar" },
      "\u2AE9": { math: "\\vBarv" },
      "\u2AEA": { math: "\\Top" },
      "\u2AEC": { math: "\\Not" },
      "\u2AED": { math: "\\bNot" },
      "\u2AEE": { math: "\\revnmid" },
      "\u2AEF": { math: "\\cirmid" },
      "\u2AF0": { math: "\\midcir" },
      "\u2AF1": { math: "\\topcir" },
      "\u2AF2": { math: "\\nhpar" },
      "\u2AF3": { math: "\\parsim" },
      "\u2AF4": { math: "\\interleave" },
      "\u2AF5": { math: "\\nhVvert" },
      "\u2AF6": { math: "\\Elztdcol" },
      "\u2AF7": { math: "\\lllnest" },
      "\u2AF8": { math: "\\gggnest" },
      "\u2AF9": { math: "\\leqqslant" },
      "\u2AFA": { math: "\\geqqslant" },
      "\u2AFB": { math: "\\trslash" },
      "\u2AFC": { math: "\\biginterleave" },
      "\u2AFD": { math: "{{/}\\!\\!{/}}" },
      "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" },
      "\u2AFE": { math: "\\talloblong" },
      "\u2AFF": { math: "\\bigtalloblong" },
      "\u2B12": { math: "\\squaretopblack" },
      "\u2B13": { math: "\\squarebotblack" },
      "\u2B14": { math: "\\squareurblack" },
      "\u2B15": { math: "\\squarellblack" },
      "\u2B16": { math: "\\diamondleftblack" },
      "\u2B17": { math: "\\diamondrightblack" },
      "\u2B18": { math: "\\diamondtopblack" },
      "\u2B19": { math: "\\diamondbotblack" },
      "\u2B1A": { math: "\\dottedsquare" },
      "\u2B1B": { math: "\\blacksquare" },
      "\u2B1C": { math: "\\square" },
      "\u2B1D": { math: "\\vysmblksquare" },
      "\u2B1E": { math: "\\vysmwhtsquare" },
      "\u2B1F": { math: "\\pentagonblack" },
      "\u2B20": { math: "\\pentagon" },
      "\u2B21": { math: "\\varhexagon" },
      "\u2B22": { math: "\\varhexagonblack" },
      "\u2B23": { math: "\\hexagonblack" },
      "\u2B24": { math: "\\lgblkcircle" },
      "\u2B25": { math: "\\mdblkdiamond" },
      "\u2B26": { math: "\\mdwhtdiamond" },
      "\u2B27": { math: "\\mdblklozenge" },
      "\u2B28": { math: "\\mdwhtlozenge" },
      "\u2B29": { math: "\\smblkdiamond" },
      "\u2B2A": { math: "\\smblklozenge" },
      "\u2B2B": { math: "\\smwhtlozenge" },
      "\u2B2C": { math: "\\blkhorzoval" },
      "\u2B2D": { math: "\\whthorzoval" },
      "\u2B2E": { math: "\\blkvertoval" },
      "\u2B2F": { math: "\\whtvertoval" },
      "\u2B30": { math: "\\circleonleftarrow" },
      "\u2B31": { math: "\\leftthreearrows" },
      "\u2B32": { math: "\\leftarrowonoplus" },
      "\u2B33": { math: "\\longleftsquigarrow" },
      "\u2B34": { math: "\\nvtwoheadleftarrow" },
      "\u2B35": { math: "\\nVtwoheadleftarrow" },
      "\u2B36": { math: "\\twoheadmapsfrom" },
      "\u2B37": { math: "\\twoheadleftdbkarrow" },
      "\u2B38": { math: "\\leftdotarrow" },
      "\u2B39": { math: "\\nvleftarrowtail" },
      "\u2B3A": { math: "\\nVleftarrowtail" },
      "\u2B3B": { math: "\\twoheadleftarrowtail" },
      "\u2B3C": { math: "\\nvtwoheadleftarrowtail" },
      "\u2B3D": { math: "\\nVtwoheadleftarrowtail" },
      "\u2B3E": { math: "\\leftarrowx" },
      "\u2B3F": { math: "\\leftcurvedarrow" },
      "\u2B40": { math: "\\equalleftarrow" },
      "\u2B41": { math: "\\bsimilarleftarrow" },
      "\u2B42": { math: "\\leftarrowbackapprox" },
      "\u2B43": { math: "\\rightarrowgtr" },
      "\u2B44": { math: "\\rightarrowsupset" },
      "\u2B45": { math: "\\LLeftarrow" },
      "\u2B46": { math: "\\RRightarrow" },
      "\u2B47": { math: "\\bsimilarrightarrow" },
      "\u2B48": { math: "\\rightarrowbackapprox" },
      "\u2B49": { math: "\\similarleftarrow" },
      "\u2B4A": { math: "\\leftarrowapprox" },
      "\u2B4B": { math: "\\leftarrowbsimilar" },
      "\u2B4C": { math: "\\rightarrowbsimilar" },
      "\u2B50": { math: "\\medwhitestar" },
      "\u2B51": { math: "\\medblackstar" },
      "\u2B52": { math: "\\smwhitestar" },
      "\u2B53": { math: "\\rightpentagonblack" },
      "\u2B54": { math: "\\rightpentagon" },
      "\u3008": { math: "\\langle" },
      "\u3009": { math: "\\rangle" },
      "\u3012": { math: "\\postalmark" },
      "\u3014": { math: "\\lbrbrak" },
      "\u3015": { math: "\\rbrbrak" },
      "\u301A": { math: "\\openbracketleft" },
      "\u301B": { math: "\\openbracketright" },
      "\u3030": { math: "\\hzigzag" },
      \uFB00: { text: "ff" },
      \uFB01: { text: "fi" },
      \uFB02: { text: "fl" },
      \uFB03: { text: "ffi" },
      \uFB04: { text: "ffl" },
      \uFB05: { text: "st" },
      \uFB06: { text: "st" },
      "\uFFFD": { text: "{\\dbend}" },
      "\u{1D400}": { math: "\\mathbf{A}" },
      "\u{1D401}": { math: "\\mathbf{B}" },
      "\u{1D402}": { math: "\\mathbf{C}" },
      "\u{1D403}": { math: "\\mathbf{D}" },
      "\u{1D404}": { math: "\\mathbf{E}" },
      "\u{1D405}": { math: "\\mathbf{F}" },
      "\u{1D406}": { math: "\\mathbf{G}" },
      "\u{1D407}": { math: "\\mathbf{H}" },
      "\u{1D408}": { math: "\\mathbf{I}" },
      "\u{1D409}": { math: "\\mathbf{J}" },
      "\u{1D40A}": { math: "\\mathbf{K}" },
      "\u{1D40B}": { math: "\\mathbf{L}" },
      "\u{1D40C}": { math: "\\mathbf{M}" },
      "\u{1D40D}": { math: "\\mathbf{N}" },
      "\u{1D40E}": { math: "\\mathbf{O}" },
      "\u{1D40F}": { math: "\\mathbf{P}" },
      "\u{1D410}": { math: "\\mathbf{Q}" },
      "\u{1D411}": { math: "\\mathbf{R}" },
      "\u{1D412}": { math: "\\mathbf{S}" },
      "\u{1D413}": { math: "\\mathbf{T}" },
      "\u{1D414}": { math: "\\mathbf{U}" },
      "\u{1D415}": { math: "\\mathbf{V}" },
      "\u{1D416}": { math: "\\mathbf{W}" },
      "\u{1D417}": { math: "\\mathbf{X}" },
      "\u{1D418}": { math: "\\mathbf{Y}" },
      "\u{1D419}": { math: "\\mathbf{Z}" },
      "\u{1D41A}": { math: "\\mathbf{a}" },
      "\u{1D41B}": { math: "\\mathbf{b}" },
      "\u{1D41C}": { math: "\\mathbf{c}" },
      "\u{1D41D}": { math: "\\mathbf{d}" },
      "\u{1D41E}": { math: "\\mathbf{e}" },
      "\u{1D41F}": { math: "\\mathbf{f}" },
      "\u{1D420}": { math: "\\mathbf{g}" },
      "\u{1D421}": { math: "\\mathbf{h}" },
      "\u{1D422}": { math: "\\mathbf{i}" },
      "\u{1D423}": { math: "\\mathbf{j}" },
      "\u{1D424}": { math: "\\mathbf{k}" },
      "\u{1D425}": { math: "\\mathbf{l}" },
      "\u{1D426}": { math: "\\mathbf{m}" },
      "\u{1D427}": { math: "\\mathbf{n}" },
      "\u{1D428}": { math: "\\mathbf{o}" },
      "\u{1D429}": { math: "\\mathbf{p}" },
      "\u{1D42A}": { math: "\\mathbf{q}" },
      "\u{1D42B}": { math: "\\mathbf{r}" },
      "\u{1D42C}": { math: "\\mathbf{s}" },
      "\u{1D42D}": { math: "\\mathbf{t}" },
      "\u{1D42E}": { math: "\\mathbf{u}" },
      "\u{1D42F}": { math: "\\mathbf{v}" },
      "\u{1D430}": { math: "\\mathbf{w}" },
      "\u{1D431}": { math: "\\mathbf{x}" },
      "\u{1D432}": { math: "\\mathbf{y}" },
      "\u{1D433}": { math: "\\mathbf{z}" },
      "\u{1D434}": { math: "\\mathsl{A}" },
      "\u{1D435}": { math: "\\mathsl{B}" },
      "\u{1D436}": { math: "\\mathsl{C}" },
      "\u{1D437}": { math: "\\mathsl{D}" },
      "\u{1D438}": { math: "\\mathsl{E}" },
      "\u{1D439}": { math: "\\mathsl{F}" },
      "\u{1D43A}": { math: "\\mathsl{G}" },
      "\u{1D43B}": { math: "\\mathsl{H}" },
      "\u{1D43C}": { math: "\\mathsl{I}" },
      "\u{1D43D}": { math: "\\mathsl{J}" },
      "\u{1D43E}": { math: "\\mathsl{K}" },
      "\u{1D43F}": { math: "\\mathsl{L}" },
      "\u{1D440}": { math: "\\mathsl{M}" },
      "\u{1D441}": { math: "\\mathsl{N}" },
      "\u{1D442}": { math: "\\mathsl{O}" },
      "\u{1D443}": { math: "\\mathsl{P}" },
      "\u{1D444}": { math: "\\mathsl{Q}" },
      "\u{1D445}": { math: "\\mathsl{R}" },
      "\u{1D446}": { math: "\\mathsl{S}" },
      "\u{1D447}": { math: "\\mathsl{T}" },
      "\u{1D448}": { math: "\\mathsl{U}" },
      "\u{1D449}": { math: "\\mathsl{V}" },
      "\u{1D44A}": { math: "\\mathsl{W}" },
      "\u{1D44B}": { math: "\\mathsl{X}" },
      "\u{1D44C}": { math: "\\mathsl{Y}" },
      "\u{1D44D}": { math: "\\mathsl{Z}" },
      "\u{1D44E}": { math: "\\mathsl{a}" },
      "\u{1D44F}": { math: "\\mathsl{b}" },
      "\u{1D450}": { math: "\\mathsl{c}" },
      "\u{1D451}": { math: "\\mathsl{d}" },
      "\u{1D452}": { math: "\\mathsl{e}" },
      "\u{1D453}": { math: "\\mathsl{f}" },
      "\u{1D454}": { math: "\\mathsl{g}" },
      "\u{1D456}": { math: "\\mathsl{i}" },
      "\u{1D457}": { math: "\\mathsl{j}" },
      "\u{1D458}": { math: "\\mathsl{k}" },
      "\u{1D459}": { math: "\\mathsl{l}" },
      "\u{1D45A}": { math: "\\mathsl{m}" },
      "\u{1D45B}": { math: "\\mathsl{n}" },
      "\u{1D45C}": { math: "\\mathsl{o}" },
      "\u{1D45D}": { math: "\\mathsl{p}" },
      "\u{1D45E}": { math: "\\mathsl{q}" },
      "\u{1D45F}": { math: "\\mathsl{r}" },
      "\u{1D460}": { math: "\\mathsl{s}" },
      "\u{1D461}": { math: "\\mathsl{t}" },
      "\u{1D462}": { math: "\\mathsl{u}" },
      "\u{1D463}": { math: "\\mathsl{v}" },
      "\u{1D464}": { math: "\\mathsl{w}" },
      "\u{1D465}": { math: "\\mathsl{x}" },
      "\u{1D466}": { math: "\\mathsl{y}" },
      "\u{1D467}": { math: "\\mathsl{z}" },
      "\u{1D468}": { math: "\\mathbit{A}" },
      "\u{1D469}": { math: "\\mathbit{B}" },
      "\u{1D46A}": { math: "\\mathbit{C}" },
      "\u{1D46B}": { math: "\\mathbit{D}" },
      "\u{1D46C}": { math: "\\mathbit{E}" },
      "\u{1D46D}": { math: "\\mathbit{F}" },
      "\u{1D46E}": { math: "\\mathbit{G}" },
      "\u{1D46F}": { math: "\\mathbit{H}" },
      "\u{1D470}": { math: "\\mathbit{I}" },
      "\u{1D471}": { math: "\\mathbit{J}" },
      "\u{1D472}": { math: "\\mathbit{K}" },
      "\u{1D473}": { math: "\\mathbit{L}" },
      "\u{1D474}": { math: "\\mathbit{M}" },
      "\u{1D475}": { math: "\\mathbit{N}" },
      "\u{1D476}": { math: "\\mathbit{O}" },
      "\u{1D477}": { math: "\\mathbit{P}" },
      "\u{1D478}": { math: "\\mathbit{Q}" },
      "\u{1D479}": { math: "\\mathbit{R}" },
      "\u{1D47A}": { math: "\\mathbit{S}" },
      "\u{1D47B}": { math: "\\mathbit{T}" },
      "\u{1D47C}": { math: "\\mathbit{U}" },
      "\u{1D47D}": { math: "\\mathbit{V}" },
      "\u{1D47E}": { math: "\\mathbit{W}" },
      "\u{1D47F}": { math: "\\mathbit{X}" },
      "\u{1D480}": { math: "\\mathbit{Y}" },
      "\u{1D481}": { math: "\\mathbit{Z}" },
      "\u{1D482}": { math: "\\mathbit{a}" },
      "\u{1D483}": { math: "\\mathbit{b}" },
      "\u{1D484}": { math: "\\mathbit{c}" },
      "\u{1D485}": { math: "\\mathbit{d}" },
      "\u{1D486}": { math: "\\mathbit{e}" },
      "\u{1D487}": { math: "\\mathbit{f}" },
      "\u{1D488}": { math: "\\mathbit{g}" },
      "\u{1D489}": { math: "\\mathbit{h}" },
      "\u{1D48A}": { math: "\\mathbit{i}" },
      "\u{1D48B}": { math: "\\mathbit{j}" },
      "\u{1D48C}": { math: "\\mathbit{k}" },
      "\u{1D48D}": { math: "\\mathbit{l}" },
      "\u{1D48E}": { math: "\\mathbit{m}" },
      "\u{1D48F}": { math: "\\mathbit{n}" },
      "\u{1D490}": { math: "\\mathbit{o}" },
      "\u{1D491}": { math: "\\mathbit{p}" },
      "\u{1D492}": { math: "\\mathbit{q}" },
      "\u{1D493}": { math: "\\mathbit{r}" },
      "\u{1D494}": { math: "\\mathbit{s}" },
      "\u{1D495}": { math: "\\mathbit{t}" },
      "\u{1D496}": { math: "\\mathbit{u}" },
      "\u{1D497}": { math: "\\mathbit{v}" },
      "\u{1D498}": { math: "\\mathbit{w}" },
      "\u{1D499}": { math: "\\mathbit{x}" },
      "\u{1D49A}": { math: "\\mathbit{y}" },
      "\u{1D49B}": { math: "\\mathbit{z}" },
      "\u{1D49C}": { math: "\\mathscr{A}" },
      "\u{1D49E}": { math: "\\mathscr{C}" },
      "\u{1D49F}": { math: "\\mathscr{D}" },
      "\u{1D4A2}": { math: "\\mathscr{G}" },
      "\u{1D4A5}": { math: "\\mathscr{J}" },
      "\u{1D4A6}": { math: "\\mathscr{K}" },
      "\u{1D4A9}": { math: "\\mathscr{N}" },
      "\u{1D4AA}": { math: "\\mathscr{O}" },
      "\u{1D4AB}": { math: "\\mathscr{P}" },
      "\u{1D4AC}": { math: "\\mathscr{Q}" },
      "\u{1D4AE}": { math: "\\mathscr{S}" },
      "\u{1D4AF}": { math: "\\mathscr{T}" },
      "\u{1D4B0}": { math: "\\mathscr{U}" },
      "\u{1D4B1}": { math: "\\mathscr{V}" },
      "\u{1D4B2}": { math: "\\mathscr{W}" },
      "\u{1D4B3}": { math: "\\mathscr{X}" },
      "\u{1D4B4}": { math: "\\mathscr{Y}" },
      "\u{1D4B5}": { math: "\\mathscr{Z}" },
      "\u{1D4B6}": { math: "\\mathscr{a}" },
      "\u{1D4B7}": { math: "\\mathscr{b}" },
      "\u{1D4B8}": { math: "\\mathscr{c}" },
      "\u{1D4B9}": { math: "\\mathscr{d}" },
      "\u{1D4BB}": { math: "\\mathscr{f}" },
      "\u{1D4BD}": { math: "\\mathscr{h}" },
      "\u{1D4BE}": { math: "\\mathscr{i}" },
      "\u{1D4BF}": { math: "\\mathscr{j}" },
      "\u{1D4C0}": { math: "\\mathscr{k}" },
      "\u{1D4C1}": { math: "\\mathscr{l}" },
      "\u{1D4C2}": { math: "\\mathscr{m}" },
      "\u{1D4C3}": { math: "\\mathscr{n}" },
      "\u{1D4C5}": { math: "\\mathscr{p}" },
      "\u{1D4C6}": { math: "\\mathscr{q}" },
      "\u{1D4C7}": { math: "\\mathscr{r}" },
      "\u{1D4C8}": { math: "\\mathscr{s}" },
      "\u{1D4C9}": { math: "\\mathscr{t}" },
      "\u{1D4CA}": { math: "\\mathscr{u}" },
      "\u{1D4CB}": { math: "\\mathscr{v}" },
      "\u{1D4CC}": { math: "\\mathscr{w}" },
      "\u{1D4CD}": { math: "\\mathscr{x}" },
      "\u{1D4CE}": { math: "\\mathscr{y}" },
      "\u{1D4CF}": { math: "\\mathscr{z}" },
      "\u{1D4D0}": { math: "\\mathmit{A}" },
      "\u{1D4D1}": { math: "\\mathmit{B}" },
      "\u{1D4D2}": { math: "\\mathmit{C}" },
      "\u{1D4D3}": { math: "\\mathmit{D}" },
      "\u{1D4D4}": { math: "\\mathmit{E}" },
      "\u{1D4D5}": { math: "\\mathmit{F}" },
      "\u{1D4D6}": { math: "\\mathmit{G}" },
      "\u{1D4D7}": { math: "\\mathmit{H}" },
      "\u{1D4D8}": { math: "\\mathmit{I}" },
      "\u{1D4D9}": { math: "\\mathmit{J}" },
      "\u{1D4DA}": { math: "\\mathmit{K}" },
      "\u{1D4DB}": { math: "\\mathmit{L}" },
      "\u{1D4DC}": { math: "\\mathmit{M}" },
      "\u{1D4DD}": { math: "\\mathmit{N}" },
      "\u{1D4DE}": { math: "\\mathmit{O}" },
      "\u{1D4DF}": { math: "\\mathmit{P}" },
      "\u{1D4E0}": { math: "\\mathmit{Q}" },
      "\u{1D4E1}": { math: "\\mathmit{R}" },
      "\u{1D4E2}": { math: "\\mathmit{S}" },
      "\u{1D4E3}": { math: "\\mathmit{T}" },
      "\u{1D4E4}": { math: "\\mathmit{U}" },
      "\u{1D4E5}": { math: "\\mathmit{V}" },
      "\u{1D4E6}": { math: "\\mathmit{W}" },
      "\u{1D4E7}": { math: "\\mathmit{X}" },
      "\u{1D4E8}": { math: "\\mathmit{Y}" },
      "\u{1D4E9}": { math: "\\mathmit{Z}" },
      "\u{1D4EA}": { math: "\\mathmit{a}" },
      "\u{1D4EB}": { math: "\\mathmit{b}" },
      "\u{1D4EC}": { math: "\\mathmit{c}" },
      "\u{1D4ED}": { math: "\\mathmit{d}" },
      "\u{1D4EE}": { math: "\\mathmit{e}" },
      "\u{1D4EF}": { math: "\\mathmit{f}" },
      "\u{1D4F0}": { math: "\\mathmit{g}" },
      "\u{1D4F1}": { math: "\\mathmit{h}" },
      "\u{1D4F2}": { math: "\\mathmit{i}" },
      "\u{1D4F3}": { math: "\\mathmit{j}" },
      "\u{1D4F4}": { math: "\\mathmit{k}" },
      "\u{1D4F5}": { math: "\\mathmit{l}" },
      "\u{1D4F6}": { math: "\\mathmit{m}" },
      "\u{1D4F7}": { math: "\\mathmit{n}" },
      "\u{1D4F8}": { math: "\\mathmit{o}" },
      "\u{1D4F9}": { math: "\\mathmit{p}" },
      "\u{1D4FA}": { math: "\\mathmit{q}" },
      "\u{1D4FB}": { math: "\\mathmit{r}" },
      "\u{1D4FC}": { math: "\\mathmit{s}" },
      "\u{1D4FD}": { math: "\\mathmit{t}" },
      "\u{1D4FE}": { math: "\\mathmit{u}" },
      "\u{1D4FF}": { math: "\\mathmit{v}" },
      "\u{1D500}": { math: "\\mathmit{w}" },
      "\u{1D501}": { math: "\\mathmit{x}" },
      "\u{1D502}": { math: "\\mathmit{y}" },
      "\u{1D503}": { math: "\\mathmit{z}" },
      "\u{1D504}": { math: "\\mathfrak{A}" },
      "\u{1D505}": { math: "\\mathfrak{B}" },
      "\u{1D507}": { math: "\\mathfrak{D}" },
      "\u{1D508}": { math: "\\mathfrak{E}" },
      "\u{1D509}": { math: "\\mathfrak{F}" },
      "\u{1D50A}": { math: "\\mathfrak{G}" },
      "\u{1D50D}": { math: "\\mathfrak{J}" },
      "\u{1D50E}": { math: "\\mathfrak{K}" },
      "\u{1D50F}": { math: "\\mathfrak{L}" },
      "\u{1D510}": { math: "\\mathfrak{M}" },
      "\u{1D511}": { math: "\\mathfrak{N}" },
      "\u{1D512}": { math: "\\mathfrak{O}" },
      "\u{1D513}": { math: "\\mathfrak{P}" },
      "\u{1D514}": { math: "\\mathfrak{Q}" },
      "\u{1D516}": { math: "\\mathfrak{S}" },
      "\u{1D517}": { math: "\\mathfrak{T}" },
      "\u{1D518}": { math: "\\mathfrak{U}" },
      "\u{1D519}": { math: "\\mathfrak{V}" },
      "\u{1D51A}": { math: "\\mathfrak{W}" },
      "\u{1D51B}": { math: "\\mathfrak{X}" },
      "\u{1D51C}": { math: "\\mathfrak{Y}" },
      "\u{1D51E}": { math: "\\mathfrak{a}" },
      "\u{1D51F}": { math: "\\mathfrak{b}" },
      "\u{1D520}": { math: "\\mathfrak{c}" },
      "\u{1D521}": { math: "\\mathfrak{d}" },
      "\u{1D522}": { math: "\\mathfrak{e}" },
      "\u{1D523}": { math: "\\mathfrak{f}" },
      "\u{1D524}": { math: "\\mathfrak{g}" },
      "\u{1D525}": { math: "\\mathfrak{h}" },
      "\u{1D526}": { math: "\\mathfrak{i}" },
      "\u{1D527}": { math: "\\mathfrak{j}" },
      "\u{1D528}": { math: "\\mathfrak{k}" },
      "\u{1D529}": { math: "\\mathfrak{l}" },
      "\u{1D52A}": { math: "\\mathfrak{m}" },
      "\u{1D52B}": { math: "\\mathfrak{n}" },
      "\u{1D52C}": { math: "\\mathfrak{o}" },
      "\u{1D52D}": { math: "\\mathfrak{p}" },
      "\u{1D52E}": { math: "\\mathfrak{q}" },
      "\u{1D52F}": { math: "\\mathfrak{r}" },
      "\u{1D530}": { math: "\\mathfrak{s}" },
      "\u{1D531}": { math: "\\mathfrak{t}" },
      "\u{1D532}": { math: "\\mathfrak{u}" },
      "\u{1D533}": { math: "\\mathfrak{v}" },
      "\u{1D534}": { math: "\\mathfrak{w}" },
      "\u{1D535}": { math: "\\mathfrak{x}" },
      "\u{1D536}": { math: "\\mathfrak{y}" },
      "\u{1D537}": { math: "\\mathfrak{z}" },
      "\u{1D538}": { math: "\\mathbb{A}" },
      "\u{1D539}": { math: "\\mathbb{B}" },
      "\u{1D53B}": { math: "\\mathbb{D}" },
      "\u{1D53C}": { math: "\\mathbb{E}" },
      "\u{1D53D}": { math: "\\mathbb{F}" },
      "\u{1D53E}": { math: "\\mathbb{G}" },
      "\u{1D540}": { math: "\\mathbb{I}" },
      "\u{1D541}": { math: "\\mathbb{J}" },
      "\u{1D542}": { math: "\\mathbb{K}" },
      "\u{1D543}": { math: "\\mathbb{L}" },
      "\u{1D544}": { math: "\\mathbb{M}" },
      "\u{1D546}": { math: "\\mathbb{O}" },
      "\u{1D54A}": { math: "\\mathbb{S}" },
      "\u{1D54B}": { math: "\\mathbb{T}" },
      "\u{1D54C}": { math: "\\mathbb{U}" },
      "\u{1D54D}": { math: "\\mathbb{V}" },
      "\u{1D54E}": { math: "\\mathbb{W}" },
      "\u{1D54F}": { math: "\\mathbb{X}" },
      "\u{1D550}": { math: "\\mathbb{Y}" },
      "\u{1D552}": { math: "\\mathbb{a}" },
      "\u{1D553}": { math: "\\mathbb{b}" },
      "\u{1D554}": { math: "\\mathbb{c}" },
      "\u{1D555}": { math: "\\mathbb{d}" },
      "\u{1D556}": { math: "\\mathbb{e}" },
      "\u{1D557}": { math: "\\mathbb{f}" },
      "\u{1D558}": { math: "\\mathbb{g}" },
      "\u{1D559}": { math: "\\mathbb{h}" },
      "\u{1D55A}": { math: "\\mathbb{i}" },
      "\u{1D55B}": { math: "\\mathbb{j}" },
      "\u{1D55C}": { math: "\\mathbb{k}" },
      "\u{1D55D}": { math: "\\mathbb{l}" },
      "\u{1D55E}": { math: "\\mathbb{m}" },
      "\u{1D55F}": { math: "\\mathbb{n}" },
      "\u{1D560}": { math: "\\mathbb{o}" },
      "\u{1D561}": { math: "\\mathbb{p}" },
      "\u{1D562}": { math: "\\mathbb{q}" },
      "\u{1D563}": { math: "\\mathbb{r}" },
      "\u{1D564}": { math: "\\mathbb{s}" },
      "\u{1D565}": { math: "\\mathbb{t}" },
      "\u{1D566}": { math: "\\mathbb{u}" },
      "\u{1D567}": { math: "\\mathbb{v}" },
      "\u{1D568}": { math: "\\mathbb{w}" },
      "\u{1D569}": { math: "\\mathbb{x}" },
      "\u{1D56A}": { math: "\\mathbb{y}" },
      "\u{1D56B}": { math: "\\mathbb{z}" },
      "\u{1D56C}": { math: "\\mathslbb{A}" },
      "\u{1D56D}": { math: "\\mathslbb{B}" },
      "\u{1D56E}": { math: "\\mathslbb{C}" },
      "\u{1D56F}": { math: "\\mathslbb{D}" },
      "\u{1D570}": { math: "\\mathslbb{E}" },
      "\u{1D571}": { math: "\\mathslbb{F}" },
      "\u{1D572}": { math: "\\mathslbb{G}" },
      "\u{1D573}": { math: "\\mathslbb{H}" },
      "\u{1D574}": { math: "\\mathslbb{I}" },
      "\u{1D575}": { math: "\\mathslbb{J}" },
      "\u{1D576}": { math: "\\mathslbb{K}" },
      "\u{1D577}": { math: "\\mathslbb{L}" },
      "\u{1D578}": { math: "\\mathslbb{M}" },
      "\u{1D579}": { math: "\\mathslbb{N}" },
      "\u{1D57A}": { math: "\\mathslbb{O}" },
      "\u{1D57B}": { math: "\\mathslbb{P}" },
      "\u{1D57C}": { math: "\\mathslbb{Q}" },
      "\u{1D57D}": { math: "\\mathslbb{R}" },
      "\u{1D57E}": { math: "\\mathslbb{S}" },
      "\u{1D57F}": { math: "\\mathslbb{T}" },
      "\u{1D580}": { math: "\\mathslbb{U}" },
      "\u{1D581}": { math: "\\mathslbb{V}" },
      "\u{1D582}": { math: "\\mathslbb{W}" },
      "\u{1D583}": { math: "\\mathslbb{X}" },
      "\u{1D584}": { math: "\\mathslbb{Y}" },
      "\u{1D585}": { math: "\\mathslbb{Z}" },
      "\u{1D586}": { math: "\\mathslbb{a}" },
      "\u{1D587}": { math: "\\mathslbb{b}" },
      "\u{1D588}": { math: "\\mathslbb{c}" },
      "\u{1D589}": { math: "\\mathslbb{d}" },
      "\u{1D58A}": { math: "\\mathslbb{e}" },
      "\u{1D58B}": { math: "\\mathslbb{f}" },
      "\u{1D58C}": { math: "\\mathslbb{g}" },
      "\u{1D58D}": { math: "\\mathslbb{h}" },
      "\u{1D58E}": { math: "\\mathslbb{i}" },
      "\u{1D58F}": { math: "\\mathslbb{j}" },
      "\u{1D590}": { math: "\\mathslbb{k}" },
      "\u{1D591}": { math: "\\mathslbb{l}" },
      "\u{1D592}": { math: "\\mathslbb{m}" },
      "\u{1D593}": { math: "\\mathslbb{n}" },
      "\u{1D594}": { math: "\\mathslbb{o}" },
      "\u{1D595}": { math: "\\mathslbb{p}" },
      "\u{1D596}": { math: "\\mathslbb{q}" },
      "\u{1D597}": { math: "\\mathslbb{r}" },
      "\u{1D598}": { math: "\\mathslbb{s}" },
      "\u{1D599}": { math: "\\mathslbb{t}" },
      "\u{1D59A}": { math: "\\mathslbb{u}" },
      "\u{1D59B}": { math: "\\mathslbb{v}" },
      "\u{1D59C}": { math: "\\mathslbb{w}" },
      "\u{1D59D}": { math: "\\mathslbb{x}" },
      "\u{1D59E}": { math: "\\mathslbb{y}" },
      "\u{1D59F}": { math: "\\mathslbb{z}" },
      "\u{1D5A0}": { math: "\\mathsf{A}" },
      "\u{1D5A1}": { math: "\\mathsf{B}" },
      "\u{1D5A2}": { math: "\\mathsf{C}" },
      "\u{1D5A3}": { math: "\\mathsf{D}" },
      "\u{1D5A4}": { math: "\\mathsf{E}" },
      "\u{1D5A5}": { math: "\\mathsf{F}" },
      "\u{1D5A6}": { math: "\\mathsf{G}" },
      "\u{1D5A7}": { math: "\\mathsf{H}" },
      "\u{1D5A8}": { math: "\\mathsf{I}" },
      "\u{1D5A9}": { math: "\\mathsf{J}" },
      "\u{1D5AA}": { math: "\\mathsf{K}" },
      "\u{1D5AB}": { math: "\\mathsf{L}" },
      "\u{1D5AC}": { math: "\\mathsf{M}" },
      "\u{1D5AD}": { math: "\\mathsf{N}" },
      "\u{1D5AE}": { math: "\\mathsf{O}" },
      "\u{1D5AF}": { math: "\\mathsf{P}" },
      "\u{1D5B0}": { math: "\\mathsf{Q}" },
      "\u{1D5B1}": { math: "\\mathsf{R}" },
      "\u{1D5B2}": { math: "\\mathsf{S}" },
      "\u{1D5B3}": { math: "\\mathsf{T}" },
      "\u{1D5B4}": { math: "\\mathsf{U}" },
      "\u{1D5B5}": { math: "\\mathsf{V}" },
      "\u{1D5B6}": { math: "\\mathsf{W}" },
      "\u{1D5B7}": { math: "\\mathsf{X}" },
      "\u{1D5B8}": { math: "\\mathsf{Y}" },
      "\u{1D5B9}": { math: "\\mathsf{Z}" },
      "\u{1D5BA}": { math: "\\mathsf{a}" },
      "\u{1D5BB}": { math: "\\mathsf{b}" },
      "\u{1D5BC}": { math: "\\mathsf{c}" },
      "\u{1D5BD}": { math: "\\mathsf{d}" },
      "\u{1D5BE}": { math: "\\mathsf{e}" },
      "\u{1D5BF}": { math: "\\mathsf{f}" },
      "\u{1D5C0}": { math: "\\mathsf{g}" },
      "\u{1D5C1}": { math: "\\mathsf{h}" },
      "\u{1D5C2}": { math: "\\mathsf{i}" },
      "\u{1D5C3}": { math: "\\mathsf{j}" },
      "\u{1D5C4}": { math: "\\mathsf{k}" },
      "\u{1D5C5}": { math: "\\mathsf{l}" },
      "\u{1D5C6}": { math: "\\mathsf{m}" },
      "\u{1D5C7}": { math: "\\mathsf{n}" },
      "\u{1D5C8}": { math: "\\mathsf{o}" },
      "\u{1D5C9}": { math: "\\mathsf{p}" },
      "\u{1D5CA}": { math: "\\mathsf{q}" },
      "\u{1D5CB}": { math: "\\mathsf{r}" },
      "\u{1D5CC}": { math: "\\mathsf{s}" },
      "\u{1D5CD}": { math: "\\mathsf{t}" },
      "\u{1D5CE}": { math: "\\mathsf{u}" },
      "\u{1D5CF}": { math: "\\mathsf{v}" },
      "\u{1D5D0}": { math: "\\mathsf{w}" },
      "\u{1D5D1}": { math: "\\mathsf{x}" },
      "\u{1D5D2}": { math: "\\mathsf{y}" },
      "\u{1D5D3}": { math: "\\mathsf{z}" },
      "\u{1D5D4}": { math: "\\mathsfbf{A}" },
      "\u{1D5D5}": { math: "\\mathsfbf{B}" },
      "\u{1D5D6}": { math: "\\mathsfbf{C}" },
      "\u{1D5D7}": { math: "\\mathsfbf{D}" },
      "\u{1D5D8}": { math: "\\mathsfbf{E}" },
      "\u{1D5D9}": { math: "\\mathsfbf{F}" },
      "\u{1D5DA}": { math: "\\mathsfbf{G}" },
      "\u{1D5DB}": { math: "\\mathsfbf{H}" },
      "\u{1D5DC}": { math: "\\mathsfbf{I}" },
      "\u{1D5DD}": { math: "\\mathsfbf{J}" },
      "\u{1D5DE}": { math: "\\mathsfbf{K}" },
      "\u{1D5DF}": { math: "\\mathsfbf{L}" },
      "\u{1D5E0}": { math: "\\mathsfbf{M}" },
      "\u{1D5E1}": { math: "\\mathsfbf{N}" },
      "\u{1D5E2}": { math: "\\mathsfbf{O}" },
      "\u{1D5E3}": { math: "\\mathsfbf{P}" },
      "\u{1D5E4}": { math: "\\mathsfbf{Q}" },
      "\u{1D5E5}": { math: "\\mathsfbf{R}" },
      "\u{1D5E6}": { math: "\\mathsfbf{S}" },
      "\u{1D5E7}": { math: "\\mathsfbf{T}" },
      "\u{1D5E8}": { math: "\\mathsfbf{U}" },
      "\u{1D5E9}": { math: "\\mathsfbf{V}" },
      "\u{1D5EA}": { math: "\\mathsfbf{W}" },
      "\u{1D5EB}": { math: "\\mathsfbf{X}" },
      "\u{1D5EC}": { math: "\\mathsfbf{Y}" },
      "\u{1D5ED}": { math: "\\mathsfbf{Z}" },
      "\u{1D5EE}": { math: "\\mathsfbf{a}" },
      "\u{1D5EF}": { math: "\\mathsfbf{b}" },
      "\u{1D5F0}": { math: "\\mathsfbf{c}" },
      "\u{1D5F1}": { math: "\\mathsfbf{d}" },
      "\u{1D5F2}": { math: "\\mathsfbf{e}" },
      "\u{1D5F3}": { math: "\\mathsfbf{f}" },
      "\u{1D5F4}": { math: "\\mathsfbf{g}" },
      "\u{1D5F5}": { math: "\\mathsfbf{h}" },
      "\u{1D5F6}": { math: "\\mathsfbf{i}" },
      "\u{1D5F7}": { math: "\\mathsfbf{j}" },
      "\u{1D5F8}": { math: "\\mathsfbf{k}" },
      "\u{1D5F9}": { math: "\\mathsfbf{l}" },
      "\u{1D5FA}": { math: "\\mathsfbf{m}" },
      "\u{1D5FB}": { math: "\\mathsfbf{n}" },
      "\u{1D5FC}": { math: "\\mathsfbf{o}" },
      "\u{1D5FD}": { math: "\\mathsfbf{p}" },
      "\u{1D5FE}": { math: "\\mathsfbf{q}" },
      "\u{1D5FF}": { math: "\\mathsfbf{r}" },
      "\u{1D600}": { math: "\\mathsfbf{s}" },
      "\u{1D601}": { math: "\\mathsfbf{t}" },
      "\u{1D602}": { math: "\\mathsfbf{u}" },
      "\u{1D603}": { math: "\\mathsfbf{v}" },
      "\u{1D604}": { math: "\\mathsfbf{w}" },
      "\u{1D605}": { math: "\\mathsfbf{x}" },
      "\u{1D606}": { math: "\\mathsfbf{y}" },
      "\u{1D607}": { math: "\\mathsfbf{z}" },
      "\u{1D608}": { math: "\\mathsfsl{A}" },
      "\u{1D609}": { math: "\\mathsfsl{B}" },
      "\u{1D60A}": { math: "\\mathsfsl{C}" },
      "\u{1D60B}": { math: "\\mathsfsl{D}" },
      "\u{1D60C}": { math: "\\mathsfsl{E}" },
      "\u{1D60D}": { math: "\\mathsfsl{F}" },
      "\u{1D60E}": { math: "\\mathsfsl{G}" },
      "\u{1D60F}": { math: "\\mathsfsl{H}" },
      "\u{1D610}": { math: "\\mathsfsl{I}" },
      "\u{1D611}": { math: "\\mathsfsl{J}" },
      "\u{1D612}": { math: "\\mathsfsl{K}" },
      "\u{1D613}": { math: "\\mathsfsl{L}" },
      "\u{1D614}": { math: "\\mathsfsl{M}" },
      "\u{1D615}": { math: "\\mathsfsl{N}" },
      "\u{1D616}": { math: "\\mathsfsl{O}" },
      "\u{1D617}": { math: "\\mathsfsl{P}" },
      "\u{1D618}": { math: "\\mathsfsl{Q}" },
      "\u{1D619}": { math: "\\mathsfsl{R}" },
      "\u{1D61A}": { math: "\\mathsfsl{S}" },
      "\u{1D61B}": { math: "\\mathsfsl{T}" },
      "\u{1D61C}": { math: "\\mathsfsl{U}" },
      "\u{1D61D}": { math: "\\mathsfsl{V}" },
      "\u{1D61E}": { math: "\\mathsfsl{W}" },
      "\u{1D61F}": { math: "\\mathsfsl{X}" },
      "\u{1D620}": { math: "\\mathsfsl{Y}" },
      "\u{1D621}": { math: "\\mathsfsl{Z}" },
      "\u{1D622}": { math: "\\mathsfsl{a}" },
      "\u{1D623}": { math: "\\mathsfsl{b}" },
      "\u{1D624}": { math: "\\mathsfsl{c}" },
      "\u{1D625}": { math: "\\mathsfsl{d}" },
      "\u{1D626}": { math: "\\mathsfsl{e}" },
      "\u{1D627}": { math: "\\mathsfsl{f}" },
      "\u{1D628}": { math: "\\mathsfsl{g}" },
      "\u{1D629}": { math: "\\mathsfsl{h}" },
      "\u{1D62A}": { math: "\\mathsfsl{i}" },
      "\u{1D62B}": { math: "\\mathsfsl{j}" },
      "\u{1D62C}": { math: "\\mathsfsl{k}" },
      "\u{1D62D}": { math: "\\mathsfsl{l}" },
      "\u{1D62E}": { math: "\\mathsfsl{m}" },
      "\u{1D62F}": { math: "\\mathsfsl{n}" },
      "\u{1D630}": { math: "\\mathsfsl{o}" },
      "\u{1D631}": { math: "\\mathsfsl{p}" },
      "\u{1D632}": { math: "\\mathsfsl{q}" },
      "\u{1D633}": { math: "\\mathsfsl{r}" },
      "\u{1D634}": { math: "\\mathsfsl{s}" },
      "\u{1D635}": { math: "\\mathsfsl{t}" },
      "\u{1D636}": { math: "\\mathsfsl{u}" },
      "\u{1D637}": { math: "\\mathsfsl{v}" },
      "\u{1D638}": { math: "\\mathsfsl{w}" },
      "\u{1D639}": { math: "\\mathsfsl{x}" },
      "\u{1D63A}": { math: "\\mathsfsl{y}" },
      "\u{1D63B}": { math: "\\mathsfsl{z}" },
      "\u{1D63C}": { math: "\\mathsfbfsl{A}" },
      "\u{1D63D}": { math: "\\mathsfbfsl{B}" },
      "\u{1D63E}": { math: "\\mathsfbfsl{C}" },
      "\u{1D63F}": { math: "\\mathsfbfsl{D}" },
      "\u{1D640}": { math: "\\mathsfbfsl{E}" },
      "\u{1D641}": { math: "\\mathsfbfsl{F}" },
      "\u{1D642}": { math: "\\mathsfbfsl{G}" },
      "\u{1D643}": { math: "\\mathsfbfsl{H}" },
      "\u{1D644}": { math: "\\mathsfbfsl{I}" },
      "\u{1D645}": { math: "\\mathsfbfsl{J}" },
      "\u{1D646}": { math: "\\mathsfbfsl{K}" },
      "\u{1D647}": { math: "\\mathsfbfsl{L}" },
      "\u{1D648}": { math: "\\mathsfbfsl{M}" },
      "\u{1D649}": { math: "\\mathsfbfsl{N}" },
      "\u{1D64A}": { math: "\\mathsfbfsl{O}" },
      "\u{1D64B}": { math: "\\mathsfbfsl{P}" },
      "\u{1D64C}": { math: "\\mathsfbfsl{Q}" },
      "\u{1D64D}": { math: "\\mathsfbfsl{R}" },
      "\u{1D64E}": { math: "\\mathsfbfsl{S}" },
      "\u{1D64F}": { math: "\\mathsfbfsl{T}" },
      "\u{1D650}": { math: "\\mathsfbfsl{U}" },
      "\u{1D651}": { math: "\\mathsfbfsl{V}" },
      "\u{1D652}": { math: "\\mathsfbfsl{W}" },
      "\u{1D653}": { math: "\\mathsfbfsl{X}" },
      "\u{1D654}": { math: "\\mathsfbfsl{Y}" },
      "\u{1D655}": { math: "\\mathsfbfsl{Z}" },
      "\u{1D656}": { math: "\\mathsfbfsl{a}" },
      "\u{1D657}": { math: "\\mathsfbfsl{b}" },
      "\u{1D658}": { math: "\\mathsfbfsl{c}" },
      "\u{1D659}": { math: "\\mathsfbfsl{d}" },
      "\u{1D65A}": { math: "\\mathsfbfsl{e}" },
      "\u{1D65B}": { math: "\\mathsfbfsl{f}" },
      "\u{1D65C}": { math: "\\mathsfbfsl{g}" },
      "\u{1D65D}": { math: "\\mathsfbfsl{h}" },
      "\u{1D65E}": { math: "\\mathsfbfsl{i}" },
      "\u{1D65F}": { math: "\\mathsfbfsl{j}" },
      "\u{1D660}": { math: "\\mathsfbfsl{k}" },
      "\u{1D661}": { math: "\\mathsfbfsl{l}" },
      "\u{1D662}": { math: "\\mathsfbfsl{m}" },
      "\u{1D663}": { math: "\\mathsfbfsl{n}" },
      "\u{1D664}": { math: "\\mathsfbfsl{o}" },
      "\u{1D665}": { math: "\\mathsfbfsl{p}" },
      "\u{1D666}": { math: "\\mathsfbfsl{q}" },
      "\u{1D667}": { math: "\\mathsfbfsl{r}" },
      "\u{1D668}": { math: "\\mathsfbfsl{s}" },
      "\u{1D669}": { math: "\\mathsfbfsl{t}" },
      "\u{1D66A}": { math: "\\mathsfbfsl{u}" },
      "\u{1D66B}": { math: "\\mathsfbfsl{v}" },
      "\u{1D66C}": { math: "\\mathsfbfsl{w}" },
      "\u{1D66D}": { math: "\\mathsfbfsl{x}" },
      "\u{1D66E}": { math: "\\mathsfbfsl{y}" },
      "\u{1D66F}": { math: "\\mathsfbfsl{z}" },
      "\u{1D670}": { math: "\\mathtt{A}" },
      "\u{1D671}": { math: "\\mathtt{B}" },
      "\u{1D672}": { math: "\\mathtt{C}" },
      "\u{1D673}": { math: "\\mathtt{D}" },
      "\u{1D674}": { math: "\\mathtt{E}" },
      "\u{1D675}": { math: "\\mathtt{F}" },
      "\u{1D676}": { math: "\\mathtt{G}" },
      "\u{1D677}": { math: "\\mathtt{H}" },
      "\u{1D678}": { math: "\\mathtt{I}" },
      "\u{1D679}": { math: "\\mathtt{J}" },
      "\u{1D67A}": { math: "\\mathtt{K}" },
      "\u{1D67B}": { math: "\\mathtt{L}" },
      "\u{1D67C}": { math: "\\mathtt{M}" },
      "\u{1D67D}": { math: "\\mathtt{N}" },
      "\u{1D67E}": { math: "\\mathtt{O}" },
      "\u{1D67F}": { math: "\\mathtt{P}" },
      "\u{1D680}": { math: "\\mathtt{Q}" },
      "\u{1D681}": { math: "\\mathtt{R}" },
      "\u{1D682}": { math: "\\mathtt{S}" },
      "\u{1D683}": { math: "\\mathtt{T}" },
      "\u{1D684}": { math: "\\mathtt{U}" },
      "\u{1D685}": { math: "\\mathtt{V}" },
      "\u{1D686}": { math: "\\mathtt{W}" },
      "\u{1D687}": { math: "\\mathtt{X}" },
      "\u{1D688}": { math: "\\mathtt{Y}" },
      "\u{1D689}": { math: "\\mathtt{Z}" },
      "\u{1D68A}": { math: "\\mathtt{a}" },
      "\u{1D68B}": { math: "\\mathtt{b}" },
      "\u{1D68C}": { math: "\\mathtt{c}" },
      "\u{1D68D}": { math: "\\mathtt{d}" },
      "\u{1D68E}": { math: "\\mathtt{e}" },
      "\u{1D68F}": { math: "\\mathtt{f}" },
      "\u{1D690}": { math: "\\mathtt{g}" },
      "\u{1D691}": { math: "\\mathtt{h}" },
      "\u{1D692}": { math: "\\mathtt{i}" },
      "\u{1D693}": { math: "\\mathtt{j}" },
      "\u{1D694}": { math: "\\mathtt{k}" },
      "\u{1D695}": { math: "\\mathtt{l}" },
      "\u{1D696}": { math: "\\mathtt{m}" },
      "\u{1D697}": { math: "\\mathtt{n}" },
      "\u{1D698}": { math: "\\mathtt{o}" },
      "\u{1D699}": { math: "\\mathtt{p}" },
      "\u{1D69A}": { math: "\\mathtt{q}" },
      "\u{1D69B}": { math: "\\mathtt{r}" },
      "\u{1D69C}": { math: "\\mathtt{s}" },
      "\u{1D69D}": { math: "\\mathtt{t}" },
      "\u{1D69E}": { math: "\\mathtt{u}" },
      "\u{1D69F}": { math: "\\mathtt{v}" },
      "\u{1D6A0}": { math: "\\mathtt{w}" },
      "\u{1D6A1}": { math: "\\mathtt{x}" },
      "\u{1D6A2}": { math: "\\mathtt{y}" },
      "\u{1D6A3}": { math: "\\mathtt{z}" },
      "\u{1D6A4}": { math: "\\imath" },
      "\u{1D6A5}": { math: "\\jmath" },
      "\u{1D6A8}": { math: "\\mathbf{A}" },
      "\u{1D6A9}": { math: "\\mathbf{B}" },
      "\u{1D6AA}": { math: "\\mathbf{\\Gamma}" },
      "\u{1D6AB}": { math: "\\mathbf{\\Delta}" },
      "\u{1D6AC}": { math: "\\mathbf{E}" },
      "\u{1D6AD}": { math: "\\mathbf{Z}" },
      "\u{1D6AE}": { math: "\\mathbf{H}" },
      "\u{1D6AF}": { math: "\\mathbf{\\Theta}" },
      "\u{1D6B0}": { math: "\\mathbf{I}" },
      "\u{1D6B1}": { math: "\\mathbf{K}" },
      "\u{1D6B2}": { math: "\\mathbf{\\Lambda}" },
      "\u{1D6B3}": { math: "M" },
      "\u{1D6B4}": { math: "N" },
      "\u{1D6B5}": { math: "\\mathbf{\\Xi}" },
      "\u{1D6B6}": { math: "O" },
      "\u{1D6B7}": { math: "\\mathbf{\\Pi}" },
      "\u{1D6B8}": { math: "\\mathbf{P}" },
      "\u{1D6B9}": { math: "\\mathbf{\\vartheta}" },
      "\u{1D6BA}": { math: "\\mathbf{\\Sigma}" },
      "\u{1D6BB}": { math: "\\mathbf{T}" },
      "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}" },
      "\u{1D6BD}": { math: "\\mathbf{\\Phi}" },
      "\u{1D6BE}": { math: "\\mathbf{X}" },
      "\u{1D6BF}": { math: "\\mathbf{\\Psi}" },
      "\u{1D6C0}": { math: "\\mathbf{\\Omega}" },
      "\u{1D6C1}": { math: "\\mathbf{\\nabla}" },
      "\u{1D6C2}": { math: "\\mathbf{\\alpha}" },
      "\u{1D6C3}": { math: "\\mathbf{\\beta}" },
      "\u{1D6C4}": { math: "\\mathbf{\\gamma}" },
      "\u{1D6C5}": { math: "\\mathbf{\\delta}" },
      "\u{1D6C6}": { math: "\\mathbf{\\epsilon}" },
      "\u{1D6C7}": { math: "\\mathbf{\\zeta}" },
      "\u{1D6C8}": { math: "\\mathbf{\\eta}" },
      "\u{1D6C9}": { math: "\\mathbf{\\theta}" },
      "\u{1D6CA}": { math: "\\mathbf{I}" },
      "\u{1D6CB}": { math: "\\mathbf{K}" },
      "\u{1D6CC}": { math: "\\mathbf{\\lambda}" },
      "\u{1D6CD}": { math: "M" },
      "\u{1D6CE}": { math: "N" },
      "\u{1D6CF}": { math: "\\mathbf{\\xi}" },
      "\u{1D6D0}": { math: "O" },
      "\u{1D6D1}": { math: "\\mathbf{\\pi}" },
      "\u{1D6D2}": { math: "\\mathbf{P}" },
      "\u{1D6D3}": { math: "\\mathbf{\\varsigma}" },
      "\u{1D6D4}": { math: "\\mathbf{\\sigma}" },
      "\u{1D6D5}": { math: "\\mathbf{T}" },
      "\u{1D6D6}": { math: "\\mathbf{\\upsilon}" },
      "\u{1D6D7}": { math: "\\mathbf{\\phi}" },
      "\u{1D6D8}": { math: "\\mathbf{X}" },
      "\u{1D6D9}": { math: "\\mathbf{\\psi}" },
      "\u{1D6DA}": { math: "\\mathbf{\\omega}" },
      "\u{1D6DB}": { math: "\\partial" },
      "\u{1D6DC}": { math: "\\in" },
      "\u{1D6DD}": { math: "\\mathbf{\\vartheta}" },
      "\u{1D6DE}": { math: "\\mathbf{\\varkappa}" },
      "\u{1D6DF}": { math: "\\mathbf{\\phi}" },
      "\u{1D6E0}": { math: "\\mathbf{\\varrho}" },
      "\u{1D6E1}": { math: "\\mathbf{\\varpi}" },
      "\u{1D6E2}": { math: "\\mathsl{A}" },
      "\u{1D6E3}": { math: "\\mathsl{B}" },
      "\u{1D6E4}": { math: "\\mathsl{\\Gamma}" },
      "\u{1D6E5}": { math: "\\mathsl{\\Delta}" },
      "\u{1D6E6}": { math: "\\mathsl{E}" },
      "\u{1D6E7}": { math: "\\mathsl{Z}" },
      "\u{1D6E8}": { math: "\\mathsl{H}" },
      "\u{1D6E9}": { math: "\\mathsl{\\Theta}" },
      "\u{1D6EA}": { math: "\\mathsl{I}" },
      "\u{1D6EB}": { math: "\\mathsl{K}" },
      "\u{1D6EC}": { math: "\\mathsl{\\Lambda}" },
      "\u{1D6ED}": { math: "M" },
      "\u{1D6EE}": { math: "N" },
      "\u{1D6EF}": { math: "\\mathsl{\\Xi}" },
      "\u{1D6F0}": { math: "O" },
      "\u{1D6F1}": { math: "\\mathsl{\\Pi}" },
      "\u{1D6F2}": { math: "\\mathsl{P}" },
      "\u{1D6F3}": { math: "\\mathsl{\\Theta}" },
      "\u{1D6F4}": { math: "\\mathsl{\\Sigma}" },
      "\u{1D6F5}": { math: "\\mathsl{T}" },
      "\u{1D6F6}": { math: "\\mathsl{\\Upsilon}" },
      "\u{1D6F7}": { math: "\\mathsl{\\Phi}" },
      "\u{1D6F8}": { math: "\\mathsl{X}" },
      "\u{1D6F9}": { math: "\\mathsl{\\Psi}" },
      "\u{1D6FA}": { math: "\\mathsl{\\Omega}" },
      "\u{1D6FB}": { math: "\\mathsl{\\nabla}" },
      "\u{1D6FC}": { math: "\\mathsl{A}" },
      "\u{1D6FD}": { math: "\\mathsl{B}" },
      "\u{1D6FE}": { math: "\\mathsl{\\gamma}" },
      "\u{1D6FF}": { math: "\\mathsl{\\delta}" },
      "\u{1D700}": { math: "\\mathsl{E}" },
      "\u{1D701}": { math: "\\mathsl{Z}" },
      "\u{1D702}": { math: "\\mathsl{H}" },
      "\u{1D703}": { math: "\\mathsl{\\theta}" },
      "\u{1D704}": { math: "\\mathsl{I}" },
      "\u{1D705}": { math: "\\mathsl{K}" },
      "\u{1D706}": { math: "\\mathsl{\\lambda}" },
      "\u{1D707}": { math: "\\mu" },
      "\u{1D708}": { math: "\\nu" },
      "\u{1D709}": { math: "\\mathsl{\\xi}" },
      "\u{1D70A}": { math: "o" },
      "\u{1D70B}": { math: "\\mathsl{\\pi}" },
      "\u{1D70C}": { math: "\\mathsl{P}" },
      "\u{1D70D}": { math: "\\mathsl{\\varsigma}" },
      "\u{1D70E}": { math: "\\mathsl{\\sigma}" },
      "\u{1D70F}": { math: "\\mathsl{T}" },
      "\u{1D710}": { math: "\\mathsl{\\upsilon}" },
      "\u{1D711}": { math: "\\mathsl{\\varphi}" },
      "\u{1D712}": { math: "\\mathsl{X}" },
      "\u{1D713}": { math: "\\mathsl{\\psi}" },
      "\u{1D714}": { math: "\\mathsl{\\omega}" },
      "\u{1D715}": { math: "\\partial" },
      "\u{1D716}": { math: "\\in" },
      "\u{1D717}": { math: "\\mathsl{\\vartheta}" },
      "\u{1D718}": { math: "\\mathsl{\\varkappa}" },
      "\u{1D719}": { math: "\\mathsl{\\phi}" },
      "\u{1D71A}": { math: "\\mathsl{\\varrho}" },
      "\u{1D71B}": { math: "\\mathsl{\\varpi}" },
      "\u{1D71C}": { math: "\\mathbit{A}" },
      "\u{1D71D}": { math: "\\mathbit{B}" },
      "\u{1D71E}": { math: "\\mathbit{\\Gamma}" },
      "\u{1D71F}": { math: "\\mathbit{\\Delta}" },
      "\u{1D720}": { math: "\\mathbit{E}" },
      "\u{1D721}": { math: "\\mathbit{Z}" },
      "\u{1D722}": { math: "\\mathbit{H}" },
      "\u{1D723}": { math: "\\mathbit{\\Theta}" },
      "\u{1D724}": { math: "\\mathbit{I}" },
      "\u{1D725}": { math: "\\mathbit{K}" },
      "\u{1D726}": { math: "\\mathbit{\\Lambda}" },
      "\u{1D727}": { math: "M" },
      "\u{1D728}": { math: "N" },
      "\u{1D729}": { math: "\\mathbit{\\Xi}" },
      "\u{1D72A}": { math: "O" },
      "\u{1D72B}": { math: "\\mathbit{\\Pi}" },
      "\u{1D72C}": { math: "\\mathbit{P}" },
      "\u{1D72D}": { math: "\\mathbit{O}" },
      "\u{1D72E}": { math: "\\mathbit{\\Sigma}" },
      "\u{1D72F}": { math: "\\mathbit{T}" },
      "\u{1D730}": { math: "\\mathbit{\\Upsilon}" },
      "\u{1D731}": { math: "\\mathbit{\\Phi}" },
      "\u{1D732}": { math: "\\mathbit{X}" },
      "\u{1D733}": { math: "\\mathbit{\\Psi}" },
      "\u{1D734}": { math: "\\mathbit{\\Omega}" },
      "\u{1D735}": { math: "\\mathbit{\\nabla}" },
      "\u{1D736}": { math: "\\mathbit{\\alpha}" },
      "\u{1D737}": { math: "\\mathbit{\\beta}" },
      "\u{1D738}": { math: "\\mathbit{\\gamma}" },
      "\u{1D739}": { math: "\\mathbit{\\delta}" },
      "\u{1D73A}": { math: "\\mathbit{\\epsilon}" },
      "\u{1D73B}": { math: "\\mathbit{\\zeta}" },
      "\u{1D73C}": { math: "\\mathbit{\\eta}" },
      "\u{1D73D}": { math: "\\mathbit{\\theta}" },
      "\u{1D73E}": { math: "\\mathbit{\\imath}" },
      "\u{1D73F}": { math: "\\mathbit{\\kappa}" },
      "\u{1D740}": { math: "\\mathbit{\\lambda}" },
      "\u{1D741}": { math: "\\mu" },
      "\u{1D742}": { math: "N" },
      "\u{1D743}": { math: "\\mathbit{\\xi}" },
      "\u{1D744}": { math: "O" },
      "\u{1D745}": { math: "\\mathbit{\\pi}" },
      "\u{1D746}": { math: "\\mathbit{\\rho}" },
      "\u{1D747}": { math: "\\mathbit{\\varsigma}" },
      "\u{1D748}": { math: "\\mathbit{\\sigma}" },
      "\u{1D749}": { math: "\\mathbit{\\tau}" },
      "\u{1D74A}": { math: "\\mathbit{\\upsilon}" },
      "\u{1D74B}": { math: "\\mathbit{\\varphi}" },
      "\u{1D74C}": { math: "\\mathbit{\\chi}" },
      "\u{1D74D}": { math: "\\mathbit{\\psi}" },
      "\u{1D74E}": { math: "\\mathbit{\\omega}" },
      "\u{1D74F}": { math: "\\partial" },
      "\u{1D750}": { math: "\\in" },
      "\u{1D751}": { math: "\\mathbit{\\vartheta}" },
      "\u{1D752}": { math: "\\mathbit{\\varkappa}" },
      "\u{1D753}": { math: "\\mathbit{\\phi}" },
      "\u{1D754}": { math: "\\mathbit{\\varrho}" },
      "\u{1D755}": { math: "\\mathbit{\\varpi}" },
      "\u{1D756}": { math: "\\mathsfbf{A}" },
      "\u{1D757}": { math: "\\mathsfbf{B}" },
      "\u{1D758}": { math: "\\mathsfbf{\\Gamma}" },
      "\u{1D759}": { math: "\\mathsfbf{\\Delta}" },
      "\u{1D75A}": { math: "\\mathsfbf{E}" },
      "\u{1D75B}": { math: "\\mathsfbf{Z}" },
      "\u{1D75C}": { math: "\\mathsfbf{H}" },
      "\u{1D75D}": { math: "\\mathsfbf{\\Theta}" },
      "\u{1D75E}": { math: "\\mathsfbf{I}" },
      "\u{1D75F}": { math: "\\mathsfbf{K}" },
      "\u{1D760}": { math: "\\mathsfbf{\\Lambda}" },
      "\u{1D761}": { math: "M" },
      "\u{1D762}": { math: "N" },
      "\u{1D763}": { math: "\\mathsfbf{\\Xi}" },
      "\u{1D764}": { math: "O" },
      "\u{1D765}": { math: "\\mathsfbf{\\Pi}" },
      "\u{1D766}": { math: "\\mathsfbf{P}" },
      "\u{1D767}": { math: "\\mathsfbf{\\Theta}" },
      "\u{1D768}": { math: "\\mathsfbf{\\Sigma}" },
      "\u{1D769}": { math: "\\mathsfbf{T}" },
      "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}" },
      "\u{1D76B}": { math: "\\mathsfbf{\\Phi}" },
      "\u{1D76C}": { math: "\\mathsfbf{X}" },
      "\u{1D76D}": { math: "\\mathsfbf{\\Psi}" },
      "\u{1D76E}": { math: "\\mathsfbf{\\Omega}" },
      "\u{1D76F}": { math: "\\mathsfbf{\\nabla}" },
      "\u{1D770}": { math: "\\mathsfbf{\\alpha}" },
      "\u{1D771}": { math: "\\mathsfbf{\\beta}" },
      "\u{1D772}": { math: "\\mathsfbf{\\gamma}" },
      "\u{1D773}": { math: "\\mathsfbf{\\delta}" },
      "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}" },
      "\u{1D775}": { math: "\\mathsfbf{\\zeta}" },
      "\u{1D776}": { math: "\\mathsfbf{\\eta}" },
      "\u{1D777}": { math: "\\mathsfbf{\\theta}" },
      "\u{1D778}": { math: "\\mathsfbf{\\imath}" },
      "\u{1D779}": { math: "\\mathsfbf{\\kappa}" },
      "\u{1D77A}": { math: "\\mathsfbf{\\lambda}" },
      "\u{1D77B}": { math: "\\mu" },
      "\u{1D77C}": { math: "\\nu" },
      "\u{1D77D}": { math: "\\mathsfbf{\\xi}" },
      "\u{1D77E}": { math: "o" },
      "\u{1D77F}": { math: "\\mathsfbf{\\pi}" },
      "\u{1D780}": { math: "\\mathsfbf{\\rho}" },
      "\u{1D781}": { math: "\\mathsfbf{\\varsigma}" },
      "\u{1D782}": { math: "\\mathsfbf{\\sigma}" },
      "\u{1D783}": { math: "\\mathsfbf{\\tau}" },
      "\u{1D784}": { math: "\\mathsfbf{\\upsilon}" },
      "\u{1D785}": { math: "\\mathsfbf{\\varphi}" },
      "\u{1D786}": { math: "\\mathsfbf{\\chi}" },
      "\u{1D787}": { math: "\\mathsfbf{\\psi}" },
      "\u{1D788}": { math: "\\mathsfbf{\\omega}" },
      "\u{1D789}": { math: "\\partial" },
      "\u{1D78A}": { math: "\\in" },
      "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}" },
      "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}" },
      "\u{1D78D}": { math: "\\mathsfbf{\\phi}" },
      "\u{1D78E}": { math: "\\mathsfbf{\\varrho}" },
      "\u{1D78F}": { math: "\\mathsfbf{\\varpi}" },
      "\u{1D790}": { math: "\\mathsfbfsl{A}" },
      "\u{1D791}": { math: "\\mathsfbfsl{B}" },
      "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}" },
      "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}" },
      "\u{1D794}": { math: "\\mathsfbfsl{E}" },
      "\u{1D795}": { math: "\\mathsfbfsl{Z}" },
      "\u{1D796}": { math: "\\mathsfbfsl{H}" },
      "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}" },
      "\u{1D798}": { math: "\\mathsfbfsl{I}" },
      "\u{1D799}": { math: "\\mathsfbfsl{K}" },
      "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}" },
      "\u{1D79B}": { math: "\\mathsfbfsl{M}" },
      "\u{1D79C}": { math: "\\mathsfbfsl{N}" },
      "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}" },
      "\u{1D79E}": { math: "\\mathsfbfsl{O}" },
      "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}" },
      "\u{1D7A0}": { math: "\\mathsfbfsl{P}" },
      "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}" },
      "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}" },
      "\u{1D7A3}": { math: "\\mathsfbfsl{T}" },
      "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}" },
      "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}" },
      "\u{1D7A6}": { math: "\\mathsfbfsl{X}" },
      "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}" },
      "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}" },
      "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}" },
      "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}" },
      "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}" },
      "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}" },
      "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}" },
      "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}" },
      "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}" },
      "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}" },
      "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}" },
      "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}" },
      "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}" },
      "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}" },
      "\u{1D7B5}": { math: "\\mu" },
      "\u{1D7B6}": { math: "\\nu" },
      "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}" },
      "\u{1D7B8}": { math: "o" },
      "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}" },
      "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}" },
      "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}" },
      "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}" },
      "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}" },
      "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}" },
      "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}" },
      "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}" },
      "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}" },
      "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}" },
      "\u{1D7C3}": { math: "\\partial" },
      "\u{1D7C4}": { math: "\\in" },
      "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}" },
      "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}" },
      "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}" },
      "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}" },
      "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}" },
      "\u{1D7CA}": { math: "\\mbfDigamma" },
      "\u{1D7CB}": { math: "\\mbfdigamma" },
      "\u{1D7CE}": { math: "\\mathbf{0}" },
      "\u{1D7CF}": { math: "\\mathbf{1}" },
      "\u{1D7D0}": { math: "\\mathbf{2}" },
      "\u{1D7D1}": { math: "\\mathbf{3}" },
      "\u{1D7D2}": { math: "\\mathbf{4}" },
      "\u{1D7D3}": { math: "\\mathbf{5}" },
      "\u{1D7D4}": { math: "\\mathbf{6}" },
      "\u{1D7D5}": { math: "\\mathbf{7}" },
      "\u{1D7D6}": { math: "\\mathbf{8}" },
      "\u{1D7D7}": { math: "\\mathbf{9}" },
      "\u{1D7D8}": { math: "\\mathbb{0}" },
      "\u{1D7D9}": { math: "\\mathbb{1}" },
      "\u{1D7DA}": { math: "\\mathbb{2}" },
      "\u{1D7DB}": { math: "\\mathbb{3}" },
      "\u{1D7DC}": { math: "\\mathbb{4}" },
      "\u{1D7DD}": { math: "\\mathbb{5}" },
      "\u{1D7DE}": { math: "\\mathbb{6}" },
      "\u{1D7DF}": { math: "\\mathbb{7}" },
      "\u{1D7E0}": { math: "\\mathbb{8}" },
      "\u{1D7E1}": { math: "\\mathbb{9}" },
      "\u{1D7E2}": { math: "\\mathsf{0}" },
      "\u{1D7E3}": { math: "\\mathsf{1}" },
      "\u{1D7E4}": { math: "\\mathsf{2}" },
      "\u{1D7E5}": { math: "\\mathsf{3}" },
      "\u{1D7E6}": { math: "\\mathsf{4}" },
      "\u{1D7E7}": { math: "\\mathsf{5}" },
      "\u{1D7E8}": { math: "\\mathsf{6}" },
      "\u{1D7E9}": { math: "\\mathsf{7}" },
      "\u{1D7EA}": { math: "\\mathsf{8}" },
      "\u{1D7EB}": { math: "\\mathsf{9}" },
      "\u{1D7EC}": { math: "\\mathsfbf{0}" },
      "\u{1D7ED}": { math: "\\mathsfbf{1}" },
      "\u{1D7EE}": { math: "\\mathsfbf{2}" },
      "\u{1D7EF}": { math: "\\mathsfbf{3}" },
      "\u{1D7F0}": { math: "\\mathsfbf{4}" },
      "\u{1D7F1}": { math: "\\mathsfbf{5}" },
      "\u{1D7F2}": { math: "\\mathsfbf{6}" },
      "\u{1D7F3}": { math: "\\mathsfbf{7}" },
      "\u{1D7F4}": { math: "\\mathsfbf{8}" },
      "\u{1D7F5}": { math: "\\mathsfbf{9}" },
      "\u{1D7F6}": { math: "\\mathtt{0}" },
      "\u{1D7F7}": { math: "\\mathtt{1}" },
      "\u{1D7F8}": { math: "\\mathtt{2}" },
      "\u{1D7F9}": { math: "\\mathtt{3}" },
      "\u{1D7FA}": { math: "\\mathtt{4}" },
      "\u{1D7FB}": { math: "\\mathtt{5}" },
      "\u{1D7FC}": { math: "\\mathtt{6}" },
      "\u{1D7FD}": { math: "\\mathtt{7}" },
      "\u{1D7FE}": { math: "\\mathtt{8}" },
      "\u{1D7FF}": { math: "\\mathtt{9}" }
    };
  }
});

// node_modules/unicode2latex/tables/unicode.json
var require_unicode = __commonJS({
  "node_modules/unicode2latex/tables/unicode.json"(exports2, module2) {
    module2.exports = {
      "#": { math: "\\#", text: "\\#" },
      $: { math: "\\$", text: "\\$" },
      "%": { math: "\\%", text: "\\%" },
      "&": { math: "\\&", text: "\\&" },
      "/\u200B": { text: "\\slash", commandspacer: true },
      "<": { math: "<" },
      ">": { math: ">" },
      "\\": { math: "\\backslash", text: "\\textbackslash", commandspacer: true },
      "^": { math: "\\sphat", text: "\\^" },
      _: { math: "\\_", text: "\\_" },
      "{": { math: "\\lbrace", text: "\\{" },
      "}": { math: "\\rbrace", text: "\\}" },
      "~": { math: "\\sptilde", text: "\\textasciitilde", commandspacer: true },
      "\xA0": { math: "~", space: true, text: "~" },
      "\u2000": { text: "\\hspace{0.6em}", space: true },
      "\u2001": { math: "\\quad", space: true },
      "\u2002": { text: "\\hspace{0.6em}", space: true },
      "\u2003": { math: "\\quad", space: true },
      "\u2004": { text: "\\;", space: true },
      "\u2005": { text: "\\hspace{0.25em}", space: true },
      "\u2006": { text: "\\hspace{0.166em}", space: true },
      "\u2007": { text: "\\hphantom{0}", space: true },
      "\u2008": { text: "\\hphantom{,}", space: true },
      "\u2009": { text: "\\,", space: true },
      "\u200A": { math: "\\mkern1mu", space: true },
      "\u200B": { text: "\\hspace{0pt}", space: true },
      "\u202F": { text: "\\,", space: true },
      "\u205F": { math: "\\:", space: true, text: "\\:" }
    };
  }
});

// node_modules/unicode2latex/tables/latex.json
var require_latex = __commonJS({
  "node_modules/unicode2latex/tables/latex.json"(exports2, module2) {
    module2.exports = {
      "\\textquotedbl": '"',
      "\\#": "#",
      "\\$": "$",
      "\\%": "%",
      "\\&": "&",
      "\\slash": "/\u200B",
      "\\textless": "<",
      "\\textgreater": ">",
      "\\LaTeX": "LaTeX",
      "\\textbackslash": "\\",
      "\\backslash": "\\",
      "\\": "\\",
      "\\^": "^",
      "\\sphat": "^",
      "\\_": "_",
      "\\t{ia}": "i\uFE20a\uFE21",
      "{\\~ w}": "w\u0303",
      "\\{": "{",
      "\\lbrace": "{",
      "\\textbar": "|",
      "\\}": "}",
      "\\rbrace": "}",
      "\\textasciitilde": "~",
      "\\sptilde": "~",
      "\\textexclamdown": "\xA1",
      "\\textcent": "\xA2",
      "\\cent": "\xA2",
      "\\textsterling": "\xA3",
      "\\pounds": "\xA3",
      "\\textcurrency": "\xA4",
      "\\textyen": "\xA5",
      "\\yen": "\xA5",
      "\\textbrokenbar": "\xA6",
      "\\textsection": "\xA7",
      "\\textasciidieresis": "\xA8",
      "\\spddot": "\xA8",
      "\\textcopyright": "\xA9",
      "\\textordfeminine": "\xAA",
      "\\guillemotleft": "\xAB",
      "\\lnot": "\xAC",
      "\\neg": "\xAC",
      "\\-": "\xAD",
      "\\textregistered": "\xAE",
      "\\circledR": "\xAE",
      "\\textasciimacron": "\xAF",
      "\\textdegree": "\xB0",
      "^\\circ": "\xB0",
      "\\pm": "\xB1",
      "^{2}": "\xB2",
      "^{3}": "\xB3",
      "\\textasciiacute": "\xB4",
      "\\textmu": "\xB5",
      "\\textparagraph": "\xB6",
      "^{1}": "\xB9",
      "\\textordmasculine": "\xBA",
      "\\guillemotright": "\xBB",
      "\\frac{1}{4}": "\xBC",
      "\\textonequarter": "\xBC",
      "\\frac{1}{2}": "\xBD",
      "\\textonehalf": "\xBD",
      "\\frac{3}{4}": "\xBE",
      "\\textthreequarters": "\xBE",
      "\\textquestiondown": "\xBF",
      "\\`A": "\xC0",
      "\\'A": "\xC1",
      "\\^A": "\xC2",
      "\\~A": "\xC3",
      '\\"A': "\xC4",
      "\\AA": "\xC5",
      "\\r{A}": "\xC5",
      "{\\r A}": "\xC5",
      "\\AE": "\xC6",
      "\\c{C}": "\xC7",
      "\\`E": "\xC8",
      "\\'E": "\xC9",
      "\\^E": "\xCA",
      '\\"E': "\xCB",
      "\\`I": "\xCC",
      "\\'I": "\xCD",
      "\\^I": "\xCE",
      '\\"I': "\xCF",
      "\\DH": "\xD0",
      "\\~N": "\xD1",
      "\\`O": "\xD2",
      "\\'O": "\xD3",
      "\\^O": "\xD4",
      "\\~O": "\xD5",
      '\\"O': "\xD6",
      "\\texttimes": "\xD7",
      "\\times": "\xD7",
      "\\O": "\xD8",
      "\\`U": "\xD9",
      "\\'U": "\xDA",
      "\\^U": "\xDB",
      '\\"U': "\xDC",
      "\\'Y": "\xDD",
      "\\TH": "\xDE",
      "\\ss": "\xDF",
      "\\`a": "\xE0",
      "\\'a": "\xE1",
      "\\^a": "\xE2",
      "\\~a": "\xE3",
      '\\"a': "\xE4",
      "\\aa": "\xE5",
      "\\r{a}": "\xE5",
      "{\\r a}": "\xE5",
      "\\ae": "\xE6",
      "\\c{c}": "\xE7",
      "\\`e": "\xE8",
      "\\'e": "\xE9",
      "\\^e": "\xEA",
      '\\"e': "\xEB",
      "\\`i": "\xEC",
      "\\`\\i": "\xEC",
      "\\'i": "\xED",
      "\\'\\i": "\xED",
      "\\^i": "\xEE",
      "\\^\\i": "\xEE",
      '\\"i': "\xEF",
      '\\"\\i': "\xEF",
      "\\dh": "\xF0",
      "\\eth": "\xF0",
      "\\~n": "\xF1",
      "\\`o": "\xF2",
      "\\'o": "\xF3",
      "\\^o": "\xF4",
      "\\~o": "\xF5",
      '\\"o': "\xF6",
      "\\div": "\xF7",
      "\\o": "\xF8",
      "\\`u": "\xF9",
      "\\'u": "\xFA",
      "\\^u": "\xFB",
      '\\"u': "\xFC",
      "\\'y": "\xFD",
      "\\th": "\xFE",
      '\\"y': "\xFF",
      "\\=A": "\u0100",
      "\\=a": "\u0101",
      "\\u{A}": "\u0102",
      "\\u{a}": "\u0103",
      "\\k{A}": "\u0104",
      "\\k{a}": "\u0105",
      "\\'C": "\u0106",
      "\\'c": "\u0107",
      "\\^C": "\u0108",
      "\\^c": "\u0109",
      "\\.C": "\u010A",
      "\\.c": "\u010B",
      "\\v{C}": "\u010C",
      "\\v{c}": "\u010D",
      "\\v{D}": "\u010E",
      "\\v{d}": "\u010F",
      "\\DJ": "\u0110",
      "\\dj": "\u0111",
      "\\=E": "\u0112",
      "\\=e": "\u0113",
      "\\u{E}": "\u0114",
      "\\u{e}": "\u0115",
      "\\.E": "\u0116",
      "\\.e": "\u0117",
      "\\k{E}": "\u0118",
      "\\k{e}": "\u0119",
      "\\v{E}": "\u011A",
      "\\v{e}": "\u011B",
      "\\^G": "\u011C",
      "\\^g": "\u011D",
      "\\u{G}": "\u011E",
      "\\u{g}": "\u011F",
      "\\.G": "\u0120",
      "\\.g": "\u0121",
      "\\c{G}": "\u0122",
      "\\c{g}": "\u0123",
      "\\^H": "\u0124",
      "\\^h": "\u0125",
      "{\\fontencoding{LELA}\\selectfont\\char40}": "\u0126",
      "\\Elzxh": "\u0127",
      "\\~I": "\u0128",
      "\\~i": "\u0129",
      "\\=I": "\u012A",
      "\\=i": "\u012B",
      "\\u{I}": "\u012C",
      "{\\u \\i}": "\u012D",
      "\\k{I}": "\u012E",
      "\\k{i}": "\u012F",
      "\\.I": "\u0130",
      "\\i": "\u0131",
      "\\imath": "\u0131",
      "\\^J": "\u0134",
      "\\^\\j": "\u0135",
      "\\c{K}": "\u0136",
      "\\c{k}": "\u0137",
      "{\\fontencoding{LELA}\\selectfont\\char91}": "\u0138",
      "\\'L": "\u0139",
      "\\'l": "\u013A",
      "\\c{L}": "\u013B",
      "\\c{l}": "\u013C",
      "\\v{L}": "\u013D",
      "\\v{l}": "\u013E",
      "{\\fontencoding{LELA}\\selectfont\\char201}": "\u013F",
      "{\\fontencoding{LELA}\\selectfont\\char202}": "\u0140",
      "\\L": "\u0141",
      "\\l": "\u0142",
      "\\'N": "\u0143",
      "\\'n": "\u0144",
      "\\c{N}": "\u0145",
      "\\c{n}": "\u0146",
      "\\v{N}": "\u0147",
      "\\v{n}": "\u0148",
      "\\NG": "\u014A",
      "\\ng": "\u014B",
      "\\=O": "\u014C",
      "\\=o": "\u014D",
      "\\u{O}": "\u014E",
      "\\u{o}": "\u014F",
      "\\H{O}": "\u0150",
      "\\H{o}": "\u0151",
      "\\OE": "\u0152",
      "\\oe": "\u0153",
      "\\'R": "\u0154",
      "\\'r": "\u0155",
      "\\c{R}": "\u0156",
      "\\c{r}": "\u0157",
      "\\v{R}": "\u0158",
      "\\v{r}": "\u0159",
      "\\'S": "\u015A",
      "\\'s": "\u015B",
      "\\^S": "\u015C",
      "\\^s": "\u015D",
      "\\c{S}": "\u015E",
      "\\c{s}": "\u015F",
      "\\v{S}": "\u0160",
      "\\v{s}": "\u0161",
      "\\c{T}": "\u0162",
      "\\c{t}": "\u0163",
      "\\v{T}": "\u0164",
      "\\v{t}": "\u0165",
      "{\\fontencoding{LELA}\\selectfont\\char47}": "\u0166",
      "{\\fontencoding{LELA}\\selectfont\\char63}": "\u0167",
      "\\~U": "\u0168",
      "\\~u": "\u0169",
      "\\=U": "\u016A",
      "\\=u": "\u016B",
      "\\u{U}": "\u016C",
      "\\u{u}": "\u016D",
      "\\r{U}": "\u016E",
      "{\\r U}": "\u016E",
      "\\r{u}": "\u016F",
      "\\ocirc{u}": "\u016F",
      "{\\r u}": "\u016F",
      "\\H{U}": "\u0170",
      "\\H{u}": "\u0171",
      "\\k{U}": "\u0172",
      "\\k{u}": "\u0173",
      "\\^W": "\u0174",
      "\\^w": "\u0175",
      "\\^Y": "\u0176",
      "\\^y": "\u0177",
      '\\"Y': "\u0178",
      "\\'Z": "\u0179",
      "\\'z": "\u017A",
      "\\.Z": "\u017B",
      "\\.z": "\u017C",
      "\\v{Z}": "\u017D",
      "\\v{z}": "\u017E",
      "\\texthvlig": "\u0195",
      "\\textnrleg": "\u019E",
      "\\textesh": "\u01AA",
      "\\Zbar": "\u01B5",
      "{\\fontencoding{LELA}\\selectfont\\char195}": "\u01BA",
      "\\textdoublepipe": "\u01C2",
      "\\v{A}": "\u01CD",
      "\\v{a}": "\u01CE",
      "\\v{I}": "\u01CF",
      "\\v{i}": "\u01D0",
      "\\v{O}": "\u01D1",
      "\\v{o}": "\u01D2",
      "\\v{U}": "\u01D3",
      "\\v{u}": "\u01D4",
      "\\v{G}": "\u01E6",
      "\\v{g}": "\u01E7",
      "\\v{K}": "\u01E8",
      "\\v{k}": "\u01E9",
      "\\k{O}": "\u01EA",
      "\\k{o}": "\u01EB",
      "\\v{j}": "\u01F0",
      "\\'G": "\u01F4",
      "\\'g": "\u01F5",
      "\\c{E}": "\u0228",
      "\\c{e}": "\u0229",
      "\\jmath": "\u0237",
      "\\Elztrna": "\u0250",
      "\\Elztrnsa": "\u0252",
      "\\Elzopeno": "\u0254",
      "\\Elzrtld": "\u0256",
      "{\\fontencoding{LEIP}\\selectfont\\char61}": "\u0258",
      "\\Elzschwa": "\u0259",
      "\\varepsilon": "\u025B",
      "\\Elzpgamma": "\u0263",
      "\\Elzpbgam": "\u0264",
      "\\Elztrnh": "\u0265",
      "\\Elzbtdl": "\u026C",
      "\\Elzrtll": "\u026D",
      "\\Elztrnm": "\u026F",
      "\\Elztrnmlr": "\u0270",
      "\\Elzltlmr": "\u0271",
      "\\Elzltln": "\u0272",
      "\\Elzrtln": "\u0273",
      "\\Elzclomeg": "\u0277",
      "\\textphi": "\u0278",
      "\\Elztrnr": "\u0279",
      "\\Elztrnrl": "\u027A",
      "\\Elzrttrnr": "\u027B",
      "\\Elzrl": "\u027C",
      "\\Elzrtlr": "\u027D",
      "\\Elzfhr": "\u027E",
      "{\\fontencoding{LEIP}\\selectfont\\char202}": "\u027F",
      "\\Elzrtls": "\u0282",
      "\\Elzesh": "\u0283",
      "\\Elztrnt": "\u0287",
      "\\Elzrtlt": "\u0288",
      "\\Elzpupsil": "\u028A",
      "\\Elzpscrv": "\u028B",
      "\\Elzinvv": "\u028C",
      "\\Elzinvw": "\u028D",
      "\\Elztrny": "\u028E",
      "\\Elzrtlz": "\u0290",
      "\\Elzyogh": "\u0292",
      "\\Elzglst": "\u0294",
      "\\Elzreglst": "\u0295",
      "\\Elzinglst": "\u0296",
      "\\textturnk": "\u029E",
      "\\Elzdyogh": "\u02A4",
      "\\Elztesh": "\u02A7",
      "\\textsuperscript{h}": "\u02B0",
      "^{h}": "\u02B0",
      "\\textsuperscript{j}": "\u02B2",
      "^{j}": "\u02B2",
      "\\textsuperscript{r}": "\u02B3",
      "^{r}": "\u02B3",
      "\\textsuperscript{w}": "\u02B7",
      "^{w}": "\u02B7",
      "\\textsuperscript{y}": "\u02B8",
      "^{y}": "\u02B8",
      "\\lasp": "\u02BF",
      "\\textasciicircum": "\u02C6",
      "\\textasciicaron": "\u02C7",
      "\\Elzverts": "\u02C8",
      "\\Elzverti": "\u02CC",
      "\\Elzlmrk": "\u02D0",
      "\\Elzhlmrk": "\u02D1",
      "\\Elzsbrhr": "\u02D2",
      "\\Elzsblhr": "\u02D3",
      "\\Elzrais": "\u02D4",
      "\\Elzlow": "\u02D5",
      "\\textasciibreve": "\u02D8",
      "\\textperiodcentered": "\u02D9",
      "\\texttildelow": "\u02DC",
      "\\textsuperscript{l}": "\u02E1",
      "^{l}": "\u02E1",
      "\\textsuperscript{s}": "\u02E2",
      "^{s}": "\u02E2",
      "\\textsuperscript{x}": "\u02E3",
      "^{x}": "\u02E3",
      "\\tone{55}": "\u02E5",
      "\\tone{44}": "\u02E6",
      "\\tone{33}": "\u02E7",
      "\\tone{22}": "\u02E8",
      "\\tone{11}": "\u02E9",
      "\\`": "\u0300",
      "\\grave": "\u0300",
      "\\textgravemacron": "\u0300\u0304",
      "\\textgravedot": "\u0300\u0307",
      "\\'": "\u0301",
      "\\acute": "\u0301",
      "\\textacutemacron": "\u0301\u0304",
      "\\textacutewedge": "\u0301\u030C",
      "\\hat": "\u0302",
      "\\textcircumdot": "\u0302\u0307",
      "\\~": "\u0303",
      "\\tilde": "\u0303",
      "\\texttildedot": "\u0303\u0307",
      "\\=": "\u0304",
      "\\bar": "\u0304",
      "\\overline": "\u0305",
      "\\u": "\u0306",
      "\\breve": "\u0306",
      "\\textbrevemacron": "\u0306\u0304",
      "\\.": "\u0307",
      "\\dot": "\u0307",
      "\\textdotacute": "\u0307\u0301",
      '\\"': "\u0308",
      "\\ddot": "\u0308",
      "\\ovhook": "\u0309",
      "\\r": "\u030A",
      "\\mathring": "\u030A",
      "\\textringmacron": "\u030A\u0304",
      "\\H": "\u030B",
      "\\check": "\u030C",
      "\\v": "\u030C",
      "\\textvbaraccent": "\u030D",
      "\\textdoublevbaraccent": "\u030E",
      "\\textdoublegrave": "\u030F",
      "\\textdotbreve": "\u0310",
      "{\\fontencoding{LECO}\\selectfont\\char177}": "\u0311",
      "\\oturnedcomma": "\u0312",
      "\\ocommatopright": "\u0315",
      "\\textsubgrave": "\u0316",
      "\\textadvancing": "\u0318",
      "\\textretracting": "\u0319",
      "\\droang": "\u031A",
      "\\textcorner": "\u031A",
      "\\textsublhalfring": "\u031C",
      "\\textraising": "\u031D",
      "\\textlowering": "\u031E",
      "\\textsubplus": "\u031F",
      "\\Elzpalh": "\u0321",
      "\\Elzrh": "\u0322",
      "\\d": "\u0323",
      "\\textsubumlaut": "\u0324",
      "\\textsubring": "\u0325",
      "\\c": "\u0327",
      "\\k": "\u0328",
      "\\textsyllabic": "\u0329",
      "\\Elzsbbrg": "\u032A",
      "\\textsubbridge": "\u032A",
      "{\\fontencoding{LECO}\\selectfont\\char203}": "\u032B",
      "\\textsubwedge": "\u032C",
      "\\textsubarch": "\u032F",
      "\\utilde": "\u0330",
      "\\textsubtilde": "\u0330",
      "\\textsubbar": "\u0331",
      "\\underbar": "\u0331",
      "\\underline": "\u0332",
      "\\textsuperimposetilde": "\u0334",
      "\\Elzxl": "\u0335",
      "\\Elzbar": "\u0336",
      "{\\fontencoding{LECO}\\selectfont\\char215}": "\u0337",
      "\\not": "\u0338",
      "\\textsubrhalfring": "\u0339",
      "\\textinvsubbridge": "\u033A",
      "\\textsubsquare": "\u033B",
      "\\textseagull": "\u033C",
      "\\textovercross": "\u033D",
      "{\\fontencoding{LECO}\\selectfont\\char225}": "\u0361",
      "\\'H": "\u0389",
      "{\\'{}I}": "\u038A",
      "{\\'{}O}": "\u038C",
      "\\mathrm{'Y}": "\u038E",
      "\\mathrm{'\\Omega}": "\u038F",
      "\\acute{\\ddot{\\iota}}": "\u0390",
      "\\Gamma": "\u0393",
      "\\varGamma": "\u0393",
      "\\Delta": "\u0394",
      "\\Theta": "\u0398",
      "\\Lambda": "\u039B",
      "\\Xi": "\u039E",
      "\\Pi": "\u03A0",
      "\\Sigma": "\u03A3",
      "\\Upsilon": "\u03A5",
      "\\Phi": "\u03A6",
      "\\Psi": "\u03A8",
      "\\Omega": "\u03A9",
      "\\mathrm{\\ddot{I}}": "\u03AA",
      "\\mathrm{\\ddot{Y}}": "\u03AB",
      "{\\'$\\alpha$}": "\u03AC",
      "\\acute{\\epsilon}": "\u03AD",
      "\\acute{\\eta}": "\u03AE",
      "\\acute{\\iota}": "\u03AF",
      "\\acute{\\ddot{\\upsilon}}": "\u03B0",
      "\\alpha": "\u03B1",
      "\\beta": "\u03B2",
      "\\gamma": "\u03B3",
      "\\delta": "\u03B4",
      "\\zeta": "\u03B6",
      "\\eta": "\u03B7",
      "\\texttheta": "\u03B8",
      "\\theta": "\u03B8",
      "\\iota": "\u03B9",
      "\\kappa": "\u03BA",
      "\\lambda": "\u03BB",
      "\\nu": "\u03BD",
      "\\xi": "\u03BE",
      "\\pi": "\u03C0",
      "\\rho": "\u03C1",
      "\\varsigma": "\u03C2",
      "\\sigma": "\u03C3",
      "\\tau": "\u03C4",
      "\\upsilon": "\u03C5",
      "\\varphi": "\u03C6",
      "\\chi": "\u03C7",
      "\\psi": "\u03C8",
      "\\omega": "\u03C9",
      "\\ddot{\\iota}": "\u03CA",
      "\\ddot{\\upsilon}": "\u03CB",
      "\\acute{\\upsilon}": "\u03CD",
      "\\acute{\\omega}": "\u03CE",
      "\\Pisymbol{ppi022}{87}": "\u03D0",
      "\\varbeta": "\u03D0",
      "\\textvartheta": "\u03D1",
      "\\vartheta": "\u03D1",
      "\\phi": "\u03D5",
      "\\varpi": "\u03D6",
      "\\Qoppa": "\u03D8",
      "\\qoppa": "\u03D9",
      "\\Stigma": "\u03DA",
      "\\stigma": "\u03DB",
      "\\Digamma": "\u03DC",
      "\\digamma": "\u03DD",
      "\\Koppa": "\u03DE",
      "\\koppa": "\u03DF",
      "\\Sampi": "\u03E0",
      "\\sampi": "\u03E1",
      "\\varkappa": "\u03F0",
      "\\varrho": "\u03F1",
      "\\textTheta": "\u03F4",
      "\\upvarTheta": "\u03F4",
      "\\epsilon": "\u03F5",
      "\\backepsilon": "\u03F6",
      "\\cyrchar\\CYRYO": "\u0401",
      "\\cyrchar\\CYRDJE": "\u0402",
      "\\cyrchar{\\'\\CYRG}": "\u0403",
      "\\cyrchar\\CYRIE": "\u0404",
      "\\cyrchar\\CYRDZE": "\u0405",
      "\\cyrchar\\CYRII": "\u0406",
      "\\cyrchar\\CYRYI": "\u0407",
      "\\cyrchar\\CYRJE": "\u0408",
      "\\cyrchar\\CYRLJE": "\u0409",
      "\\cyrchar\\CYRNJE": "\u040A",
      "\\cyrchar\\CYRTSHE": "\u040B",
      "\\cyrchar{\\'\\CYRK}": "\u040C",
      "\\cyrchar\\CYRUSHRT": "\u040E",
      "\\cyrchar\\CYRDZHE": "\u040F",
      "\\cyrchar\\CYRA": "\u0410",
      "\\cyrchar\\CYRB": "\u0411",
      "\\cyrchar\\CYRV": "\u0412",
      "\\cyrchar\\CYRG": "\u0413",
      "\\cyrchar\\CYRD": "\u0414",
      "\\cyrchar\\CYRE": "\u0415",
      "\\cyrchar\\CYRZH": "\u0416",
      "\\cyrchar\\CYRZ": "\u0417",
      "\\cyrchar\\CYRI": "\u0418",
      "\\cyrchar\\CYRISHRT": "\u0419",
      "\\cyrchar\\CYRK": "\u041A",
      "\\cyrchar\\CYRL": "\u041B",
      "\\cyrchar\\CYRM": "\u041C",
      "\\cyrchar\\CYRN": "\u041D",
      "\\cyrchar\\CYRO": "\u041E",
      "\\cyrchar\\CYRP": "\u041F",
      "\\cyrchar\\CYRR": "\u0420",
      "\\cyrchar\\CYRS": "\u0421",
      "\\cyrchar\\CYRT": "\u0422",
      "\\cyrchar\\CYRU": "\u0423",
      "\\cyrchar\\CYRF": "\u0424",
      "\\cyrchar\\CYRH": "\u0425",
      "\\cyrchar\\CYRC": "\u0426",
      "\\cyrchar\\CYRCH": "\u0427",
      "\\cyrchar\\CYRSH": "\u0428",
      "\\cyrchar\\CYRSHCH": "\u0429",
      "\\cyrchar\\CYRHRDSN": "\u042A",
      "\\bud": "\u042A",
      "\\cdprime": "\u042A",
      "\\cyrchar\\CYRERY": "\u042B",
      "\\cyrchar\\CYRSFTSN": "\u042C",
      "\\cprime": "\u042C",
      "\\cyrchar\\CYREREV": "\u042D",
      "\\cyrchar\\CYRYU": "\u042E",
      "\\cyrchar\\CYRYA": "\u042F",
      "\\cyrchar\\cyra": "\u0430",
      "\\cyrchar\\cyrb": "\u0431",
      "\\cyrchar\\cyrv": "\u0432",
      "\\cyrchar\\cyrg": "\u0433",
      "\\cyrchar\\cyrd": "\u0434",
      "\\cyrchar\\cyre": "\u0435",
      "\\cyrchar\\cyrzh": "\u0436",
      "\\cyrchar\\cyrz": "\u0437",
      "\\cyrchar\\cyri": "\u0438",
      "\\cyrchar\\cyrishrt": "\u0439",
      "\\cyrchar\\cyrk": "\u043A",
      "\\cyrchar\\cyrl": "\u043B",
      "\\cyrchar\\cyrm": "\u043C",
      "\\cyrchar\\cyrn": "\u043D",
      "\\cyrchar\\cyro": "\u043E",
      "\\cyrchar\\cyrp": "\u043F",
      "\\cyrchar\\cyrr": "\u0440",
      "\\cyrchar\\cyrs": "\u0441",
      "\\cyrchar\\cyrt": "\u0442",
      "\\cyrchar\\cyru": "\u0443",
      "\\cyrchar\\cyrf": "\u0444",
      "\\cyrchar\\cyrh": "\u0445",
      "\\cyrchar\\cyrc": "\u0446",
      "\\cyrchar\\cyrch": "\u0447",
      "\\cyrchar\\cyrsh": "\u0448",
      "\\cyrchar\\cyrshch": "\u0449",
      "\\cyrchar\\cyrhrdsn": "\u044A",
      "\\cyrchar\\cyrery": "\u044B",
      "\\cyrchar\\cyrsftsn": "\u044C",
      "\\cyrchar\\cyrerev": "\u044D",
      "\\cyrchar\\cyryu": "\u044E",
      "\\cyrchar\\cyrya": "\u044F",
      "\\cyrchar\\cyryo": "\u0451",
      "\\cyrchar\\cyrdje": "\u0452",
      "\\cyrchar{\\'\\cyrg}": "\u0453",
      "\\cyrchar\\cyrie": "\u0454",
      "\\cyrchar\\cyrdze": "\u0455",
      "\\cyrchar\\cyrii": "\u0456",
      "\\cyrchar\\cyryi": "\u0457",
      "\\cyrchar\\cyrje": "\u0458",
      "\\cyrchar\\cyrlje": "\u0459",
      "\\cyrchar\\cyrnje": "\u045A",
      "\\cyrchar\\cyrtshe": "\u045B",
      "\\cyrchar{\\'\\cyrk}": "\u045C",
      "\\cyrchar\\cyrushrt": "\u045E",
      "\\cyrchar\\cyrdzhe": "\u045F",
      "\\cyrchar\\CYROMEGA": "\u0460",
      "\\cyrchar\\cyromega": "\u0461",
      "\\cyrchar\\CYRYAT": "\u0462",
      "\\cyrchar\\CYRIOTE": "\u0464",
      "\\cyrchar\\cyriote": "\u0465",
      "\\cyrchar\\CYRLYUS": "\u0466",
      "\\cyrchar\\cyrlyus": "\u0467",
      "\\cyrchar\\CYRIOTLYUS": "\u0468",
      "\\cyrchar\\cyriotlyus": "\u0469",
      "\\cyrchar\\CYRBYUS": "\u046A",
      "\\cyrchar\\CYRIOTBYUS": "\u046C",
      "\\cyrchar\\cyriotbyus": "\u046D",
      "\\cyrchar\\CYRKSI": "\u046E",
      "\\cyrchar\\cyrksi": "\u046F",
      "\\cyrchar\\CYRPSI": "\u0470",
      "\\cyrchar\\cyrpsi": "\u0471",
      "\\cyrchar\\CYRFITA": "\u0472",
      "\\cyrchar\\CYRIZH": "\u0474",
      "\\cyrchar\\CYRUK": "\u0478",
      "\\cyrchar\\cyruk": "\u0479",
      "\\cyrchar\\CYROMEGARND": "\u047A",
      "\\cyrchar\\cyromegarnd": "\u047B",
      "\\cyrchar\\CYROMEGATITLO": "\u047C",
      "\\cyrchar\\cyromegatitlo": "\u047D",
      "\\cyrchar\\CYROT": "\u047E",
      "\\cyrchar\\cyrot": "\u047F",
      "\\cyrchar\\CYRKOPPA": "\u0480",
      "\\cyrchar\\cyrkoppa": "\u0481",
      "\\cyrchar\\cyrthousands": "\u0482",
      "\\cyrchar\\cyrhundredthousands": "\u0488",
      "\\cyrchar\\cyrmillions": "\u0489",
      "\\cyrchar\\CYRSEMISFTSN": "\u048C",
      "\\cyrchar\\cyrsemisftsn": "\u048D",
      "\\cyrchar\\CYRRTICK": "\u048E",
      "\\cyrchar\\cyrrtick": "\u048F",
      "\\cyrchar\\CYRGUP": "\u0490",
      "\\cyrchar\\cyrgup": "\u0491",
      "\\cyrchar\\CYRGHCRS": "\u0492",
      "\\cyrchar\\cyrghcrs": "\u0493",
      "\\cyrchar\\CYRGHK": "\u0494",
      "\\cyrchar\\cyrghk": "\u0495",
      "\\cyrchar\\CYRZHDSC": "\u0496",
      "\\cyrchar\\cyrzhdsc": "\u0497",
      "\\cyrchar\\CYRZDSC": "\u0498",
      "\\cyrchar\\cyrzdsc": "\u0499",
      "\\cyrchar\\CYRKDSC": "\u049A",
      "\\cyrchar\\cyrkdsc": "\u049B",
      "\\cyrchar\\CYRKVCRS": "\u049C",
      "\\cyrchar\\cyrkvcrs": "\u049D",
      "\\cyrchar\\CYRKHCRS": "\u049E",
      "\\cyrchar\\cyrkhcrs": "\u049F",
      "\\cyrchar\\CYRKBEAK": "\u04A0",
      "\\cyrchar\\cyrkbeak": "\u04A1",
      "\\cyrchar\\CYRNDSC": "\u04A2",
      "\\cyrchar\\cyrndsc": "\u04A3",
      "\\cyrchar\\CYRNG": "\u04A4",
      "\\cyrchar\\cyrng": "\u04A5",
      "\\cyrchar\\CYRPHK": "\u04A6",
      "\\cyrchar\\cyrphk": "\u04A7",
      "\\cyrchar\\CYRABHHA": "\u04A8",
      "\\cyrchar\\cyrabhha": "\u04A9",
      "\\cyrchar\\CYRSDSC": "\u04AA",
      "\\cyrchar\\cyrsdsc": "\u04AB",
      "\\cyrchar\\CYRTDSC": "\u04AC",
      "\\cyrchar\\cyrtdsc": "\u04AD",
      "\\cyrchar\\CYRY": "\u04AE",
      "\\cyrchar\\cyry": "\u04AF",
      "\\cyrchar\\CYRYHCRS": "\u04B0",
      "\\cyrchar\\cyryhcrs": "\u04B1",
      "\\cyrchar\\CYRHDSC": "\u04B2",
      "\\cyrchar\\cyrhdsc": "\u04B3",
      "\\cyrchar\\CYRTETSE": "\u04B4",
      "\\cyrchar\\cyrtetse": "\u04B5",
      "\\cyrchar\\CYRCHRDSC": "\u04B6",
      "\\cyrchar\\cyrchrdsc": "\u04B7",
      "\\cyrchar\\CYRCHVCRS": "\u04B8",
      "\\cyrchar\\cyrchvcrs": "\u04B9",
      "\\cyrchar\\CYRSHHA": "\u04BA",
      "\\cyrchar\\cyrshha": "\u04BB",
      "\\cyrchar\\CYRABHCH": "\u04BC",
      "\\cyrchar\\cyrabhch": "\u04BD",
      "\\cyrchar\\CYRABHCHDSC": "\u04BE",
      "\\cyrchar\\cyrabhchdsc": "\u04BF",
      "\\cyrchar\\CYRpalochka": "\u04C0",
      "\\cyrchar\\CYRKHK": "\u04C3",
      "\\cyrchar\\cyrkhk": "\u04C4",
      "\\cyrchar\\CYRNHK": "\u04C7",
      "\\cyrchar\\cyrnhk": "\u04C8",
      "\\cyrchar\\CYRCHLDSC": "\u04CB",
      "\\cyrchar\\cyrchldsc": "\u04CC",
      "\\cyrchar\\CYRAE": "\u04D4",
      "\\cyrchar\\cyrae": "\u04D5",
      "\\cyrchar\\CYRSCHWA": "\u04D8",
      "\\cyrchar\\cyrschwa": "\u04D9",
      "\\cyrchar\\CYRABHDZE": "\u04E0",
      "\\cyrchar\\cyrabhdze": "\u04E1",
      "\\cyrchar\\CYROTLD": "\u04E8",
      "\\cyrchar\\cyrotld": "\u04E9",
      "\\\\backslash": "\u0871",
      "\\textsuperscript{a}": "\u1D43",
      "^{a}": "\u1D43",
      "\\textsuperscript{b}": "\u1D47",
      "^{b}": "\u1D47",
      "\\textsuperscript{d}": "\u1D48",
      "^{d}": "\u1D48",
      "\\textsuperscript{e}": "\u1D49",
      "^{e}": "\u1D49",
      "\\textsuperscript{g}": "\u1D4D",
      "^{g}": "\u1D4D",
      "\\textsuperscript{k}": "\u1D4F",
      "^{k}": "\u1D4F",
      "\\textsuperscript{m}": "\u1D50",
      "^{m}": "\u1D50",
      "\\textsuperscript{o}": "\u1D52",
      "^{o}": "\u1D52",
      "\\textsuperscript{p}": "\u1D56",
      "^{p}": "\u1D56",
      "\\textsuperscript{t}": "\u1D57",
      "^{t}": "\u1D57",
      "\\textsuperscript{u}": "\u1D58",
      "^{u}": "\u1D58",
      "\\textsuperscript{v}": "\u1D5B",
      "^{v}": "\u1D5B",
      "\\textsuperscript{c}": "\u1D9C",
      "^{c}": "\u1D9C",
      "\\textsuperscript{f}": "\u1DA0",
      "^{f}": "\u1DA0",
      "\\textsuperscript{z}": "\u1DBB",
      "^{z}": "\u1DBB",
      "\\.B": "\u1E02",
      "\\.b": "\u1E03",
      "\\d{B}": "\u1E04",
      "\\d{b}": "\u1E05",
      "\\b{B}": "\u1E06",
      "\\b{b}": "\u1E07",
      "\\.D": "\u1E0A",
      "\\.d": "\u1E0B",
      "\\d{D}": "\u1E0C",
      "\\d{d}": "\u1E0D",
      "\\b{D}": "\u1E0E",
      "\\b{d}": "\u1E0F",
      "\\c{D}": "\u1E10",
      "\\c{d}": "\u1E11",
      "\\c{\\u{E}}": "\u1E1C",
      "\\c{\\u{e}}": "\u1E1D",
      "\\.F": "\u1E1E",
      "\\.f": "\u1E1F",
      "\\=G": "\u1E20",
      "\\=g": "\u1E21",
      "\\.H": "\u1E22",
      "\\.h": "\u1E23",
      "\\d{H}": "\u1E24",
      "\\d{h}": "\u1E25",
      '\\"H': "\u1E26",
      '\\"h': "\u1E27",
      "\\c{H}": "\u1E28",
      "\\c{h}": "\u1E29",
      "\\'K": "\u1E30",
      "\\'k": "\u1E31",
      "\\d{K}": "\u1E32",
      "\\d{k}": "\u1E33",
      "\\b{K}": "\u1E34",
      "\\b{k}": "\u1E35",
      "\\d{L}": "\u1E36",
      "\\d{l}": "\u1E37",
      "\\b{L}": "\u1E3A",
      "\\b{l}": "\u1E3B",
      "\\'M": "\u1E3E",
      "\\'m": "\u1E3F",
      "\\.M": "\u1E40",
      "\\.m": "\u1E41",
      "\\d{M}": "\u1E42",
      "\\d{m}": "\u1E43",
      "\\.N": "\u1E44",
      "\\.n": "\u1E45",
      "\\d{N}": "\u1E46",
      "\\d{n}": "\u1E47",
      "\\b{N}": "\u1E48",
      "\\b{n}": "\u1E49",
      "\\'P": "\u1E54",
      "\\'p": "\u1E55",
      "\\.P": "\u1E56",
      "\\.p": "\u1E57",
      "\\.R": "\u1E58",
      "\\.r": "\u1E59",
      "\\d{R}": "\u1E5A",
      "\\d{r}": "\u1E5B",
      "\\b{R}": "\u1E5E",
      "\\b{r}": "\u1E5F",
      "\\.S": "\u1E60",
      "\\.s": "\u1E61",
      "\\d{S}": "\u1E62",
      "\\d{s}": "\u1E63",
      "\\.T": "\u1E6A",
      "\\.t": "\u1E6B",
      "\\d{T}": "\u1E6C",
      "\\d{t}": "\u1E6D",
      "\\b{T}": "\u1E6E",
      "\\b{t}": "\u1E6F",
      "\\~V": "\u1E7C",
      "\\~v": "\u1E7D",
      "\\d{V}": "\u1E7E",
      "\\d{v}": "\u1E7F",
      "\\`W": "\u1E80",
      "\\`w": "\u1E81",
      "\\'W": "\u1E82",
      "\\'w": "\u1E83",
      '\\"W': "\u1E84",
      '\\"w': "\u1E85",
      "\\.W": "\u1E86",
      "\\.w": "\u1E87",
      "\\d{W}": "\u1E88",
      "\\d{w}": "\u1E89",
      "\\.X": "\u1E8A",
      "\\.x": "\u1E8B",
      '\\"X': "\u1E8C",
      '\\"x': "\u1E8D",
      "\\.Y": "\u1E8E",
      "\\.y": "\u1E8F",
      "\\^Z": "\u1E90",
      "\\^z": "\u1E91",
      "\\d{Z}": "\u1E92",
      "\\d{z}": "\u1E93",
      "\\b{Z}": "\u1E94",
      "\\b{z}": "\u1E95",
      "\\b{h}": "\u1E96",
      '\\"t': "\u1E97",
      "\\r{w}": "\u1E98",
      "\\r{y}": "\u1E99",
      "\\d{A}": "\u1EA0",
      "\\d{a}": "\u1EA1",
      "\\d{E}": "\u1EB8",
      "\\d{e}": "\u1EB9",
      "\\~E": "\u1EBC",
      "\\~e": "\u1EBD",
      "\\d{I}": "\u1ECA",
      "\\d{i}": "\u1ECB",
      "\\d{O}": "\u1ECC",
      "\\d{o}": "\u1ECD",
      "\\d{U}": "\u1EE4",
      "\\d{u}": "\u1EE5",
      "\\`Y": "\u1EF2",
      "\\`y": "\u1EF3",
      "\\d{Y}": "\u1EF4",
      "\\d{y}": "\u1EF5",
      "\\~Y": "\u1EF8",
      "\\~y": "\u1EF9",
      "\\hspace{0.6em}": "\u2000",
      "\\quad": "\u2003",
      "\\;": "\u2004",
      "\\hspace{0.25em}": "\u2005",
      "\\hspace{0.166em}": "\u2006",
      "\\hphantom{0}": "\u2007",
      "\\hphantom{,}": "\u2008",
      "\\,": "\u2009",
      "\\mkern1mu": "\u200A",
      "\\hspace{0pt}": "\u200B",
      "{\\aftergroup\\ignorespaces}": "\u200C",
      "\\textendash": "\u2013",
      "\\textemdash": "\u2014",
      "\\rule{1em}{1pt}": "\u2015",
      "\\horizbar": "\u2015",
      "\\Vert": "\u2016",
      "\\twolowline": "\u2017",
      "\\textquoteleft": "\u2018",
      "\\textquoteright": "\u2019",
      "\\Elzreapos": "\u201B",
      "\\textquotedblleft": "\u201C",
      "\\textquotedblright": "\u201D",
      "\\quotedblbase": "\u201F",
      "\\textdagger": "\u2020",
      "\\dagger": "\u2020",
      "\\textdaggerdbl": "\u2021",
      "\\ddagger": "\u2021",
      "\\textbullet": "\u2022",
      "\\enleadertwodots": "\u2025",
      "\\ldots": "\u2026",
      "\\textperthousand": "\u2030",
      "\\textpertenthousand": "\u2031",
      "{'}": "\u2032",
      "{''}": "\u2033",
      "{'''}": "\u2034",
      "\\backprime": "\u2035",
      "\\backdprime": "\u2036",
      "\\backtrprime": "\u2037",
      "\\caretinsert": "\u2038",
      "\\guilsinglleft": "\u2039",
      "\\guilsinglright": "\u203A",
      "\\Exclam": "\u203C",
      "\\hyphenbullet": "\u2043",
      "\\fracslash": "\u2044",
      "\\Question": "\u2047",
      "\\closure": "\u2050",
      "\\:": "\u205F",
      "\\nolinebreak": "\u2060",
      "^{0}": "\u2070",
      "\\textsuperscript{i}": "\u2071",
      "^{i}": "\u2071",
      "^{4}": "\u2074",
      "^{5}": "\u2075",
      "^{6}": "\u2076",
      "^{7}": "\u2077",
      "^{8}": "\u2078",
      "^{9}": "\u2079",
      "^{+}": "\u207A",
      "^{-}": "\u207B",
      "^{=}": "\u207C",
      "^{(}": "\u207D",
      "^{)}": "\u207E",
      "\\textsuperscript{n}": "\u207F",
      "^{n}": "\u207F",
      "_{0}": "\u2080",
      "_{1}": "\u2081",
      "_{2}": "\u2082",
      "_{3}": "\u2083",
      "_{4}": "\u2084",
      "_{5}": "\u2085",
      "_{6}": "\u2086",
      "_{7}": "\u2087",
      "_{8}": "\u2088",
      "_{9}": "\u2089",
      "_{+}": "\u208A",
      "_{-}": "\u208B",
      "_{=}": "\u208C",
      "_{(}": "\u208D",
      "_{)}": "\u208E",
      "\\textsubscript{a}": "\u2090",
      "_{a}": "\u2090",
      "\\textsubscript{e}": "\u2091",
      "_{e}": "\u2091",
      "\\textsubscript{o}": "\u2092",
      "_{o}": "\u2092",
      "\\textsubscript{x}": "\u2093",
      "_{x}": "\u2093",
      "\\textsubscript{\\textschwa}": "\u2094",
      "\\textsubscript{h}": "\u2095",
      "_{h}": "\u2095",
      "\\textsubscript{k}": "\u2096",
      "_{k}": "\u2096",
      "\\textsubscript{l}": "\u2097",
      "_{l}": "\u2097",
      "\\textsubscript{m}": "\u2098",
      "_{m}": "\u2098",
      "\\textsubscript{n}": "\u2099",
      "_{n}": "\u2099",
      "\\textsubscript{p}": "\u209A",
      "_{p}": "\u209A",
      "\\textsubscript{s}": "\u209B",
      "_{s}": "\u209B",
      "\\textsubscript{t}": "\u209C",
      "_{t}": "\u209C",
      "\\ensuremath{\\Elzpes}": "\u20A7",
      "\\texteuro": "\u20AC",
      "\\euro": "\u20AC",
      "\\lvec": "\u20D0",
      "\\vertoverlay": "\u20D2",
      "\\LVec": "\u20D6",
      "\\vec": "\u20D7",
      "\\dddot": "\u20DB",
      "\\ddddot": "\u20DC",
      "\\enclosecircle": "\u20DD",
      "\\enclosesquare": "\u20DE",
      "\\enclosediamond": "\u20DF",
      "\\overleftrightarrow": "\u20E1",
      "\\enclosetriangle": "\u20E4",
      "\\annuity": "\u20E7",
      "\\threeunderdot": "\u20E8",
      "\\widebridgeabove": "\u20E9",
      "\\underrightharpoondown": "\u20EC",
      "\\underleftharpoondown": "\u20ED",
      "\\underleftarrow": "\u20EE",
      "\\underrightarrow": "\u20EF",
      "\\asteraccent": "\u20F0",
      "\\mathbb{C}": "\u2102",
      "\\textcelsius": "\u2103",
      "\\Euler": "\u2107",
      "\\mathscr{g}": "\u210A",
      "\\mathscr{H}": "\u210B",
      "\\mathfrak{H}": "\u210C",
      "\\mathbb{H}": "\u210D",
      "\\Planckconst": "\u210E",
      "\\hslash": "\u210F",
      "\\mathscr{I}": "\u2110",
      "\\mathfrak{I}": "\u2111",
      "\\mathscr{L}": "\u2112",
      "\\mathscr{l}": "\u2113",
      "\\mathbb{N}": "\u2115",
      "\\cyrchar\\textnumero": "\u2116",
      "\\textcircledP": "\u2117",
      "\\wp": "\u2118",
      "\\mathbb{P}": "\u2119",
      "\\mathbb{Q}": "\u211A",
      "\\mathscr{R}": "\u211B",
      "\\mathfrak{R}": "\u211C",
      "\\mathbb{R}": "\u211D",
      "\\Elzxrat": "\u211E",
      "\\textservicemark": "\u2120",
      "\\texttrademark": "\u2122",
      "\\mathbb{Z}": "\u2124",
      "\\mho": "\u2127",
      "\\mathfrak{Z}": "\u2128",
      "\\textriota": "\u2129",
      "\\Angstroem": "\u212B",
      "\\mathscr{B}": "\u212C",
      "\\mathfrak{C}": "\u212D",
      "\\textestimated": "\u212E",
      "\\mathscr{e}": "\u212F",
      "\\mathscr{E}": "\u2130",
      "\\mathscr{F}": "\u2131",
      "\\Finv": "\u2132",
      "\\mathscr{M}": "\u2133",
      "\\mathscr{o}": "\u2134",
      "\\aleph": "\u2135",
      "\\beth": "\u2136",
      "\\gimel": "\u2137",
      "\\daleth": "\u2138",
      "\\mathbb{\\pi}": "\u213C",
      "\\mathbb{\\gamma}": "\u213D",
      "\\mathbb{\\Gamma}": "\u213E",
      "\\mathbb{\\Pi}": "\u213F",
      "\\mathbb{\\Sigma}": "\u2140",
      "\\Game": "\u2141",
      "\\sansLturned": "\u2142",
      "\\sansLmirrored": "\u2143",
      "\\Yup": "\u2144",
      "\\CapitalDifferentialD": "\u2145",
      "\\DifferentialD": "\u2146",
      "\\ExponetialE": "\u2147",
      "\\ComplexI": "\u2148",
      "\\ComplexJ": "\u2149",
      "\\PropertyLine": "\u214A",
      "\\invamp": "\u214B",
      "\\frac{1}{7}": "\u2150",
      "\\textfrac{1}{7}": "\u2150",
      "\\frac{1}{9}": "\u2151",
      "\\textfrac{1}{9}": "\u2151",
      "\\frac{1}{10}": "\u2152",
      "\\textfrac{1}{10}": "\u2152",
      "\\frac{1}{3}": "\u2153",
      "\\textfrac{1}{3}": "\u2153",
      "\\frac{2}{3}": "\u2154",
      "\\textfrac{2}{3}": "\u2154",
      "\\frac{1}{5}": "\u2155",
      "\\textfrac{1}{5}": "\u2155",
      "\\frac{2}{5}": "\u2156",
      "\\textfrac{2}{5}": "\u2156",
      "\\frac{3}{5}": "\u2157",
      "\\textfrac{3}{5}": "\u2157",
      "\\frac{4}{5}": "\u2158",
      "\\textfrac{4}{5}": "\u2158",
      "\\frac{1}{6}": "\u2159",
      "\\textfrac{1}{6}": "\u2159",
      "\\frac{5}{6}": "\u215A",
      "\\textfrac{5}{6}": "\u215A",
      "\\frac{1}{8}": "\u215B",
      "\\textfrac{1}{8}": "\u215B",
      "\\frac{3}{8}": "\u215C",
      "\\textfrac{3}{8}": "\u215C",
      "\\frac{5}{8}": "\u215D",
      "\\textfrac{5}{8}": "\u215D",
      "\\frac{7}{8}": "\u215E",
      "\\textfrac{7}{8}": "\u215E",
      "\\frac{1}": "\u215F",
      "\\textfrac{1}": "\u215F",
      "\\frac{0}{3}": "\u2189",
      "\\textfrac{0}{3}": "\u2189",
      "\\leftarrow": "\u2190",
      "\\uparrow": "\u2191",
      "\\textrightarrow": "\u2192",
      "\\rightarrow": "\u2192",
      "\\to": "\u2192",
      "\\downarrow": "\u2193",
      "\\leftrightarrow": "\u2194",
      "\\updownarrow": "\u2195",
      "\\nwarrow": "\u2196",
      "\\nearrow": "\u2197",
      "\\searrow": "\u2198",
      "\\swarrow": "\u2199",
      "\\nleftarrow": "\u219A",
      "\\nrightarrow": "\u219B",
      "\\arrowwaveleft": "\u219C",
      "\\arrowwaveright": "\u219D",
      "\\twoheadleftarrow": "\u219E",
      "\\twoheaduparrow": "\u219F",
      "\\twoheadrightarrow": "\u21A0",
      "\\twoheaddownarrow": "\u21A1",
      "\\leftarrowtail": "\u21A2",
      "\\rightarrowtail": "\u21A3",
      "\\mapsfrom": "\u21A4",
      "\\MapsUp": "\u21A5",
      "\\mapsto": "\u21A6",
      "\\MapsDown": "\u21A7",
      "\\updownarrowbar": "\u21A8",
      "\\hookleftarrow": "\u21A9",
      "\\hookrightarrow": "\u21AA",
      "\\looparrowleft": "\u21AB",
      "\\looparrowright": "\u21AC",
      "\\leftrightsquigarrow": "\u21AD",
      "\\nleftrightarrow": "\u21AE",
      "\\lightning": "\u21AF",
      "\\Lsh": "\u21B0",
      "\\Rsh": "\u21B1",
      "\\dlsh": "\u21B2",
      "\\reflectbox{\\carriagereturn}": "\u21B3",
      "\\linefeed": "\u21B4",
      "\\carriagereturn": "\u21B5",
      "\\curvearrowleft": "\u21B6",
      "\\curvearrowright": "\u21B7",
      "\\barovernorthwestarrow": "\u21B8",
      "\\barleftarrowrightarrowba": "\u21B9",
      "\\circlearrowleft": "\u21BA",
      "\\circlearrowright": "\u21BB",
      "\\leftharpoonup": "\u21BC",
      "\\leftharpoondown": "\u21BD",
      "\\upharpoonright": "\u21BE",
      "\\upharpoonleft": "\u21BF",
      "\\rightharpoonup": "\u21C0",
      "\\rightharpoondown": "\u21C1",
      "\\downharpoonright": "\u21C2",
      "\\downharpoonleft": "\u21C3",
      "\\rightleftarrows": "\u21C4",
      "\\dblarrowupdown": "\u21C5",
      "\\leftrightarrows": "\u21C6",
      "\\leftleftarrows": "\u21C7",
      "\\upuparrows": "\u21C8",
      "\\rightrightarrows": "\u21C9",
      "\\downdownarrows": "\u21CA",
      "\\leftrightharpoons": "\u21CB",
      "\\rightleftharpoons": "\u21CC",
      "\\nLeftarrow": "\u21CD",
      "\\nLeftrightarrow": "\u21CE",
      "\\nRightarrow": "\u21CF",
      "\\Leftarrow": "\u21D0",
      "\\Uparrow": "\u21D1",
      "\\Rightarrow": "\u21D2",
      "\\Downarrow": "\u21D3",
      "\\Leftrightarrow": "\u21D4",
      "\\Updownarrow": "\u21D5",
      "\\Nwarrow": "\u21D6",
      "\\Nearrow": "\u21D7",
      "\\Searrow": "\u21D8",
      "\\Swarrow": "\u21D9",
      "\\Lleftarrow": "\u21DA",
      "\\Rrightarrow": "\u21DB",
      "\\leftsquigarrow": "\u21DC",
      "\\rightsquigarrow": "\u21DD",
      "\\nHuparrow": "\u21DE",
      "\\nHdownarrow": "\u21DF",
      "\\dashleftarrow": "\u21E0",
      "\\updasharrow": "\u21E1",
      "\\dashrightarrow": "\u21E2",
      "\\downdasharrow": "\u21E3",
      "\\LeftArrowBar": "\u21E4",
      "\\RightArrowBar": "\u21E5",
      "\\leftwhitearrow": "\u21E6",
      "\\upwhitearrow": "\u21E7",
      "\\rightwhitearrow": "\u21E8",
      "\\downwhitearrow": "\u21E9",
      "\\whitearrowupfrombar": "\u21EA",
      "\\circleonrightarrow": "\u21F4",
      "\\DownArrowUpArrow": "\u21F5",
      "\\rightthreearrows": "\u21F6",
      "\\nvleftarrow": "\u21F7",
      "\\pfun": "\u21F8",
      "\\nvleftrightarrow": "\u21F9",
      "\\nVleftarrow": "\u21FA",
      "\\ffun": "\u21FB",
      "\\nVleftrightarrow": "\u21FC",
      "\\leftarrowtriangle": "\u21FD",
      "\\rightarrowtriangle": "\u21FE",
      "\\leftrightarrowtriangle": "\u21FF",
      "\\forall": "\u2200",
      "\\complement": "\u2201",
      "\\partial": "\u2202",
      "\\exists": "\u2203",
      "\\nexists": "\u2204",
      "\\varnothing": "\u2205",
      "\\increment": "\u2206",
      "\\nabla": "\u2207",
      "\\in": "\u2208",
      "\\not\\in": "\u2209",
      "\\smallin": "\u220A",
      "\\ni": "\u220B",
      "\\not\\ni": "\u220C",
      "\\smallni": "\u220D",
      "\\QED": "\u220E",
      "\\prod": "\u220F",
      "\\coprod": "\u2210",
      "\\sum": "\u2211",
      "\\mp": "\u2213",
      "\\dotplus": "\u2214",
      "\\setminus": "\u2216",
      "{_\\ast}": "\u2217",
      "\\circ": "\u2218",
      "\\bullet": "\u2219",
      "\\surd": "\u221A",
      "\\sqrt[3]": "\u221B",
      "\\sqrt[4]": "\u221C",
      "\\propto": "\u221D",
      "\\infty": "\u221E",
      "\\rightangle": "\u221F",
      "\\angle": "\u2220",
      "\\measuredangle": "\u2221",
      "\\sphericalangle": "\u2222",
      "\\mid": "\u2223",
      "\\nmid": "\u2224",
      "\\parallel": "\u2225",
      "\\nparallel": "\u2226",
      "\\wedge": "\u2227",
      "\\vee": "\u2228",
      "\\cap": "\u2229",
      "\\cup": "\u222A",
      "\\int": "\u222B",
      "{\\int\\!\\int}": "\u222C",
      "{\\int\\!\\int\\!\\int}": "\u222D",
      "\\oint": "\u222E",
      "\\surfintegral": "\u222F",
      "\\volintegral": "\u2230",
      "\\clwintegral": "\u2231",
      "\\lcirclerightint": "\u2232",
      "\\rcirclerightint": "\u2233",
      "\\therefore": "\u2234",
      "\\because": "\u2235",
      "\\Colon": "\u2237",
      "\\dotdiv": "\u2238",
      "\\eqcolon": "\u2239",
      "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}": "\u223A",
      "\\homothetic": "\u223B",
      "\\sim": "\u223C",
      "\\backsim": "\u223D",
      "\\lazysinv": "\u223E",
      "\\AC": "\u223F",
      "\\wr": "\u2240",
      "\\not\\sim": "\u2241",
      "\\texteqsim": "\u2242",
      "\\NotEqualTilde": "\u2242\u0338",
      "\\simeq": "\u2243",
      "\\not\\simeq": "\u2244",
      "\\cong": "\u2245",
      "\\approxnotequal": "\u2246",
      "\\not\\cong": "\u2247",
      "\\approx": "\u2248",
      "\\not\\approx": "\u2249",
      "\\approxeq": "\u224A",
      "\\tildetrpl": "\u224B",
      "\\not\\apid": "\u224B\u0338",
      "\\allequal": "\u224C",
      "\\asymp": "\u224D",
      "\\Bumpeq": "\u224E",
      "\\NotHumpDownHump": "\u224E\u0338",
      "\\bumpeq": "\u224F",
      "\\NotHumpEqual": "\u224F\u0338",
      "\\doteq": "\u2250",
      "\\not\\doteq": "\u2250\u0338",
      "\\doteqdot": "\u2251",
      "\\fallingdotseq": "\u2252",
      "\\risingdotseq": "\u2253",
      "\\coloneq": "\u2254",
      "\\eqcirc": "\u2256",
      "\\circeq": "\u2257",
      "\\arceq": "\u2258",
      "\\estimates": "\u2259",
      "\\starequal": "\u225B",
      "\\triangleq": "\u225C",
      "\\eqdef": "\u225D",
      "\\measeq": "\u225E",
      "\\neq": "\u2260",
      "\\equiv": "\u2261",
      "\\not\\equiv": "\u2262",
      "\\Equiv": "\u2263",
      "\\leq": "\u2264",
      "\\le": "\u2264",
      "\\geq": "\u2265",
      "\\leqq": "\u2266",
      "\\geqq": "\u2267",
      "\\lneqq": "\u2268",
      "\\lvertneqq": "\u2268\uFE00",
      "\\gneqq": "\u2269",
      "\\gvertneqq": "\u2269\uFE00",
      "\\ll": "\u226A",
      "\\NotLessLess": "\u226A\u0338",
      "\\gg": "\u226B",
      "\\NotGreaterGreater": "\u226B\u0338",
      "\\between": "\u226C",
      "{\\not\\kern-0.3em\\times}": "\u226D",
      "\\not<": "\u226E",
      "\\not>": "\u226F",
      "\\not\\leq": "\u2270",
      "\\not\\geq": "\u2271",
      "\\lessequivlnt": "\u2272",
      "\\greaterequivlnt": "\u2273",
      "\\lessgtr": "\u2276",
      "\\gtrless": "\u2277",
      "\\notlessgreater": "\u2278",
      "\\notgreaterless": "\u2279",
      "\\prec": "\u227A",
      "\\succ": "\u227B",
      "\\preccurlyeq": "\u227C",
      "\\succcurlyeq": "\u227D",
      "\\NotPrecedesTilde": "\u227E\u0338",
      "\\NotSucceedsTilde": "\u227F\u0338",
      "\\not\\prec": "\u2280",
      "\\not\\succ": "\u2281",
      "\\subset": "\u2282",
      "\\supset": "\u2283",
      "\\not\\subset": "\u2284",
      "\\not\\supset": "\u2285",
      "\\subseteq": "\u2286",
      "\\supseteq": "\u2287",
      "\\not\\subseteq": "\u2288",
      "\\not\\supseteq": "\u2289",
      "\\subsetneq": "\u228A",
      "\\varsubsetneqq": "\u228A\uFE00",
      "\\supsetneq": "\u228B",
      "\\varsupsetneq": "\u228B\uFE00",
      "\\cupleftarrow": "\u228C",
      "\\cupdot": "\u228D",
      "\\uplus": "\u228E",
      "\\sqsubset": "\u228F",
      "\\NotSquareSubset": "\u228F\u0338",
      "\\sqsupset": "\u2290",
      "\\NotSquareSuperset": "\u2290\u0338",
      "\\sqsubseteq": "\u2291",
      "\\sqsupseteq": "\u2292",
      "\\sqcap": "\u2293",
      "\\sqcup": "\u2294",
      "\\oplus": "\u2295",
      "\\ominus": "\u2296",
      "\\otimes": "\u2297",
      "\\oslash": "\u2298",
      "\\odot": "\u2299",
      "\\circledcirc": "\u229A",
      "\\circledast": "\u229B",
      "\\circledequal": "\u229C",
      "\\circleddash": "\u229D",
      "\\boxplus": "\u229E",
      "\\boxminus": "\u229F",
      "\\boxtimes": "\u22A0",
      "\\boxdot": "\u22A1",
      "\\vdash": "\u22A2",
      "\\dashv": "\u22A3",
      "\\top": "\u22A4",
      "\\assert": "\u22A6",
      "\\truestate": "\u22A7",
      "\\forcesextra": "\u22A8",
      "\\Vdash": "\u22A9",
      "\\Vvdash": "\u22AA",
      "\\VDash": "\u22AB",
      "\\nvdash": "\u22AC",
      "\\nvDash": "\u22AD",
      "\\nVdash": "\u22AE",
      "\\nVDash": "\u22AF",
      "\\prurel": "\u22B0",
      "\\scurel": "\u22B1",
      "\\vartriangleleft": "\u22B2",
      "\\vartriangleright": "\u22B3",
      "\\trianglelefteq": "\u22B4",
      "\\trianglerighteq": "\u22B5",
      "\\original": "\u22B6",
      "\\image": "\u22B7",
      "\\multimap": "\u22B8",
      "\\hermitconjmatrix": "\u22B9",
      "\\intercal": "\u22BA",
      "\\veebar": "\u22BB",
      "\\barvee": "\u22BD",
      "\\rightanglearc": "\u22BE",
      "\\varlrtriangle": "\u22BF",
      "\\bigcap": "\u22C2",
      "\\bigcup": "\u22C3",
      "\\diamond": "\u22C4",
      "\\cdot": "\u22C5",
      "\\star": "\u22C6",
      "\\divideontimes": "\u22C7",
      "\\bowtie": "\u22C8",
      "\\ltimes": "\u22C9",
      "\\rtimes": "\u22CA",
      "\\leftthreetimes": "\u22CB",
      "\\rightthreetimes": "\u22CC",
      "\\backsimeq": "\u22CD",
      "\\curlyvee": "\u22CE",
      "\\curlywedge": "\u22CF",
      "\\Subset": "\u22D0",
      "\\Supset": "\u22D1",
      "\\Cap": "\u22D2",
      "\\Cup": "\u22D3",
      "\\pitchfork": "\u22D4",
      "\\hash": "\u22D5",
      "\\lessdot": "\u22D6",
      "\\gtrdot": "\u22D7",
      "\\verymuchless": "\u22D8",
      "\\verymuchgreater": "\u22D9",
      "\\lesseqgtr": "\u22DA",
      "\\gtreqless": "\u22DB",
      "\\eqless": "\u22DC",
      "\\eqgtr": "\u22DD",
      "\\curlyeqprec": "\u22DE",
      "\\curlyeqsucc": "\u22DF",
      "\\npreceq": "\u22E0",
      "\\nsucceq": "\u22E1",
      "\\not\\sqsubseteq": "\u22E2",
      "\\not\\sqsupseteq": "\u22E3",
      "\\sqsubsetneq": "\u22E4",
      "\\Elzsqspne": "\u22E5",
      "\\lnsim": "\u22E6",
      "\\gnsim": "\u22E7",
      "\\precedesnotsimilar": "\u22E8",
      "\\succnsim": "\u22E9",
      "\\ntriangleleft": "\u22EA",
      "\\ntriangleright": "\u22EB",
      "\\ntrianglelefteq": "\u22EC",
      "\\ntrianglerighteq": "\u22ED",
      "\\vdots": "\u22EE",
      "\\cdots": "\u22EF",
      "\\upslopeellipsis": "\u22F0",
      "\\downslopeellipsis": "\u22F1",
      "\\disin": "\u22F2",
      "\\varisins": "\u22F3",
      "\\isins": "\u22F4",
      "\\isindot": "\u22F5",
      "\\barin": "\u22F6",
      "\\isinobar": "\u22F7",
      "\\isinvb": "\u22F8",
      "\\isinE": "\u22F9",
      "\\nisd": "\u22FA",
      "\\varnis": "\u22FB",
      "\\nis": "\u22FC",
      "\\varniobar": "\u22FD",
      "\\niobar": "\u22FE",
      "\\bagmember": "\u22FF",
      "\\diameter": "\u2300",
      "\\house": "\u2302",
      "\\barwedge": "\u2305",
      "\\varbarwedge": "\u2305",
      "\\perspcorrespond": "\u2306",
      "\\lceil": "\u2308",
      "\\rceil": "\u2309",
      "\\lfloor": "\u230A",
      "\\rfloor": "\u230B",
      "\\invneg": "\u2310",
      "\\wasylozenge": "\u2311",
      "\\profline": "\u2312",
      "\\profsurf": "\u2313",
      "\\recorder": "\u2315",
      '{\\mathchar"2208}': "\u2316",
      "\\viewdata": "\u2317",
      "\\turnednot": "\u2319",
      "\\ulcorner": "\u231C",
      "\\urcorner": "\u231D",
      "\\llcorner": "\u231E",
      "\\lrcorner": "\u231F",
      "\\inttop": "\u2320",
      "\\intbottom": "\u2321",
      "\\frown": "\u2322",
      "\\smile": "\u2323",
      "\\varhexagonlrbonds": "\u232C",
      "\\conictaper": "\u2332",
      "\\topbot": "\u2336",
      "\\APLinv": "\u2339",
      "\\notslash": "\u233F",
      "\\notbackslash": "\u2340",
      "\\APLleftarrowbox": "\u2347",
      "\\APLrightarrowbox": "\u2348",
      "\\invdiameter": "\u2349",
      "\\APLuparrowbox": "\u2350",
      "\\APLboxupcaret": "\u2353",
      "\\APLdownarrowbox": "\u2357",
      "\\APLcomment": "\u235D",
      "\\APLinput": "\u235E",
      "\\APLlog": "\u235F",
      "\\APLboxquestion": "\u2370",
      "\\rangledownzigzagarrow": "\u237C",
      "\\hexagon": "\u2394",
      "\\lparenuend": "\u239B",
      "\\lparenextender": "\u239C",
      "\\lparenlend": "\u239D",
      "\\rparenuend": "\u239E",
      "\\rparenextender": "\u239F",
      "\\rparenlend": "\u23A0",
      "\\lbrackuend": "\u23A1",
      "\\lbrackextender": "\u23A2",
      "\\Elzdlcorn": "\u23A3",
      "\\rbrackuend": "\u23A4",
      "\\rbrackextender": "\u23A5",
      "\\rbracklend": "\u23A6",
      "\\lbraceuend": "\u23A7",
      "\\lbracemid": "\u23A8",
      "\\lbracelend": "\u23A9",
      "\\vbraceextender": "\u23AA",
      "\\rbraceuend": "\u23AB",
      "\\rbracemid": "\u23AC",
      "\\rbracelend": "\u23AD",
      "\\intextender": "\u23AE",
      "\\harrowextender": "\u23AF",
      "\\lmoustache": "\u23B0",
      "\\rmoustache": "\u23B1",
      "\\sumtop": "\u23B2",
      "\\sumbottom": "\u23B3",
      "\\overbracket": "\u23B4",
      "\\underbracket": "\u23B5",
      "\\bbrktbrk": "\u23B6",
      "\\sqrtbottom": "\u23B7",
      "\\lvboxline": "\u23B8",
      "\\rvboxline": "\u23B9",
      "\\varcarriagereturn": "\u23CE",
      "\\overparen": "\u23DC",
      "\\underparen": "\u23DD",
      "\\overbrace": "\u23DE",
      "\\underbrace": "\u23DF",
      "\\obrbrak": "\u23E0",
      "\\ubrbrak": "\u23E1",
      "\\trapezium": "\u23E2",
      "\\benzenr": "\u23E3",
      "\\strns": "\u23E4",
      "\\fltns": "\u23E5",
      "\\accurrent": "\u23E6",
      "\\elinters": "\u23E7",
      "\\ding{172}": "\u2460",
      "\\ding{173}": "\u2461",
      "\\ding{174}": "\u2462",
      "\\ding{175}": "\u2463",
      "\\ding{176}": "\u2464",
      "\\ding{177}": "\u2465",
      "\\ding{178}": "\u2466",
      "\\ding{179}": "\u2467",
      "\\ding{180}": "\u2468",
      "\\ding{181}": "\u2469",
      "\\circledS": "\u24C8",
      "\\Elzdshfnc": "\u2506",
      "\\Elzsqfnw": "\u2519",
      "\\diagup": "\u2571",
      "\\blockuphalf": "\u2580",
      "\\blocklowhalf": "\u2584",
      "\\blockfull": "\u2588",
      "\\blocklefthalf": "\u258C",
      "\\blockrighthalf": "\u2590",
      "\\blockqtrshaded": "\u2591",
      "\\blockhalfshaded": "\u2592",
      "\\blockthreeqtrshaded": "\u2593",
      "\\ding{110}": "\u25A0",
      "\\mdlgblksquare": "\u25A0",
      "\\square": "\u25A1",
      "\\Box": "\u25A1",
      "\\squoval": "\u25A2",
      "\\blackinwhitesquare": "\u25A3",
      "\\squarehfill": "\u25A4",
      "\\squarevfill": "\u25A5",
      "\\squarehvfill": "\u25A6",
      "\\squarenwsefill": "\u25A7",
      "\\squareneswfill": "\u25A8",
      "\\squarecrossfill": "\u25A9",
      "\\smwhtsquare": "\u25AB",
      "\\hrectangleblack": "\u25AC",
      "\\fbox{~~}": "\u25AD",
      "\\vrectangleblack": "\u25AE",
      "\\Elzvrecto": "\u25AF",
      "\\parallelogramblack": "\u25B0",
      "\\ding{115}": "\u25B2",
      "\\bigblacktriangleup": "\u25B2",
      "\\bigtriangleup": "\u25B3",
      "\\blacktriangle": "\u25B4",
      "\\vartriangle": "\u25B5",
      "\\RHD": "\u25B6",
      "\\rhd": "\u25B7",
      "\\blacktriangleright": "\u25B8",
      "\\triangleright": "\u25B9",
      "\\blackpointerright": "\u25BA",
      "\\whitepointerright": "\u25BB",
      "\\ding{116}": "\u25BC",
      "\\bigblacktriangledown": "\u25BC",
      "\\bigtriangledown": "\u25BD",
      "\\blacktriangledown": "\u25BE",
      "\\triangledown": "\u25BF",
      "\\LHD": "\u25C0",
      "\\lhd": "\u25C1",
      "\\blacktriangleleft": "\u25C2",
      "\\triangleleft": "\u25C3",
      "\\blackpointerleft": "\u25C4",
      "\\whitepointerleft": "\u25C5",
      "\\ding{117}": "\u25C6",
      "\\Diamondblack": "\u25C6",
      "\\Diamond": "\u25C7",
      "\\blackinwhitediamond": "\u25C8",
      "\\fisheye": "\u25C9",
      "\\lozenge": "\u25CA",
      "\\dottedcircle": "\u25CC",
      "\\circlevertfill": "\u25CD",
      "\\bullseye": "\u25CE",
      "\\ding{108}": "\u25CF",
      "\\CIRCLE": "\u25CF",
      "\\Elzcirfl": "\u25D0",
      "\\Elzcirfr": "\u25D1",
      "\\Elzcirfb": "\u25D2",
      "\\circletophalfblack": "\u25D3",
      "\\circleurquadblack": "\u25D4",
      "\\blackcircleulquadwhite": "\u25D5",
      "\\LEFTCIRCLE": "\u25D6",
      "\\ding{119}": "\u25D7",
      "\\RIGHTCIRCLE": "\u25D7",
      "\\Elzrvbull": "\u25D8",
      "\\inversewhitecircle": "\u25D9",
      "\\invwhiteupperhalfcircle": "\u25DA",
      "\\invwhitelowerhalfcircle": "\u25DB",
      "\\ularc": "\u25DC",
      "\\urarc": "\u25DD",
      "\\lrarc": "\u25DE",
      "\\llarc": "\u25DF",
      "\\topsemicircle": "\u25E0",
      "\\botsemicircle": "\u25E1",
      "\\lrblacktriangle": "\u25E2",
      "\\llblacktriangle": "\u25E3",
      "\\ulblacktriangle": "\u25E4",
      "\\urblacktriangle": "\u25E5",
      "\\smwhtcircle": "\u25E6",
      "\\Elzsqfl": "\u25E7",
      "\\Elzsqfr": "\u25E8",
      "\\squareulblack": "\u25E9",
      "\\Elzsqfse": "\u25EA",
      "\\boxbar": "\u25EB",
      "\\trianglecdot": "\u25EC",
      "\\triangleleftblack": "\u25ED",
      "\\trianglerightblack": "\u25EE",
      "\\bigcirc": "\u25EF",
      "\\squareulquad": "\u25F0",
      "\\squarellquad": "\u25F1",
      "\\squarelrquad": "\u25F2",
      "\\squareurquad": "\u25F3",
      "\\circleulquad": "\u25F4",
      "\\circlellquad": "\u25F5",
      "\\circlelrquad": "\u25F6",
      "\\circleurquad": "\u25F7",
      "\\ultriangle": "\u25F8",
      "\\urtriangle": "\u25F9",
      "\\lltriangle": "\u25FA",
      "\\mdsmwhtsquare": "\u25FD",
      "\\mdsmblksquare": "\u25FE",
      "\\lrtriangle": "\u25FF",
      "\\ding{72}": "\u2605",
      "\\bigstar": "\u2605",
      "\\ding{73}": "\u2606",
      "\\bigwhitestar": "\u2606",
      "\\Sun": "\u2609",
      "\\ding{37}": "\u260E",
      "\\Square": "\u2610",
      "\\CheckedBox": "\u2611",
      "\\XBox": "\u2612",
      "\\steaming": "\u2615",
      "\\ding{42}": "\u261B",
      "\\ding{43}": "\u261E",
      "\\pointright": "\u261E",
      "\\skull": "\u2620",
      "\\danger": "\u2621",
      "\\radiation": "\u2622",
      "\\biohazard": "\u2623",
      "\\yinyang": "\u262F",
      "\\frownie": "\u2639",
      "\\smiley": "\u263A",
      "\\blacksmiley": "\u263B",
      "\\sun": "\u263C",
      "\\rightmoon": "\u263D",
      "\\leftmoon": "\u263E",
      "\\mercury": "\u263F",
      "\\venus": "\u2640",
      "\\female": "\u2640",
      "\\earth": "\u2641",
      "\\male": "\u2642",
      "\\jupiter": "\u2643",
      "\\saturn": "\u2644",
      "\\uranus": "\u2645",
      "\\neptune": "\u2646",
      "\\pluto": "\u2647",
      "\\aries": "\u2648",
      "\\taurus": "\u2649",
      "\\gemini": "\u264A",
      "\\cancer": "\u264B",
      "\\leo": "\u264C",
      "\\virgo": "\u264D",
      "\\libra": "\u264E",
      "\\scorpio": "\u264F",
      "\\sagittarius": "\u2650",
      "\\capricornus": "\u2651",
      "\\aquarius": "\u2652",
      "\\pisces": "\u2653",
      "\\ding{171}": "\u2660",
      "\\spadesuit": "\u2660",
      "\\heartsuit": "\u2661",
      "\\ding{168}": "\u2663",
      "\\clubsuit": "\u2663",
      "\\varspadesuit": "\u2664",
      "\\ding{170}": "\u2665",
      "\\varheartsuit": "\u2665",
      "\\ding{169}": "\u2666",
      "\\vardiamondsuit": "\u2666",
      "\\varclubsuit": "\u2667",
      "\\quarternote": "\u2669",
      "\\eighthnote": "\u266A",
      "\\twonotes": "\u266B",
      "\\sixteenthnote": "\u266C",
      "\\flat": "\u266D",
      "\\natural": "\u266E",
      "\\sharp": "\u266F",
      "\\recycle": "\u267B",
      "\\acidfree": "\u267E",
      "\\dicei": "\u2680",
      "\\diceii": "\u2681",
      "\\diceiii": "\u2682",
      "\\diceiv": "\u2683",
      "\\dicev": "\u2684",
      "\\dicevi": "\u2685",
      "\\circledrightdot": "\u2686",
      "\\circledtwodots": "\u2687",
      "\\blackcircledrightdot": "\u2688",
      "\\blackcircledtwodots": "\u2689",
      "\\anchor": "\u2693",
      "\\swords": "\u2694",
      "\\warning": "\u26A0",
      "\\Hermaphrodite": "\u26A5",
      "\\medcirc": "\u26AA",
      "\\medbullet": "\u26AB",
      "\\mdsmwhtcircle": "\u26AC",
      "\\neuter": "\u26B2",
      "\\ding{33}": "\u2701",
      "\\ding{34}": "\u2702",
      "\\ding{35}": "\u2703",
      "\\ding{36}": "\u2704",
      "\\ding{38}": "\u2706",
      "\\ding{39}": "\u2707",
      "\\ding{40}": "\u2708",
      "\\ding{41}": "\u2709",
      "\\ding{44}": "\u270C",
      "\\ding{45}": "\u270D",
      "\\ding{46}": "\u270E",
      "\\pencil": "\u270E",
      "\\ding{47}": "\u270F",
      "\\ding{48}": "\u2710",
      "\\ding{49}": "\u2711",
      "\\ding{50}": "\u2712",
      "\\ding{51}": "\u2713",
      "\\checkmark": "\u2713",
      "\\ding{52}": "\u2714",
      "\\ding{53}": "\u2715",
      "\\ding{54}": "\u2716",
      "\\ding{55}": "\u2717",
      "\\ballotx": "\u2717",
      "\\ding{56}": "\u2718",
      "\\ding{57}": "\u2719",
      "\\ding{58}": "\u271A",
      "\\ding{59}": "\u271B",
      "\\ding{60}": "\u271C",
      "\\ding{61}": "\u271D",
      "\\ding{62}": "\u271E",
      "\\ding{63}": "\u271F",
      "\\ding{64}": "\u2720",
      "\\maltese": "\u2720",
      "\\ding{65}": "\u2721",
      "\\ding{66}": "\u2722",
      "\\ding{67}": "\u2723",
      "\\ding{68}": "\u2724",
      "\\ding{69}": "\u2725",
      "\\ding{70}": "\u2726",
      "\\ding{71}": "\u2727",
      "\\ding{74}": "\u272A",
      "\\circledstar": "\u272A",
      "\\ding{75}": "\u272B",
      "\\ding{76}": "\u272C",
      "\\ding{77}": "\u272D",
      "\\ding{78}": "\u272E",
      "\\ding{79}": "\u272F",
      "\\ding{80}": "\u2730",
      "\\ding{81}": "\u2731",
      "\\ding{82}": "\u2732",
      "\\ding{83}": "\u2733",
      "\\ding{84}": "\u2734",
      "\\ding{85}": "\u2735",
      "\\ding{86}": "\u2736",
      "\\varstar": "\u2736",
      "\\ding{87}": "\u2737",
      "\\ding{88}": "\u2738",
      "\\ding{89}": "\u2739",
      "\\ding{90}": "\u273A",
      "\\ding{91}": "\u273B",
      "\\ding{92}": "\u273C",
      "\\ding{93}": "\u273D",
      "\\dingasterisk": "\u273D",
      "\\ding{94}": "\u273E",
      "\\ding{95}": "\u273F",
      "\\ding{96}": "\u2740",
      "\\ding{97}": "\u2741",
      "\\ding{98}": "\u2742",
      "\\ding{99}": "\u2743",
      "\\ding{100}": "\u2744",
      "\\ding{101}": "\u2745",
      "\\ding{102}": "\u2746",
      "\\ding{103}": "\u2747",
      "\\ding{104}": "\u2748",
      "\\ding{105}": "\u2749",
      "\\ding{106}": "\u274A",
      "\\ding{107}": "\u274B",
      "\\ding{109}": "\u274D",
      "\\ding{111}": "\u274F",
      "\\ding{112}": "\u2750",
      "\\ding{113}": "\u2751",
      "\\ding{114}": "\u2752",
      "\\ding{118}": "\u2756",
      "\\ding{120}": "\u2758",
      "\\ding{121}": "\u2759",
      "\\ding{122}": "\u275A",
      "\\ding{123}": "\u275B",
      "\\ding{124}": "\u275C",
      "\\ding{125}": "\u275D",
      "\\ding{126}": "\u275E",
      "\\ding{161}": "\u2761",
      "\\ding{162}": "\u2762",
      "\\ding{163}": "\u2763",
      "\\ding{164}": "\u2764",
      "\\ding{165}": "\u2765",
      "\\ding{166}": "\u2766",
      "\\ding{167}": "\u2767",
      "\\ding{182}": "\u2776",
      "\\ding{183}": "\u2777",
      "\\ding{184}": "\u2778",
      "\\ding{185}": "\u2779",
      "\\ding{186}": "\u277A",
      "\\ding{187}": "\u277B",
      "\\ding{188}": "\u277C",
      "\\ding{189}": "\u277D",
      "\\ding{190}": "\u277E",
      "\\ding{191}": "\u277F",
      "\\ding{192}": "\u2780",
      "\\ding{193}": "\u2781",
      "\\ding{194}": "\u2782",
      "\\ding{195}": "\u2783",
      "\\ding{196}": "\u2784",
      "\\ding{197}": "\u2785",
      "\\ding{198}": "\u2786",
      "\\ding{199}": "\u2787",
      "\\ding{200}": "\u2788",
      "\\ding{201}": "\u2789",
      "\\ding{202}": "\u278A",
      "\\ding{203}": "\u278B",
      "\\ding{204}": "\u278C",
      "\\ding{205}": "\u278D",
      "\\ding{206}": "\u278E",
      "\\ding{207}": "\u278F",
      "\\ding{208}": "\u2790",
      "\\ding{209}": "\u2791",
      "\\ding{210}": "\u2792",
      "\\ding{211}": "\u2793",
      "\\ding{212}": "\u2794",
      "\\ding{216}": "\u2798",
      "\\ding{217}": "\u2799",
      "\\ding{218}": "\u279A",
      "\\ding{219}": "\u279B",
      "\\draftingarrow": "\u279B",
      "\\ding{220}": "\u279C",
      "\\ding{221}": "\u279D",
      "\\ding{222}": "\u279E",
      "\\ding{223}": "\u279F",
      "\\ding{224}": "\u27A0",
      "\\ding{225}": "\u27A1",
      "\\ding{226}": "\u27A2",
      "\\arrowbullet": "\u27A2",
      "\\ding{227}": "\u27A3",
      "\\ding{228}": "\u27A4",
      "\\ding{229}": "\u27A5",
      "\\ding{230}": "\u27A6",
      "\\ding{231}": "\u27A7",
      "\\ding{232}": "\u27A8",
      "\\ding{233}": "\u27A9",
      "\\ding{234}": "\u27AA",
      "\\ding{235}": "\u27AB",
      "\\ding{236}": "\u27AC",
      "\\ding{237}": "\u27AD",
      "\\ding{238}": "\u27AE",
      "\\ding{239}": "\u27AF",
      "\\ding{241}": "\u27B1",
      "\\ding{242}": "\u27B2",
      "\\ding{243}": "\u27B3",
      "\\ding{244}": "\u27B4",
      "\\ding{245}": "\u27B5",
      "\\ding{246}": "\u27B6",
      "\\ding{247}": "\u27B7",
      "\\ding{248}": "\u27B8",
      "\\ding{249}": "\u27B9",
      "\\ding{250}": "\u27BA",
      "\\ding{251}": "\u27BB",
      "\\ding{252}": "\u27BC",
      "\\ding{253}": "\u27BD",
      "\\ding{254}": "\u27BE",
      "\\threedangle": "\u27C0",
      "\\whiteinwhitetriangle": "\u27C1",
      "\\perp": "\u27C2",
      "\\subsetcirc": "\u27C3",
      "\\supsetcirc": "\u27C4",
      "\\Lbag": "\u27C5",
      "\\Rbag": "\u27C6",
      "\\veedot": "\u27C7",
      "\\bsolhsub": "\u27C8",
      "\\suphsol": "\u27C9",
      "\\longdivision": "\u27CC",
      "\\Diamonddot": "\u27D0",
      "\\wedgedot": "\u27D1",
      "\\upin": "\u27D2",
      "\\pullback": "\u27D3",
      "\\pushout": "\u27D4",
      "\\leftouterjoin": "\u27D5",
      "\\rightouterjoin": "\u27D6",
      "\\fullouterjoin": "\u27D7",
      "\\bigbot": "\u27D8",
      "\\bigtop": "\u27D9",
      "\\DashVDash": "\u27DA",
      "\\dashVdash": "\u27DB",
      "\\multimapinv": "\u27DC",
      "\\vlongdash": "\u27DD",
      "\\longdashv": "\u27DE",
      "\\cirbot": "\u27DF",
      "\\lozengeminus": "\u27E0",
      "\\concavediamond": "\u27E1",
      "\\concavediamondtickleft": "\u27E2",
      "\\concavediamondtickright": "\u27E3",
      "\\whitesquaretickleft": "\u27E4",
      "\\whitesquaretickright": "\u27E5",
      "\\llbracket": "\u27E6",
      "\\rrbracket": "\u27E7",
      "\\langle": "\u27E8",
      "\\rangle": "\u27E9",
      "\\lang": "\u27EA",
      "\\rang": "\u27EB",
      "\\Lbrbrak": "\u27EC",
      "\\Rbrbrak": "\u27ED",
      "\\lgroup": "\u27EE",
      "\\rgroup": "\u27EF",
      "\\UUparrow": "\u27F0",
      "\\DDownarrow": "\u27F1",
      "\\acwgapcirclearrow": "\u27F2",
      "\\cwgapcirclearrow": "\u27F3",
      "\\rightarrowonoplus": "\u27F4",
      "\\longleftarrow": "\u27F5",
      "\\longrightarrow": "\u27F6",
      "\\longleftrightarrow": "\u27F7",
      "\\Longleftarrow": "\u27F8",
      "\\Longrightarrow": "\u27F9",
      "\\Longleftrightarrow": "\u27FA",
      "\\longmapsfrom": "\u27FB",
      "\\longmapsto": "\u27FC",
      "\\Longmapsfrom": "\u27FD",
      "\\Longmapsto": "\u27FE",
      "\\sim\\joinrel\\leadsto": "\u27FF",
      "\\psur": "\u2900",
      "\\nVtwoheadrightarrow": "\u2901",
      "\\nvLeftarrow": "\u2902",
      "\\nvRightarrow": "\u2903",
      "\\nvLeftrightarrow": "\u2904",
      "\\Mapsfrom": "\u2906",
      "\\Mapsto": "\u2907",
      "\\downarrowbarred": "\u2908",
      "\\uparrowbarred": "\u2909",
      "\\Uuparrow": "\u290A",
      "\\Ddownarrow": "\u290B",
      "\\leftbkarrow": "\u290C",
      "\\rightbkarrow": "\u290D",
      "\\leftdbkarrow": "\u290E",
      "\\dbkarow": "\u290F",
      "\\drbkarow": "\u2910",
      "\\rightdotarrow": "\u2911",
      "\\UpArrowBar": "\u2912",
      "\\DownArrowBar": "\u2913",
      "\\pinj": "\u2914",
      "\\finj": "\u2915",
      "\\bij": "\u2916",
      "\\nvtwoheadrightarrowtail": "\u2917",
      "\\nVtwoheadrightarrowtail": "\u2918",
      "\\lefttail": "\u2919",
      "\\righttail": "\u291A",
      "\\leftdbltail": "\u291B",
      "\\rightdbltail": "\u291C",
      "\\diamondleftarrow": "\u291D",
      "\\rightarrowdiamond": "\u291E",
      "\\diamondleftarrowbar": "\u291F",
      "\\barrightarrowdiamond": "\u2920",
      "\\nwsearrow": "\u2921",
      "\\neswarrow": "\u2922",
      "\\rdiagovfdiag": "\u292B",
      "\\fdiagovrdiag": "\u292C",
      "\\seovnearrow": "\u292D",
      "\\neovsearrow": "\u292E",
      "\\fdiagovnearrow": "\u292F",
      "\\rdiagovsearrow": "\u2930",
      "\\neovnwarrow": "\u2931",
      "\\nwovnearrow": "\u2932",
      "\\uprightcurvearrow": "\u2934",
      "\\downrightcurvedarrow": "\u2935",
      "\\cwrightarcarrow": "\u2938",
      "\\acwleftarcarrow": "\u2939",
      "\\acwoverarcarrow": "\u293A",
      "\\acwunderarcarrow": "\u293B",
      "\\curvearrowrightminus": "\u293C",
      "\\curvearrowleftplus": "\u293D",
      "\\cwundercurvearrow": "\u293E",
      "\\ccwundercurvearrow": "\u293F",
      "\\Elolarr": "\u2940",
      "\\Elorarr": "\u2941",
      "\\ElzRlarr": "\u2942",
      "\\leftarrowshortrightarrow": "\u2943",
      "\\ElzrLarr": "\u2944",
      "\\rightarrowplus": "\u2945",
      "\\leftarrowplus": "\u2946",
      "\\Elzrarrx": "\u2947",
      "\\leftrightarrowcircle": "\u2948",
      "\\twoheaduparrowcircle": "\u2949",
      "\\leftrightharpoon": "\u294A",
      "\\rightleftharpoon": "\u294B",
      "\\updownharpoonrightleft": "\u294C",
      "\\updownharpoonleftright": "\u294D",
      "\\LeftRightVector": "\u294E",
      "\\RightUpDownVector": "\u294F",
      "\\DownLeftRightVector": "\u2950",
      "\\LeftUpDownVector": "\u2951",
      "\\LeftVectorBar": "\u2952",
      "\\RightVectorBar": "\u2953",
      "\\RightUpVectorBar": "\u2954",
      "\\RightDownVectorBar": "\u2955",
      "\\DownLeftVectorBar": "\u2956",
      "\\DownRightVectorBar": "\u2957",
      "\\LeftUpVectorBar": "\u2958",
      "\\LeftDownVectorBar": "\u2959",
      "\\LeftTeeVector": "\u295A",
      "\\RightTeeVector": "\u295B",
      "\\RightUpTeeVector": "\u295C",
      "\\RightDownTeeVector": "\u295D",
      "\\DownLeftTeeVector": "\u295E",
      "\\DownRightTeeVector": "\u295F",
      "\\LeftUpTeeVector": "\u2960",
      "\\LeftDownTeeVector": "\u2961",
      "\\leftleftharpoons": "\u2962",
      "\\upupharpoons": "\u2963",
      "\\rightrightharpoons": "\u2964",
      "\\downdownharpoons": "\u2965",
      "\\leftrightharpoonsup": "\u2966",
      "\\leftrightharpoonsdown": "\u2967",
      "\\rightleftharpoonsup": "\u2968",
      "\\rightleftharpoonsdown": "\u2969",
      "\\leftbarharpoon": "\u296A",
      "\\barleftharpoon": "\u296B",
      "\\rightbarharpoon": "\u296C",
      "\\barrightharpoon": "\u296D",
      "\\UpEquilibrium": "\u296E",
      "\\ReverseUpEquilibrium": "\u296F",
      "\\RoundImplies": "\u2970",
      "\\equalrightarrow": "\u2971",
      "\\similarrightarrow": "\u2972",
      "\\leftarrowsimilar": "\u2973",
      "\\rightarrowsimilar": "\u2974",
      "\\rightarrowapprox": "\u2975",
      "\\ltlarr": "\u2976",
      "\\leftarrowless": "\u2977",
      "\\gtrarr": "\u2978",
      "\\subrarr": "\u2979",
      "\\leftarrowsubset": "\u297A",
      "\\suplarr": "\u297B",
      "\\upfishtail": "\u297E",
      "\\downfishtail": "\u297F",
      "\\Elztfnc": "\u2980",
      "\\spot": "\u2981",
      "\\typecolon": "\u2982",
      "\\lBrace": "\u2983",
      "\\rBrace": "\u2984",
      "\\Elroang": "\u2986",
      "\\limg": "\u2987",
      "\\rimg": "\u2988",
      "\\lblot": "\u2989",
      "\\rblot": "\u298A",
      "\\lbrackubar": "\u298B",
      "\\rbrackubar": "\u298C",
      "\\lbrackultick": "\u298D",
      "\\rbracklrtick": "\u298E",
      "\\lbracklltick": "\u298F",
      "\\rbrackurtick": "\u2990",
      "\\langledot": "\u2991",
      "\\rangledot": "\u2992",
      "<\\kern-0.58em(": "\u2993",
      "\\Lparengtr": "\u2995",
      "\\Rparenless": "\u2996",
      "\\lblkbrbrak": "\u2997",
      "\\rblkbrbrak": "\u2998",
      "\\Elzddfnc": "\u2999",
      "\\vzigzag": "\u299A",
      "\\measuredangleleft": "\u299B",
      "\\Angle": "\u299C",
      "\\rightanglemdot": "\u299D",
      "\\angles": "\u299E",
      "\\angdnr": "\u299F",
      "\\Elzlpargt": "\u29A0",
      "\\sphericalangleup": "\u29A1",
      "\\turnangle": "\u29A2",
      "\\revangle": "\u29A3",
      "\\angleubar": "\u29A4",
      "\\revangleubar": "\u29A5",
      "\\wideangledown": "\u29A6",
      "\\wideangleup": "\u29A7",
      "\\measanglerutone": "\u29A8",
      "\\measanglelutonw": "\u29A9",
      "\\measanglerdtose": "\u29AA",
      "\\measangleldtosw": "\u29AB",
      "\\measangleurtone": "\u29AC",
      "\\measangleultonw": "\u29AD",
      "\\measangledrtose": "\u29AE",
      "\\measangledltosw": "\u29AF",
      "\\revemptyset": "\u29B0",
      "\\emptysetobar": "\u29B1",
      "\\emptysetocirc": "\u29B2",
      "\\emptysetoarr": "\u29B3",
      "\\emptysetoarrl": "\u29B4",
      "\\circledparallel": "\u29B7",
      "\\circledbslash": "\u29B8",
      "\\operp": "\u29B9",
      "\\obot": "\u29BA",
      "\\olcross": "\u29BB",
      "\\odotslashdot": "\u29BC",
      "\\uparrowoncircle": "\u29BD",
      "\\circledwhitebullet": "\u29BE",
      "\\circledbullet": "\u29BF",
      "\\circledless": "\u29C0",
      "\\circledgtr": "\u29C1",
      "\\cirscir": "\u29C2",
      "\\cirE": "\u29C3",
      "\\boxslash": "\u29C4",
      "\\boxbslash": "\u29C5",
      "\\boxast": "\u29C6",
      "\\boxcircle": "\u29C7",
      "\\boxbox": "\u29C8",
      "\\boxonbox": "\u29C9",
      "\\ElzLap": "\u29CA",
      "\\Elzdefas": "\u29CB",
      "\\triangles": "\u29CC",
      "\\triangleserifs": "\u29CD",
      "\\rtriltri": "\u29CE",
      "\\LeftTriangleBar": "\u29CF",
      "\\NotLeftTriangleBar": "\u29CF\u0338",
      "\\RightTriangleBar": "\u29D0",
      "\\NotRightTriangleBar": "\u29D0\u0338",
      "\\lfbowtie": "\u29D1",
      "\\rfbowtie": "\u29D2",
      "\\fbowtie": "\u29D3",
      "\\lftimes": "\u29D4",
      "\\rftimes": "\u29D5",
      "\\hourglass": "\u29D6",
      "\\blackhourglass": "\u29D7",
      "\\lvzigzag": "\u29D8",
      "\\rvzigzag": "\u29D9",
      "\\Lvzigzag": "\u29DA",
      "\\Rvzigzag": "\u29DB",
      "\\tieinfty": "\u29DD",
      "\\nvinfty": "\u29DE",
      "\\multimapboth": "\u29DF",
      "\\laplac": "\u29E0",
      "\\lrtriangleeq": "\u29E1",
      "\\shuffle": "\u29E2",
      "\\eparsl": "\u29E3",
      "\\smeparsl": "\u29E4",
      "\\eqvparsl": "\u29E5",
      "\\gleichstark": "\u29E6",
      "\\thermod": "\u29E7",
      "\\downtriangleleftblack": "\u29E8",
      "\\downtrianglerightblack": "\u29E9",
      "\\blackdiamonddownarrow": "\u29EA",
      "\\blacklozenge": "\u29EB",
      "\\circledownarrow": "\u29EC",
      "\\blackcircledownarrow": "\u29ED",
      "\\errbarsquare": "\u29EE",
      "\\errbarblacksquare": "\u29EF",
      "\\errbardiamond": "\u29F0",
      "\\errbarblackdiamond": "\u29F1",
      "\\errbarcircle": "\u29F2",
      "\\errbarblackcircle": "\u29F3",
      "\\RuleDelayed": "\u29F4",
      "\\dsol": "\u29F6",
      "\\rsolbar": "\u29F7",
      "\\xsol": "\u29F8",
      "\\zhide": "\u29F9",
      "\\doubleplus": "\u29FA",
      "\\tripleplus": "\u29FB",
      "\\lcurvyangle": "\u29FC",
      "\\rcurvyangle": "\u29FD",
      "\\tplus": "\u29FE",
      "\\tminus": "\u29FF",
      "\\bigodot": "\u2A00",
      "\\bigoplus": "\u2A01",
      "\\bigotimes": "\u2A02",
      "\\bigcupdot": "\u2A03",
      "\\Elxuplus": "\u2A04",
      "\\ElzThr": "\u2A05",
      "\\Elxsqcup": "\u2A06",
      "\\ElzInf": "\u2A07",
      "\\ElzSup": "\u2A08",
      "\\varprod": "\u2A09",
      "\\modtwosum": "\u2A0A",
      "\\sumint": "\u2A0B",
      "\\iiiint": "\u2A0C",
      "\\ElzCint": "\u2A0D",
      "\\intBar": "\u2A0E",
      "\\clockoint": "\u2A0F",
      "\\awint": "\u2A11",
      "\\rppolint": "\u2A12",
      "\\scpolint": "\u2A13",
      "\\npolint": "\u2A14",
      "\\pointint": "\u2A15",
      "\\sqrint": "\u2A16",
      "\\intlarhk": "\u2A17",
      "\\intx": "\u2A18",
      "\\intcap": "\u2A19",
      "\\intcup": "\u2A1A",
      "\\upint": "\u2A1B",
      "\\lowint": "\u2A1C",
      "\\Join": "\u2A1D",
      "\\bigtriangleleft": "\u2A1E",
      "\\zcmp": "\u2A1F",
      "\\zpipe": "\u2A20",
      "\\zproject": "\u2A21",
      "\\ringplus": "\u2A22",
      "\\plushat": "\u2A23",
      "\\simplus": "\u2A24",
      "\\plussim": "\u2A26",
      "\\plussubtwo": "\u2A27",
      "\\plustrif": "\u2A28",
      "\\commaminus": "\u2A29",
      "\\minusfdots": "\u2A2B",
      "\\minusrdots": "\u2A2C",
      "\\ElzTimes": "\u2A2F",
      "\\dottimes": "\u2A30",
      "\\timesbar": "\u2A31",
      "\\btimes": "\u2A32",
      "\\smashtimes": "\u2A33",
      "\\otimeshat": "\u2A36",
      "\\Otimes": "\u2A37",
      "\\odiv": "\u2A38",
      "\\triangleplus": "\u2A39",
      "\\triangleminus": "\u2A3A",
      "\\triangletimes": "\u2A3B",
      "\\intprodr": "\u2A3D",
      "\\fcmp": "\u2A3E",
      "\\amalg": "\u2A3F",
      "\\capdot": "\u2A40",
      "\\uminus": "\u2A41",
      "\\barcup": "\u2A42",
      "\\barcap": "\u2A43",
      "\\capwedge": "\u2A44",
      "\\cupvee": "\u2A45",
      "\\cupovercap": "\u2A46",
      "\\capovercup": "\u2A47",
      "\\cupbarcap": "\u2A48",
      "\\capbarcup": "\u2A49",
      "\\twocups": "\u2A4A",
      "\\twocaps": "\u2A4B",
      "\\closedvarcup": "\u2A4C",
      "\\closedvarcap": "\u2A4D",
      "\\Sqcap": "\u2A4E",
      "\\Sqcup": "\u2A4F",
      "\\closedvarcupsmashprod": "\u2A50",
      "\\wedgeodot": "\u2A51",
      "\\veeodot": "\u2A52",
      "\\ElzAnd": "\u2A53",
      "\\ElzOr": "\u2A54",
      "\\ElOr": "\u2A56",
      "\\bigslopedvee": "\u2A57",
      "\\bigslopedwedge": "\u2A58",
      "\\veeonwedge": "\u2A59",
      "\\wedgemidvert": "\u2A5A",
      "\\veemidvert": "\u2A5B",
      "\\midbarwedge": "\u2A5C",
      "\\midbarvee": "\u2A5D",
      "\\Elzminhat": "\u2A5F",
      "\\wedgedoublebar": "\u2A60",
      "\\varveebar": "\u2A61",
      "\\doublebarvee": "\u2A62",
      "\\dsub": "\u2A64",
      "\\rsub": "\u2A65",
      "\\eqdot": "\u2A66",
      "\\dotequiv": "\u2A67",
      "\\equivVert": "\u2A68",
      "\\equivVvert": "\u2A69",
      "\\dotsim": "\u2A6A",
      "\\simrdots": "\u2A6B",
      "\\simminussim": "\u2A6C",
      "\\congdot": "\u2A6D",
      "\\stackrel{*}{=}": "\u2A6E",
      "\\hatapprox": "\u2A6F",
      "\\approxeqq": "\u2A70",
      "\\eqqplus": "\u2A71",
      "\\pluseqq": "\u2A72",
      "\\eqqsim": "\u2A73",
      "\\Coloneqq": "\u2A74",
      "\\Equal": "\u2A75",
      "\\Same": "\u2A76",
      "\\ddotseq": "\u2A77",
      "\\equivDD": "\u2A78",
      "\\ltcir": "\u2A79",
      "\\gtcir": "\u2A7A",
      "\\ltquest": "\u2A7B",
      "\\gtquest": "\u2A7C",
      "\\leqslant": "\u2A7D",
      "\\nleqslant": "\u2A7D\u0338",
      "\\geqslant": "\u2A7E",
      "\\ngeqslant": "\u2A7E\u0338",
      "\\lesdot": "\u2A7F",
      "\\gesdot": "\u2A80",
      "\\lesdoto": "\u2A81",
      "\\gesdoto": "\u2A82",
      "\\lesdotor": "\u2A83",
      "\\gesdotol": "\u2A84",
      "\\lessapprox": "\u2A85",
      "\\gtrapprox": "\u2A86",
      "\\lneq": "\u2A87",
      "\\gneq": "\u2A88",
      "\\lnapprox": "\u2A89",
      "\\gnapprox": "\u2A8A",
      "\\lesseqqgtr": "\u2A8B",
      "\\gtreqqless": "\u2A8C",
      "\\lsime": "\u2A8D",
      "\\gsime": "\u2A8E",
      "\\lsimg": "\u2A8F",
      "\\gsiml": "\u2A90",
      "\\lgE": "\u2A91",
      "\\glE": "\u2A92",
      "\\lesges": "\u2A93",
      "\\gesles": "\u2A94",
      "\\eqslantless": "\u2A95",
      "\\eqslantgtr": "\u2A96",
      "\\elsdot": "\u2A97",
      "\\egsdot": "\u2A98",
      "\\eqqless": "\u2A99",
      "\\eqqgtr": "\u2A9A",
      "\\eqqslantless": "\u2A9B",
      "\\eqqslantgtr": "\u2A9C",
      "\\Pisymbol{ppi020}{117}": "\u2A9D",
      "\\Pisymbol{ppi020}{105}": "\u2A9E",
      "\\simlE": "\u2A9F",
      "\\simgE": "\u2AA0",
      "\\NestedLessLess": "\u2AA1",
      "\\NotNestedLessLess": "\u2AA1\u0338",
      "\\NestedGreaterGreater": "\u2AA2",
      "\\NotNestedGreaterGreater": "\u2AA2\u0338",
      "\\partialmeetcontraction": "\u2AA3",
      "\\glj": "\u2AA4",
      "\\gla": "\u2AA5",
      "\\leftslice": "\u2AA6",
      "\\rightslice": "\u2AA7",
      "\\lescc": "\u2AA8",
      "\\gescc": "\u2AA9",
      "\\smt": "\u2AAA",
      "\\lat": "\u2AAB",
      "\\smte": "\u2AAC",
      "\\late": "\u2AAD",
      "\\bumpeqq": "\u2AAE",
      "\\preceq": "\u2AAF",
      "\\not\\preceq": "\u2AAF\u0338",
      "\\succeq": "\u2AB0",
      "\\not\\succeq": "\u2AB0\u0338",
      "\\precneq": "\u2AB1",
      "\\succneq": "\u2AB2",
      "\\preceqq": "\u2AB3",
      "\\succeqq": "\u2AB4",
      "\\precneqq": "\u2AB5",
      "\\succneqq": "\u2AB6",
      "\\precapprox": "\u2AB7",
      "\\succapprox": "\u2AB8",
      "\\precnapprox": "\u2AB9",
      "\\succnapprox": "\u2ABA",
      "\\llcurly": "\u2ABB",
      "\\ggcurly": "\u2ABC",
      "\\subsetdot": "\u2ABD",
      "\\supsetdot": "\u2ABE",
      "\\subsetplus": "\u2ABF",
      "\\supsetplus": "\u2AC0",
      "\\submult": "\u2AC1",
      "\\supmult": "\u2AC2",
      "\\subedot": "\u2AC3",
      "\\supedot": "\u2AC4",
      "\\subseteqq": "\u2AC5",
      "\\nsubseteqq": "\u2AC5\u0338",
      "\\supseteqq": "\u2AC6",
      "\\nsupseteqq": "\u2AC6\u0338",
      "\\subsim": "\u2AC7",
      "\\supsim": "\u2AC8",
      "\\subsetapprox": "\u2AC9",
      "\\supsetapprox": "\u2ACA",
      "\\subsetneqq": "\u2ACB",
      "\\supsetneqq": "\u2ACC",
      "\\lsqhook": "\u2ACD",
      "\\rsqhook": "\u2ACE",
      "\\csub": "\u2ACF",
      "\\csup": "\u2AD0",
      "\\csube": "\u2AD1",
      "\\csupe": "\u2AD2",
      "\\subsup": "\u2AD3",
      "\\supsub": "\u2AD4",
      "\\subsub": "\u2AD5",
      "\\supsup": "\u2AD6",
      "\\suphsub": "\u2AD7",
      "\\supdsub": "\u2AD8",
      "\\forkv": "\u2AD9",
      "\\topfork": "\u2ADA",
      "\\mlcp": "\u2ADB",
      "\\forks": "\u2ADC",
      "\\forksnot": "\u2ADD",
      "\\shortlefttack": "\u2ADE",
      "\\shortdowntack": "\u2ADF",
      "\\shortuptack": "\u2AE0",
      "\\perps": "\u2AE1",
      "\\vDdash": "\u2AE2",
      "\\dashV": "\u2AE3",
      "\\Dashv": "\u2AE4",
      "\\DashV": "\u2AE5",
      "\\varVdash": "\u2AE6",
      "\\Barv": "\u2AE7",
      "\\vBar": "\u2AE8",
      "\\vBarv": "\u2AE9",
      "\\Top": "\u2AEA",
      "\\Not": "\u2AEC",
      "\\bNot": "\u2AED",
      "\\revnmid": "\u2AEE",
      "\\cirmid": "\u2AEF",
      "\\midcir": "\u2AF0",
      "\\topcir": "\u2AF1",
      "\\nhpar": "\u2AF2",
      "\\parsim": "\u2AF3",
      "\\interleave": "\u2AF4",
      "\\nhVvert": "\u2AF5",
      "\\Elztdcol": "\u2AF6",
      "\\lllnest": "\u2AF7",
      "\\gggnest": "\u2AF8",
      "\\leqqslant": "\u2AF9",
      "\\geqqslant": "\u2AFA",
      "\\trslash": "\u2AFB",
      "\\biginterleave": "\u2AFC",
      "{{/}\\!\\!{/}}": "\u2AFD",
      "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}": "\u2AFD\u20E5",
      "\\talloblong": "\u2AFE",
      "\\bigtalloblong": "\u2AFF",
      "\\squaretopblack": "\u2B12",
      "\\squarebotblack": "\u2B13",
      "\\squareurblack": "\u2B14",
      "\\squarellblack": "\u2B15",
      "\\diamondleftblack": "\u2B16",
      "\\diamondrightblack": "\u2B17",
      "\\diamondtopblack": "\u2B18",
      "\\diamondbotblack": "\u2B19",
      "\\dottedsquare": "\u2B1A",
      "\\blacksquare": "\u2B1B",
      "\\vysmblksquare": "\u2B1D",
      "\\vysmwhtsquare": "\u2B1E",
      "\\pentagonblack": "\u2B1F",
      "\\pentagon": "\u2B20",
      "\\varhexagon": "\u2B21",
      "\\varhexagonblack": "\u2B22",
      "\\hexagonblack": "\u2B23",
      "\\lgblkcircle": "\u2B24",
      "\\mdblkdiamond": "\u2B25",
      "\\mdwhtdiamond": "\u2B26",
      "\\mdblklozenge": "\u2B27",
      "\\mdwhtlozenge": "\u2B28",
      "\\smblkdiamond": "\u2B29",
      "\\smblklozenge": "\u2B2A",
      "\\smwhtlozenge": "\u2B2B",
      "\\blkhorzoval": "\u2B2C",
      "\\whthorzoval": "\u2B2D",
      "\\blkvertoval": "\u2B2E",
      "\\whtvertoval": "\u2B2F",
      "\\circleonleftarrow": "\u2B30",
      "\\leftthreearrows": "\u2B31",
      "\\leftarrowonoplus": "\u2B32",
      "\\longleftsquigarrow": "\u2B33",
      "\\nvtwoheadleftarrow": "\u2B34",
      "\\nVtwoheadleftarrow": "\u2B35",
      "\\twoheadmapsfrom": "\u2B36",
      "\\twoheadleftdbkarrow": "\u2B37",
      "\\leftdotarrow": "\u2B38",
      "\\nvleftarrowtail": "\u2B39",
      "\\nVleftarrowtail": "\u2B3A",
      "\\twoheadleftarrowtail": "\u2B3B",
      "\\nvtwoheadleftarrowtail": "\u2B3C",
      "\\nVtwoheadleftarrowtail": "\u2B3D",
      "\\leftarrowx": "\u2B3E",
      "\\leftcurvedarrow": "\u2B3F",
      "\\equalleftarrow": "\u2B40",
      "\\bsimilarleftarrow": "\u2B41",
      "\\leftarrowbackapprox": "\u2B42",
      "\\rightarrowgtr": "\u2B43",
      "\\rightarrowsupset": "\u2B44",
      "\\LLeftarrow": "\u2B45",
      "\\RRightarrow": "\u2B46",
      "\\bsimilarrightarrow": "\u2B47",
      "\\rightarrowbackapprox": "\u2B48",
      "\\similarleftarrow": "\u2B49",
      "\\leftarrowapprox": "\u2B4A",
      "\\leftarrowbsimilar": "\u2B4B",
      "\\rightarrowbsimilar": "\u2B4C",
      "\\medwhitestar": "\u2B50",
      "\\medblackstar": "\u2B51",
      "\\smwhitestar": "\u2B52",
      "\\rightpentagonblack": "\u2B53",
      "\\rightpentagon": "\u2B54",
      "\\postalmark": "\u3012",
      "\\lbrbrak": "\u3014",
      "\\rbrbrak": "\u3015",
      "\\openbracketleft": "\u301A",
      "\\openbracketright": "\u301B",
      "\\hzigzag": "\u3030",
      "\\dbend": "\uFFFD",
      "\\mathbf{A}": "\u{1D400}",
      "\\mathbf{B}": "\u{1D401}",
      "\\mathbf{C}": "\u{1D402}",
      "\\mathbf{D}": "\u{1D403}",
      "\\mathbf{E}": "\u{1D404}",
      "\\mathbf{F}": "\u{1D405}",
      "\\mathbf{G}": "\u{1D406}",
      "\\mathbf{H}": "\u{1D407}",
      "\\mathbf{I}": "\u{1D408}",
      "\\mathbf{J}": "\u{1D409}",
      "\\mathbf{K}": "\u{1D40A}",
      "\\mathbf{L}": "\u{1D40B}",
      "\\mathbf{M}": "\u{1D40C}",
      "\\mathbf{N}": "\u{1D40D}",
      "\\mathbf{O}": "\u{1D40E}",
      "\\mathbf{P}": "\u{1D40F}",
      "\\mathbf{Q}": "\u{1D410}",
      "\\mathbf{R}": "\u{1D411}",
      "\\mathbf{S}": "\u{1D412}",
      "\\mathbf{T}": "\u{1D413}",
      "\\mathbf{U}": "\u{1D414}",
      "\\mathbf{V}": "\u{1D415}",
      "\\mathbf{W}": "\u{1D416}",
      "\\mathbf{X}": "\u{1D417}",
      "\\mathbf{Y}": "\u{1D418}",
      "\\mathbf{Z}": "\u{1D419}",
      "\\mathbf{a}": "\u{1D41A}",
      "\\mathbf{b}": "\u{1D41B}",
      "\\mathbf{c}": "\u{1D41C}",
      "\\mathbf{d}": "\u{1D41D}",
      "\\mathbf{e}": "\u{1D41E}",
      "\\mathbf{f}": "\u{1D41F}",
      "\\mathbf{g}": "\u{1D420}",
      "\\mathbf{h}": "\u{1D421}",
      "\\mathbf{i}": "\u{1D422}",
      "\\mathbf{j}": "\u{1D423}",
      "\\mathbf{k}": "\u{1D424}",
      "\\mathbf{l}": "\u{1D425}",
      "\\mathbf{m}": "\u{1D426}",
      "\\mathbf{n}": "\u{1D427}",
      "\\mathbf{o}": "\u{1D428}",
      "\\mathbf{p}": "\u{1D429}",
      "\\mathbf{q}": "\u{1D42A}",
      "\\mathbf{r}": "\u{1D42B}",
      "\\mathbf{s}": "\u{1D42C}",
      "\\mathbf{t}": "\u{1D42D}",
      "\\mathbf{u}": "\u{1D42E}",
      "\\mathbf{v}": "\u{1D42F}",
      "\\mathbf{w}": "\u{1D430}",
      "\\mathbf{x}": "\u{1D431}",
      "\\mathbf{y}": "\u{1D432}",
      "\\mathbf{z}": "\u{1D433}",
      "\\mathsl{A}": "\u{1D434}",
      "\\mathsl{B}": "\u{1D435}",
      "\\mathsl{C}": "\u{1D436}",
      "\\mathsl{D}": "\u{1D437}",
      "\\mathsl{E}": "\u{1D438}",
      "\\mathsl{F}": "\u{1D439}",
      "\\mathsl{G}": "\u{1D43A}",
      "\\mathsl{H}": "\u{1D43B}",
      "\\mathsl{I}": "\u{1D43C}",
      "\\mathsl{J}": "\u{1D43D}",
      "\\mathsl{K}": "\u{1D43E}",
      "\\mathsl{L}": "\u{1D43F}",
      "\\mathsl{M}": "\u{1D440}",
      "\\mathsl{N}": "\u{1D441}",
      "\\mathsl{O}": "\u{1D442}",
      "\\mathsl{P}": "\u{1D443}",
      "\\mathsl{Q}": "\u{1D444}",
      "\\mathsl{R}": "\u{1D445}",
      "\\mathsl{S}": "\u{1D446}",
      "\\mathsl{T}": "\u{1D447}",
      "\\mathsl{U}": "\u{1D448}",
      "\\mathsl{V}": "\u{1D449}",
      "\\mathsl{W}": "\u{1D44A}",
      "\\mathsl{X}": "\u{1D44B}",
      "\\mathsl{Y}": "\u{1D44C}",
      "\\mathsl{Z}": "\u{1D44D}",
      "\\mathsl{a}": "\u{1D44E}",
      "\\mathsl{b}": "\u{1D44F}",
      "\\mathsl{c}": "\u{1D450}",
      "\\mathsl{d}": "\u{1D451}",
      "\\mathsl{e}": "\u{1D452}",
      "\\mathsl{f}": "\u{1D453}",
      "\\mathsl{g}": "\u{1D454}",
      "\\mathsl{i}": "\u{1D456}",
      "\\mathsl{j}": "\u{1D457}",
      "\\mathsl{k}": "\u{1D458}",
      "\\mathsl{l}": "\u{1D459}",
      "\\mathsl{m}": "\u{1D45A}",
      "\\mathsl{n}": "\u{1D45B}",
      "\\mathsl{o}": "\u{1D45C}",
      "\\mathsl{p}": "\u{1D45D}",
      "\\mathsl{q}": "\u{1D45E}",
      "\\mathsl{r}": "\u{1D45F}",
      "\\mathsl{s}": "\u{1D460}",
      "\\mathsl{t}": "\u{1D461}",
      "\\mathsl{u}": "\u{1D462}",
      "\\mathsl{v}": "\u{1D463}",
      "\\mathsl{w}": "\u{1D464}",
      "\\mathsl{x}": "\u{1D465}",
      "\\mathsl{y}": "\u{1D466}",
      "\\mathsl{z}": "\u{1D467}",
      "\\mathbit{A}": "\u{1D468}",
      "\\mathbit{B}": "\u{1D469}",
      "\\mathbit{C}": "\u{1D46A}",
      "\\mathbit{D}": "\u{1D46B}",
      "\\mathbit{E}": "\u{1D46C}",
      "\\mathbit{F}": "\u{1D46D}",
      "\\mathbit{G}": "\u{1D46E}",
      "\\mathbit{H}": "\u{1D46F}",
      "\\mathbit{I}": "\u{1D470}",
      "\\mathbit{J}": "\u{1D471}",
      "\\mathbit{K}": "\u{1D472}",
      "\\mathbit{L}": "\u{1D473}",
      "\\mathbit{M}": "\u{1D474}",
      "\\mathbit{N}": "\u{1D475}",
      "\\mathbit{O}": "\u{1D476}",
      "\\mathbit{P}": "\u{1D477}",
      "\\mathbit{Q}": "\u{1D478}",
      "\\mathbit{R}": "\u{1D479}",
      "\\mathbit{S}": "\u{1D47A}",
      "\\mathbit{T}": "\u{1D47B}",
      "\\mathbit{U}": "\u{1D47C}",
      "\\mathbit{V}": "\u{1D47D}",
      "\\mathbit{W}": "\u{1D47E}",
      "\\mathbit{X}": "\u{1D47F}",
      "\\mathbit{Y}": "\u{1D480}",
      "\\mathbit{Z}": "\u{1D481}",
      "\\mathbit{a}": "\u{1D482}",
      "\\mathbit{b}": "\u{1D483}",
      "\\mathbit{c}": "\u{1D484}",
      "\\mathbit{d}": "\u{1D485}",
      "\\mathbit{e}": "\u{1D486}",
      "\\mathbit{f}": "\u{1D487}",
      "\\mathbit{g}": "\u{1D488}",
      "\\mathbit{h}": "\u{1D489}",
      "\\mathbit{i}": "\u{1D48A}",
      "\\mathbit{j}": "\u{1D48B}",
      "\\mathbit{k}": "\u{1D48C}",
      "\\mathbit{l}": "\u{1D48D}",
      "\\mathbit{m}": "\u{1D48E}",
      "\\mathbit{n}": "\u{1D48F}",
      "\\mathbit{o}": "\u{1D490}",
      "\\mathbit{p}": "\u{1D491}",
      "\\mathbit{q}": "\u{1D492}",
      "\\mathbit{r}": "\u{1D493}",
      "\\mathbit{s}": "\u{1D494}",
      "\\mathbit{t}": "\u{1D495}",
      "\\mathbit{u}": "\u{1D496}",
      "\\mathbit{v}": "\u{1D497}",
      "\\mathbit{w}": "\u{1D498}",
      "\\mathbit{x}": "\u{1D499}",
      "\\mathbit{y}": "\u{1D49A}",
      "\\mathbit{z}": "\u{1D49B}",
      "\\mathscr{A}": "\u{1D49C}",
      "\\mathscr{C}": "\u{1D49E}",
      "\\mathscr{D}": "\u{1D49F}",
      "\\mathscr{G}": "\u{1D4A2}",
      "\\mathscr{J}": "\u{1D4A5}",
      "\\mathscr{K}": "\u{1D4A6}",
      "\\mathscr{N}": "\u{1D4A9}",
      "\\mathscr{O}": "\u{1D4AA}",
      "\\mathscr{P}": "\u{1D4AB}",
      "\\mathscr{Q}": "\u{1D4AC}",
      "\\mathscr{S}": "\u{1D4AE}",
      "\\mathscr{T}": "\u{1D4AF}",
      "\\mathscr{U}": "\u{1D4B0}",
      "\\mathscr{V}": "\u{1D4B1}",
      "\\mathscr{W}": "\u{1D4B2}",
      "\\mathscr{X}": "\u{1D4B3}",
      "\\mathscr{Y}": "\u{1D4B4}",
      "\\mathscr{Z}": "\u{1D4B5}",
      "\\mathscr{a}": "\u{1D4B6}",
      "\\mathscr{b}": "\u{1D4B7}",
      "\\mathscr{c}": "\u{1D4B8}",
      "\\mathscr{d}": "\u{1D4B9}",
      "\\mathscr{f}": "\u{1D4BB}",
      "\\mathscr{h}": "\u{1D4BD}",
      "\\mathscr{i}": "\u{1D4BE}",
      "\\mathscr{j}": "\u{1D4BF}",
      "\\mathscr{k}": "\u{1D4C0}",
      "\\mathscr{m}": "\u{1D4C2}",
      "\\mathscr{n}": "\u{1D4C3}",
      "\\mathscr{p}": "\u{1D4C5}",
      "\\mathscr{q}": "\u{1D4C6}",
      "\\mathscr{r}": "\u{1D4C7}",
      "\\mathscr{s}": "\u{1D4C8}",
      "\\mathscr{t}": "\u{1D4C9}",
      "\\mathscr{u}": "\u{1D4CA}",
      "\\mathscr{v}": "\u{1D4CB}",
      "\\mathscr{w}": "\u{1D4CC}",
      "\\mathscr{x}": "\u{1D4CD}",
      "\\mathscr{y}": "\u{1D4CE}",
      "\\mathscr{z}": "\u{1D4CF}",
      "\\mathmit{A}": "\u{1D4D0}",
      "\\mathmit{B}": "\u{1D4D1}",
      "\\mathmit{C}": "\u{1D4D2}",
      "\\mathmit{D}": "\u{1D4D3}",
      "\\mathmit{E}": "\u{1D4D4}",
      "\\mathmit{F}": "\u{1D4D5}",
      "\\mathmit{G}": "\u{1D4D6}",
      "\\mathmit{H}": "\u{1D4D7}",
      "\\mathmit{I}": "\u{1D4D8}",
      "\\mathmit{J}": "\u{1D4D9}",
      "\\mathmit{K}": "\u{1D4DA}",
      "\\mathmit{L}": "\u{1D4DB}",
      "\\mathmit{M}": "\u{1D4DC}",
      "\\mathmit{N}": "\u{1D4DD}",
      "\\mathmit{O}": "\u{1D4DE}",
      "\\mathmit{P}": "\u{1D4DF}",
      "\\mathmit{Q}": "\u{1D4E0}",
      "\\mathmit{R}": "\u{1D4E1}",
      "\\mathmit{S}": "\u{1D4E2}",
      "\\mathmit{T}": "\u{1D4E3}",
      "\\mathmit{U}": "\u{1D4E4}",
      "\\mathmit{V}": "\u{1D4E5}",
      "\\mathmit{W}": "\u{1D4E6}",
      "\\mathmit{X}": "\u{1D4E7}",
      "\\mathmit{Y}": "\u{1D4E8}",
      "\\mathmit{Z}": "\u{1D4E9}",
      "\\mathmit{a}": "\u{1D4EA}",
      "\\mathmit{b}": "\u{1D4EB}",
      "\\mathmit{c}": "\u{1D4EC}",
      "\\mathmit{d}": "\u{1D4ED}",
      "\\mathmit{e}": "\u{1D4EE}",
      "\\mathmit{f}": "\u{1D4EF}",
      "\\mathmit{g}": "\u{1D4F0}",
      "\\mathmit{h}": "\u{1D4F1}",
      "\\mathmit{i}": "\u{1D4F2}",
      "\\mathmit{j}": "\u{1D4F3}",
      "\\mathmit{k}": "\u{1D4F4}",
      "\\mathmit{l}": "\u{1D4F5}",
      "\\mathmit{m}": "\u{1D4F6}",
      "\\mathmit{n}": "\u{1D4F7}",
      "\\mathmit{o}": "\u{1D4F8}",
      "\\mathmit{p}": "\u{1D4F9}",
      "\\mathmit{q}": "\u{1D4FA}",
      "\\mathmit{r}": "\u{1D4FB}",
      "\\mathmit{s}": "\u{1D4FC}",
      "\\mathmit{t}": "\u{1D4FD}",
      "\\mathmit{u}": "\u{1D4FE}",
      "\\mathmit{v}": "\u{1D4FF}",
      "\\mathmit{w}": "\u{1D500}",
      "\\mathmit{x}": "\u{1D501}",
      "\\mathmit{y}": "\u{1D502}",
      "\\mathmit{z}": "\u{1D503}",
      "\\mathfrak{A}": "\u{1D504}",
      "\\mathfrak{B}": "\u{1D505}",
      "\\mathfrak{D}": "\u{1D507}",
      "\\mathfrak{E}": "\u{1D508}",
      "\\mathfrak{F}": "\u{1D509}",
      "\\mathfrak{G}": "\u{1D50A}",
      "\\mathfrak{J}": "\u{1D50D}",
      "\\mathfrak{K}": "\u{1D50E}",
      "\\mathfrak{L}": "\u{1D50F}",
      "\\mathfrak{M}": "\u{1D510}",
      "\\mathfrak{N}": "\u{1D511}",
      "\\mathfrak{O}": "\u{1D512}",
      "\\mathfrak{P}": "\u{1D513}",
      "\\mathfrak{Q}": "\u{1D514}",
      "\\mathfrak{S}": "\u{1D516}",
      "\\mathfrak{T}": "\u{1D517}",
      "\\mathfrak{U}": "\u{1D518}",
      "\\mathfrak{V}": "\u{1D519}",
      "\\mathfrak{W}": "\u{1D51A}",
      "\\mathfrak{X}": "\u{1D51B}",
      "\\mathfrak{Y}": "\u{1D51C}",
      "\\mathfrak{a}": "\u{1D51E}",
      "\\mathfrak{b}": "\u{1D51F}",
      "\\mathfrak{c}": "\u{1D520}",
      "\\mathfrak{d}": "\u{1D521}",
      "\\mathfrak{e}": "\u{1D522}",
      "\\mathfrak{f}": "\u{1D523}",
      "\\mathfrak{g}": "\u{1D524}",
      "\\mathfrak{h}": "\u{1D525}",
      "\\mathfrak{i}": "\u{1D526}",
      "\\mathfrak{j}": "\u{1D527}",
      "\\mathfrak{k}": "\u{1D528}",
      "\\mathfrak{l}": "\u{1D529}",
      "\\mathfrak{m}": "\u{1D52A}",
      "\\mathfrak{n}": "\u{1D52B}",
      "\\mathfrak{o}": "\u{1D52C}",
      "\\mathfrak{p}": "\u{1D52D}",
      "\\mathfrak{q}": "\u{1D52E}",
      "\\mathfrak{r}": "\u{1D52F}",
      "\\mathfrak{s}": "\u{1D530}",
      "\\mathfrak{t}": "\u{1D531}",
      "\\mathfrak{u}": "\u{1D532}",
      "\\mathfrak{v}": "\u{1D533}",
      "\\mathfrak{w}": "\u{1D534}",
      "\\mathfrak{x}": "\u{1D535}",
      "\\mathfrak{y}": "\u{1D536}",
      "\\mathfrak{z}": "\u{1D537}",
      "\\mathbb{A}": "\u{1D538}",
      "\\mathbb{B}": "\u{1D539}",
      "\\mathbb{D}": "\u{1D53B}",
      "\\mathbb{E}": "\u{1D53C}",
      "\\mathbb{F}": "\u{1D53D}",
      "\\mathbb{G}": "\u{1D53E}",
      "\\mathbb{I}": "\u{1D540}",
      "\\mathbb{J}": "\u{1D541}",
      "\\mathbb{K}": "\u{1D542}",
      "\\mathbb{L}": "\u{1D543}",
      "\\mathbb{M}": "\u{1D544}",
      "\\mathbb{O}": "\u{1D546}",
      "\\mathbb{S}": "\u{1D54A}",
      "\\mathbb{T}": "\u{1D54B}",
      "\\mathbb{U}": "\u{1D54C}",
      "\\mathbb{V}": "\u{1D54D}",
      "\\mathbb{W}": "\u{1D54E}",
      "\\mathbb{X}": "\u{1D54F}",
      "\\mathbb{Y}": "\u{1D550}",
      "\\mathbb{a}": "\u{1D552}",
      "\\mathbb{b}": "\u{1D553}",
      "\\mathbb{c}": "\u{1D554}",
      "\\mathbb{d}": "\u{1D555}",
      "\\mathbb{e}": "\u{1D556}",
      "\\mathbb{f}": "\u{1D557}",
      "\\mathbb{g}": "\u{1D558}",
      "\\mathbb{h}": "\u{1D559}",
      "\\mathbb{i}": "\u{1D55A}",
      "\\mathbb{j}": "\u{1D55B}",
      "\\mathbb{k}": "\u{1D55C}",
      "\\mathbb{l}": "\u{1D55D}",
      "\\mathbb{m}": "\u{1D55E}",
      "\\mathbb{n}": "\u{1D55F}",
      "\\mathbb{o}": "\u{1D560}",
      "\\mathbb{p}": "\u{1D561}",
      "\\mathbb{q}": "\u{1D562}",
      "\\mathbb{r}": "\u{1D563}",
      "\\mathbb{s}": "\u{1D564}",
      "\\mathbb{t}": "\u{1D565}",
      "\\mathbb{u}": "\u{1D566}",
      "\\mathbb{v}": "\u{1D567}",
      "\\mathbb{w}": "\u{1D568}",
      "\\mathbb{x}": "\u{1D569}",
      "\\mathbb{y}": "\u{1D56A}",
      "\\mathbb{z}": "\u{1D56B}",
      "\\mathslbb{A}": "\u{1D56C}",
      "\\mathslbb{B}": "\u{1D56D}",
      "\\mathslbb{C}": "\u{1D56E}",
      "\\mathslbb{D}": "\u{1D56F}",
      "\\mathslbb{E}": "\u{1D570}",
      "\\mathslbb{F}": "\u{1D571}",
      "\\mathslbb{G}": "\u{1D572}",
      "\\mathslbb{H}": "\u{1D573}",
      "\\mathslbb{I}": "\u{1D574}",
      "\\mathslbb{J}": "\u{1D575}",
      "\\mathslbb{K}": "\u{1D576}",
      "\\mathslbb{L}": "\u{1D577}",
      "\\mathslbb{M}": "\u{1D578}",
      "\\mathslbb{N}": "\u{1D579}",
      "\\mathslbb{O}": "\u{1D57A}",
      "\\mathslbb{P}": "\u{1D57B}",
      "\\mathslbb{Q}": "\u{1D57C}",
      "\\mathslbb{R}": "\u{1D57D}",
      "\\mathslbb{S}": "\u{1D57E}",
      "\\mathslbb{T}": "\u{1D57F}",
      "\\mathslbb{U}": "\u{1D580}",
      "\\mathslbb{V}": "\u{1D581}",
      "\\mathslbb{W}": "\u{1D582}",
      "\\mathslbb{X}": "\u{1D583}",
      "\\mathslbb{Y}": "\u{1D584}",
      "\\mathslbb{Z}": "\u{1D585}",
      "\\mathslbb{a}": "\u{1D586}",
      "\\mathslbb{b}": "\u{1D587}",
      "\\mathslbb{c}": "\u{1D588}",
      "\\mathslbb{d}": "\u{1D589}",
      "\\mathslbb{e}": "\u{1D58A}",
      "\\mathslbb{f}": "\u{1D58B}",
      "\\mathslbb{g}": "\u{1D58C}",
      "\\mathslbb{h}": "\u{1D58D}",
      "\\mathslbb{i}": "\u{1D58E}",
      "\\mathslbb{j}": "\u{1D58F}",
      "\\mathslbb{k}": "\u{1D590}",
      "\\mathslbb{l}": "\u{1D591}",
      "\\mathslbb{m}": "\u{1D592}",
      "\\mathslbb{n}": "\u{1D593}",
      "\\mathslbb{o}": "\u{1D594}",
      "\\mathslbb{p}": "\u{1D595}",
      "\\mathslbb{q}": "\u{1D596}",
      "\\mathslbb{r}": "\u{1D597}",
      "\\mathslbb{s}": "\u{1D598}",
      "\\mathslbb{t}": "\u{1D599}",
      "\\mathslbb{u}": "\u{1D59A}",
      "\\mathslbb{v}": "\u{1D59B}",
      "\\mathslbb{w}": "\u{1D59C}",
      "\\mathslbb{x}": "\u{1D59D}",
      "\\mathslbb{y}": "\u{1D59E}",
      "\\mathslbb{z}": "\u{1D59F}",
      "\\mathsf{A}": "\u{1D5A0}",
      "\\mathsf{B}": "\u{1D5A1}",
      "\\mathsf{C}": "\u{1D5A2}",
      "\\mathsf{D}": "\u{1D5A3}",
      "\\mathsf{E}": "\u{1D5A4}",
      "\\mathsf{F}": "\u{1D5A5}",
      "\\mathsf{G}": "\u{1D5A6}",
      "\\mathsf{H}": "\u{1D5A7}",
      "\\mathsf{I}": "\u{1D5A8}",
      "\\mathsf{J}": "\u{1D5A9}",
      "\\mathsf{K}": "\u{1D5AA}",
      "\\mathsf{L}": "\u{1D5AB}",
      "\\mathsf{M}": "\u{1D5AC}",
      "\\mathsf{N}": "\u{1D5AD}",
      "\\mathsf{O}": "\u{1D5AE}",
      "\\mathsf{P}": "\u{1D5AF}",
      "\\mathsf{Q}": "\u{1D5B0}",
      "\\mathsf{R}": "\u{1D5B1}",
      "\\mathsf{S}": "\u{1D5B2}",
      "\\mathsf{T}": "\u{1D5B3}",
      "\\mathsf{U}": "\u{1D5B4}",
      "\\mathsf{V}": "\u{1D5B5}",
      "\\mathsf{W}": "\u{1D5B6}",
      "\\mathsf{X}": "\u{1D5B7}",
      "\\mathsf{Y}": "\u{1D5B8}",
      "\\mathsf{Z}": "\u{1D5B9}",
      "\\mathsf{a}": "\u{1D5BA}",
      "\\mathsf{b}": "\u{1D5BB}",
      "\\mathsf{c}": "\u{1D5BC}",
      "\\mathsf{d}": "\u{1D5BD}",
      "\\mathsf{e}": "\u{1D5BE}",
      "\\mathsf{f}": "\u{1D5BF}",
      "\\mathsf{g}": "\u{1D5C0}",
      "\\mathsf{h}": "\u{1D5C1}",
      "\\mathsf{i}": "\u{1D5C2}",
      "\\mathsf{j}": "\u{1D5C3}",
      "\\mathsf{k}": "\u{1D5C4}",
      "\\mathsf{l}": "\u{1D5C5}",
      "\\mathsf{m}": "\u{1D5C6}",
      "\\mathsf{n}": "\u{1D5C7}",
      "\\mathsf{o}": "\u{1D5C8}",
      "\\mathsf{p}": "\u{1D5C9}",
      "\\mathsf{q}": "\u{1D5CA}",
      "\\mathsf{r}": "\u{1D5CB}",
      "\\mathsf{s}": "\u{1D5CC}",
      "\\mathsf{t}": "\u{1D5CD}",
      "\\mathsf{u}": "\u{1D5CE}",
      "\\mathsf{v}": "\u{1D5CF}",
      "\\mathsf{w}": "\u{1D5D0}",
      "\\mathsf{x}": "\u{1D5D1}",
      "\\mathsf{y}": "\u{1D5D2}",
      "\\mathsf{z}": "\u{1D5D3}",
      "\\mathsfbf{A}": "\u{1D5D4}",
      "\\mathsfbf{B}": "\u{1D5D5}",
      "\\mathsfbf{C}": "\u{1D5D6}",
      "\\mathsfbf{D}": "\u{1D5D7}",
      "\\mathsfbf{E}": "\u{1D5D8}",
      "\\mathsfbf{F}": "\u{1D5D9}",
      "\\mathsfbf{G}": "\u{1D5DA}",
      "\\mathsfbf{H}": "\u{1D5DB}",
      "\\mathsfbf{I}": "\u{1D5DC}",
      "\\mathsfbf{J}": "\u{1D5DD}",
      "\\mathsfbf{K}": "\u{1D5DE}",
      "\\mathsfbf{L}": "\u{1D5DF}",
      "\\mathsfbf{M}": "\u{1D5E0}",
      "\\mathsfbf{N}": "\u{1D5E1}",
      "\\mathsfbf{O}": "\u{1D5E2}",
      "\\mathsfbf{P}": "\u{1D5E3}",
      "\\mathsfbf{Q}": "\u{1D5E4}",
      "\\mathsfbf{R}": "\u{1D5E5}",
      "\\mathsfbf{S}": "\u{1D5E6}",
      "\\mathsfbf{T}": "\u{1D5E7}",
      "\\mathsfbf{U}": "\u{1D5E8}",
      "\\mathsfbf{V}": "\u{1D5E9}",
      "\\mathsfbf{W}": "\u{1D5EA}",
      "\\mathsfbf{X}": "\u{1D5EB}",
      "\\mathsfbf{Y}": "\u{1D5EC}",
      "\\mathsfbf{Z}": "\u{1D5ED}",
      "\\mathsfbf{a}": "\u{1D5EE}",
      "\\mathsfbf{b}": "\u{1D5EF}",
      "\\mathsfbf{c}": "\u{1D5F0}",
      "\\mathsfbf{d}": "\u{1D5F1}",
      "\\mathsfbf{e}": "\u{1D5F2}",
      "\\mathsfbf{f}": "\u{1D5F3}",
      "\\mathsfbf{g}": "\u{1D5F4}",
      "\\mathsfbf{h}": "\u{1D5F5}",
      "\\mathsfbf{i}": "\u{1D5F6}",
      "\\mathsfbf{j}": "\u{1D5F7}",
      "\\mathsfbf{k}": "\u{1D5F8}",
      "\\mathsfbf{l}": "\u{1D5F9}",
      "\\mathsfbf{m}": "\u{1D5FA}",
      "\\mathsfbf{n}": "\u{1D5FB}",
      "\\mathsfbf{o}": "\u{1D5FC}",
      "\\mathsfbf{p}": "\u{1D5FD}",
      "\\mathsfbf{q}": "\u{1D5FE}",
      "\\mathsfbf{r}": "\u{1D5FF}",
      "\\mathsfbf{s}": "\u{1D600}",
      "\\mathsfbf{t}": "\u{1D601}",
      "\\mathsfbf{u}": "\u{1D602}",
      "\\mathsfbf{v}": "\u{1D603}",
      "\\mathsfbf{w}": "\u{1D604}",
      "\\mathsfbf{x}": "\u{1D605}",
      "\\mathsfbf{y}": "\u{1D606}",
      "\\mathsfbf{z}": "\u{1D607}",
      "\\mathsfsl{A}": "\u{1D608}",
      "\\mathsfsl{B}": "\u{1D609}",
      "\\mathsfsl{C}": "\u{1D60A}",
      "\\mathsfsl{D}": "\u{1D60B}",
      "\\mathsfsl{E}": "\u{1D60C}",
      "\\mathsfsl{F}": "\u{1D60D}",
      "\\mathsfsl{G}": "\u{1D60E}",
      "\\mathsfsl{H}": "\u{1D60F}",
      "\\mathsfsl{I}": "\u{1D610}",
      "\\mathsfsl{J}": "\u{1D611}",
      "\\mathsfsl{K}": "\u{1D612}",
      "\\mathsfsl{L}": "\u{1D613}",
      "\\mathsfsl{M}": "\u{1D614}",
      "\\mathsfsl{N}": "\u{1D615}",
      "\\mathsfsl{O}": "\u{1D616}",
      "\\mathsfsl{P}": "\u{1D617}",
      "\\mathsfsl{Q}": "\u{1D618}",
      "\\mathsfsl{R}": "\u{1D619}",
      "\\mathsfsl{S}": "\u{1D61A}",
      "\\mathsfsl{T}": "\u{1D61B}",
      "\\mathsfsl{U}": "\u{1D61C}",
      "\\mathsfsl{V}": "\u{1D61D}",
      "\\mathsfsl{W}": "\u{1D61E}",
      "\\mathsfsl{X}": "\u{1D61F}",
      "\\mathsfsl{Y}": "\u{1D620}",
      "\\mathsfsl{Z}": "\u{1D621}",
      "\\mathsfsl{a}": "\u{1D622}",
      "\\mathsfsl{b}": "\u{1D623}",
      "\\mathsfsl{c}": "\u{1D624}",
      "\\mathsfsl{d}": "\u{1D625}",
      "\\mathsfsl{e}": "\u{1D626}",
      "\\mathsfsl{f}": "\u{1D627}",
      "\\mathsfsl{g}": "\u{1D628}",
      "\\mathsfsl{h}": "\u{1D629}",
      "\\mathsfsl{i}": "\u{1D62A}",
      "\\mathsfsl{j}": "\u{1D62B}",
      "\\mathsfsl{k}": "\u{1D62C}",
      "\\mathsfsl{l}": "\u{1D62D}",
      "\\mathsfsl{m}": "\u{1D62E}",
      "\\mathsfsl{n}": "\u{1D62F}",
      "\\mathsfsl{o}": "\u{1D630}",
      "\\mathsfsl{p}": "\u{1D631}",
      "\\mathsfsl{q}": "\u{1D632}",
      "\\mathsfsl{r}": "\u{1D633}",
      "\\mathsfsl{s}": "\u{1D634}",
      "\\mathsfsl{t}": "\u{1D635}",
      "\\mathsfsl{u}": "\u{1D636}",
      "\\mathsfsl{v}": "\u{1D637}",
      "\\mathsfsl{w}": "\u{1D638}",
      "\\mathsfsl{x}": "\u{1D639}",
      "\\mathsfsl{y}": "\u{1D63A}",
      "\\mathsfsl{z}": "\u{1D63B}",
      "\\mathsfbfsl{A}": "\u{1D63C}",
      "\\mathsfbfsl{B}": "\u{1D63D}",
      "\\mathsfbfsl{C}": "\u{1D63E}",
      "\\mathsfbfsl{D}": "\u{1D63F}",
      "\\mathsfbfsl{E}": "\u{1D640}",
      "\\mathsfbfsl{F}": "\u{1D641}",
      "\\mathsfbfsl{G}": "\u{1D642}",
      "\\mathsfbfsl{H}": "\u{1D643}",
      "\\mathsfbfsl{I}": "\u{1D644}",
      "\\mathsfbfsl{J}": "\u{1D645}",
      "\\mathsfbfsl{K}": "\u{1D646}",
      "\\mathsfbfsl{L}": "\u{1D647}",
      "\\mathsfbfsl{M}": "\u{1D648}",
      "\\mathsfbfsl{N}": "\u{1D649}",
      "\\mathsfbfsl{O}": "\u{1D64A}",
      "\\mathsfbfsl{P}": "\u{1D64B}",
      "\\mathsfbfsl{Q}": "\u{1D64C}",
      "\\mathsfbfsl{R}": "\u{1D64D}",
      "\\mathsfbfsl{S}": "\u{1D64E}",
      "\\mathsfbfsl{T}": "\u{1D64F}",
      "\\mathsfbfsl{U}": "\u{1D650}",
      "\\mathsfbfsl{V}": "\u{1D651}",
      "\\mathsfbfsl{W}": "\u{1D652}",
      "\\mathsfbfsl{X}": "\u{1D653}",
      "\\mathsfbfsl{Y}": "\u{1D654}",
      "\\mathsfbfsl{Z}": "\u{1D655}",
      "\\mathsfbfsl{a}": "\u{1D656}",
      "\\mathsfbfsl{b}": "\u{1D657}",
      "\\mathsfbfsl{c}": "\u{1D658}",
      "\\mathsfbfsl{d}": "\u{1D659}",
      "\\mathsfbfsl{e}": "\u{1D65A}",
      "\\mathsfbfsl{f}": "\u{1D65B}",
      "\\mathsfbfsl{g}": "\u{1D65C}",
      "\\mathsfbfsl{h}": "\u{1D65D}",
      "\\mathsfbfsl{i}": "\u{1D65E}",
      "\\mathsfbfsl{j}": "\u{1D65F}",
      "\\mathsfbfsl{k}": "\u{1D660}",
      "\\mathsfbfsl{l}": "\u{1D661}",
      "\\mathsfbfsl{m}": "\u{1D662}",
      "\\mathsfbfsl{n}": "\u{1D663}",
      "\\mathsfbfsl{o}": "\u{1D664}",
      "\\mathsfbfsl{p}": "\u{1D665}",
      "\\mathsfbfsl{q}": "\u{1D666}",
      "\\mathsfbfsl{r}": "\u{1D667}",
      "\\mathsfbfsl{s}": "\u{1D668}",
      "\\mathsfbfsl{t}": "\u{1D669}",
      "\\mathsfbfsl{u}": "\u{1D66A}",
      "\\mathsfbfsl{v}": "\u{1D66B}",
      "\\mathsfbfsl{w}": "\u{1D66C}",
      "\\mathsfbfsl{x}": "\u{1D66D}",
      "\\mathsfbfsl{y}": "\u{1D66E}",
      "\\mathsfbfsl{z}": "\u{1D66F}",
      "\\mathtt{A}": "\u{1D670}",
      "\\mathtt{B}": "\u{1D671}",
      "\\mathtt{C}": "\u{1D672}",
      "\\mathtt{D}": "\u{1D673}",
      "\\mathtt{E}": "\u{1D674}",
      "\\mathtt{F}": "\u{1D675}",
      "\\mathtt{G}": "\u{1D676}",
      "\\mathtt{H}": "\u{1D677}",
      "\\mathtt{I}": "\u{1D678}",
      "\\mathtt{J}": "\u{1D679}",
      "\\mathtt{K}": "\u{1D67A}",
      "\\mathtt{L}": "\u{1D67B}",
      "\\mathtt{M}": "\u{1D67C}",
      "\\mathtt{N}": "\u{1D67D}",
      "\\mathtt{O}": "\u{1D67E}",
      "\\mathtt{P}": "\u{1D67F}",
      "\\mathtt{Q}": "\u{1D680}",
      "\\mathtt{R}": "\u{1D681}",
      "\\mathtt{S}": "\u{1D682}",
      "\\mathtt{T}": "\u{1D683}",
      "\\mathtt{U}": "\u{1D684}",
      "\\mathtt{V}": "\u{1D685}",
      "\\mathtt{W}": "\u{1D686}",
      "\\mathtt{X}": "\u{1D687}",
      "\\mathtt{Y}": "\u{1D688}",
      "\\mathtt{Z}": "\u{1D689}",
      "\\mathtt{a}": "\u{1D68A}",
      "\\mathtt{b}": "\u{1D68B}",
      "\\mathtt{c}": "\u{1D68C}",
      "\\mathtt{d}": "\u{1D68D}",
      "\\mathtt{e}": "\u{1D68E}",
      "\\mathtt{f}": "\u{1D68F}",
      "\\mathtt{g}": "\u{1D690}",
      "\\mathtt{h}": "\u{1D691}",
      "\\mathtt{i}": "\u{1D692}",
      "\\mathtt{j}": "\u{1D693}",
      "\\mathtt{k}": "\u{1D694}",
      "\\mathtt{l}": "\u{1D695}",
      "\\mathtt{m}": "\u{1D696}",
      "\\mathtt{n}": "\u{1D697}",
      "\\mathtt{o}": "\u{1D698}",
      "\\mathtt{p}": "\u{1D699}",
      "\\mathtt{q}": "\u{1D69A}",
      "\\mathtt{r}": "\u{1D69B}",
      "\\mathtt{s}": "\u{1D69C}",
      "\\mathtt{t}": "\u{1D69D}",
      "\\mathtt{u}": "\u{1D69E}",
      "\\mathtt{v}": "\u{1D69F}",
      "\\mathtt{w}": "\u{1D6A0}",
      "\\mathtt{x}": "\u{1D6A1}",
      "\\mathtt{y}": "\u{1D6A2}",
      "\\mathtt{z}": "\u{1D6A3}",
      "\\mathbf{\\Gamma}": "\u{1D6AA}",
      "\\mathbf{\\Delta}": "\u{1D6AB}",
      "\\mathbf{\\Theta}": "\u{1D6AF}",
      "\\mathbf{\\Lambda}": "\u{1D6B2}",
      "\\mathbf{\\Xi}": "\u{1D6B5}",
      "\\mathbf{\\Pi}": "\u{1D6B7}",
      "\\mathbf{\\vartheta}": "\u{1D6B9}",
      "\\mathbf{\\Sigma}": "\u{1D6BA}",
      "\\mathbf{\\Upsilon}": "\u{1D6BC}",
      "\\mathbf{\\Phi}": "\u{1D6BD}",
      "\\mathbf{\\Psi}": "\u{1D6BF}",
      "\\mathbf{\\Omega}": "\u{1D6C0}",
      "\\mathbf{\\nabla}": "\u{1D6C1}",
      "\\mathbf{\\alpha}": "\u{1D6C2}",
      "\\mathbf{\\beta}": "\u{1D6C3}",
      "\\mathbf{\\gamma}": "\u{1D6C4}",
      "\\mathbf{\\delta}": "\u{1D6C5}",
      "\\mathbf{\\epsilon}": "\u{1D6C6}",
      "\\mathbf{\\zeta}": "\u{1D6C7}",
      "\\mathbf{\\eta}": "\u{1D6C8}",
      "\\mathbf{\\theta}": "\u{1D6C9}",
      "\\mathbf{\\lambda}": "\u{1D6CC}",
      "\\mathbf{\\xi}": "\u{1D6CF}",
      "\\mathbf{\\pi}": "\u{1D6D1}",
      "\\mathbf{\\varsigma}": "\u{1D6D3}",
      "\\mathbf{\\sigma}": "\u{1D6D4}",
      "\\mathbf{\\upsilon}": "\u{1D6D6}",
      "\\mathbf{\\phi}": "\u{1D6D7}",
      "\\mathbf{\\psi}": "\u{1D6D9}",
      "\\mathbf{\\omega}": "\u{1D6DA}",
      "\\mathbf{\\varkappa}": "\u{1D6DE}",
      "\\mathbf{\\varrho}": "\u{1D6E0}",
      "\\mathbf{\\varpi}": "\u{1D6E1}",
      "\\mathsl{\\Gamma}": "\u{1D6E4}",
      "\\mathsl{\\Delta}": "\u{1D6E5}",
      "\\mathsl{\\Lambda}": "\u{1D6EC}",
      "\\mathsl{\\Xi}": "\u{1D6EF}",
      "\\mathsl{\\Pi}": "\u{1D6F1}",
      "\\mathsl{\\Theta}": "\u{1D6F3}",
      "\\mathsl{\\Sigma}": "\u{1D6F4}",
      "\\mathsl{\\Upsilon}": "\u{1D6F6}",
      "\\mathsl{\\Phi}": "\u{1D6F7}",
      "\\mathsl{\\Psi}": "\u{1D6F9}",
      "\\mathsl{\\Omega}": "\u{1D6FA}",
      "\\mathsl{\\nabla}": "\u{1D6FB}",
      "\\mathsl{\\gamma}": "\u{1D6FE}",
      "\\mathsl{\\delta}": "\u{1D6FF}",
      "\\mathsl{\\theta}": "\u{1D703}",
      "\\mathsl{\\lambda}": "\u{1D706}",
      "\\mu": "\u{1D707}",
      "\\mathsl{\\xi}": "\u{1D709}",
      "\\mathsl{\\pi}": "\u{1D70B}",
      "\\mathsl{\\varsigma}": "\u{1D70D}",
      "\\mathsl{\\sigma}": "\u{1D70E}",
      "\\mathsl{\\upsilon}": "\u{1D710}",
      "\\mathsl{\\varphi}": "\u{1D711}",
      "\\mathsl{\\psi}": "\u{1D713}",
      "\\mathsl{\\omega}": "\u{1D714}",
      "\\mathsl{\\vartheta}": "\u{1D717}",
      "\\mathsl{\\varkappa}": "\u{1D718}",
      "\\mathsl{\\phi}": "\u{1D719}",
      "\\mathsl{\\varrho}": "\u{1D71A}",
      "\\mathsl{\\varpi}": "\u{1D71B}",
      "\\mathbit{\\Gamma}": "\u{1D71E}",
      "\\mathbit{\\Delta}": "\u{1D71F}",
      "\\mathbit{\\Theta}": "\u{1D723}",
      "\\mathbit{\\Lambda}": "\u{1D726}",
      "\\mathbit{\\Xi}": "\u{1D729}",
      "\\mathbit{\\Pi}": "\u{1D72B}",
      "\\mathbit{\\Sigma}": "\u{1D72E}",
      "\\mathbit{\\Upsilon}": "\u{1D730}",
      "\\mathbit{\\Phi}": "\u{1D731}",
      "\\mathbit{\\Psi}": "\u{1D733}",
      "\\mathbit{\\Omega}": "\u{1D734}",
      "\\mathbit{\\nabla}": "\u{1D735}",
      "\\mathbit{\\alpha}": "\u{1D736}",
      "\\mathbit{\\beta}": "\u{1D737}",
      "\\mathbit{\\gamma}": "\u{1D738}",
      "\\mathbit{\\delta}": "\u{1D739}",
      "\\mathbit{\\epsilon}": "\u{1D73A}",
      "\\mathbit{\\zeta}": "\u{1D73B}",
      "\\mathbit{\\eta}": "\u{1D73C}",
      "\\mathbit{\\theta}": "\u{1D73D}",
      "\\mathbit{\\imath}": "\u{1D73E}",
      "\\mathbit{\\kappa}": "\u{1D73F}",
      "\\mathbit{\\lambda}": "\u{1D740}",
      "\\mathbit{\\xi}": "\u{1D743}",
      "\\mathbit{\\pi}": "\u{1D745}",
      "\\mathbit{\\rho}": "\u{1D746}",
      "\\mathbit{\\varsigma}": "\u{1D747}",
      "\\mathbit{\\sigma}": "\u{1D748}",
      "\\mathbit{\\tau}": "\u{1D749}",
      "\\mathbit{\\upsilon}": "\u{1D74A}",
      "\\mathbit{\\varphi}": "\u{1D74B}",
      "\\mathbit{\\chi}": "\u{1D74C}",
      "\\mathbit{\\psi}": "\u{1D74D}",
      "\\mathbit{\\omega}": "\u{1D74E}",
      "\\mathbit{\\vartheta}": "\u{1D751}",
      "\\mathbit{\\varkappa}": "\u{1D752}",
      "\\mathbit{\\phi}": "\u{1D753}",
      "\\mathbit{\\varrho}": "\u{1D754}",
      "\\mathbit{\\varpi}": "\u{1D755}",
      "\\mathsfbf{\\Gamma}": "\u{1D758}",
      "\\mathsfbf{\\Delta}": "\u{1D759}",
      "\\mathsfbf{\\Theta}": "\u{1D75D}",
      "\\mathsfbf{\\Lambda}": "\u{1D760}",
      "\\mathsfbf{\\Xi}": "\u{1D763}",
      "\\mathsfbf{\\Pi}": "\u{1D765}",
      "\\mathsfbf{\\Sigma}": "\u{1D768}",
      "\\mathsfbf{\\Upsilon}": "\u{1D76A}",
      "\\mathsfbf{\\Phi}": "\u{1D76B}",
      "\\mathsfbf{\\Psi}": "\u{1D76D}",
      "\\mathsfbf{\\Omega}": "\u{1D76E}",
      "\\mathsfbf{\\nabla}": "\u{1D76F}",
      "\\mathsfbf{\\alpha}": "\u{1D770}",
      "\\mathsfbf{\\beta}": "\u{1D771}",
      "\\mathsfbf{\\gamma}": "\u{1D772}",
      "\\mathsfbf{\\delta}": "\u{1D773}",
      "\\mathsfbf{\\varepsilon}": "\u{1D774}",
      "\\mathsfbf{\\zeta}": "\u{1D775}",
      "\\mathsfbf{\\eta}": "\u{1D776}",
      "\\mathsfbf{\\theta}": "\u{1D777}",
      "\\mathsfbf{\\imath}": "\u{1D778}",
      "\\mathsfbf{\\kappa}": "\u{1D779}",
      "\\mathsfbf{\\lambda}": "\u{1D77A}",
      "\\mathsfbf{\\xi}": "\u{1D77D}",
      "\\mathsfbf{\\pi}": "\u{1D77F}",
      "\\mathsfbf{\\rho}": "\u{1D780}",
      "\\mathsfbf{\\varsigma}": "\u{1D781}",
      "\\mathsfbf{\\sigma}": "\u{1D782}",
      "\\mathsfbf{\\tau}": "\u{1D783}",
      "\\mathsfbf{\\upsilon}": "\u{1D784}",
      "\\mathsfbf{\\varphi}": "\u{1D785}",
      "\\mathsfbf{\\chi}": "\u{1D786}",
      "\\mathsfbf{\\psi}": "\u{1D787}",
      "\\mathsfbf{\\omega}": "\u{1D788}",
      "\\mathsfbf{\\vartheta}": "\u{1D78B}",
      "\\mathsfbf{\\varkappa}": "\u{1D78C}",
      "\\mathsfbf{\\phi}": "\u{1D78D}",
      "\\mathsfbf{\\varrho}": "\u{1D78E}",
      "\\mathsfbf{\\varpi}": "\u{1D78F}",
      "\\mathsfbfsl{\\Gamma}": "\u{1D792}",
      "\\mathsfbfsl{\\Delta}": "\u{1D793}",
      "\\mathsfbfsl{\\Theta}": "\u{1D797}",
      "\\mathsfbfsl{\\Lambda}": "\u{1D79A}",
      "\\mathsfbfsl{\\Xi}": "\u{1D79D}",
      "\\mathsfbfsl{\\Pi}": "\u{1D79F}",
      "\\mathsfbfsl{\\Sigma}": "\u{1D7A2}",
      "\\mathsfbfsl{\\Upsilon}": "\u{1D7A4}",
      "\\mathsfbfsl{\\Phi}": "\u{1D7A5}",
      "\\mathsfbfsl{\\Psi}": "\u{1D7A7}",
      "\\mathsfbfsl{\\Omega}": "\u{1D7A8}",
      "\\mathsfbfsl{\\nabla}": "\u{1D7A9}",
      "\\mathsfbfsl{\\alpha}": "\u{1D7AA}",
      "\\mathsfbfsl{\\beta}": "\u{1D7AB}",
      "\\mathsfbfsl{\\gamma}": "\u{1D7AC}",
      "\\mathsfbfsl{\\delta}": "\u{1D7AD}",
      "\\mathsfbfsl{\\varepsilon}": "\u{1D7AE}",
      "\\mathsfbfsl{\\zeta}": "\u{1D7AF}",
      "\\mathsfbfsl{\\eta}": "\u{1D7B0}",
      "\\mathsfbfsl{\\theta}": "\u{1D7B1}",
      "\\mathsfbfsl{\\imath}": "\u{1D7B2}",
      "\\mathsfbfsl{\\kappa}": "\u{1D7B3}",
      "\\mathsfbfsl{\\lambda}": "\u{1D7B4}",
      "\\mathsfbfsl{\\xi}": "\u{1D7B7}",
      "\\mathsfbfsl{\\pi}": "\u{1D7B9}",
      "\\mathsfbfsl{\\rho}": "\u{1D7BA}",
      "\\mathsfbfsl{\\varsigma}": "\u{1D7BB}",
      "\\mathsfbfsl{\\sigma}": "\u{1D7BC}",
      "\\mathsfbfsl{\\tau}": "\u{1D7BD}",
      "\\mathsfbfsl{\\upsilon}": "\u{1D7BE}",
      "\\mathsfbfsl{\\varphi}": "\u{1D7BF}",
      "\\mathsfbfsl{\\chi}": "\u{1D7C0}",
      "\\mathsfbfsl{\\psi}": "\u{1D7C1}",
      "\\mathsfbfsl{\\omega}": "\u{1D7C2}",
      "\\mathsfbfsl{\\vartheta}": "\u{1D7C5}",
      "\\mathsfbfsl{\\varkappa}": "\u{1D7C6}",
      "\\mathsfbfsl{\\phi}": "\u{1D7C7}",
      "\\mathsfbfsl{\\varrho}": "\u{1D7C8}",
      "\\mathsfbfsl{\\varpi}": "\u{1D7C9}",
      "\\mbfDigamma": "\u{1D7CA}",
      "\\mbfdigamma": "\u{1D7CB}",
      "\\mathbf{0}": "\u{1D7CE}",
      "\\mathbf{1}": "\u{1D7CF}",
      "\\mathbf{2}": "\u{1D7D0}",
      "\\mathbf{3}": "\u{1D7D1}",
      "\\mathbf{4}": "\u{1D7D2}",
      "\\mathbf{5}": "\u{1D7D3}",
      "\\mathbf{6}": "\u{1D7D4}",
      "\\mathbf{7}": "\u{1D7D5}",
      "\\mathbf{8}": "\u{1D7D6}",
      "\\mathbf{9}": "\u{1D7D7}",
      "\\mathbb{0}": "\u{1D7D8}",
      "\\mathbb{1}": "\u{1D7D9}",
      "\\mathbb{2}": "\u{1D7DA}",
      "\\mathbb{3}": "\u{1D7DB}",
      "\\mathbb{4}": "\u{1D7DC}",
      "\\mathbb{5}": "\u{1D7DD}",
      "\\mathbb{6}": "\u{1D7DE}",
      "\\mathbb{7}": "\u{1D7DF}",
      "\\mathbb{8}": "\u{1D7E0}",
      "\\mathbb{9}": "\u{1D7E1}",
      "\\mathsf{0}": "\u{1D7E2}",
      "\\mathsf{1}": "\u{1D7E3}",
      "\\mathsf{2}": "\u{1D7E4}",
      "\\mathsf{3}": "\u{1D7E5}",
      "\\mathsf{4}": "\u{1D7E6}",
      "\\mathsf{5}": "\u{1D7E7}",
      "\\mathsf{6}": "\u{1D7E8}",
      "\\mathsf{7}": "\u{1D7E9}",
      "\\mathsf{8}": "\u{1D7EA}",
      "\\mathsf{9}": "\u{1D7EB}",
      "\\mathsfbf{0}": "\u{1D7EC}",
      "\\mathsfbf{1}": "\u{1D7ED}",
      "\\mathsfbf{2}": "\u{1D7EE}",
      "\\mathsfbf{3}": "\u{1D7EF}",
      "\\mathsfbf{4}": "\u{1D7F0}",
      "\\mathsfbf{5}": "\u{1D7F1}",
      "\\mathsfbf{6}": "\u{1D7F2}",
      "\\mathsfbf{7}": "\u{1D7F3}",
      "\\mathsfbf{8}": "\u{1D7F4}",
      "\\mathsfbf{9}": "\u{1D7F5}",
      "\\mathtt{0}": "\u{1D7F6}",
      "\\mathtt{1}": "\u{1D7F7}",
      "\\mathtt{2}": "\u{1D7F8}",
      "\\mathtt{3}": "\u{1D7F9}",
      "\\mathtt{4}": "\u{1D7FA}",
      "\\mathtt{5}": "\u{1D7FB}",
      "\\mathtt{6}": "\u{1D7FC}",
      "\\mathtt{7}": "\u{1D7FD}",
      "\\mathtt{8}": "\u{1D7FE}",
      "\\mathtt{9}": "\u{1D7FF}"
    };
  }
});

// node_modules/unicode2latex/tables/diacritics.json
var require_diacritics = __commonJS({
  "node_modules/unicode2latex/tables/diacritics.json"(exports2, module2) {
    module2.exports = {
      commands: [
        "acute",
        "bar",
        "breve",
        "c",
        "d",
        "ddot",
        "dot",
        "grave",
        "hat",
        "k",
        "mathring",
        "overline",
        "r",
        "textacutemacron",
        "textacutewedge",
        "textadvancing",
        "textbrevemacron",
        "textcircumdot",
        "textcorner",
        "textdotacute",
        "textdotbreve",
        "textdoublegrave",
        "textdoublevbaraccent",
        "textgravedot",
        "textgravemacron",
        "textinvsubbridge",
        "textlowering",
        "textovercross",
        "textraising",
        "textretracting",
        "textringmacron",
        "textseagull",
        "textsubarch",
        "textsubbar",
        "textsubbridge",
        "textsubgrave",
        "textsublhalfring",
        "textsubplus",
        "textsubrhalfring",
        "textsubring",
        "textsubsquare",
        "textsubtilde",
        "textsubumlaut",
        "textsubwedge",
        "textsuperimposetilde",
        "textsyllabic",
        "texttildedot",
        "textvbaraccent",
        "tilde",
        "u",
        "underbar",
        "v"
      ],
      tolatex: {
        "\u0300": {
          command: "`",
          mode: "text"
        },
        "\u0300\u0304": {
          command: "textgravemacron",
          mode: "text"
        },
        "\u0300\u0307": {
          command: "textgravedot",
          mode: "text"
        },
        "\u0301": {
          command: "'",
          mode: "text"
        },
        "\u0301\u0304": {
          command: "textacutemacron",
          mode: "text"
        },
        "\u0301\u0307": {
          command: "textdotacute",
          mode: "text"
        },
        "\u0301\u030C": {
          command: "textacutewedge",
          mode: "text"
        },
        "\u0302": {
          command: "^",
          mode: "text"
        },
        "\u0302\u0307": {
          command: "textcircumdot",
          mode: "text"
        },
        "\u0303": {
          command: "~",
          mode: "text"
        },
        "\u0303\u0307": {
          command: "texttildedot",
          mode: "text"
        },
        "\u0304": {
          command: "=",
          mode: "text"
        },
        "\u0304\u0300": {
          command: "textgravemacron",
          mode: "text"
        },
        "\u0304\u0301": {
          command: "textacutemacron",
          mode: "text"
        },
        "\u0304\u0306": {
          command: "textbrevemacron",
          mode: "text"
        },
        "\u0304\u030A": {
          command: "textringmacron",
          mode: "text"
        },
        "\u0305": {
          command: "overline",
          mode: "math"
        },
        "\u0306": {
          command: "u",
          mode: "text"
        },
        "\u0306\u0304": {
          command: "textbrevemacron",
          mode: "text"
        },
        "\u0306\u0307": {
          command: "textdotbreve",
          mode: "text"
        },
        "\u0307": {
          command: ".",
          mode: "text"
        },
        "\u0307\u0300": {
          command: "textgravedot",
          mode: "text"
        },
        "\u0307\u0301": {
          command: "textdotacute",
          mode: "text"
        },
        "\u0307\u0302": {
          command: "textcircumdot",
          mode: "text"
        },
        "\u0307\u0303": {
          command: "texttildedot",
          mode: "text"
        },
        "\u0307\u0306": {
          command: "textdotbreve",
          mode: "text"
        },
        "\u0308": {
          command: '"',
          mode: "text"
        },
        "\u030A": {
          command: "r",
          mode: "text"
        },
        "\u030A\u0304": {
          command: "textringmacron",
          mode: "text"
        },
        "\u030B": {
          command: "H",
          mode: "text"
        },
        "\u030C": {
          command: "v",
          mode: "text"
        },
        "\u030C\u0301": {
          command: "textacutewedge",
          mode: "text"
        },
        "\u030D": {
          command: "textvbaraccent",
          mode: "text"
        },
        "\u030E": {
          command: "textdoublevbaraccent",
          mode: "text"
        },
        "\u030F": {
          command: "textdoublegrave",
          mode: "text"
        },
        "\u0310": {
          command: "textdotbreve",
          mode: "text"
        },
        "\u0316": {
          command: "textsubgrave",
          mode: "text"
        },
        "\u0318": {
          command: "textadvancing",
          mode: "text"
        },
        "\u0319": {
          command: "textretracting",
          mode: "text"
        },
        "\u031A": {
          command: "textcorner",
          mode: "text"
        },
        "\u031C": {
          command: "textsublhalfring",
          mode: "text"
        },
        "\u031D": {
          command: "textraising",
          mode: "text"
        },
        "\u031E": {
          command: "textlowering",
          mode: "text"
        },
        "\u031F": {
          command: "textsubplus",
          mode: "text"
        },
        "\u0323": {
          command: "d",
          mode: "text"
        },
        "\u0324": {
          command: "textsubumlaut",
          mode: "text"
        },
        "\u0325": {
          command: "textsubring",
          mode: "text"
        },
        "\u0327": {
          command: "c",
          mode: "text"
        },
        "\u0328": {
          command: "k",
          mode: "text"
        },
        "\u0329": {
          command: "textsyllabic",
          mode: "text"
        },
        "\u032A": {
          command: "textsubbridge",
          mode: "text"
        },
        "\u032C": {
          command: "textsubwedge",
          mode: "text"
        },
        "\u032F": {
          command: "textsubarch",
          mode: "text"
        },
        "\u0330": {
          command: "textsubtilde",
          mode: "text"
        },
        "\u0331": {
          command: "textsubbar",
          mode: "text"
        },
        "\u0334": {
          command: "textsuperimposetilde",
          mode: "text"
        },
        "\u0339": {
          command: "textsubrhalfring",
          mode: "text"
        },
        "\u033A": {
          command: "textinvsubbridge",
          mode: "text"
        },
        "\u033B": {
          command: "textsubsquare",
          mode: "text"
        },
        "\u033C": {
          command: "textseagull",
          mode: "text"
        },
        "\u033D": {
          command: "textovercross",
          mode: "text"
        }
      },
      tounicode: {
        '"': "\u0308",
        "'": "\u0301",
        ".": "\u0307",
        "=": "\u0304",
        H: "\u030B",
        "^": "\u0302",
        "`": "\u0300",
        acute: "\u0301",
        bar: "\u0304",
        breve: "\u0306",
        c: "\u0327",
        d: "\u0323",
        ddot: "\u0308",
        dot: "\u0307",
        grave: "\u0300",
        hat: "\u0302",
        k: "\u0328",
        mathring: "\u030A",
        overline: "\u0305",
        r: "\u030A",
        textacutemacron: "\u0304\u0301",
        textacutewedge: "\u030C\u0301",
        textadvancing: "\u0318",
        textbrevemacron: "\u0304\u0306",
        textcircumdot: "\u0307\u0302",
        textcorner: "\u031A",
        textdotacute: "\u0301\u0307",
        textdotbreve: "\u0310",
        textdoublegrave: "\u030F",
        textdoublevbaraccent: "\u030E",
        textgravedot: "\u0307\u0300",
        textgravemacron: "\u0300\u0304",
        textinvsubbridge: "\u033A",
        textlowering: "\u031E",
        textovercross: "\u033D",
        textraising: "\u031D",
        textretracting: "\u0319",
        textringmacron: "\u0304\u030A",
        textseagull: "\u033C",
        textsubarch: "\u032F",
        textsubbar: "\u0331",
        textsubbridge: "\u032A",
        textsubgrave: "\u0316",
        textsublhalfring: "\u031C",
        textsubplus: "\u031F",
        textsubrhalfring: "\u0339",
        textsubring: "\u0325",
        textsubsquare: "\u033B",
        textsubtilde: "\u0330",
        textsubumlaut: "\u0324",
        textsubwedge: "\u032C",
        textsuperimposetilde: "\u0334",
        textsyllabic: "\u0329",
        texttildedot: "\u0307\u0303",
        textvbaraccent: "\u030D",
        tilde: "\u0303",
        u: "\u0306",
        underbar: "\u0331",
        v: "\u030C",
        "~": "\u0303"
      }
    };
  }
});

// node_modules/unicode2latex/index.js
var require_unicode2latex = __commonJS({
  "node_modules/unicode2latex/index.js"(exports2, module2) {
    module2.exports = {
      ascii: require_ascii(),
      ascii_bibtex_creator: require_ascii_bibtex_creator(),
      unicode: require_unicode(),
      latex: require_latex(),
      diacritics: require_diacritics()
    };
  }
});

// node_modules/@retorquere/bibtex-parser/crossref.json
var require_crossref = __commonJS({
  "node_modules/@retorquere/bibtex-parser/crossref.json"(exports2, module2) {
    module2.exports = {
      "*": {
        "*": {
          verbb: "verba"
        }
      },
      article: {
        periodical: {
          journalsubtitle: "subtitle",
          journaltitle: "title"
        }
      },
      book: {
        mvbook: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      bookinbook: {
        book: {
          author: "author",
          bookauthor: "author",
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvbook: {
          author: "author",
          bookauthor: "author",
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      collection: {
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      inbook: {
        "*": {
          bookauthor: "author"
        },
        book: {
          author: "author",
          bookauthor: "author",
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvbook: {
          author: "author",
          bookauthor: "author",
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      incollection: {
        collection: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        reference: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      inproceedings: {
        mvproceedings: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        proceedings: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      inreference: {
        collection: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        reference: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      proceedings: {
        mvproceedings: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      reference: {
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      suppbook: {
        book: {
          author: "author",
          bookauthor: "author",
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvbook: {
          author: "author",
          bookauthor: "author",
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      suppcollection: {
        collection: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        reference: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      suppperiodical: {
        periodical: {
          journalsubtitle: "subtitle",
          journaltitle: "title"
        }
      }
    };
  }
});

// node_modules/@retorquere/bibtex-parser/fields.json
var require_fields = __commonJS({
  "node_modules/@retorquere/bibtex-parser/fields.json"(exports2, module2) {
    module2.exports = {
      article: [
        "abstract",
        "addendum",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "issn",
        "issue",
        "issuesubtitle",
        "issuetitle",
        "issuetitleaddon",
        "iswc",
        "journalsubtitle",
        "journaltitle",
        "journaltitleaddon",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "volume",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      artwork: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      audio: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      bibnote: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      book: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      bookinbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookauthor",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      booklet: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      collection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "authortype",
        "bookpagination",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      commentary: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customa: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customb: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customc: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customd: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      custome: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customf: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      dataset: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      image: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      inbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookauthor",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      incollection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      inproceedings: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      inreference: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      jurisdiction: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      legal: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      legislation: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      letter: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      manual: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      misc: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      movie: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      music: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagetotal",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvcollection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvproceedings: [
        "abstract",
        "addendum",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagetotal",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvreference: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      online: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      patent: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "holder",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      performance: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      periodical: [
        "abstract",
        "addendum",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "issn",
        "issue",
        "issuesubtitle",
        "issuetitle",
        "issuetitleaddon",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      proceedings: [
        "abstract",
        "addendum",
        "annotation",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      reference: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "authortype",
        "bookpagination",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      report: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "institution",
        "isan",
        "ismn",
        "isrn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      review: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      set: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      software: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      standard: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      suppbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookauthor",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      suppcollection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      suppperiodical: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      thesis: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "institution",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      unpublished: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      video: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      xdata: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ]
    };
  }
});

// node_modules/xregexp/tools/output/categories.js
var require_categories = __commonJS({
  "node_modules/xregexp/tools/output/categories.js"(exports2, module2) {
    module2.exports = [
      {
        "name": "C",
        "alias": "Other",
        "isBmpLast": true,
        "bmp": "\0-\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F-\u0897\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF",
        "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCBD\uDCC3-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]"
      },
      {
        "name": "Cc",
        "alias": "Control",
        "bmp": "\0-\x7F-\x9F"
      },
      {
        "name": "Cf",
        "alias": "Format",
        "bmp": "\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB",
        "astral": "\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]"
      },
      {
        "name": "Cn",
        "alias": "Unassigned",
        "bmp": "\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F\u0892-\u0897\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF",
        "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCC3-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F\uDC39-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]"
      },
      {
        "name": "Co",
        "alias": "Private_Use",
        "bmp": "\uE000-\uF8FF",
        "astral": "[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]"
      },
      {
        "name": "Cs",
        "alias": "Surrogate",
        "bmp": "\uD800-\uDFFF"
      },
      {
        "name": "L",
        "alias": "Letter",
        "bmp": "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "LC",
        "alias": "Cased_Letter",
        "bmp": "A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F5\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A",
        "astral": "\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD00-\uDD43]"
      },
      {
        "name": "Ll",
        "alias": "Lowercase_Letter",
        "bmp": "a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
        "astral": "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD22-\uDD43]"
      },
      {
        "name": "Lm",
        "alias": "Modifier_Letter",
        "bmp": "\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u08C9\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F2-\uA7F4\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F",
        "astral": "\uD801[\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD838[\uDD37-\uDD3D]|\u{1E94B}"
      },
      {
        "name": "Lo",
        "alias": "Other_Letter",
        "bmp": "\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C8\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF4A\uDF50]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\u{1DF0A}|\uD838[\uDD00-\uDD2C\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "Lt",
        "alias": "Titlecase_Letter",
        "bmp": "\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC"
      },
      {
        "name": "Lu",
        "alias": "Uppercase_Letter",
        "bmp": "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A",
        "astral": "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]"
      },
      {
        "name": "M",
        "alias": "Mark",
        "bmp": "\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
        "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC82\uDCB0-\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE\uDDCF\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
      },
      {
        "name": "Mc",
        "alias": "Spacing_Mark",
        "bmp": "\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC",
        "astral": "\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD30-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]"
      },
      {
        "name": "Me",
        "alias": "Enclosing_Mark",
        "bmp": "\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672"
      },
      {
        "name": "Mn",
        "alias": "Nonspacing_Mark",
        "bmp": "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
        "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC01\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
      },
      {
        "name": "N",
        "alias": "Number",
        "bmp": "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
        "astral": "\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]"
      },
      {
        "name": "Nd",
        "alias": "Decimal_Number",
        "bmp": "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
        "astral": "\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]"
      },
      {
        "name": "Nl",
        "alias": "Letter_Number",
        "bmp": "\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF",
        "astral": "\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]"
      },
      {
        "name": "No",
        "alias": "Other_Number",
        "bmp": "\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835",
        "astral": "\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C\uDFC0-\uDFD4]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]"
      },
      {
        "name": "P",
        "alias": "Punctuation",
        "bmp": "!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65",
        "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
      },
      {
        "name": "Pc",
        "alias": "Connector_Punctuation",
        "bmp": "_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F"
      },
      {
        "name": "Pd",
        "alias": "Dash_Punctuation",
        "bmp": "\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u2E5D\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D",
        "astral": "\u{10EAD}"
      },
      {
        "name": "Pe",
        "alias": "Close_Punctuation",
        "bmp": "\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u2E56\u2E58\u2E5A\u2E5C\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63"
      },
      {
        "name": "Pf",
        "alias": "Final_Punctuation",
        "bmp": "\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21"
      },
      {
        "name": "Pi",
        "alias": "Initial_Punctuation",
        "bmp": "\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20"
      },
      {
        "name": "Po",
        "alias": "Other_Punctuation",
        "bmp": "!-#%-'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4F\u2E52-\u2E54\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65",
        "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
      },
      {
        "name": "Ps",
        "alias": "Open_Punctuation",
        "bmp": "\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u2E55\u2E57\u2E59\u2E5B\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62"
      },
      {
        "name": "S",
        "alias": "Symbol",
        "bmp": "\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD",
        "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
      },
      {
        "name": "Sc",
        "alias": "Currency_Symbol",
        "bmp": "\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20C0\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6",
        "astral": "\uD807[\uDFDD-\uDFE0]|\u{1E2FF}|\u{1ECB0}"
      },
      {
        "name": "Sk",
        "alias": "Modifier_Symbol",
        "bmp": "\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u0888\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uAB6A\uAB6B\uFBB2-\uFBC2\uFF3E\uFF40\uFFE3",
        "astral": "\uD83C[\uDFFB-\uDFFF]"
      },
      {
        "name": "Sm",
        "alias": "Math_Symbol",
        "bmp": "\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC",
        "astral": "\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]"
      },
      {
        "name": "So",
        "alias": "Other_Symbol",
        "bmp": "\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFD40-\uFD4F\uFDCF\uFDFD-\uFDFF\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD",
        "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFDC\uDFE1-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\u{1E14F}|\uD83B[\uDCAC\uDD2E]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
      },
      {
        "name": "Z",
        "alias": "Separator",
        "bmp": " \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
      },
      {
        "name": "Zl",
        "alias": "Line_Separator",
        "bmp": "\u2028"
      },
      {
        "name": "Zp",
        "alias": "Paragraph_Separator",
        "bmp": "\u2029"
      },
      {
        "name": "Zs",
        "alias": "Space_Separator",
        "bmp": " \xA0\u1680\u2000-\u200A\u202F\u205F\u3000"
      }
    ];
  }
});

// node_modules/@retorquere/bibtex-parser/sentence-case.js
var require_sentence_case = __commonJS({
  "node_modules/@retorquere/bibtex-parser/sentence-case.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toSentenceCase = exports2.restore = void 0;
    var categories = require_categories();
    var cat = (name) => categories.find((c) => c.name === name).bmp;
    var L = cat("L");
    var Lu = cat("Lu");
    var Ll = cat("Ll");
    var N = cat("N");
    var No = cat("No");
    var Pc = cat("Pc");
    function restore(text, orig, preserve) {
      for (const { start, end } of preserve) {
        text = text.substring(0, start) + orig.substring(start, end) + text.substring(end);
      }
      return text;
    }
    exports2.restore = restore;
    var re = {
      acronym: new RegExp(`([${Lu}][.])+$`),
      innerCaps: new RegExp(`.[${Lu}]`),
      ident: new RegExp(`^[$p{L}]+[${N}${No}][${L}${N}${No}]*$`),
      allCaps: new RegExp(`^[${Lu}${N}${No}]+$`),
      skipWords: /^(but|or|yet|so|for|and|nor|a|an|the|at|by|from|in|into|of|on|to|with|updown|as)$/i,
      words: new RegExp(`([\uFFFD${L}${N}${No}]+([\uFFFD${Pc}${L}${N}${No}]*))|(\\s([\uFFFD${Lu}]+[.]){2,})?`, "g"),
      titleCase: new RegExp(`^[${Lu}][${Ll}${N}${No}]+$`)
    };
    function lowercase(word) {
      if (!word)
        return word;
      const unmasked = word.replace(/\uFFFD/g, "");
      if (unmasked.match(re.skipWords))
        return word.toLowerCase();
      if (unmasked.match(re.titleCase))
        return word.toLowerCase();
      if (unmasked.length === 1)
        return unmasked === "A" ? word.toLowerCase() : word;
      if (unmasked.match(re.innerCaps))
        return word;
      if (unmasked.match(re.ident) || unmasked.match(re.allCaps))
        return word;
      return word.toLowerCase();
    }
    function toSentenceCase(text) {
      const preserve = [];
      text.replace(/“.*?”/g, (match, i) => {
        preserve.push({ start: i, end: i + match.length, description: "quoted" });
        return "";
      });
      text.replace(/‘.*?’/g, (match, i) => {
        preserve.push({ start: i, end: i + match.length, description: "quoted" });
        return "";
      });
      text.replace(/(["]).*?\1/g, (match, _quote, i) => {
        preserve.push({ start: i, end: i + match.length, description: "quoted" });
        return "";
      });
      text.replace(/([.?!][\s]+)(<[^>]+>)?([A-Z])/g, (match, end, markup, char, i) => {
        if (!text.substring(0, i + 1).match(re.acronym)) {
          preserve.push({ start: i + end.length + ((markup === null || markup === void 0 ? void 0 : markup.length) || 0), end: i + end.length + ((markup === null || markup === void 0 ? void 0 : markup.length) || 0) + char.length, description: "sub-sentence-start" });
        }
        return "";
      });
      text.replace(/^(<[^>]+>)?([A-Z])/, (match, markup, char) => {
        preserve.push({ start: (markup === null || markup === void 0 ? void 0 : markup.length) || 0, end: ((markup === null || markup === void 0 ? void 0 : markup.length) || 0) + char.length, description: "sentence-start" });
        return "";
      });
      text.replace(/<span class="nocase">.*?<\/span>|<nc>.*?<\/nc>/gi, (match, i) => {
        preserve.push({ start: i, end: i + match.length, description: "nocase" });
        return "";
      });
      let masked = text.replace(/<[^>]+>/g, (match, i) => {
        preserve.push({ start: i, end: i + match.length, description: "markup" });
        return "\uFFFD".repeat(match.length);
      });
      masked = masked.replace(/[;:]\uFFFD*\s+\uFFFD*A\s/g, (match) => match.toLowerCase()).replace(/[–—]\uFFFD*\s*\uFFFD*A\s/g, (match) => match.toLowerCase()).replace(re.words, (word) => lowercase(word));
      return restore(masked, text, preserve);
    }
    exports2.toSentenceCase = toSentenceCase;
  }
});

// node_modules/@retorquere/bibtex-parser/index.js
var require_bibtex_parser = __commonJS({
  "node_modules/@retorquere/bibtex-parser/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.jabref = exports2.chunker = exports2.promises = exports2.ast = exports2.parse = exports2.fields = exports2.toSentenceCase = void 0;
    var bibtex = __importStar(require_grammar());
    var chunker = __importStar(require_chunker());
    exports2.chunker = chunker;
    var jabref = __importStar(require_jabref());
    exports2.jabref = jabref;
    var jabref_1 = require_jabref();
    var unicode2latex_1 = require_unicode2latex();
    var crossref_json_1 = __importDefault(require_crossref());
    var fields_json_1 = __importDefault(require_fields());
    var sentence_case_1 = require_sentence_case();
    Object.defineProperty(exports2, "toSentenceCase", { enumerable: true, get: function() {
      return sentence_case_1.toSentenceCase;
    } });
    var sentence_case_2 = require_sentence_case();
    var ParserError = class extends Error {
      constructor(message, node) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = this.constructor.name;
        this.node = node;
      }
    };
    var TeXError = class extends Error {
      constructor(message, node, text) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = this.constructor.name;
        this.node = node;
        this.text = text;
      }
    };
    function charCat(charcats, select) {
      return charcats.filter((cat) => select.includes(cat.alias)).map((cat) => cat.bmp).join("");
    }
    var charCategories = require_categories();
    var charClass = {
      Lu: charCat(charCategories, ["Uppercase_Letter", "Titlecase_Letter"]),
      Ll: charCat(charCategories, ["Lowercase_Letter"]),
      LnotLu: charCat(charCategories, ["Lowercase_Letter", "Modifier_Letter", "Other_Letter", "Nonspacing_Mark", "Spacing_Mark", "Decimal_Number", "Letter_Number"]),
      P: charCat(charCategories, ["Punctuation"]),
      L: charCat(charCategories, ["Letter"]),
      N: charCat(charCategories, ["Decimal_Number", "Letter_Number"]),
      AlphaNum: charCat(charCategories, ["Letter", "Decimal_Number", "Letter_Number"]),
      LC: charCat(charCategories, ["Cased_Letter"])
    };
    var marker = {
      and: "",
      comma: "",
      space: "",
      literal: "",
      markup: "",
      re: {
        and: /./,
        comma: /./,
        space: /./,
        literal: /./,
        literalName: /./
      },
      clean(s) {
        return s.replace(marker.re.space, " ").replace(marker.re.comma, ", ").replace(marker.re.literal, "");
      }
    };
    marker.re = {
      and: new RegExp(marker.and, "g"),
      comma: new RegExp(marker.comma, "g"),
      space: new RegExp(marker.space, "g"),
      literal: new RegExp(marker.literal, "g"),
      literalName: new RegExp(`^${marker.literal}([^${marker.literal}]*)${marker.literal}$`)
    };
    var preserveCase = {
      leadingCap: new RegExp(`^[${charClass.Lu}][${charClass.LnotLu}]+[${charClass.P}]?$`),
      allCaps: new RegExp(`^[${charClass.Lu}${charClass.N}]{2,}$`),
      allLower: new RegExp(`^[${charClass.Ll}${charClass.N}]{2,}$`),
      joined: new RegExp(`^[${charClass.Lu}][${charClass.LnotLu}]*([-+][${charClass.L}${charClass.N}]+)*[${charClass.P}]*$`),
      hasUpper: new RegExp(`[${charClass.Lu}]`),
      hasLower: new RegExp(`[${charClass.Ll}]`),
      isNumber: /^[0-9]+$/,
      hasAlpha: new RegExp(`[${charClass.L}]`),
      hasAlphaNum: new RegExp(`[${charClass.AlphaNum}]`),
      notAlphaNum: new RegExp(`[^${charClass.AlphaNum}]`, "g"),
      sentenceStart: new RegExp(`(^|([\u2014:?!.]\\s+))[${charClass.Lu}]`, "g"),
      markup: /<\/?span[^>]*>/g,
      acronym: new RegExp(`.*\\.${marker.markup}*[${charClass.Lu}]${marker.markup}*\\.$`),
      notCaseSensitive: new RegExp(`[^${charClass.LC}]`),
      isCaseSensitive: new RegExp(`[${charClass.LC}]`),
      quoted: /("[^"]+")|(“[^“]+“)/g
    };
    exports2.fields = {
      creator: [
        "author",
        "bookauthor",
        "collaborator",
        "commentator",
        "director",
        "editor",
        "editora",
        "editorb",
        "editors",
        "holder",
        "scriptwriter",
        "translator"
      ],
      title: [
        "title",
        "series",
        "shorttitle",
        "booktitle",
        "type",
        "origtitle",
        "maintitle",
        "eventtitle"
      ],
      unnest: [
        "publisher",
        "location"
      ],
      verbatim: [
        "doi",
        "eprint",
        "file",
        "files",
        "pdf",
        "groups",
        "ids",
        "url",
        "verba",
        "verbb",
        "verbc"
      ],
      html: [
        "annotation",
        "comment",
        "annote",
        "review",
        "notes",
        "note"
      ],
      unabbrev: [
        "journal",
        "journaltitle",
        "journal-full"
      ]
    };
    var english = [
      "american",
      "british",
      "canadian",
      "english",
      "australian",
      "newzealand",
      "usenglish",
      "ukenglish",
      "en",
      "eng",
      "en-au",
      "en-bz",
      "en-ca",
      "en-cb",
      "en-gb",
      "en-ie",
      "en-jm",
      "en-nz",
      "en-ph",
      "en-tt",
      "en-us",
      "en-za",
      "en-zw",
      "anglais"
    ];
    var Parser = class {
      constructor(options = {}) {
        this.in_preamble = false;
        this.preamble = [];
        this.log = function(_str) {
        };
        for (const [option, value] of Object.entries(options)) {
          if (typeof value === "undefined")
            delete options[option];
        }
        if (options.errorHandler === false) {
          options.errorHandler = function(_err) {
          };
        } else if (typeof options.errorHandler === "undefined") {
          options.errorHandler = function(err) {
            throw err;
          };
        }
        if (typeof options.sentenceCase === "boolean") {
          options.sentenceCase = options.sentenceCase ? english : [];
        } else {
          options.sentenceCase = options.sentenceCase || english;
        }
        if (!options.strings)
          options.strings = {};
        if (!options.unabbreviate)
          options.unabbreviate = {};
        if (options.raw) {
          options.sentenceCase = false;
          options.caseProtection = false;
        }
        this.options = Object.assign({ caseProtection: "as-needed", verbatimFields: [/^citeulike-linkout-[0-9]+$/, /^bdsk-url-[0-9]+$/, ...exports2.fields.verbatim], verbatimCommands: ["url"], unnestFields: [...exports2.fields.title, ...exports2.fields.unnest, ...exports2.fields.verbatim], unnestMode: "unwrap", htmlFields: exports2.fields.html, guessAlreadySentenceCased: true, applyCrossRef: options.applyCrossRef || typeof options.applyCrossRef === "undefined", markup: {} }, options);
        const markup_defaults = {
          enquote: { open: "\u201C", close: "\u201D" },
          sub: { open: "<sub>", close: "</sub>" },
          sup: { open: "<sup>", close: "</sup>" },
          bold: { open: "<b>", close: "</b>" },
          italics: { open: "<i>", close: "</i>" },
          smallCaps: { open: '<span style="font-variant:small-caps;">', close: "</span>" },
          caseProtect: { open: '<span class="nocase">', close: "</span>" },
          roman: { open: "", close: "" },
          fixedWidth: { open: "<tt>", close: "</tt>" }
        };
        for (const [markup, { open, close }] of Object.entries(markup_defaults)) {
          this.options.markup[markup] = this.options.markup[markup] || { open, close };
        }
        for (const i of [1, 2, 3, 4]) {
          this.options.markup[`h${i}`] = this.options.markup[`h${i}`] || { open: `<h${i}>`, close: `</h${i}>` };
        }
        this.unresolvedStrings = {};
        this.errors = [];
        this.comments = [];
        this.entries = [];
        this.strings = {};
        this.newcommands = {};
        this.default_strings = {
          JAN: [this.text("01")],
          FEB: [this.text("02")],
          MAR: [this.text("03")],
          APR: [this.text("04")],
          MAY: [this.text("05")],
          JUN: [this.text("06")],
          JUL: [this.text("07")],
          AUG: [this.text("08")],
          SEP: [this.text("09")],
          OCT: [this.text("10")],
          NOV: [this.text("11")],
          DEC: [this.text("12")],
          ACMCS: [this.text("ACM Computing Surveys")],
          ACTA: [this.text("Acta Informatica")],
          CACM: [this.text("Communications of the ACM")],
          IBMJRD: [this.text("IBM Journal of Research and Development")],
          IBMSJ: [this.text("IBM Systems Journal")],
          IEEESE: [this.text("IEEE Transactions on Software Engineering")],
          IEEETC: [this.text("IEEE Transactions on Computers")],
          IEEETCAD: [this.text("IEEE Transactions on Computer-Aided Design of Integrated Circuits")],
          IPL: [this.text("Information Processing Letters")],
          JACM: [this.text("Journal of the ACM")],
          JCSS: [this.text("Journal of Computer and System Sciences")],
          SCP: [this.text("Science of Computer Programming")],
          SICOMP: [this.text("SIAM Journal on Computing")],
          TOCS: [this.text("ACM Transactions on Computer Systems")],
          TODS: [this.text("ACM Transactions on Database Systems")],
          TOG: [this.text("ACM Transactions on Graphics")],
          TOMS: [this.text("ACM Transactions on Mathematical Software")],
          TOOIS: [this.text("ACM Transactions on Office Information Systems")],
          TOPLAS: [this.text("ACM Transactions on Programming Languages and Systems")],
          TCS: [this.text("Theoretical Computer Science")]
        };
        if (typeof this.options.strings === "string") {
          const strings = this.options.strings;
          this.options.strings = {};
          this.parseChunk({ text: strings, offset: { pos: 0, line: 0 } });
          this.preloaded_strings = this.strings;
          this.strings = {};
        } else {
          this.preloaded_strings = {};
        }
      }
      ast(input, clean = true) {
        let parsed = [];
        for (const chunk of chunker.parse(input)) {
          const { children } = bibtex.parse(chunk.text, Object.assign(Object.assign({}, this.options), { combiningDiacritics: unicode2latex_1.diacritics.commands }));
          if (clean)
            this.clean(children);
          parsed = parsed.concat(children);
        }
        return parsed;
      }
      parse(input) {
        for (const chunk of chunker.parse(input)) {
          this.parseChunk(chunk);
        }
        return this.parsed();
      }
      async parseAsync(input) {
        for (const chunk of await chunker.promises.parse(input)) {
          this.parseChunk(chunk);
        }
        return this.parsed();
      }
      applyCrossrefField(parent, parentfield, child, childfield) {
        let applied = false;
        for (const field of ["fields", "creators"]) {
          if (!child[field][childfield] && parent[field][parentfield]) {
            child[field][childfield] = parent[field][parentfield];
            applied = true;
            if (!child.crossref.inherited.includes(childfield))
              child.crossref.inherited.push(childfield);
            if (!parent.crossref.donated.includes(parentfield))
              parent.crossref.donated.push(parentfield);
          }
        }
        return applied;
      }
      applyCrossref(entry, entries) {
        for (const xref of ["crossref", "xdata"]) {
          if (!entry.fields[xref])
            continue;
          for (const parents of entry.fields[xref]) {
            let applied = false;
            for (const parent of parents.split(/\s*,\s*/).map((key) => entries[key]).filter((p) => p)) {
              this.applyCrossref(parent, entries);
              for (const mappings of [crossref_json_1.default[entry.type], crossref_json_1.default["*"]].filter((m) => m)) {
                for (const mapping of [mappings[parent.type], mappings["*"]].filter((m) => m)) {
                  for (const [target, source] of Object.entries(mapping)) {
                    if (this.applyCrossrefField(parent, source, entry, target))
                      applied = true;
                  }
                  for (const field of fields_json_1.default[entry.type] || []) {
                    if (this.applyCrossrefField(parent, field, entry, field))
                      applied = true;
                  }
                }
              }
            }
            if (applied)
              delete entry.fields[xref];
          }
        }
      }
      parsed() {
        this.field = null;
        const strings = {};
        this.cleaning = { type: "other" };
        for (const [key, value] of Object.entries(this.strings)) {
          this.field = {
            name: "@string",
            text: "",
            level: 0,
            preserveRanges: null,
            words: {
              upper: 0,
              lower: 0,
              other: 0
            }
          };
          this.convert(this.clean(value));
          strings[key] = this.field.text;
        }
        if (this.options.applyCrossRef) {
          const entries = this.entries.reduce((acc, entry) => {
            acc[entry.key] = entry;
            return acc;
          }, {});
          for (const entry of this.entries) {
            this.applyCrossref(entry, entries);
          }
        }
        const { comments, jabref: jabref2 } = (0, jabref_1.parse)(this.comments);
        return {
          errors: this.errors,
          entries: this.entries,
          comments,
          jabref: jabref2,
          strings,
          preamble: this.preamble
        };
      }
      preserve(start, end, reason) {
        if (!this.field.preserveRanges)
          return;
        if (!end) {
          this.field.preserveRanges = null;
          return;
        }
        this.field.preserveRanges.push({ start, end, description: reason });
      }
      parseChunk(chunk) {
        this.chunk = chunk.text;
        try {
          let bib = bibtex.parse(chunk.text, Object.assign(Object.assign({}, this.options), { combiningDiacritics: unicode2latex_1.diacritics.commands }));
          if (bib.kind !== "Bibliography")
            throw new Error(this.show(bib));
          bib = this.clean(bib);
          for (const entity of bib.children) {
            switch (entity.kind) {
              case "Entry":
              case "BracedComment":
              case "LineComment":
              case "PreambleExpression":
                this.convert(entity);
                break;
              case "StringDeclaration":
              case "NonEntryText":
                break;
            }
          }
          return bib;
        } catch (err) {
          if (!err.location)
            throw err;
          this.errors.push({
            message: err.message,
            line: err.location.start.line + chunk.offset.line,
            column: err.location.start.column,
            source: this.chunk
          });
          return null;
        }
      }
      show(o) {
        let text = JSON.stringify(o);
        if (this.chunk)
          text += `
${this.chunk.trim()}`;
        return text;
      }
      text(value = "") {
        return { kind: "Text", value, mode: "text" };
      }
      error(err, returnvalue) {
        if (typeof this.options.errorHandler === "function")
          this.options.errorHandler(err);
        return returnvalue || this.text();
      }
      condense(node) {
        node.value = this.clean(node.value);
        node.value = node.value.reduce((acc, child) => {
          if (child.kind === "Block" && !child.case && Object.keys(child.markup).length === 0) {
            acc = acc.concat(child.value);
          } else {
            acc.push(child);
          }
          return acc;
        }, []);
        node.value = node.value.reduce((acc, child, i) => {
          if (acc.length === 0) {
            acc.push(child);
            return acc;
          }
          const last = acc[acc.length - 1];
          const next = node.value[i + 1];
          if (this.options.caseProtection === "strict" && this.onlyCaseProtected(last) && child.kind === "Text" && !child.value.match(preserveCase.isCaseSensitive) && this.onlyCaseProtected(next)) {
            last.value.push(child);
            delete last.source;
            return acc;
          }
          if (last.kind === "Block" && child.kind === "Block" && Object.keys(last.markup).sort().join("/") === Object.keys(child.markup).sort().join("/")) {
            last.value = last.value.concat(child.value);
            delete last.source;
            return acc;
          }
          if (last.kind === "Text" && child.kind === "Text" && last.mode === child.mode) {
            last.value += child.value;
            delete last.source;
            return acc;
          }
          acc.push(child);
          return acc;
        }, []);
      }
      onlyCaseProtected(node) {
        return (node === null || node === void 0 ? void 0 : node.kind) === "Block" && node.case === "protect" && Object.keys(node.markup).join("/") === "";
      }
      argument(node, kind) {
        if (!node.arguments || !node.arguments.required.length)
          return kind === "none";
        if (typeof kind === "number") {
          return node.arguments.required.length === kind ? node.arguments.required : false;
        }
        if (node.arguments.required.length !== 1)
          return false;
        if (kind === "text") {
          const first = node.arguments.required[0];
          if (first.kind === "Block") {
            switch (first.value.length) {
              case 0:
                return "";
              case 1:
                if (first.value[0].kind === "Text")
                  return first.value[0].value;
                break;
            }
          }
          kind = "Text";
        }
        if (node.arguments.required.length !== 1 || node.arguments.required[0].kind !== kind)
          return false;
        switch (node.arguments.required[0].kind) {
          case "Text":
            return node.arguments.required[0].value;
          case "RegularCommand":
            return node.arguments.required[0];
          case "Block":
            return node.arguments.required[0];
        }
        return false;
      }
      isBreak(node, kind) {
        return node && node.kind === "RegularCommand" && kind.includes(node.command);
      }
      clean(node) {
        if (Array.isArray(node)) {
          return node.filter((child, i) => !(this.isBreak(child, ["\\"]) && this.isBreak(node[i - 1], ["\\", "par"]))).filter((child, i) => !this.isBreak(child, ["par"]) || !this.isBreak(node[i - 1], ["par"])).map((child) => this.clean(child));
        }
        delete node.loc;
        switch (node.kind) {
          case "InlineMath":
          case "DisplayMath":
            return this.clean_block(node);
          case "Environment":
            return this.clean_environment(node);
          case "Block":
            return this.clean_block(node);
          case "Bibliography":
            return this.clean_bib(node);
          case "RegularCommand":
            return this.clean_command(node);
          case "DiacriticCommand":
            return this.clean_diacritic(node);
          case "Entry":
            return this.clean_entry(node);
          case "Field":
            return this.options.raw ? node : this.clean_field(node);
          case "StringDeclaration":
            return this.clean_stringdecl(node);
          case "StringReference":
            return this.clean_stringref(node);
          case "SubscriptCommand":
          case "SuperscriptCommand":
            return this.clean_script(node);
          case "SymbolCommand":
            return this.clean_symbol(node);
          case "PreambleExpression":
            return this.clean_preamble(node);
          case "Number":
          case "Text":
          case "BracedComment":
          case "LineComment":
          case "NonEntryText":
            return node;
          default:
            return this.error(new ParserError(`no cleanup method for ${this.show(node)}`, node), this.text());
        }
      }
      clean_preamble(node) {
        this.in_preamble = true;
        try {
          return this.clean(node.value);
        } finally {
          this.in_preamble = false;
        }
      }
      clean_bib(node) {
        node.children = node.children.filter((child) => child.kind !== "NonEntryText").map((child) => this.clean(child));
        return node;
      }
      clean_stringdecl(node) {
        this.strings[node.name.toUpperCase()] = node.value;
        return node;
      }
      clean_stringref(node) {
        const name = node.name.toUpperCase();
        const stringvalue = this.strings[name] || this.options.strings[name] || this.preloaded_strings[name] || this.default_strings[name] || exports2.fields.unabbrev.includes(this.cleaning.name) && this.options.unabbreviate[name] && [this.text(this.options.unabbreviate[name])];
        if (!stringvalue) {
          if (!this.unresolvedStrings[name])
            this.errors.push({ message: `Unresolved @string reference ${JSON.stringify(node.name)}` });
          this.unresolvedStrings[name] = true;
        }
        return this.clean({
          kind: "Block",
          case: stringvalue ? void 0 : "preserve",
          markup: {},
          value: stringvalue ? JSON.parse(JSON.stringify(stringvalue)) : [this.text(node.name)]
        });
      }
      clean_entry(node) {
        const shortjournals = [];
        for (const field of node.fields) {
          if (exports2.fields.unabbrev.includes(field.name) && Array.isArray(field.value)) {
            const abbr = field.value.map((v) => v.source).join("").toUpperCase();
            const journal = this.options.unabbreviate[abbr];
            if (journal) {
              shortjournals.push(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(field))), { name: "shortjournal" }));
              field.value = [this.text(journal)];
            }
          }
        }
        node.fields = node.fields.concat(shortjournals).map((child) => this.clean(child));
        return node;
      }
      startCleaning(name) {
        name = name.toLowerCase();
        if (exports2.fields.title.includes(name)) {
          this.cleaning = { type: "title", name };
        } else if (exports2.fields.creator.includes(name.replace(/s$/, ""))) {
          this.cleaning = { type: "creator", name: name.replace(/s$/, "") };
        } else {
          this.cleaning = { type: "other", name };
        }
      }
      stripNoCase(node, strip, preserve) {
        switch (node.kind) {
          case "RegularCommand":
            if (["chsf", "bibstring", "cite"].includes(node.command))
              strip = true;
            node.arguments.required.map((arg) => this.stripNoCase(arg, strip, preserve));
            break;
          case "Block":
          case "InlineMath":
          case "DisplayMath":
            if (strip && node.case === "protect") {
              if (preserve) {
                node.case = "preserve";
              } else {
                delete node.case;
              }
            }
            node.value.map((v) => this.stripNoCase(v, strip || node.case === "protect", preserve));
            break;
          case "Field":
            if (Array.isArray(node.value))
              node.value.forEach((v) => this.stripNoCase(v, strip, preserve));
            break;
        }
      }
      isVerbatimField(name) {
        return !!this.options.verbatimFields.find((p) => typeof p === "string" ? name === p : name.match(p));
      }
      clean_field(node) {
        this.startCleaning(node.name);
        this.stripNoCase(node, !this.options.caseProtection || this.isVerbatimField(node.name), this.options.sentenceCase.length === 0);
        if (Array.isArray(node.value))
          this.condense(node);
        return node;
      }
      clean_script(node) {
        let m, value, singlechar;
        if (singlechar = unicode2latex_1.latex[node.source])
          return this.text(singlechar);
        if ((m = node.source.match(/^([\^_])([^{}]+)$/)) && ((singlechar = unicode2latex_1.latex[`${m[1]}${m[2]}`]) || (singlechar = unicode2latex_1.latex[`${m[1]}{${m[2]}}`])))
          return this.text(singlechar);
        if ((m = node.source.match(/^([\^_])\{([^{}]+)\}$/)) && ((singlechar = unicode2latex_1.latex[`${m[1]}${m[2]}`]) || (singlechar = unicode2latex_1.latex[`${m[1]}{${m[2]}}`])))
          return this.text(singlechar);
        const cmd = node.kind === "SuperscriptCommand" ? "^" : "_";
        if (typeof node.value === "string" && (singlechar = unicode2latex_1.latex[`${cmd}${node.value}`] || unicode2latex_1.latex[`${cmd}{${node.value}}`])) {
          return this.text(singlechar);
        }
        if (typeof node.value === "string") {
          value = [this.text(node.value)];
        } else if (!Array.isArray(node.value)) {
          value = [node.value];
        } else {
          value = node.value;
        }
        const mode = node.kind === "SuperscriptCommand" ? "sup" : "sub";
        return this.clean({
          kind: "Block",
          markup: { [mode]: true },
          value
        });
      }
      clean_environment(node) {
        this.condense(node);
        return node;
      }
      needsProtection(word) {
        return !word.match(preserveCase.hasUpper) && !!word.match(preserveCase.hasLower);
      }
      clean_block(node) {
        var _a;
        this.condense(node);
        if (this.options.caseProtection !== "strict" && ((_a = this.cleaning) === null || _a === void 0 ? void 0 : _a.type) === "title" && node.case === "protect") {
          let preserve = true;
          for (const child of node.value) {
            if (child.kind === "Text") {
              const value = child.value.trim();
              preserve = !value.match(preserveCase.isCaseSensitive) || !value.split(/\s+/).find((word) => this.needsProtection(word));
            } else {
              preserve = false;
            }
            if (!preserve)
              break;
          }
          if (preserve)
            node.case = "preserve";
        }
        if (node.kind === "Block") {
          for (const [markup, on] of Object.entries(node.markup)) {
            if (!on)
              delete node.markup[markup];
          }
        }
        return node;
      }
      clean_diacritic(node) {
        const char = node.dotless ? `\\${node.character}` : node.character;
        let unicode = unicode2latex_1.latex[`\\${node.mark}{${char}}`] || unicode2latex_1.latex[`\\${node.mark}${char}`] || unicode2latex_1.latex[`{\\${node.mark} ${char}}`] || unicode2latex_1.latex[`{\\${node.mark}${char}}`] || unicode2latex_1.latex[`\\${node.mark} ${char}`];
        if (!unicode && !node.dotless && node.character.length === 1 && unicode2latex_1.diacritics.tounicode[node.mark])
          unicode = node.character + unicode2latex_1.diacritics.tounicode[node.mark];
        if (!unicode && !this.in_preamble)
          return this.error(new TeXError(`Unhandled \\${node.mark}{${char}}`, node, this.chunk));
        return this.text(unicode);
      }
      clean_symbol(node) {
        if (node.command === "\\")
          return this.text("\n");
        return this.text(unicode2latex_1.latex[`\\${node.command}`] || node.command);
      }
      first_text_block(node) {
        if (!node)
          return null;
        if (node.kind === "Block") {
          for (const child of node.value) {
            switch (child.kind) {
              case "Text":
                return child.value ? node : null;
              case "Block":
                const candidate = this.first_text_block(child);
                if (candidate)
                  return candidate;
                break;
              default:
                return null;
            }
          }
        } else {
          return null;
        }
      }
      clean_command(node) {
        var _a;
        let arg, unicode;
        if (unicode = unicode2latex_1.latex[node.source])
          return this.text(unicode);
        switch (node.command) {
          case "newcommand":
            if (((_a = node.arguments) === null || _a === void 0 ? void 0 : _a.required.length) === 2 && node.arguments.required[0].kind === "Block" && node.arguments.required[0].value.length === 1 && node.arguments.required[0].value[0].kind === "RegularCommand" && node.arguments.required[1].kind === "Block") {
              this.newcommands[node.arguments.required[0].value[0].command] = node.arguments.required[1].value;
              return this.text();
            }
            break;
          case "item":
            return { kind: "Markup", value: "<li>", source: node.source };
          case "frac":
            if (arg = this.argument(node, 2)) {
              if (arg[0].kind === "Text" && arg[1].kind === "Text" && (unicode = unicode2latex_1.latex[`\\frac{${arg[0].value}}{${arg[1].value}}`]))
                return this.text(unicode);
              return this.clean({
                kind: "Block",
                case: "protect",
                markup: {},
                value: [
                  { kind: "Block", markup: { sup: true }, value: [arg[0]] },
                  this.text("\u2044"),
                  { kind: "Block", markup: { sub: true }, value: [arg[1]] }
                ]
              });
            }
            break;
          case "vspace":
          case "vphantom":
          case "path":
          case "aftergroup":
          case "ignorespaces":
          case "relax":
          case "noopsort":
          case "ifdefined":
          case "DeclarePrefChars":
          case "else":
          case "fi":
          case "makeatletter":
            return this.text();
          case "ElsevierGlyph":
            if (arg = this.argument(node, "Text")) {
              if (unicode = unicode2latex_1.latex[`\\${node.command}{${arg}}`])
                return this.text(unicode);
              return this.text(String.fromCharCode(parseInt(arg, 16)));
            }
            break;
          case "chsf":
            if (this.argument(node, "none"))
              return this.text();
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "enquote":
          case "mkbibquote":
          case "bibstring":
          case "cite":
          case "textsc":
          case "textbf":
          case "texttt":
          case "mkbibbold":
          case "section":
          case "subsection":
          case "subsubsection":
          case "subsubsubsection":
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "textsuperscript":
          case "sp":
            if ((arg = this.argument(node, "Text")) && (unicode = unicode2latex_1.latex[`^{${arg}}`]))
              return this.text(unicode);
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "textsubscript":
          case "sb":
            if ((arg = this.argument(node, "Text")) && (unicode = unicode2latex_1.latex[`_{${arg}}`]))
              return this.text(unicode);
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "mkbibitalic":
          case "mkbibemph":
          case "textit":
          case "emph":
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            if (arg = this.argument(node, "Text"))
              return this.clean({ kind: "Block", markup: { italics: true }, value: [this.text(arg)] });
            break;
          case "bibcyr":
            if (this.argument(node, "none"))
              return this.text();
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "hspace":
          case "mathrm":
          case "textrm":
          case "ocirc":
          case "mbox":
            if (arg = this.argument(node, "text")) {
              if (node.command === "mbox" && !arg)
                return this.text("\u200B");
              unicode = unicode2latex_1.latex[`\\${node.command}{${arg}}`];
              return this.text(unicode || (node.command === "hspace" ? " " : arg));
            } else if (!node.arguments.required.length) {
              return node.command === "mbox" ? this.text("\u200B") : this.text();
            } else if (arg = this.argument(node, "Block")) {
              return this.clean(arg);
            }
            break;
          case "href":
            node.arguments.required = node.arguments.required.map((a) => this.clean(a));
            return node;
          case "url":
            if (arg = this.argument(node, "Text"))
              return this.text(arg);
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "sl":
          case "em":
          case "it":
          case "itshape":
          case "bf":
          case "bfseries":
          case "sc":
          case "scshape":
          case "tt":
          case "rm":
          case "sf":
          case "verb":
            return this.text();
          case "left":
          case "right":
            return this.text();
          case "par":
          case "\\":
            return node;
          case "cyr":
            if (this.argument(node, "none"))
              return this.text();
            break;
          case "polhk":
            if (unicode = this.argument(node, "text")) {
              if (unicode.length === 1)
                return this.text(`${unicode}\u0328`);
            }
            if (this.argument(node, "none"))
              return this.text("\u0328");
            break;
          default:
            if (node.kind === "RegularCommand" && this.newcommands[node.command]) {
              return this.clean({
                kind: "Block",
                markup: {},
                value: JSON.parse(JSON.stringify(this.newcommands[node.command]))
              });
            }
            if (unicode2latex_1.diacritics.tounicode[node.command]) {
              node.arguments.required = this.clean(node.arguments.required);
              let block;
              if (node.arguments.required.length === 1 && node.arguments.required[0].kind === "Text") {
                block = {
                  kind: "Block",
                  markup: {},
                  value: [{
                    kind: "DiacriticCommand",
                    mark: node.command,
                    character: node.arguments.required[0].value,
                    dotless: false,
                    loc: node.arguments.required[0].loc,
                    source: node.arguments.required[0].source
                  }]
                };
                return this.clean(block);
              } else if (block = this.first_text_block(node.arguments.required[0])) {
                let fixed = false;
                block.value = block.value.reduce((value, child) => {
                  if (!fixed && child.kind === "Text") {
                    fixed = true;
                    value.push({ kind: "DiacriticCommand", mark: node.command, character: child.value[0] });
                    value.push(Object.assign(Object.assign({}, child), { value: child.value.substring(1) }));
                  } else {
                    value.push(child);
                  }
                  return value;
                }, []);
                return this.clean({
                  kind: "Block",
                  markup: {},
                  value: node.arguments.required
                });
              } else {
                if (node.command === "overline")
                  return this.text(" ");
                return this.clean({
                  kind: "Block",
                  markup: {},
                  value: [this.text(` ${unicode2latex_1.diacritics.tounicode[node.command]}`)].concat(node.arguments.required)
                });
              }
            }
            if (unicode = unicode2latex_1.latex[node.source] || unicode2latex_1.latex[`${node.source}{}`])
              return this.text(unicode);
            if ((unicode = unicode2latex_1.latex[`\\${node.command}`] || unicode2latex_1.latex[`\\${node.command}{}`]) && this.argument(node, "none"))
              return this.text(unicode);
            if ((arg = this.argument(node, "Text")) && (unicode = unicode2latex_1.latex[`\\${node.command}{${arg}}`]))
              return this.text(unicode);
            break;
        }
        if (this.in_preamble)
          return this.text(node.source);
        if (this.options.unknownCommandHandler) {
          return this.options.unknownCommandHandler.call(this, node);
        } else if (this.options.unknownCommandHandler === false) {
          return this.text();
        } else {
          return this.error(new TeXError(`Unhandled command: ${node.command}${this.show(node)}`, node, this.chunk));
        }
      }
      preserveCase(word) {
        var _a, _b;
        if (!word.trim())
          return false;
        if (!word.match(preserveCase.hasAlphaNum))
          return true;
        word = word.replace(/[/’'”:()]/g, "");
        if (word === "I")
          return true;
        if (word.length === 1)
          return false;
        if (word.replace(preserveCase.notCaseSensitive) === "")
          return false;
        if (word.match(preserveCase.leadingCap) && ((_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.text) === null || _b === void 0 ? void 0 : _b.length) === 0)
          return false;
        if (word.match(preserveCase.allCaps))
          return true;
        if (word.length > 1 && word.match(preserveCase.joined))
          return false;
        if (word.match(preserveCase.hasUpper))
          return true;
        if (word.match(preserveCase.isNumber))
          return true;
        return false;
      }
      convert(node) {
        if (Array.isArray(node))
          return node.map((child) => this.convert(child));
        if (this.options.raw && this.field)
          node = this.text(node.source);
        switch (node.kind) {
          case "Markup":
            if (this.field)
              this.field.text += node.value;
            break;
          case "BracedComment":
          case "LineComment":
            this.comments.push(node.value);
            break;
          case "Entry":
            this.convert_entry(node);
            break;
          case "Number":
            this.convert_number(node);
            break;
          case "Text":
            this.convert_text(node);
            break;
          case "Block":
          case "InlineMath":
          case "DisplayMath":
            const start = this.field ? this.field.text.length : null;
            const preserve = typeof start === "number" && this.field.preserveRanges;
            this.convert_block(node);
            if (preserve && (node.case || node.kind.endsWith("Math")))
              this.preserve(start, this.field.text.length);
            break;
          case "Environment":
            this.convert_environment(node);
            break;
          case "PreambleExpression":
            this.preamble.push(node.value.map((preamble) => preamble.source).join("\n\n"));
            break;
          case "StringDeclaration":
            break;
          default:
            if (node.kind === "RegularCommand" && node.command === "href") {
              this.convert_href(node);
            } else if (node.kind === "RegularCommand" && node.command === "par") {
              this.field.text += this.field.html ? "<p>\n" : " ";
            } else if (node.kind === "RegularCommand" && node.command === "\\") {
              this.field.text += this.field.html ? "<b>\n" : " ";
            } else {
              return this.error(new ParserError(`no converter for ${node.kind}: ${this.show(node)}`, node));
            }
        }
      }
      splitOnce(s, sep, fromEnd = false) {
        const split = fromEnd ? s.lastIndexOf(sep) : s.indexOf(sep);
        return split < 0 ? [s, ""] : [s.substr(0, split), s.substr(split + 1)];
      }
      parseName(name) {
        let parsed = null;
        const parts = name.split(marker.comma);
        if (parts.length && !parts.find((p) => !p.match(/^[a-z]+(-i)?=/i))) {
          for (const part of parts) {
            parsed = parsed || {};
            const [attr, value] = this.splitOnce(part.replace(marker.re.space, ""), "=").map((v) => v.trim());
            if (!value) {
              parsed = null;
              break;
            }
            switch (attr.toLowerCase()) {
              case "family":
                parsed.lastName = value;
                break;
              case "given-i":
                parsed.initial = value;
                break;
              case "given":
                parsed.firstName = value;
                break;
              case "prefix":
                parsed.prefix = value;
                break;
              case "suffix":
                parsed.suffix = value;
                break;
              case "useprefix":
                parsed.useprefix = value.toLowerCase() === "true";
                break;
              case "juniorcomma":
                parsed.useprefix = value.toLowerCase() === "true";
                break;
              default:
                parsed[attr.toLowerCase()] = value;
                break;
            }
          }
        }
        const prefix = /(.+?)\s+(vere|von|van den|van der|van|de|del|della|der|di|da|pietro|vanden|du|st.|st|la|lo|ter|bin|ibn|te|ten|op|ben|al)\s+(.+)/;
        let m;
        switch (parsed ? 0 : parts.length) {
          case 0:
            break;
          case 1:
            if (marker.re.literalName.test(parts[0])) {
              parsed = { literal: parts[0] };
            } else if (m = parts[0].replace(marker.re.space, " ").match(prefix)) {
              parsed = {
                firstName: m[1],
                prefix: m[2],
                lastName: m[3]
              };
            } else {
              const [firstName, lastName] = this.splitOnce(parts[0], marker.space, true);
              if (lastName) {
                parsed = { firstName, lastName };
              } else {
                parsed = { lastName: firstName };
              }
            }
            break;
          case 2:
            parsed = {
              lastName: parts[0],
              firstName: parts[1]
            };
            break;
          default:
            parsed = {
              lastName: parts[0],
              suffix: parts[1],
              firstName: parts.slice(2).join(marker.comma)
            };
        }
        for (const [k, v] of Object.entries(parsed)) {
          if (typeof v !== "string")
            continue;
          parsed[k] = marker.clean(v).trim();
        }
        return parsed;
      }
      convert_entry(node) {
        this.entry = {
          key: node.id,
          type: node.type,
          fields: {},
          creators: {},
          crossref: {
            inherited: [],
            donated: []
          }
        };
        this.entries.push(this.entry);
        const order = ["langid", "hyphenation", "language"];
        node.fields.sort((a, b) => {
          const ia = order.indexOf(a.name);
          const ib = order.indexOf(b.name);
          if (ia === -1 && ib === -1)
            return a.name.localeCompare(b.name);
          if (ia === -1)
            return 1;
          if (ib === -1)
            return -1;
          return ia - ib;
        });
        let sentenceCase = !!this.options.sentenceCase.length;
        for (const field of node.fields) {
          if (field.kind !== "Field")
            return this.error(new ParserError(`Expected Field, got ${field.kind}`, node));
          this.startCleaning(field.name);
          this.field = {
            name: field.name,
            text: "",
            level: 0,
            words: {
              upper: 0,
              lower: 0,
              other: 0
            },
            preserveRanges: sentenceCase && exports2.fields.title.includes(field.name) ? [] : null,
            html: this.options.htmlFields.includes(field.name)
          };
          this.entry.fields[this.field.name] = this.entry.fields[this.field.name] || [];
          if (field.value.kind === "Number") {
            this.entry.fields[this.field.name].push(field.value.value);
            this.field = null;
            continue;
          }
          this.convert(field.value);
          this.field.text = this.field.text.trim();
          this.field.text = this.field.text.replace(/<\/([a-z])><\1>/g, "");
          this.field.text = this.field.text.replace(/<([a-z])>(\s*)<\/\1>/g, "$1");
          if (!this.field.text)
            continue;
          switch (this.field.name) {
            case "langid":
            case "hyphenation":
              sentenceCase = sentenceCase && this.options.sentenceCase.includes(this.field.text.toLowerCase());
              break;
            case "language":
              sentenceCase = sentenceCase && !!this.field.text.toLowerCase().trim().split(/\s*,\s*/).find((lang) => this.options.sentenceCase.includes(lang));
              break;
          }
          if (this.field.name.match(/^(keywords?|groups)$/)) {
            for (let text of this.field.text.split(marker.comma)) {
              text = text.trim();
              if (text)
                this.entry.fields[this.field.name].push(text);
            }
          } else if (this.cleaning.type === "creator") {
            if (!this.entry.creators[this.field.name])
              this.entry.creators[this.field.name] = [];
            if (this.field.text.includes(`${marker.comma}${marker.and}`)) {
              this.field.text = this.field.text.replace(new RegExp(`${marker.comma}${marker.and}`, "g"), marker.and).replace(new RegExp(marker.comma), marker.and);
            }
            for (const creator of this.field.text.split(marker.and)) {
              this.entry.fields[this.field.name].push(marker.clean(creator));
              this.entry.creators[this.field.name].push(this.parseName(creator));
            }
          } else if (exports2.fields.unabbrev.includes(field.name)) {
            this.entry.fields[this.field.name].push((this.options.unabbreviate[this.field.text] || this.field.text).normalize("NFC"));
          } else {
            if (this.field.preserveRanges) {
              if (this.options.guessAlreadySentenceCased && Math.max(this.field.words.upper, this.field.words.lower) > this.field.words.other + Math.min(this.field.words.upper, this.field.words.lower)) {
                this.preserve(null, null);
              } else {
                const txt = this.field.text.replace(preserveCase.markup, (markup) => marker.markup.repeat(markup.length));
                let match;
                preserveCase.sentenceStart.lastIndex = 0;
                while (match = preserveCase.sentenceStart.exec(txt)) {
                  if (match.index > 2 && txt.substr(0, match.index + 1).match(preserveCase.acronym))
                    continue;
                  this.preserve(match.index, match.index + match[0].length);
                }
                preserveCase.quoted.lastIndex = 0;
                while (match = preserveCase.quoted.exec(this.field.text)) {
                  this.preserve(match.index, match.index + match[0].length);
                }
              }
            }
            this.entry.fields[this.field.name].push(this.convertToSentenceCase(this.field.text).normalize("NFC"));
          }
        }
        this.field = null;
      }
      convertToSentenceCase(text) {
        if (!this.field.preserveRanges)
          return text;
        const sentenceCased = (0, sentence_case_2.restore)((0, sentence_case_2.toSentenceCase)(text), text, this.field.preserveRanges);
        if (text !== sentenceCased)
          this.entry.sentenceCased = true;
        return sentenceCased;
      }
      convert_number(node) {
        this.field.text += `${node.value}`;
      }
      convert_text(node) {
        if (node.mode === "verbatim") {
          this.field.text += node.value.trim();
          return;
        }
        for (const word of node.value.split(/\b/)) {
          if (word.match(preserveCase.allLower)) {
            this.field.words.lower++;
          } else if (word.match(preserveCase.allCaps)) {
            this.field.words.upper++;
          } else if (word.match(preserveCase.hasAlpha)) {
            this.field.words.other++;
          }
        }
        if (this.field.level === 0 && this.cleaning.type === "creator") {
          this.field.text += node.value.replace(/\s+and\s+/ig, marker.and).replace(/\s*,\s*/g, marker.comma).replace(/\s+/g, marker.space);
          return;
        }
        if (this.field.level === 0 && this.field.name.match(/^(keywords?|groups)$/)) {
          this.field.text += node.value.replace(/\s*[;,]\s*/g, marker.comma);
          return;
        }
        if (this.field.html) {
          this.field.text += node.value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        } else if (this.field.preserveRanges) {
          const words = node.value.split(/(\s+)/);
          for (const word of words) {
            const start = this.field.text.length;
            this.field.text += word;
            if (this.preserveCase(word))
              this.preserve(start, this.field.text.length);
          }
        } else {
          this.field.text += node.value;
        }
      }
      convert_environment(node) {
        const [open, close] = {
          enumerate: ["<ol>", "</ol>"],
          itemize: ["<ul>", "</ul>"],
          quotation: ["<blockquote>", "</blockquote>"]
        }[node.env] || ["", ""];
        if (!open)
          this.error(new TeXError(`Unhandled \\${node.env}{...}`, node, this.chunk));
        this.field.text += open;
        this.convert_block(Object.assign(Object.assign({}, node), { kind: "Block", markup: {} }));
        this.field.text += close;
      }
      convert_href(node) {
        this.field.text += '<a href="';
        this.convert(node.arguments.required[0]);
        this.field.text += '">';
        this.convert(node.arguments.required[1]);
        this.field.text += "</a>";
      }
      convert_block(node) {
        const start = this.field.text.length;
        let prefix = "";
        let postfix = "";
        if (this.options.caseProtection !== "strict" && this.cleaning.type === "other")
          delete node.case;
        if (this.cleaning.type === "creator" && node.case === "protect") {
          prefix += marker.literal;
          postfix = marker.literal + postfix;
          delete node.case;
        }
        if (node.case === "protect") {
          prefix += this.options.markup.caseProtect.open;
          postfix = this.options.markup.caseProtect.close + postfix;
        }
        if (node.kind === "Block") {
          for (const markup of Object.keys(node.markup)) {
            if (!this.options.markup[markup]) {
              this.error(new ParserError(`markup: ${markup}`, node));
              return;
            }
            prefix += this.options.markup[markup].open;
            postfix = `${this.options.markup[markup].close}${postfix}`;
          }
        }
        const end = {
          withoutPrefix: this.field.text.length,
          withPrefix: this.field.text.length + prefix.length
        };
        this.field.text += prefix;
        this.field.level++;
        this.convert(node.value);
        this.field.level--;
        const added = this.field.text.substring(end.withPrefix);
        const added_text = added.replace(/<\/?[^>]+>/g, "");
        const needsProtection = added_text && (this.options.caseProtection === "strict" && added_text.match(preserveCase.isCaseSensitive) || this.options.caseProtection === "as-needed" && added_text.split(/\s+/).find((word) => this.needsProtection(word)));
        if (!added) {
          this.field.text = this.field.text.substring(0, end.withoutPrefix);
        } else if (this.field.preserveRanges && prefix === this.options.markup.caseProtect.open && !needsProtection) {
          this.field.text = this.field.text.substring(0, end.withoutPrefix) + added;
          this.field.preserveRanges = this.field.preserveRanges.filter((range) => range.start < end.withoutPrefix);
        } else {
          this.field.text += postfix;
        }
        this.field.text = this.field.text.replace(/<(sup|sub)>([^<>]+)<\/\1>$/i, (m, mode, chars) => {
          const cmd = mode === "sup" ? "^" : "_";
          let script = "";
          for (const char of chars) {
            const unicode = unicode2latex_1.latex[`${cmd}${char}`] || unicode2latex_1.latex[`${cmd}{${char}}`];
            script += unicode ? unicode : `<${mode}>${char}</${mode}>`;
          }
          script = script.replace(new RegExp(`</${mode}><${mode}>`, "g"), "");
          return script.length < m.length ? script : m;
        });
        if (node.case && this.field.preserveRanges)
          this.preserve(start, this.field.text.length);
      }
    };
    function parse2(input, options = {}) {
      const parser = new Parser(options);
      return parser.parse(input);
    }
    exports2.parse = parse2;
    function ast(input, options = {}, clean = true) {
      const parser = new Parser(options);
      return parser.ast(input, clean);
    }
    exports2.ast = ast;
    exports2.promises = {
      async parse(input, options = {}) {
        const parser = new Parser(options);
        return await parser.parseAsync(input);
      }
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ReferenceMap
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// src/settings.tsx
var import_obsidian4 = require("obsidian");

// src/lang/helpers.ts
var import_obsidian3 = require("obsidian");

// src/utils.ts
var import_obsidian = require("obsidian");
var import_path = __toESM(require("path"));
var import_fs = __toESM(require("fs"));
var import_doi_regex = __toESM(require_doi_regex());
var import_download = __toESM(require_download());
var import_http = require("http");
var import_https = __toESM(require("https"));

// src/constants.ts
var METADATA_COPY_TEMPLATE_ONE = `{{bibtex}}`;
var METADATA_COPY_TEMPLATE_TWO = `# {{title}}
**{{authors}}**
*{{journal}}, {{year}}*
>[!abstract] Abstract
>{{abstract}}
`;
var METADATA_COPY_TEMPLATE_THREE = `[[{{title}}-{{author}} {{year}}]]`;
var METADATA_MODAL_INSERT_TEMPLATE = `{{title}}
{{authors}}
{{journal}}, {{year}}
{{abstract}}
`;
var METADATA_MODAL_CREATE_TEMPLATE = `{{title}}
{{authors}}
{{journal}}, {{year}}
{{abstract}}
{{doi}}
[External Link]({{url}})
{{pdfurl}}
`;
var DEFAULT_ZOTERO_PORT = "23119";
var DEFAULT_HEADERS = {
  "Content-Type": "application/json",
  "User-Agent": "obsidian/zotero",
  Accept: "application/json",
  Connection: "keep-alive"
};
var DEFAULT_ZOTERO_GROUPS = [];
var DEFAULT_SETTINGS = {
  hideButtonsOnHover: false,
  influentialCount: false,
  showAbstract: false,
  showAuthors: false,
  showInvalidItems: false,
  filterRedundantReferences: false,
  searchTitle: false,
  searchLimit: 3,
  searchFrontMatter: false,
  searchFrontMatterKey: "keywords",
  searchFrontMatterLimit: 3,
  searchCiteKey: false,
  pullFromZotero: true,
  zoteroGroups: DEFAULT_ZOTERO_GROUPS,
  zoteroPort: DEFAULT_ZOTERO_PORT,
  searchCiteKeyPath: "",
  autoUpdateCitekeyFile: true,
  linkCiteKey: false,
  findZoteroCiteKeyFromID: false,
  findCiteKeyFromLinksWithoutPrefix: false,
  enableReferenceSorting: false,
  sortByReference: "year",
  sortOrderReference: "desc",
  enableIndexSorting: false,
  sortByIndex: "year",
  sortOrderIndex: "desc",
  modalSearchLimit: 10,
  fileNameFormat: "{{title}}-{{author}} {{year}}",
  folder: "",
  modalCreateTemplate: METADATA_MODAL_CREATE_TEMPLATE,
  modalInsertTemplate: METADATA_MODAL_INSERT_TEMPLATE,
  formatMetadataCopyOne: true,
  formatMetadataCopyTwo: true,
  formatMetadataCopyThree: false,
  metadataCopyTemplateOne: METADATA_COPY_TEMPLATE_ONE,
  metadataCopyTemplateTwo: METADATA_COPY_TEMPLATE_TWO,
  metadataCopyTemplateThree: METADATA_COPY_TEMPLATE_THREE,
  metadataCopyOneBatch: false,
  metadataCopyTwoBatch: false,
  metadataCopyThreeBatch: true,
  debugMode: false
};
var DEFAULT_LIBRARY = {
  active: false,
  adapter: "",
  libraryData: null,
  mtime: 0
};
var SEMANTIC_FIELDS = [
  "abstract",
  "authors",
  "citationCount",
  "externalIds",
  "fieldsOfStudy",
  "influentialCitationCount",
  "isOpenAccess",
  "openAccessPdf",
  "journal",
  "paperId",
  "publicationDate",
  "publicationTypes",
  "referenceCount",
  "title",
  "url",
  "venue",
  "year",
  "citationStyles"
];
var SEARCH_PARAMETERS = [
  "paperId",
  "externalIds",
  "url",
  "title",
  "abstract",
  "venue",
  "year",
  "referenceCount",
  "citationCount",
  "influentialCitationCount",
  "isOpenAccess",
  "openAccessPdf",
  "fieldsOfStudy",
  "publicationTypes",
  "publicationDate",
  "journal",
  "citationStyles",
  "authors"
];
var SEMANTICSCHOLAR_API_URL = "https://api.semanticscholar.org/graph/v1";
var SEMANTICSCHOLAR_URL = "https://www.semanticscholar.org";
var COMMON_WORDS = [
  "a",
  "able",
  "about",
  "across",
  "after",
  "all",
  "almost",
  "also",
  "am",
  "among",
  "an",
  "and",
  "any",
  "are",
  "as",
  "at",
  "be",
  "because",
  "been",
  "but",
  "by",
  "can",
  "cannot",
  "could",
  "dear",
  "did",
  "do",
  "does",
  "either",
  "else",
  "ever",
  "every",
  "for",
  "from",
  "get",
  "got",
  "had",
  "has",
  "have",
  "he",
  "her",
  "hers",
  "him",
  "his",
  "how",
  "however",
  "i",
  "if",
  "in",
  "into",
  "is",
  "it",
  "its",
  "just",
  "least",
  "let",
  "like",
  "likely",
  "may",
  "me",
  "might",
  "most",
  "must",
  "my",
  "neither",
  "no",
  "nor",
  "not",
  "of",
  "off",
  "often",
  "on",
  "only",
  "or",
  "other",
  "our",
  "own",
  "rather",
  "said",
  "say",
  "says",
  "she",
  "should",
  "since",
  "so",
  "some"
];
var PUNCTUATION = [
  "!",
  '"',
  "#",
  "$",
  "%",
  "&",
  "'",
  "(",
  ")",
  "*",
  "+",
  ",",
  "-",
  ".",
  "/",
  ":",
  ";",
  "<",
  "=",
  ">",
  "?",
  "@",
  "[",
  "\\",
  "]",
  "^",
  "_",
  "`",
  "{",
  "|",
  "}",
  "~"
];
var NUMBERS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var EXCLUDE_FILE_NAMES = ["LICENSE", "README", "TEST", "UNTITLED"];
var VALID_S2AG_API_URLS = [
  "semanticscholar.org",
  "arxiv.org",
  "aclweb.org",
  "acm.org",
  "biorxiv.org"
];

// src/utils.ts
function getVaultRoot() {
  return app.vault.adapter.getBasePath();
}
var fragWithHTML = (html) => createFragment((frag) => frag.createDiv().innerHTML = html);
var errorlog = (data) => {
  console.error({ plugin: "Zotero Annotations", ...data });
};
var isEmpty = (obj) => {
  return Object.keys(obj).length === 0;
};
var resolvePath = function(rawPath) {
  const vaultRoot = this.app.vault.adapter instanceof import_obsidian.FileSystemAdapter ? this.app.vault.adapter.getBasePath() : "/";
  return import_path.default.normalize(import_path.default.resolve(vaultRoot, rawPath));
};
var getPaperIds = (content) => {
  const modContent = content.replaceAll("](", " ");
  const output = [];
  const arxivRegex = /arXiv:\s*(\d{4}\.\d{4,5})/gi;
  const arXivMatches = modContent.matchAll(arxivRegex);
  const corpusRegex = /CorpusId:\s*(\d{4,})/gi;
  const corpusMatches = modContent.matchAll(corpusRegex);
  const magRegex = /MAG:\s*(\d{4,})/gi;
  const magMatches = modContent.matchAll(magRegex);
  const pmidRegex = /PMID:\s*(\d{4,})/gi;
  const pmidMatches = modContent.matchAll(pmidRegex);
  const pmcidRegex = /PMCID:\s*([a-zA-Z]*\d{4,})/gi;
  const pmcidMatches = modContent.matchAll(pmcidRegex);
  const urlRegex = /URL:\s*(http[s]?:.[^\s]+)/gi;
  const urlMatches = modContent.matchAll(urlRegex);
  const doi_matches = modContent.match((0, import_doi_regex.default)());
  if (arXivMatches) {
    for (const match of arXivMatches) {
      output.push(`arXiv:${match[1]}`);
    }
  }
  if (corpusMatches) {
    for (const match of corpusMatches) {
      output.push(`CorpusId:${match[1]}`);
    }
  }
  if (magMatches) {
    for (const match of magMatches) {
      output.push(`MAG:${match[1]}`);
    }
  }
  if (pmidMatches) {
    for (const match of pmidMatches) {
      output.push(`PMID:${match[1]}`);
    }
  }
  if (pmcidMatches) {
    for (const match of pmcidMatches) {
      output.push(`PMCID:${match[1]}`);
    }
  }
  if (urlMatches) {
    for (const match of urlMatches) {
      if (VALID_S2AG_API_URLS.some((item) => match[1].includes(item))) {
        output.push(`URL:${match[1]}`);
      }
    }
  }
  if (doi_matches) {
    for (const match of doi_matches) {
      output.push(match.replace(/\)+$|\]+$|\*+$|_+$|`+$/, ""));
    }
  }
  return new Set(output.sort());
};
var sanitizeDOI = (dirtyDOI) => {
  const doi_matches = dirtyDOI.match((0, import_doi_regex.default)());
  if (doi_matches) {
    for (const match of doi_matches) {
      return match.replace(/\)+$|\]+$|\*+$|_+$|`+$/, "").replace(/\s+/g, "");
    }
  }
  return dirtyDOI.replace(/\s+/g, "");
};
var getCiteKeys = (libraryData, content, prefix) => {
  var _a;
  const citekeys = (_a = libraryData == null ? void 0 : libraryData.map((item) => prefix + item.id)) != null ? _a : [];
  const pattern = new RegExp(citekeys.join("|"), "g");
  const matches = content.match(pattern);
  const output = matches == null ? void 0 : matches.map((match) => match.startsWith("@") ? match.slice(1) : match);
  return new Set(output);
};
function copyElToClipboard(el) {
  require("electron").clipboard.writeText(el);
  new import_obsidian.Notice("Copied to clipboard");
}
function removeNullReferences(references) {
  const result = references.filter((element) => {
    if (element.paper.paperId !== null) {
      return true;
    }
    return false;
  });
  return result;
}
function extractKeywords(text) {
  const regex = new RegExp(`[${PUNCTUATION.join("")}]`, "gmi");
  const keywords = text.replace(regex, " ").replace(/\s\s+/g, " ").split(" ");
  const result = keywords.filter((element) => {
    if (!COMMON_WORDS.includes(element) && !PUNCTUATION.includes(element) && !NUMBERS.includes(element)) {
      return true;
    }
    return false;
  });
  return result;
}
var makeMetaData = (paper) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;
  const paperTitle = ((_a = paper.title) == null ? void 0 : _a.trim().replace(/[^\x20-\x7E]/g, "")) || "Could not recover Title";
  const author = ((_d = (_c = (_b = paper.authors) == null ? void 0 : _b[0]) == null ? void 0 : _c.name) == null ? void 0 : _d.trim()) || "Could not recover Author";
  const authors = ((_e = paper.authors) == null ? void 0 : _e.map((author2) => author2.name).join(", ")) || "Could not recover Authors";
  const year = ((_f = paper.year) == null ? void 0 : _f.toString().trim()) || "Could not recover Year";
  const journal = ((_h = (_g = paper.journal) == null ? void 0 : _g.name) == null ? void 0 : _h.trim()) || "Could not recover Journal";
  const volume = ((_j = (_i = paper.journal) == null ? void 0 : _i.volume) == null ? void 0 : _j.trim()) || "Could not recover Volume";
  const pages = ((_l = (_k = paper.journal) == null ? void 0 : _k.pages) == null ? void 0 : _l.trim()) || "Could not recover Pages";
  const abstract = ((_m = paper.abstract) == null ? void 0 : _m.trim()) || "No abstract available";
  const bibTex = ((_n = paper.citationStyles) == null ? void 0 : _n.bibtex) || "No BibTex available";
  const referenceCount = ((_o = paper.referenceCount) == null ? void 0 : _o.toString()) || "0";
  const citationCount = ((_p = paper.citationCount) == null ? void 0 : _p.toString()) || "0";
  const influentialCount = ((_q = paper.influentialCitationCount) == null ? void 0 : _q.toString()) || "0";
  const openAccessPdfUrl = paper.isOpenAccess ? ((_r = paper.openAccessPdf) == null ? void 0 : _r.url) || "" : "";
  const paperURL = paper.url || "Could not recover URL";
  const doi = ((_s = paper.externalIds) == null ? void 0 : _s.DOI) || "Could not recover DOI";
  return {
    bibtex: bibTex,
    title: paperTitle,
    author,
    authors,
    year,
    journal,
    volume,
    pages,
    abstract,
    url: paperURL,
    pdfurl: openAccessPdfUrl,
    doi,
    referenceCount,
    citationCount,
    influentialCount
  };
};
var templateReplace = (template, data, id = "") => {
  if (id === "") {
    id = data.doi ? data.doi : "";
  }
  return template.replaceAll("{{id}}", id).replaceAll("{{bibtex}}", data.bibtex).replaceAll("{{title}}", data.title.replace(/[:\\\\/]/g, "")).replaceAll("{{author}}", data.author.replace(/[:\\\\/]/g, "")).replaceAll("{{authors}}", data.authors.replace(/[:\\\\/]/g, "")).replaceAll("{{year}}", data.year.replace(/[:\\\\/]/g, "")).replaceAll("{{journal}}", data.journal.replace(/[:\\\\/]/g, "")).replaceAll("{{volume}}", data.volume.replace(/[:\\\\/]/g, "")).replaceAll("{{pages}}", data.pages.replace(/[:\\\\/]/g, "")).replaceAll("{{abstract}}", data.abstract).replaceAll("{{url}}", data.url).replaceAll("{{pdfurl}}", data.pdfurl).replaceAll("{{doi}}", data.doi);
};
var setCiteKeyId = (paperId, citeLibrary) => {
  var _a, _b, _c, _d;
  if (citeLibrary.adapter === "csl-json") {
    const citeKey = (_b = (_a = citeLibrary.libraryData) == null ? void 0 : _a.find((item) => {
      var _a2, _b2, _c2;
      return ((_a2 = item == null ? void 0 : item.DOI) == null ? void 0 : _a2.toLowerCase()) === paperId.toLowerCase() || ((_b2 = item == null ? void 0 : item.DOI) == null ? void 0 : _b2.toLowerCase()) === `https://doi.org/${paperId.toLowerCase()}` || ((_c2 = item == null ? void 0 : item.URL) == null ? void 0 : _c2.toLowerCase()) === paperId.replace("URL:", "").toLowerCase();
    })) == null ? void 0 : _b.id;
    return citeKey ? "@" + citeKey : paperId;
  } else if (citeLibrary.adapter === "bibtex") {
    const citeKey = (_d = (_c = citeLibrary.libraryData) == null ? void 0 : _c.find((item) => {
      var _a2, _b2, _c2, _d2, _e, _f, _g, _h, _i;
      return ((_c2 = (_b2 = (_a2 = item.fields) == null ? void 0 : _a2.doi) == null ? void 0 : _b2[0]) == null ? void 0 : _c2.toLowerCase()) === paperId.toLowerCase() || ((_f = (_e = (_d2 = item.fields) == null ? void 0 : _d2.doi) == null ? void 0 : _e[0]) == null ? void 0 : _f.toLowerCase()) === `https://doi.org/${paperId.toLowerCase()}` || ((_i = (_h = (_g = item.fields) == null ? void 0 : _g.url) == null ? void 0 : _h[0]) == null ? void 0 : _i.toLowerCase()) === paperId.replace("URL:", "").toLowerCase();
    })) == null ? void 0 : _d.key;
    return citeKey ? "@" + citeKey : paperId;
  } else {
    return paperId;
  }
};
var getCiteKeyIds = (citeKeys, citeLibrary) => {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const citeKeysMap = [];
  let index = 1;
  if (citeKeys.size > 0) {
    for (const citeKey of citeKeys) {
      let entry;
      if (citeLibrary.adapter === "csl-json") {
        entry = (_a = citeLibrary.libraryData) == null ? void 0 : _a.find((item) => item.id === citeKey);
      } else if (citeLibrary.adapter === "bibtex") {
        entry = (_b = citeLibrary.libraryData) == null ? void 0 : _b.find((item) => item.key === citeKey);
      }
      let paperId = "@" + citeKey;
      if (entry == null ? void 0 : entry.DOI) {
        paperId = sanitizeDOI(entry == null ? void 0 : entry.DOI).toLowerCase();
      } else if (VALID_S2AG_API_URLS.some((item) => {
        var _a2;
        return (_a2 = entry == null ? void 0 : entry.URL) == null ? void 0 : _a2.includes(item);
      })) {
        paperId = `URL:${entry == null ? void 0 : entry.URL}`;
      } else if ((_d = (_c = entry == null ? void 0 : entry.fields) == null ? void 0 : _c.doi) == null ? void 0 : _d[0]) {
        paperId = sanitizeDOI((_f = (_e = entry == null ? void 0 : entry.fields) == null ? void 0 : _e.doi) == null ? void 0 : _f[0]).toLowerCase();
      } else if (VALID_S2AG_API_URLS.some((item) => {
        var _a2, _b2, _c2;
        return (_c2 = (_b2 = (_a2 = entry == null ? void 0 : entry.fields) == null ? void 0 : _a2.url) == null ? void 0 : _b2[0]) == null ? void 0 : _c2.includes(item);
      })) {
        paperId = `URL:${(_h = (_g = entry == null ? void 0 : entry.fields) == null ? void 0 : _g.url) == null ? void 0 : _h[0]}`;
      }
      citeKeysMap.push({
        citeKey: "@" + citeKey,
        location: index,
        paperId
      });
      index++;
    }
  }
  return citeKeysMap;
};
var dataSearch = (data, query) => {
  return data.filter((item) => SEARCH_PARAMETERS.some((parameter) => {
    var _a;
    if (parameter === "authors") {
      return item.authors.some((author) => {
        var _a2;
        return (_a2 = author.name) == null ? void 0 : _a2.toLowerCase().includes(query.toLowerCase());
      });
    } else {
      return (_a = item[parameter]) == null ? void 0 : _a.toString().toLowerCase().includes(query.toLowerCase());
    }
  }));
};
var dataSort = (data, sortProperty, sortOrder) => {
  return data.sort((a, b) => {
    const left = a[sortProperty];
    const right = b[sortProperty];
    if (sortOrder === "asc") {
      if (left === void 0)
        return 1;
      if (right === void 0)
        return -1;
      return left > right ? 1 : -1;
    } else {
      if (left === void 0)
        return -1;
      if (right === void 0)
        return 1;
      return left < right ? 1 : -1;
    }
  });
};
var indexSearch = (data, query) => {
  return data.filter((item) => SEARCH_PARAMETERS.some((parameter) => {
    var _a;
    if (parameter === "authors") {
      return item.paper.authors.some((author) => {
        var _a2;
        return (_a2 = author.name) == null ? void 0 : _a2.toLowerCase().includes(query.toLowerCase());
      });
    } else {
      return (_a = item.paper[parameter]) == null ? void 0 : _a.toString().toLowerCase().includes(query.toLowerCase());
    }
  }));
};
var indexSort = (data, sortProperty, sortOrder) => {
  return data.sort((a, b) => {
    const left = a.paper[sortProperty];
    const right = b.paper[sortProperty];
    if (sortOrder === "asc") {
      if (left === void 0)
        return 1;
      if (right === void 0)
        return -1;
      return left > right ? 1 : -1;
    } else {
      if (left === void 0)
        return -1;
      if (right === void 0)
        return 1;
      return left < right ? 1 : -1;
    }
  });
};
function makeFileName(metaData, fileNameFormat) {
  let output;
  if (fileNameFormat) {
    output = templateReplace(fileNameFormat, metaData);
  } else {
    output = metaData.title;
  }
  return replaceIllegalFileNameCharactersInString(output) + ".md";
}
function replaceIllegalFileNameCharactersInString(text) {
  return text.replace(/[\\,#%&{}/*<>$":@?.]/g, "").replace(/\s+/g, " ");
}
var PromiseCapability = class {
  constructor() {
    this.settled = false;
    this.promise = new Promise((resolve2, reject2) => {
      this.resolve = (data) => {
        resolve2(data);
        this.settled = true;
      };
      this.reject = (reason) => {
        reject2(reason);
        this.settled = true;
      };
    });
  }
};
function ensureDir(dir) {
  if (!import_fs.default.existsSync(dir)) {
    import_fs.default.mkdirSync(dir, { recursive: true });
  }
}
function getGlobal() {
  if (window == null ? void 0 : window.activeWindow)
    return activeWindow;
  if (window)
    return window;
  return global;
}
async function isZoteroRunning(port = DEFAULT_ZOTERO_PORT) {
  const p = (0, import_download.default)(`http://127.0.0.1:${port}/better-bibtex/cayw?probe=true`);
  const res = await Promise.race([
    p,
    new Promise((res2) => {
      getGlobal().setTimeout(() => {
        res2(null);
        p.destroy();
      }, 150);
    })
  ]);
  return (res == null ? void 0 : res.toString()) === "ready";
}
function applyGroupID(list, groupId) {
  return list.map((item) => {
    item.groupID = groupId;
    return item;
  });
}
async function getZBib(port = DEFAULT_ZOTERO_PORT, cacheDir, groupId, loadCached) {
  const isRunning = await isZoteroRunning(port);
  const cached = import_path.default.join(cacheDir, `zotero-library-${groupId}.json`);
  ensureDir(cacheDir);
  if (loadCached || !isRunning) {
    if (import_fs.default.existsSync(cached)) {
      return applyGroupID(JSON.parse(import_fs.default.readFileSync(cached).toString()), groupId);
    }
    if (!isRunning) {
      return null;
    }
  }
  const bib = await (0, import_download.default)(`http://127.0.0.1:${port}/better-bibtex/export/library?/${groupId}/library.json`);
  const str = bib.toString();
  import_fs.default.writeFileSync(cached, str);
  return applyGroupID(JSON.parse(str), groupId);
}
async function getZUserGroups(port = DEFAULT_ZOTERO_PORT) {
  if (!await isZoteroRunning(port))
    return [];
  return new Promise((res, rej) => {
    const body = JSON.stringify({
      jsonrpc: "2.0",
      method: "user.groups"
    });
    const postRequest = (0, import_http.request)({
      host: "127.0.0.1",
      port,
      path: "/better-bibtex/json-rpc",
      method: "POST",
      headers: {
        ...DEFAULT_HEADERS,
        "Content-Length": Buffer.byteLength(body)
      }
    }, (result) => {
      let output = "";
      result.setEncoding("utf8");
      result.on("data", (chunk) => output += chunk);
      result.on("error", (e) => rej(`Error connecting to Zotero: ${e}`));
      result.on("close", () => {
        rej(new Error("Error: cannot connect to Zotero"));
      });
      result.on("end", () => {
        try {
          res(JSON.parse(output).result);
        } catch (e) {
          rej(e);
        }
      });
    });
    postRequest.write(body);
    postRequest.end();
  });
}

// src/lang/locale/ar.ts
var ar_default = {};

// src/lang/locale/cz.ts
var cz_default = {};

// src/lang/locale/da.ts
var da_default = {};

// src/lang/locale/de.ts
var de_default = {};

// src/ui/icons.ts
var import_obsidian2 = require("obsidian");
function addIcons() {
  const width = 96;
  const height = 96;
  (0, import_obsidian2.addIcon)("ReferenceMapIconScroll", `<svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10 17v2a2 2 0 0 1-2 2v0a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v3h3"></path><path d="M22 17v2a2 2 0 0 1-2 2H8"></path><path d="M19 17V5a2 2 0 0 0-2-2H4"></path><path d="M22 17H10"></path></svg>`);
}
var clipBoard = `<svg
xmlns="http://www.w3.org/2000/svg"
width="16px"
height="16px"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
>
<path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />
<rect x="8" y="2" width="8" height="4" rx="1" ry="1" />
</svg>
`;
var papeClip = `<svg
xmlns="http://www.w3.org/2000/svg"
width="16px"
height="16px"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
stroke-width="2"
stroke-linecap="round"
stroke-linejoin="round"
>
<path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48" />
</svg>
`;
var clipboardData = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard-data" viewBox="0 0 16 16">
<path d="M4 11a1 1 0 1 1 2 0v1a1 1 0 1 1-2 0v-1zm6-4a1 1 0 1 1 2 0v5a1 1 0 1 1-2 0V7zM7 9a1 1 0 0 1 2 0v3a1 1 0 1 1-2 0V9z"/>
<path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
<path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
</svg>`;

// src/lang/locale/en.ts
var en_default = {
  SEE_DOCUMENTATION: "See Documentation",
  SEE_DOCUMENTATION_DESC: "For more information regarding the plugin see the <a href='https://github.com/anoopkcn/obsidian-reference-map/wiki'>Reference Map Wiki</a>.",
  GENERAL_SETTINGS: "General Settings",
  REFERENCE_MAP: "Reference Map",
  NO_REFERENCES_IN_FILE: "No reference ID's are found in the active document",
  REFRESH_VIEW: "Refresh Map",
  REFRESH_VIEW_DESC: "Settings changes will not affect the current view.<br>If you prefer to apply changes also to the current view, you can press this button",
  HIDE_SHOW_ABSTRACT: "Hide or Show Abstract",
  HIDE_SHOW_ABSTRACT_DESC: "Hide or show the abstract of a references in the respective card.<br><b>Toggle ON:</b> Abstract will be visible <br><b>Toggle OFF:</b> Abstract will be hidden",
  HIDE_SHOW_AUTHORS: "Hide or Show All Authors",
  HIDE_SHOW_AUTHORS_DESC: "Hide or show the authors of a references in the respective card.<br><b>Toggle ON:</b> All author names will be visible <br><b>Toggle OFF:</b> First author will be shown",
  HIDE_SHOW_BUTTONS_ON_HOVER: "Hide or Show Buttons on Hover",
  HIDE_SHOW_BUTTONS_ON_HOVER_DESC: "Hide or show the buttons under index/reference cards on hover.<br><b> Toggle ON: </b> Buttons will be visible on hover<br><b> Toggle OFF: </b> Buttons will always be visible",
  HIDE_SHOW_INFLUENTIAL_COUNT: "Hide or Show Influential Citation Count",
  HIDE_SHOW_INFLUENTIAL_COUNT_DESC: "Hide or show the influential citation count of references.<br><b> Toggle ON: </b> Influential count will be visible<br><b> Toggle OFF: </b> Influential count will be hidden",
  HIDE_SHOW_INVALID_ITEMS: "Hide or Show Invalid Items",
  HIDE_SHOW_INVALID_ITEMS_DESC: "Hide or show the invalid Index Cards in the reference map.<br><b> Toggle ON: </b> Invalid items will be visible with a notice<br><b> Toggle OFF: </b> Invalid items will be hidden",
  HIDE_SHOW_REDUNDANT_REFERENCES: "Hide or Show Redundant Cited or Citing Items",
  HIDE_SHOW_REDUNDANT_REFERENCES_DESC: "Hide or show references with no reference count and no citation count<br><b> Toggle ON: </b> Redundant references will be hidden<br><b> Toggle OFF: </b> Redundant references will be listed",
  SEARCH_TITLE: "Get References Using File Name",
  SEARCH_TITLE_DESC: "Find references also using the markdown note file name in addition to reference IDs.<br><b>Toggle ON:</b> Get using file name is enabled<br><b>Toggle OFF:</b> Get using file name disabled",
  SEARCH_LIMIT: "Get Limit",
  SEARCH_LIMIT_DESC: "Limit of the number of references shown in the map when <b>Get References</b> is enabled.",
  SEARCH_FRONT_MATTER: "Get References Using Frontmatter",
  SEARCH_FRONT_MATTER_DESC: "Find references also using the frontmatter of the markdown note file in addition to reference IDs.<br><b>Toggle ON:</b> Enable search using front matter<br><b>Toggle OFF:</b> Disable search using front matter",
  SEARCH_FRONT_MATTER_LIMIT: "Get Limit",
  SEARCH_FRONT_MATTER_LIMIT_DESC: "Limit of the number of references shown in the map when <b>Get Frontmatter</b> is enabled.",
  SEARCH_FRONT_MATTER_KEY: "Key in the Frontmatter",
  SEARCH_FRONT_MATTER_KEY_DESC: "The values of the key specified here will be used to search for references.",
  SEARCH_CITEKEY: "Get References Using <code>CiteKey</code>",
  SEARCH_CITEKEY_DESC: "Find references using the <code>@citekey</code> included in the markdown file in addition to reference IDs.<br>Make sure to give a <b>valid Library File Path</b> which is exported from reference manager<br><b>Toggle ON:</b> Enable citekey detection<br><b>Toggle OFF:</b> Disable citekey detection",
  SEARCH_CITEKEY_PATH: "Library File Path",
  SEARCH_CITEKEY_PATH_DESC: "Path to your CSL JSON file with <code>.json</code> extension or BibTex file with <code>.bib</code> extension.<br>Usually exported from reference manager such as Zotero or BibDesk.<br>Path must be relative to the vault's root. This option is redundant if <Code>Pull Bibliography From Zotero</code> is enabled.<br>",
  CITEKEY_PATH_ERROR: "The citation export file can't be found. Please check the path.<br>OR set <b>Pull Bibliography From Zotero</b> to TRUE and select a library.",
  AUTO_DETECT_UPDATE_TO_CITEKEY: "Auto Detect Updates to Library",
  AUTO_DETECT_UPDATE_TO_CITEKEY_DESC: "Auto detect changes to the Library and update the reference map.<br>You can also use <code>Refresh Map</code> in the Command Palette manually do the same<br><b>Toggle ON:</b> Enable auto detection changes in the Library<br><b>Toggle OFF:</b> Disable auto detection changes in the Library",
  ZOTERO_PULL: "Pull Bibliography From Zotero",
  ZOTERO_PULL_DESC: "Pull data from Zotero. <b>Zotero must have Better Bibtex plugin</b>.",
  CANNOT_CONNECT_TO_ZOTERO: "Cannot connect to Zotero",
  CANNOT_CONNECT_TO_ZOTERO_DESC: "Start Zotero and try again.",
  ZOTERO_PORT: "Zotero port",
  ZOTERO_PORT_DESC: "Use 24119 or specify a custom port if you have changed Zotero's default.",
  ZOTERO_LIBRARY_ID: "Select Libraries to Include",
  FIND_CITEKEY_WITHOUT_PREFIX: "Process CiteKeys Without <code>@</code> Prefix",
  FIND_CITEKEY_WITHOUT_PREFIX_DESC: "Find and process citekey WITHOUT <code>@</code> prefix.<br>This <b>does NOT disable</b> citekey detection with <code>@</code> prefix.<br><b>Toggle ON:</b> Find citekey without <code>@</code> prefix<br><b>Toggle OFF:</b> Do not find citekey without <code>@</code> prefix",
  CITEKEY_ZOTERO_LINK: "Hide or Show Link to Zotero Library",
  CITEKEY_ZOTERO_LINK_DESC: "Hide or Show the <code>@citekey</code> link in the index cards to show reference in Zotero library.<br><b>Toggle ON:</b> Show link in the index card<br><b>Toggle OFF:</b> Hide link in the index card",
  FIND_ZOTERO_CITEKEY_FROM_ID: "Find CiteKey from ID",
  FIND_ZOTERO_CITEKEY_FROM_ID_DESC: "Attempt to find citekey from ID. Check to see in the library if an entry with provided ID exists.<br> If so the <code>{{id}}</code> metadata field is substituted by <code>{{citekey}}</code>.<br><b>Toggle ON:</b> Find citekey from ID and set ID to citekey<br><b>Toggle OFF:</b> Do not lookup citekey from ID",
  ENABLE_SORTING_REFERENCE_CARDS: "Sort Reference Cards",
  ENABLE_SORTING_REFERENCE_CARDS_DESC: "Enable or Disable sorting of reference cards. <br><b>Toggle ON:</b> Sorting enabled<br><b>Toggle OFF:</b> Default sorting, newest to oldest reference",
  ENABLE_SORTING_INDEX_CARDS: "Sort Index Cards",
  ENABLE_SORTING_INDEX_CARDS_DESC: "Enable or Disable sorting of index cards.<br><b>Toggle ON:</b> Enable sorting of the Index cards<br><b>Toggle OFF:</b> Default, as it is retrieved from database",
  SORT_BY: "Sort By",
  SORT_BY_YEAR: "Year",
  SORT_BY_CITATION_COUNT: "Citation Count",
  SORT_BY_REFERENCE_COUNT: "Reference Count",
  SORT_BY_INFLUENTIAL_CITATION_COUNT: "Influential Citation Count",
  SORT_ORDER: "Sort Order",
  SORT_ORDER_ASC: "Ascending",
  SORT_ORDER_DESCE: "Descending",
  STANDARDIZE_BIBTEX: "Standardize BibTeX",
  STANDARDIZE_BIBTEX_DESC: "Standardize BibTeX of references in the map. This will format the BibTeX according to one of 14 possible entry types.<br><b>Toggle ON:</b> Standardize BibTeX keys<br><b>Toggle OFF:</b> Do not standardize BibTeX keys",
  FORMAT_METADATA_COPY_ONE: `${clipBoard} Metadata One Button`,
  FORMAT_METADATA_COPY_ONE_DESC: "Change the format of the metadata to be copied to the clipboard when the <b>Copy Metadata One button</b> is pressed.<br><b>Toggle ON:</b> Copy to clipboard button is shown <br><b>Toggle OFF:</b> Copy to clipboard button is hidden",
  FORMAT_METADATA_COPY_TWO: `${papeClip} Metadata Two Button`,
  FORMAT_METADATA_COPY_TWO_DESC: "Change the format of the metadata to be copied to the clipboard when the <b>Copy Metadata Two button</b> is pressed.<br><b>Toggle ON:</b> Copy to clipboard button is shown <br><b>Toggle OFF:</b> Copy to clipboard button is hidden",
  FORMAT_METADATA_COPY_THREE: `${clipboardData} Metadata Three Button`,
  FORMAT_METADATA_COPY_THREE_DESC: "Change the format of the metadata to be copied to the clipboard when the <b>Copy Metadata Three button</b> is pressed.<br><b>Toggle ON:</b> Copy to clipboard button is shown <br><b>Toggle OFF:</b> Copy to clipboard button is hidden",
  METADATA_COPY_TEMPLATE_ONE: `${clipBoard} Metadata One Template`,
  METADATA_COPY_TEMPLATE_ONE_DESC: "Template of the metadata to be copied to the clipboard.<br>Valid variables are <code>{{id}}</code>, <code>{{title}}</code>, <code>{{author}}</code>, <code>{{authors}}</code>, <code>{{journal}}</code>, <code>{{volume}}</code>, <code>{{pages}}</code>, <code>{{year}}</code>, <code>{{abstract}}</code>, <code>{{url}}</code>, <code>{{pdfurl}}</code>, <code>{{doi}}</code>, <code>{{bibtex}}</code>",
  METADATA_COPY_TEMPLATE_TWO: `${papeClip} Metadata Two Template`,
  METADATA_COPY_TEMPLATE_TWO_DESC: "Template of the metadata to be copied to the clipboard.<br>Valid variables are <code>{{id}}</code>, <code>{{title}}</code>, <code>{{author}}</code>, <code>{{authors}}</code>, <code>{{journal}}</code>, <code>{{volume}}</code>, <code>{{pages}}</code>, <code>{{year}}</code>, <code>{{abstract}}</code>, <code>{{url}}</code>, <code>{{pdfurl}}</code>, <code>{{doi}}</code>, <code>{{bibtex}}</code>",
  METADATA_COPY_TEMPLATE_THREE: `${clipboardData} Metadata Three Template`,
  METADATA_COPY_TEMPLATE_THREE_DESC: "Template of the metadata to be copied to the clipboard.<br>Valid variables are <code>{{id}}</code>, <code>{{title}}</code>, <code>{{author}}</code>, <code>{{authors}}</code>, <code>{{journal}}</code>, <code>{{volume}}</code>, <code>{{pages}}</code>, <code>{{year}}</code>, <code>{{abstract}}</code>, <code>{{url}}</code>, <code>{{pdfurl}}</code>, <code>{{doi}}</code>, <code>{{bibtex}}</code>",
  METADATA_COPY_ONE_BATCH: `${clipBoard} Metadata One Batch`,
  METADATA_COPY_ONE_BATCH_DESC: "Copy metadata for all the references(cited papers) to the clipboard.<br><b>This option only applies to index card button and template variable {{id}} will return empty</b>.<br><b>Toggle ON:</b> Copy metadata for all references <br><b>Toggle OFF:</b> Copy metadata for the individual index/reference card",
  METADATA_COPY_TWO_BATCH: `${papeClip} Metadata Two Batch`,
  METADATA_COPY_TWO_BATCH_DESC: "Copy metadata for all the references(cited papers) to the clipboard.<br><b>This option only applies to index card button and template variable {{id}} will return empty</b>.<br><b>Toggle ON:</b> Copy metadata for all references <br><b>Toggle OFF:</b> Copy metadata for the individual index/reference card",
  METADATA_COPY_THREE_BATCH: `${clipboardData} Metadata Three Batch`,
  METADATA_COPY_THREE_BATCH_DESC: "Copy metadata for all the references(cited papers) to the clipboard.<br><b>This option only applies to index card button and template variable {{id}} will return empty</b>.<br><b>Toggle ON:</b> Copy metadata for all references <br><b>Toggle OFF:</b> Copy metadata for the individual index/reference card",
  MODAL_SEARCH_LIMIT: "Search Limit",
  MODAL_SEARCH_LIMIT_DESC: "Number of references to show in the modal search. Default is set to 10. Maximum is 100.",
  MODAL_SEARCH_CREATE_FOLDER: "Folder Location",
  MODAL_SEARCH_CREATE_FOLDER_DESC: "Folder location to create the new reference. Relative to the vault root. If left blank, the new reference will be created in the vault root.",
  MODAL_SEARCH_CREATE_FILE_FORMAT: "File Name Format",
  MODAL_SEARCH_CREATE_FILE_FORMAT_DESC: "File name format to create the new reference. <br>Valid variables are <code>{{id}}</code>, <code>{{title}}</code>, <code>{{author}}</code>, <code>{{authors}}</code>, <code>{{journal}}</code>, <code>{{volume}}</code>, <code>{{pages}}</code>, <code>{{year}}</code>, <code>{{abstract}}</code>, <code>{{url}}</code>, <code>{{pdfurl}}</code>, <code>{{doi}}</code>, <code>{{bibtex}}</code>",
  MODAL_SEARCH_CREATE_FILE_TEMPLATE: "Template for New Note",
  MODAL_SEARCH_CREATE_FILE_TEMPLATE_DESC: "Template to create the new reference markdown file.<br>Valid variables are <code>{{id}}</code>, <code>{{title}}</code>, <code>{{author}}</code>, <code>{{authors}}</code>, <code>{{journal}}</code>, <code>{{volume}}</code>, <code>{{pages}}</code>, <code>{{year}}</code>, <code>{{abstract}}</code>, <code>{{url}}</code>, <code>{{pdfurl}}</code>, <code>{{doi}}</code>, <code>{{bibtex}}</code>",
  MODAL_SEARCH_INSERT_TEMPLATE: "Template for Inserting to Current Note",
  MODAL_SEARCH_INSERT_TEMPLATE_DESC: "Template to insert the reference metadata in the current note at the cursor position.<br>Valid variables are <code>{{id}}</code>, <code>{{title}}</code>, <code>{{author}}</code>, <code>{{authors}}</code>, <code>{{journal}}</code>, <code>{{volume}}</code>, <code>{{pages}}</code>, <code>{{year}}</code>, <code>{{abstract}}</code>, <code>{{url}}</code>, <code>{{pdfurl}}</code>, <code>{{doi}}</code>, <code>{{bibtex}}</code>",
  DEBUG_MODE: "Debug Mode",
  DEBUG_MODE_DESC: "Enable debug mode to see more information in the console. This is useful for debugging and <b>reporting issues</b>.<br>Enabling this will also reset all the reference data caches of Reference map.<br><b>Toggle ON:</b> Enable debug mode <br><b>Toggle OFF:</b> Disable debug mode"
};

// src/lang/locale/en-gb.ts
var en_gb_default = {};

// src/lang/locale/es.ts
var es_default = {};

// src/lang/locale/fr.ts
var fr_default = {};

// src/lang/locale/hi.ts
var hi_default = {};

// src/lang/locale/id.ts
var id_default = {};

// src/lang/locale/it.ts
var it_default = {};

// src/lang/locale/ja.ts
var ja_default = {};

// src/lang/locale/ko.ts
var ko_default = {};

// src/lang/locale/nl.ts
var nl_default = {};

// src/lang/locale/no.ts
var no_default = {};

// src/lang/locale/pl.ts
var pl_default = {};

// src/lang/locale/pt.ts
var pt_default = {};

// src/lang/locale/pt-br.ts
var pt_br_default = {};

// src/lang/locale/ro.ts
var ro_default = {};

// src/lang/locale/ru.ts
var ru_default = {};

// src/lang/locale/tr.ts
var tr_default = {};

// src/lang/locale/zh-cn.ts
var zh_cn_default = {};

// src/lang/locale/zh-tw.ts
var zh_tw_default = {};

// src/lang/helpers.ts
var localeMap = {
  ar: ar_default,
  cs: cz_default,
  da: da_default,
  de: de_default,
  en: en_default,
  "en-gb": en_gb_default,
  es: es_default,
  fr: fr_default,
  hi: hi_default,
  id: id_default,
  it: it_default,
  ja: ja_default,
  ko: ko_default,
  nl: nl_default,
  nn: no_default,
  pl: pl_default,
  pt: pt_default,
  "pt-br": pt_br_default,
  ro: ro_default,
  ru: ru_default,
  tr: tr_default,
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default
};
var locale = localeMap[import_obsidian3.moment.locale()];
function t(str) {
  if (!locale) {
    errorlog({
      where: "helpers.t",
      message: "Error: Zotero Annotations locale not found",
      locale: import_obsidian3.moment.locale()
    });
  }
  return locale && locale[str] || en_default[str];
}

// src/types.ts
var RELOAD = {
  HARD: "hard",
  SOFT: "soft",
  VIEW: "view"
};
var DIRECTION = {
  LEFT: "left",
  RIGHT: "right"
};

// src/settings.tsx
var import_react3 = __toESM(require_react());

// src/components/ZoteroPullSetting.tsx
var import_react2 = __toESM(require_react());

// src/components/SettingItem.tsx
var import_react = __toESM(require_react());
function SettingItemInfo({ name, description }) {
  return /* @__PURE__ */ import_react.default.createElement("div", {
    className: "setting-item-info"
  }, /* @__PURE__ */ import_react.default.createElement("div", {
    className: "setting-item-name"
  }, name), /* @__PURE__ */ import_react.default.createElement("div", {
    className: "setting-item-description"
  }, description));
}
function SettingItem({
  name,
  description,
  children
}) {
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement(SettingItemInfo, {
    name,
    description
  }), /* @__PURE__ */ import_react.default.createElement("div", {
    className: "setting-item-control"
  }, children));
}

// src/components/ZoteroPullSetting.tsx
function validateGroups(plugin, groups) {
  if (groups.length === 0) {
    return false;
  }
  const validated = [];
  plugin.settings.zoteroGroups.forEach((g) => {
    if (groups.some((g2) => g2.id === g.id)) {
      validated.push(g);
    }
  });
  plugin.settings.zoteroGroups = validated;
  plugin.saveSettings();
  return true;
}
function ZoteroPullSetting({ plugin }) {
  var _a;
  const [isEnabled, setIsEnabled] = import_react2.default.useState(!!plugin.settings.pullFromZotero);
  const [possibleGroups, setPossibleGroups] = import_react2.default.useState(plugin.settings.zoteroGroups);
  const [activeGroups, setActiveGroups] = import_react2.default.useState(plugin.settings.zoteroGroups);
  const [connected, setConnected] = import_react2.default.useState(false);
  const pullUserGroups = async () => {
    var _a2;
    try {
      const groups = await getZUserGroups((_a2 = plugin.settings.zoteroPort) != null ? _a2 : DEFAULT_ZOTERO_PORT);
      const isvalid = validateGroups(plugin, groups);
      if (!isvalid) {
        return;
      } else {
        setPossibleGroups(groups);
        setConnected(true);
      }
    } catch (e) {
      setConnected(false);
    }
  };
  import_react2.default.useEffect(() => {
    pullUserGroups();
  }, []);
  return /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, /* @__PURE__ */ import_react2.default.createElement("div", {
    className: "setting-item orm-setting-item "
  }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
    name: t("ZOTERO_PULL"),
    description: t("ZOTERO_PULL_DESC")
  }, /* @__PURE__ */ import_react2.default.createElement("div", {
    onClick: () => {
      setIsEnabled((cur) => {
        plugin.settings.pullFromZotero = !cur;
        if (connected && activeGroups.length == 0) {
          const myLibrary = possibleGroups.find((g) => g.id === 1);
          if (myLibrary) {
            activeGroups.push(myLibrary);
            plugin.settings.zoteroGroups = activeGroups;
            setActiveGroups([...activeGroups]);
          }
        }
        plugin.saveSettings().then(() => {
          var _a2;
          plugin.referenceMapData.reinit(true);
          (_a2 = plugin.view) == null ? void 0 : _a2.reload(RELOAD.SOFT);
        });
        return !cur;
      });
    },
    className: `checkbox-container${isEnabled ? " is-enabled" : ""}`
  }))), !connected && /* @__PURE__ */ import_react2.default.createElement("div", {
    className: "setting-item orm-setting-item"
  }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
    name: t("CANNOT_CONNECT_TO_ZOTERO"),
    description: t("CANNOT_CONNECT_TO_ZOTERO_DESC")
  }, /* @__PURE__ */ import_react2.default.createElement("button", {
    onClick: pullUserGroups,
    className: "mod-cta"
  }, "Retry"))), isEnabled && connected && /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, /* @__PURE__ */ import_react2.default.createElement("div", {
    className: "setting-item orm-setting-item"
  }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
    name: t("ZOTERO_PORT"),
    description: t("ZOTERO_PORT_DESC")
  }, /* @__PURE__ */ import_react2.default.createElement("input", {
    onChange: (e) => {
      var _a2;
      plugin.settings.zoteroPort = e.target.value;
      plugin.saveSettings();
      (_a2 = plugin.view) == null ? void 0 : _a2.reload(RELOAD.SOFT);
    },
    type: "text",
    spellCheck: false,
    defaultValue: (_a = plugin.settings.zoteroPort) != null ? _a : DEFAULT_ZOTERO_PORT
  }))), /* @__PURE__ */ import_react2.default.createElement("div", {
    className: "setting-item orm-setting-item-wrapper"
  }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
    name: t("ZOTERO_LIBRARY_ID")
  }), possibleGroups.map((g) => {
    const isEnabled2 = activeGroups.some((g2) => g2.id === g.id);
    return /* @__PURE__ */ import_react2.default.createElement("div", {
      key: g.id,
      className: "orm-group-toggle"
    }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
      description: g.name
    }, /* @__PURE__ */ import_react2.default.createElement("div", {
      onClick: () => {
        if (isEnabled2) {
          const next = activeGroups.filter((g2) => g2.id !== g.id);
          plugin.settings.zoteroGroups = next;
          setActiveGroups(next);
        } else {
          activeGroups.push(g);
          plugin.settings.zoteroGroups = activeGroups;
          setActiveGroups([...activeGroups]);
        }
        plugin.saveSettings().then(() => {
          var _a2;
          plugin.referenceMapData.reinit(true);
          (_a2 = plugin.view) == null ? void 0 : _a2.reload(RELOAD.SOFT);
        });
      },
      className: `checkbox-container${isEnabled2 ? " is-enabled" : ""}`
    })));
  }))));
}

// src/settings.tsx
var import_client = __toESM(require_client());
var ReferenceMapSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: t("GENERAL_SETTINGS") });
    new import_obsidian4.Setting(containerEl).setName(t("HIDE_SHOW_ABSTRACT")).setDesc(fragWithHTML(t("HIDE_SHOW_ABSTRACT_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.showAbstract).onChange(async (value) => {
      this.plugin.settings.showAbstract = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian4.Setting(containerEl).setName(t("HIDE_SHOW_AUTHORS")).setDesc(fragWithHTML(t("HIDE_SHOW_AUTHORS_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.showAuthors).onChange(async (value) => {
      this.plugin.settings.showAuthors = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian4.Setting(containerEl).setName(t("HIDE_SHOW_INFLUENTIAL_COUNT")).setDesc(fragWithHTML(t("HIDE_SHOW_INFLUENTIAL_COUNT_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.influentialCount).onChange(async (value) => {
      this.plugin.settings.influentialCount = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian4.Setting(containerEl).setName(t("HIDE_SHOW_BUTTONS_ON_HOVER")).setDesc(fragWithHTML(t("HIDE_SHOW_BUTTONS_ON_HOVER_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.hideButtonsOnHover).onChange(async (value) => {
      this.plugin.settings.hideButtonsOnHover = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian4.Setting(containerEl).setName(t("HIDE_SHOW_INVALID_ITEMS")).setDesc(fragWithHTML(t("HIDE_SHOW_INVALID_ITEMS_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.showInvalidItems).onChange(async (value) => {
      this.plugin.settings.showInvalidItems = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian4.Setting(containerEl).setName(t("HIDE_SHOW_REDUNDANT_REFERENCES")).setDesc(fragWithHTML(t("HIDE_SHOW_REDUNDANT_REFERENCES_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.filterRedundantReferences).onChange(async (value) => {
      this.plugin.settings.filterRedundantReferences = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.SOFT);
      });
    }));
    containerEl.createEl("h2", { text: "Sort Settings" });
    new import_obsidian4.Setting(containerEl).setName(t("ENABLE_SORTING_INDEX_CARDS")).setDesc(fragWithHTML(t("ENABLE_SORTING_INDEX_CARDS_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableIndexSorting).onChange(async (value) => {
      this.plugin.settings.enableIndexSorting = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    if (this.plugin.settings.enableIndexSorting) {
      new import_obsidian4.Setting(containerEl).setName(t("SORT_BY")).addDropdown((dropdown) => dropdown.addOption("year", t("SORT_BY_YEAR")).addOption("citationCount", t("SORT_BY_CITATION_COUNT")).addOption("referenceCount", t("SORT_BY_REFERENCE_COUNT")).addOption("influentialCitationCount", t("SORT_BY_INFLUENTIAL_CITATION_COUNT")).setValue(this.plugin.settings.sortByIndex).onChange(async (value) => {
        this.plugin.settings.sortByIndex = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian4.Setting(containerEl).setName(t("SORT_ORDER")).addDropdown((dropdown) => dropdown.addOption("desc", t("SORT_ORDER_DESCE")).addOption("asc", t("SORT_ORDER_ASC")).setValue(this.plugin.settings.sortOrderIndex).onChange(async (value) => {
        this.plugin.settings.sortOrderIndex = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
    }
    new import_obsidian4.Setting(containerEl).setName(t("ENABLE_SORTING_REFERENCE_CARDS")).setDesc(fragWithHTML(t("ENABLE_SORTING_REFERENCE_CARDS_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableReferenceSorting).onChange(async (value) => {
      this.plugin.settings.enableReferenceSorting = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    if (this.plugin.settings.enableReferenceSorting) {
      new import_obsidian4.Setting(containerEl).setName(t("SORT_BY")).addDropdown((dropdown) => dropdown.addOption("year", t("SORT_BY_YEAR")).addOption("citationCount", t("SORT_BY_CITATION_COUNT")).addOption("referenceCount", t("SORT_BY_REFERENCE_COUNT")).addOption("influentialCitationCount", t("SORT_BY_INFLUENTIAL_CITATION_COUNT")).setValue(this.plugin.settings.sortByReference).onChange(async (value) => {
        this.plugin.settings.sortByReference = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian4.Setting(containerEl).setName(t("SORT_ORDER")).addDropdown((dropdown) => dropdown.addOption("desc", t("SORT_ORDER_DESCE")).addOption("asc", t("SORT_ORDER_ASC")).setValue(this.plugin.settings.sortOrderReference).onChange(async (value) => {
        this.plugin.settings.sortOrderReference = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
    }
    containerEl.createEl("h1", { text: "Static List Settings" });
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("SEARCH_CITEKEY"))).setDesc(fragWithHTML(t("SEARCH_CITEKEY_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.searchCiteKey).onChange(async (value) => {
      this.plugin.settings.searchCiteKey = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.HARD);
      });
      this.display();
    }));
    if (this.plugin.settings.searchCiteKey) {
      new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("AUTO_DETECT_UPDATE_TO_CITEKEY"))).setDesc(fragWithHTML(t("AUTO_DETECT_UPDATE_TO_CITEKEY_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.autoUpdateCitekeyFile).onChange(async (value) => {
        this.plugin.settings.autoUpdateCitekeyFile = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.SOFT);
        });
      }));
      new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("SEARCH_CITEKEY_PATH"))).setDesc(fragWithHTML(t("SEARCH_CITEKEY_PATH_DESC"))).addText((text) => {
        text.setValue(this.plugin.settings.searchCiteKeyPath).onChange(async (value) => {
          this.checkCitationExportPath(value).then((success) => {
            if (success) {
              this.showCitationExportPathSuccess();
              this.plugin.settings.searchCiteKeyPath = value;
              this.plugin.saveSettings().then(() => {
                if (this.plugin.view)
                  this.plugin.view.reload(RELOAD.SOFT);
              });
            }
          });
        });
      });
      this.citationPathLoadingEl = containerEl.createEl("p", {
        cls: "orm-PathLoading d-none",
        text: "Loading citation database..."
      });
      this.citationPathErrorEl = containerEl.createEl("p", {
        cls: "orm-PathError d-none",
        text: fragWithHTML(t("CITEKEY_PATH_ERROR"))
      });
      this.citationPathSuccessEl = containerEl.createEl("p", {
        cls: "orm-PathSuccess d-none",
        text: "Successfully Loaded Library Containing References."
      });
      containerEl.createDiv("setting-item orm-setting-item-wrapper", (el) => {
        (0, import_client.createRoot)(el).render(/* @__PURE__ */ import_react3.default.createElement(ZoteroPullSetting, {
          plugin: this.plugin
        }));
      });
      new import_obsidian4.Setting(containerEl).setName(t("CITEKEY_ZOTERO_LINK")).setDesc(fragWithHTML(t("CITEKEY_ZOTERO_LINK_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.linkCiteKey).onChange(async (value) => {
        this.plugin.settings.linkCiteKey = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian4.Setting(containerEl).setName(t("FIND_ZOTERO_CITEKEY_FROM_ID")).setDesc(fragWithHTML(t("FIND_ZOTERO_CITEKEY_FROM_ID_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.findZoteroCiteKeyFromID).onChange(async (value) => {
        this.plugin.settings.findZoteroCiteKeyFromID = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("FIND_CITEKEY_WITHOUT_PREFIX"))).setDesc(fragWithHTML(t("FIND_CITEKEY_WITHOUT_PREFIX_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.findCiteKeyFromLinksWithoutPrefix).onChange(async (value) => {
        this.plugin.settings.findCiteKeyFromLinksWithoutPrefix = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
    }
    containerEl.createEl("h1", { text: "Dynamic List Settings" });
    new import_obsidian4.Setting(containerEl).setName(t("SEARCH_TITLE")).setDesc(fragWithHTML(t("SEARCH_TITLE_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.searchTitle).onChange(async (value) => {
      this.plugin.settings.searchTitle = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    let zoomText;
    if (this.plugin.settings.searchTitle) {
      new import_obsidian4.Setting(containerEl).setName(t("SEARCH_LIMIT")).setDesc(fragWithHTML(t("SEARCH_LIMIT_DESC"))).addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.searchLimit).onChange(async (value) => {
        zoomText.innerText = ` ${value.toString()}`;
        this.plugin.settings.searchLimit = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      })).settingEl.createDiv("", (el) => {
        zoomText = el;
        el.style.minWidth = "2.3em";
        el.style.textAlign = "right";
        el.innerText = ` ${this.plugin.settings.searchLimit.toString()}`;
      });
    }
    new import_obsidian4.Setting(containerEl).setName(t("SEARCH_FRONT_MATTER")).setDesc(fragWithHTML(t("SEARCH_FRONT_MATTER_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.searchFrontMatter).onChange(async (value) => {
      this.plugin.settings.searchFrontMatter = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    let zoomText2;
    if (this.plugin.settings.searchFrontMatter) {
      new import_obsidian4.Setting(containerEl).setName(t("SEARCH_FRONT_MATTER_KEY")).setDesc(fragWithHTML(t("SEARCH_FRONT_MATTER_KEY_DESC"))).addText((text) => text.setValue(this.plugin.settings.searchFrontMatterKey).onChange(async (value) => {
        this.plugin.settings.searchFrontMatterKey = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian4.Setting(containerEl).setName(t("SEARCH_FRONT_MATTER_LIMIT")).setDesc(fragWithHTML(t("SEARCH_FRONT_MATTER_LIMIT_DESC"))).addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.searchFrontMatterLimit).onChange(async (value) => {
        zoomText2.innerText = ` ${value.toString()}`;
        this.plugin.settings.searchFrontMatterLimit = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      })).settingEl.createDiv("", (el) => {
        zoomText2 = el;
        el.style.minWidth = "2.3em";
        el.style.textAlign = "right";
        el.innerText = ` ${this.plugin.settings.searchFrontMatterLimit.toString()}`;
      });
    }
    containerEl.createEl("h1", { text: "Buttons Settings" });
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("FORMAT_METADATA_COPY_ONE"))).setDesc(fragWithHTML(t("FORMAT_METADATA_COPY_ONE_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.formatMetadataCopyOne).onChange(async (value) => {
      this.plugin.settings.formatMetadataCopyOne = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    if (this.plugin.settings.formatMetadataCopyOne) {
      new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("METADATA_COPY_TEMPLATE_ONE"))).setDesc(fragWithHTML(t("METADATA_COPY_TEMPLATE_ONE_DESC"))).addTextArea((text) => {
        text.setValue(this.plugin.settings.metadataCopyTemplateOne).onChange(async (value) => {
          this.plugin.settings.metadataCopyTemplateOne = value;
          this.plugin.saveSettings().then(() => {
            if (this.plugin.view)
              this.plugin.view.reload(RELOAD.VIEW);
          });
        });
      });
      new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("METADATA_COPY_ONE_BATCH"))).setDesc(fragWithHTML(t("METADATA_COPY_ONE_BATCH_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.metadataCopyOneBatch).onChange(async (value) => {
        this.plugin.settings.metadataCopyOneBatch = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
    }
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("FORMAT_METADATA_COPY_TWO"))).setDesc(fragWithHTML(t("FORMAT_METADATA_COPY_TWO_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.formatMetadataCopyTwo).onChange(async (value) => {
      this.plugin.settings.formatMetadataCopyTwo = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    if (this.plugin.settings.formatMetadataCopyTwo) {
      new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("METADATA_COPY_TEMPLATE_TWO"))).setDesc(fragWithHTML(t("METADATA_COPY_TEMPLATE_TWO_DESC"))).addTextArea((text) => {
        text.inputEl.rows = 7;
        text.setValue(this.plugin.settings.metadataCopyTemplateTwo).onChange(async (value) => {
          this.plugin.settings.metadataCopyTemplateTwo = value;
          this.plugin.saveSettings().then(() => {
            if (this.plugin.view)
              this.plugin.view.reload(RELOAD.VIEW);
          });
        });
      });
      new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("METADATA_COPY_TWO_BATCH"))).setDesc(fragWithHTML(t("METADATA_COPY_TWO_BATCH_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.metadataCopyTwoBatch).onChange(async (value) => {
        this.plugin.settings.metadataCopyTwoBatch = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
    }
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("FORMAT_METADATA_COPY_THREE"))).setDesc(fragWithHTML(t("FORMAT_METADATA_COPY_THREE_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.formatMetadataCopyThree).onChange(async (value) => {
      this.plugin.settings.formatMetadataCopyThree = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    if (this.plugin.settings.formatMetadataCopyThree) {
      new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("METADATA_COPY_TEMPLATE_THREE"))).setDesc(fragWithHTML(t("METADATA_COPY_TEMPLATE_THREE_DESC"))).addTextArea((text) => text.setValue(this.plugin.settings.metadataCopyTemplateThree).onChange(async (value) => {
        this.plugin.settings.metadataCopyTemplateThree = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("METADATA_COPY_THREE_BATCH"))).setDesc(fragWithHTML(t("METADATA_COPY_THREE_BATCH_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.metadataCopyThreeBatch).onChange(async (value) => {
        this.plugin.settings.metadataCopyThreeBatch = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.view.reload(RELOAD.VIEW);
        });
      }));
    }
    containerEl.createEl("h1", { text: "Search Settings" });
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("MODAL_SEARCH_LIMIT"))).setDesc(fragWithHTML(t("MODAL_SEARCH_LIMIT_DESC"))).addSlider((slider) => slider.setLimits(1, 100, 1).setValue(this.plugin.settings.modalSearchLimit).onChange(async (value) => {
      zoomText.innerText = ` ${value.toString()}`;
      this.plugin.settings.modalSearchLimit = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.VIEW);
      });
    })).settingEl.createDiv("", (el) => {
      zoomText = el;
      el.style.minWidth = "2.3em";
      el.style.textAlign = "right";
      el.innerText = ` ${this.plugin.settings.modalSearchLimit.toString()}`;
    });
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("MODAL_SEARCH_CREATE_FOLDER"))).setDesc(fragWithHTML(t("MODAL_SEARCH_CREATE_FOLDER_DESC"))).addText((text) => text.setValue(this.plugin.settings.folder).onChange(async (value) => {
      this.plugin.settings.folder = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("MODAL_SEARCH_CREATE_FILE_FORMAT"))).setDesc(fragWithHTML(t("MODAL_SEARCH_CREATE_FILE_FORMAT_DESC"))).addText((text) => text.setValue(this.plugin.settings.fileNameFormat).onChange(async (value) => {
      this.plugin.settings.fileNameFormat = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("MODAL_SEARCH_CREATE_FILE_TEMPLATE"))).setDesc(fragWithHTML(t("MODAL_SEARCH_CREATE_FILE_TEMPLATE_DESC"))).addTextArea((text) => {
      text.inputEl.rows = 7;
      text.setValue(this.plugin.settings.modalCreateTemplate).onChange(async (value) => {
        this.plugin.settings.modalCreateTemplate = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("MODAL_SEARCH_INSERT_TEMPLATE"))).setDesc(fragWithHTML(t("MODAL_SEARCH_INSERT_TEMPLATE_DESC"))).addTextArea((text) => {
      text.inputEl.rows = 7;
      text.setValue(this.plugin.settings.modalInsertTemplate).onChange(async (value) => {
        this.plugin.settings.modalInsertTemplate = value;
        this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h1", { text: "Debug Settings" });
    new import_obsidian4.Setting(containerEl).setName(fragWithHTML(t("DEBUG_MODE"))).setDesc(fragWithHTML(t("DEBUG_MODE_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
      this.plugin.settings.debugMode = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.view.reload(RELOAD.HARD);
      });
    }));
    containerEl.createEl("hr");
    containerEl.createEl("h2", { text: t("SEE_DOCUMENTATION") });
    containerEl.createEl("p", {
      text: fragWithHTML(t("SEE_DOCUMENTATION_DESC"))
    });
  }
  async checkCitationExportPath(filePath) {
    this.citationPathLoadingEl.addClass("d-none");
    if (filePath.endsWith(".json") || filePath.endsWith(".bib")) {
      try {
        await import_obsidian4.FileSystemAdapter.readLocalFile(resolvePath(filePath));
        this.citationPathErrorEl.addClass("d-none");
      } catch (e) {
        this.citationPathSuccessEl.addClass("d-none");
        this.citationPathErrorEl.removeClass("d-none");
        return false;
      }
    } else {
      this.citationPathSuccessEl.addClass("d-none");
      this.citationPathErrorEl.removeClass("d-none");
      return false;
    }
    return true;
  }
  showCitationExportPathSuccess() {
    var _a;
    if (!((_a = this.plugin.view) == null ? void 0 : _a.referenceMapData.library.active))
      return;
    this.citationPathSuccessEl.setText(`Successfully Loaded Library Containing References.`);
    this.citationPathSuccessEl.removeClass("d-none");
  }
};

// src/reactView.tsx
var import_obsidian5 = require("obsidian");
var import_react14 = __toESM(require_react());
var import_client2 = __toESM(require_client());

// src/components/ReferenceMapList.tsx
var import_react12 = __toESM(require_react());

// src/components/IndexPaperCard.tsx
var import_react11 = __toESM(require_react());

// src/components/PaperList.tsx
var import_react9 = __toESM(require_react());

// src/components/PaperCard.tsx
var import_react8 = __toESM(require_react());

// src/components/PaperHeading.tsx
var import_react4 = __toESM(require_react());
var PaperHeading = ({ paper, settings }) => {
  var _a, _b, _c;
  const { paper: paperData } = paper;
  const { authors, title, year, abstract, paperId } = paperData || {};
  const authorID = (_a = authors == null ? void 0 : authors[0]) == null ? void 0 : _a.authorId;
  const isCitekey = (_b = paper == null ? void 0 : paper.id) == null ? void 0 : _b.includes("@");
  const showCitekey = settings.linkCiteKey && isCitekey;
  return /* @__PURE__ */ import_react4.default.createElement("div", {
    className: "orm-paper-heading"
  }, /* @__PURE__ */ import_react4.default.createElement("div", {
    className: "orm-paper-title"
  }, paper.location && /* @__PURE__ */ import_react4.default.createElement("span", {
    className: "cardLocation"
  }, paper.location), /* @__PURE__ */ import_react4.default.createElement("a", {
    href: `${SEMANTICSCHOLAR_URL}/paper/${paperId}`
  }, " " + (title || "Unknown Title") + " ")), settings.showAbstract && /* @__PURE__ */ import_react4.default.createElement("span", {
    className: "orm-paper-abstract"
  }, " " + (abstract || "") + " "), settings.showAuthors && /* @__PURE__ */ import_react4.default.createElement("span", {
    className: "orm-paper-authors"
  }, /* @__PURE__ */ import_react4.default.createElement("a", {
    href: `${SEMANTICSCHOLAR_URL}/author/${authorID}`
  }, (authors || []).map((author) => author.name).join(", ") + ", " + year)), !settings.showAuthors && /* @__PURE__ */ import_react4.default.createElement("span", {
    className: "orm-paper-authors"
  }, /* @__PURE__ */ import_react4.default.createElement("a", {
    href: `${SEMANTICSCHOLAR_URL}/author/${authorID}`
  }, (((_c = authors == null ? void 0 : authors[0]) == null ? void 0 : _c.name) || "Unknown Author") + ", " + year)), showCitekey && /* @__PURE__ */ import_react4.default.createElement("span", {
    className: "orm-paper-link-citekey"
  }, /* @__PURE__ */ import_react4.default.createElement("a", {
    href: `zotero://select/items/${paper == null ? void 0 : paper.id}`
  }, paper == null ? void 0 : paper.id)));
};

// src/components/PaperButtons.tsx
var import_react7 = __toESM(require_react());

// node_modules/react-icons/lib/esm/iconBase.js
var import_react6 = __toESM(require_react());

// node_modules/react-icons/lib/esm/iconContext.js
var import_react5 = __toESM(require_react());
var DefaultContext = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
};
var IconContext = import_react5.default.createContext && import_react5.default.createContext(DefaultContext);

// node_modules/react-icons/lib/esm/iconBase.js
var __assign = function() {
  __assign = Object.assign || function(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t2[p] = s[p];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t2 = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
};
function Tree2Element(tree) {
  return tree && tree.map(function(node, i) {
    return import_react6.default.createElement(node.tag, __assign({
      key: i
    }, node.attr), Tree2Element(node.child));
  });
}
function GenIcon(data) {
  return function(props) {
    return import_react6.default.createElement(IconBase, __assign({
      attr: __assign({}, data.attr)
    }, props), Tree2Element(data.child));
  };
}
function IconBase(props) {
  var elem = function(conf) {
    var attr = props.attr, size = props.size, title = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
    var computedSize = size || conf.size || "1em";
    var className;
    if (conf.className)
      className = conf.className;
    if (props.className)
      className = (className ? className + " " : "") + props.className;
    return import_react6.default.createElement("svg", __assign({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, conf.attr, attr, svgProps, {
      className,
      style: __assign(__assign({
        color: props.color || conf.color
      }, conf.style), props.style),
      height: computedSize,
      width: computedSize,
      xmlns: "http://www.w3.org/2000/svg"
    }), title && import_react6.default.createElement("title", null, title), props.children);
  };
  return IconContext !== void 0 ? import_react6.default.createElement(IconContext.Consumer, null, function(conf) {
    return elem(conf);
  }) : elem(DefaultContext);
}

// node_modules/react-icons/fi/index.esm.js
function FiClipboard(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" } }, { "tag": "rect", "attr": { "x": "8", "y": "2", "width": "8", "height": "4", "rx": "1", "ry": "1" } }] })(props);
}
function FiPaperclip(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48" } }] })(props);
}

// node_modules/react-icons/si/index.esm.js
function SiOpenaccess(props) {
  return GenIcon({ "tag": "svg", "attr": { "role": "img", "viewBox": "0 0 24 24" }, "child": [{ "tag": "title", "attr": {}, "child": [] }, { "tag": "path", "attr": { "d": "M18.971 13.486a7.56 7.56 0 00-.54-1.043V6.415a6.375 6.375 0 00-1.88-4.535A6.374 6.374 0 0012.017 0h-.002a6.374 6.374 0 00-4.536 1.878 6.375 6.375 0 00-1.88 4.537v.877h2.57v-.877c0-1.026.4-1.992 1.127-2.72a3.822 3.822 0 012.72-1.125 3.852 3.852 0 013.847 3.845v3.508A7.52 7.52 0 0012 8.865a7.54 7.54 0 00-5.35 2.216 7.54 7.54 0 00-2.216 5.35 7.54 7.54 0 002.215 5.35A7.54 7.54 0 0012 24a7.54 7.54 0 005.35-2.216 7.54 7.54 0 002.216-5.35c0-1.021-.2-2.012-.595-2.946zM12 21.428a5.003 5.003 0 01-4.997-4.996A5.003 5.003 0 0112 11.435a5.002 5.002 0 014.997 4.997A5.002 5.002 0 0112 21.428zm2.145-4.973a2.12 2.12 0 11-4.24 0 2.12 2.12 0 014.24 0z" } }] })(props);
}

// node_modules/react-icons/bs/index.esm.js
function BsClipboardData(props) {
  return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M4 11a1 1 0 1 1 2 0v1a1 1 0 1 1-2 0v-1zm6-4a1 1 0 1 1 2 0v5a1 1 0 1 1-2 0V7zM7 9a1 1 0 0 1 2 0v3a1 1 0 1 1-2 0V9z" } }, { "tag": "path", "attr": { "d": "M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z" } }, { "tag": "path", "attr": { "d": "M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z" } }] })(props);
}
function BsSearch(props) {
  return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" } }] })(props);
}

// src/components/PaperButtons.tsx
var PaperButtons = ({
  settings,
  paper,
  setShowReferences = void 0,
  showReferences = false,
  setShowCitations = void 0,
  showCitations = false,
  setIsButtonShown = void 0,
  isButtonShown = false,
  batchCopyMetadataOne = "",
  batchCopyMetadataTwo = "",
  batchCopyMetadataThree = ""
}) => {
  var _a;
  const metadataTemplateOne = settings.formatMetadataCopyOne ? settings.metadataCopyTemplateOne : METADATA_COPY_TEMPLATE_ONE;
  const metadataTemplateTwo = settings.formatMetadataCopyTwo ? settings.metadataCopyTemplateTwo : METADATA_COPY_TEMPLATE_TWO;
  const metadataTemplateThree = settings.formatMetadataCopyThree ? settings.metadataCopyTemplateThree : METADATA_COPY_TEMPLATE_THREE;
  const metaData = makeMetaData(paper.paper);
  let copyMetadataOne = "";
  let copyMetadataTwo = "";
  let copyMetadataThree = "";
  if (settings.formatMetadataCopyOne) {
    settings.metadataCopyOneBatch && batchCopyMetadataOne ? copyMetadataOne = batchCopyMetadataOne : copyMetadataOne = templateReplace(metadataTemplateOne, metaData, paper.id);
  }
  if (settings.formatMetadataCopyTwo) {
    settings.metadataCopyTwoBatch && batchCopyMetadataTwo ? copyMetadataTwo = batchCopyMetadataTwo : copyMetadataTwo = templateReplace(metadataTemplateTwo, metaData, paper.id);
  }
  if (settings.formatMetadataCopyThree) {
    settings.metadataCopyThreeBatch && batchCopyMetadataThree ? copyMetadataThree = batchCopyMetadataThree : copyMetadataThree = templateReplace(metadataTemplateThree, metaData, paper.id);
  }
  let citingCited = null;
  if (setShowReferences !== void 0 && setShowCitations !== void 0 && setIsButtonShown !== void 0) {
    const handleShowReferencesClick = () => {
      setShowReferences(!showReferences);
      setShowCitations(false);
      if (showReferences || showCitations) {
        setIsButtonShown(true);
      }
    };
    const handleShowCitationsClick = () => {
      setShowCitations(!showCitations);
      setShowReferences(false);
      if (showReferences || showCitations) {
        setIsButtonShown(true);
      }
    };
    citingCited = /* @__PURE__ */ import_react7.default.createElement(import_react7.default.Fragment, null, /* @__PURE__ */ import_react7.default.createElement("div", {
      className: "orm-references",
      style: showReferences ? {
        fontWeight: "bold",
        color: "var(--text-accent)"
      } : {},
      onClick: () => handleShowReferencesClick()
    }, metaData.referenceCount), /* @__PURE__ */ import_react7.default.createElement("div", {
      className: "orm-citations",
      style: showCitations ? {
        fontWeight: "bold",
        color: "var(--text-accent)"
      } : {},
      onClick: () => handleShowCitationsClick()
    }, metaData.citationCount));
  } else {
    citingCited = /* @__PURE__ */ import_react7.default.createElement(import_react7.default.Fragment, null, /* @__PURE__ */ import_react7.default.createElement("div", {
      className: "orm-references-2"
    }, metaData.referenceCount), /* @__PURE__ */ import_react7.default.createElement("div", {
      className: "orm-citations-2"
    }, metaData.citationCount));
  }
  return /* @__PURE__ */ import_react7.default.createElement("div", {
    className: "orm-paper-buttons"
  }, settings.formatMetadataCopyOne && /* @__PURE__ */ import_react7.default.createElement("div", {
    className: "orm-copy-metadata-one",
    onClick: () => {
      copyElToClipboard(copyMetadataOne);
    }
  }, /* @__PURE__ */ import_react7.default.createElement(FiClipboard, {
    size: 16
  })), settings.formatMetadataCopyTwo && /* @__PURE__ */ import_react7.default.createElement("div", {
    className: "orm-copy-metadata-two",
    onClick: () => {
      copyElToClipboard(copyMetadataTwo);
    }
  }, /* @__PURE__ */ import_react7.default.createElement(FiPaperclip, {
    size: 15
  })), settings.formatMetadataCopyThree && /* @__PURE__ */ import_react7.default.createElement("div", {
    className: "orm-copy-metadata-three",
    onClick: () => {
      copyElToClipboard(copyMetadataThree);
    }
  }, /* @__PURE__ */ import_react7.default.createElement(BsClipboardData, {
    size: 15
  })), ((_a = paper.paper) == null ? void 0 : _a.isOpenAccess) ? /* @__PURE__ */ import_react7.default.createElement("div", {
    className: "orm-openaccess"
  }, /* @__PURE__ */ import_react7.default.createElement("a", {
    href: `${metaData.pdfurl}`
  }, /* @__PURE__ */ import_react7.default.createElement(SiOpenaccess, {
    size: 15
  }))) : /* @__PURE__ */ import_react7.default.createElement("div", {
    className: "orm-button-disable"
  }, /* @__PURE__ */ import_react7.default.createElement(SiOpenaccess, {
    size: 15
  })), citingCited, settings.influentialCount && /* @__PURE__ */ import_react7.default.createElement("div", {
    className: "orm-influential"
  }, metaData.influentialCount));
};

// src/components/PaperCard.tsx
var PaperCard = (props) => {
  const paper = props.paper;
  const [isButtonShown, setIsButtonShown] = (0, import_react8.useState)(!props.settings.hideButtonsOnHover);
  const handleHoverButtons = (isShow) => {
    props.settings.hideButtonsOnHover ? setIsButtonShown(isShow) : setIsButtonShown(true);
  };
  return /* @__PURE__ */ import_react8.default.createElement("div", {
    className: "orm-paper-card",
    onMouseEnter: () => handleHoverButtons(true),
    onMouseLeave: () => handleHoverButtons(false)
  }, /* @__PURE__ */ import_react8.default.createElement(PaperHeading, {
    paper,
    settings: props.settings
  }), isButtonShown && /* @__PURE__ */ import_react8.default.createElement(PaperButtons, {
    settings: props.settings,
    paper
  }));
};

// src/components/PaperList.tsx
var PaperList = ({ papers, settings, type }) => {
  const [query, setQuery] = (0, import_react9.useState)("");
  const sortedPapers = settings.enableReferenceSorting ? dataSort(papers, settings.sortByReference, settings.sortOrderReference) : papers;
  const paperList = dataSearch(sortedPapers, query).map((paper, index) => /* @__PURE__ */ import_react9.default.createElement(PaperCard, {
    key: `${paper.paperId}-${index}`,
    paper: { id: paper.paperId, location: null, paper },
    settings
  }));
  return /* @__PURE__ */ import_react9.default.createElement("div", {
    className: "orm-paper-list"
  }, /* @__PURE__ */ import_react9.default.createElement("div", {
    className: "orm-paper-list-buttons"
  }, /* @__PURE__ */ import_react9.default.createElement("div", {
    className: "orm-search-form"
  }, /* @__PURE__ */ import_react9.default.createElement("div", {
    className: "index-search"
  }, /* @__PURE__ */ import_react9.default.createElement("input", {
    type: "search",
    className: "orm-search-input",
    placeholder: type,
    onChange: (e) => setQuery(e.target.value),
    style: { padding: "0 30px 0 30px" }
  }), /* @__PURE__ */ import_react9.default.createElement(BsSearch, {
    size: 15,
    className: "search-icon"
  })))), paperList);
};

// src/components/LoadingPuff.tsx
var import_react10 = __toESM(require_react());
var LoadingPuff = () => {
  return /* @__PURE__ */ import_react10.default.createElement("div", {
    className: "orm-loading-puff"
  }, /* @__PURE__ */ import_react10.default.createElement("svg", {
    viewBox: "0 0 40 2",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ import_react10.default.createElement("circle", {
    fill: "var(--orm-paper-buttons-hover-color)",
    stroke: "none",
    cx: "18",
    cy: "1",
    r: "0.25"
  }, /* @__PURE__ */ import_react10.default.createElement("animate", {
    attributeName: "opacity",
    dur: "2s",
    values: "0;1;0",
    repeatCount: "indefinite",
    begin: "0.1"
  })), /* @__PURE__ */ import_react10.default.createElement("circle", {
    fill: "var(--orm-paper-buttons-hover-color)",
    stroke: "none",
    cx: "20",
    cy: "1",
    r: "0.25"
  }, /* @__PURE__ */ import_react10.default.createElement("animate", {
    attributeName: "opacity",
    dur: "2s",
    values: "0;1;0",
    repeatCount: "indefinite",
    begin: "0.4"
  })), /* @__PURE__ */ import_react10.default.createElement("circle", {
    fill: "var(--orm-paper-buttons-hover-color)",
    stroke: "none",
    cx: "22",
    cy: "1",
    r: "0.25"
  }, /* @__PURE__ */ import_react10.default.createElement("animate", {
    attributeName: "opacity",
    dur: "2s",
    values: "0;1;0",
    repeatCount: "indefinite",
    begin: "0.7"
  }))));
};

// src/components/IndexPaperCard.tsx
var IndexPaperCard = (props) => {
  const [references, setReferences] = (0, import_react11.useState)([]);
  const [citations, setCitations] = (0, import_react11.useState)([]);
  const [showReferences, setShowReferences] = (0, import_react11.useState)(false);
  const [showCitations, setShowCitations] = (0, import_react11.useState)(false);
  const [isButtonShown, setIsButtonShown] = (0, import_react11.useState)(!props.settings.hideButtonsOnHover);
  const [isReferenceLoading, setIsReferenceLoading] = (0, import_react11.useState)(false);
  const [isCitationLoading, setIsCitationLoading] = (0, import_react11.useState)(false);
  (0, import_react11.useEffect)(() => {
    if (!isEmpty(props.rootPaper.paper)) {
      getCitations();
      getReferences();
    }
  }, []);
  (0, import_react11.useEffect)(() => {
    setIsButtonShown(!props.settings.hideButtonsOnHover);
  }, [props.settings.hideButtonsOnHover]);
  const handleHoverButtons = (isShow) => {
    if (!props.settings.hideButtonsOnHover || showReferences || showCitations) {
      setIsButtonShown(true);
      return;
    }
    setIsButtonShown(isShow);
  };
  const getReferences = async () => {
    setIsReferenceLoading(true);
    const references2 = await props.viewManager.getReferences(props.rootPaper.paper.paperId);
    const filteredReferences = props.settings.filterRedundantReferences ? references2.filter((reference) => reference.referenceCount > 0 || reference.citationCount > 0) : references2;
    setReferences(filteredReferences);
    setIsReferenceLoading(false);
  };
  const getCitations = async () => {
    setIsCitationLoading(true);
    const citations2 = await props.viewManager.getCitations(props.rootPaper.paper.paperId);
    const filteredCitations = props.settings.filterRedundantReferences ? citations2.filter((citation) => citation.referenceCount > 0 || citation.citationCount > 0) : citations2;
    setCitations(filteredCitations);
    setIsCitationLoading(false);
  };
  const metadataTemplates = [
    { format: props.settings.formatMetadataCopyOne, template: props.settings.metadataCopyTemplateOne, batch: props.settings.metadataCopyOneBatch },
    { format: props.settings.formatMetadataCopyTwo, template: props.settings.metadataCopyTemplateTwo, batch: props.settings.metadataCopyTwoBatch },
    { format: props.settings.formatMetadataCopyThree, template: props.settings.metadataCopyTemplateThree, batch: props.settings.metadataCopyThreeBatch }
  ];
  const batchCopyMetadata = metadataTemplates.flatMap(({ format, template, batch }) => {
    if (batch && format) {
      return references.map((paper) => {
        const metaData = makeMetaData(paper);
        return templateReplace(template, metaData) + "\n";
      });
    }
    return [];
  });
  return /* @__PURE__ */ import_react11.default.createElement("div", {
    className: `orm-root-paper ${props.className}`,
    onMouseEnter: () => handleHoverButtons(true),
    onMouseLeave: () => handleHoverButtons(false)
  }, /* @__PURE__ */ import_react11.default.createElement(PaperHeading, {
    paper: props.rootPaper,
    settings: props.settings
  }), isButtonShown && /* @__PURE__ */ import_react11.default.createElement(PaperButtons, {
    settings: props.settings,
    paper: props.rootPaper,
    setShowReferences,
    showReferences,
    setShowCitations,
    showCitations,
    setIsButtonShown,
    isButtonShown,
    batchCopyMetadataOne: batchCopyMetadata[0],
    batchCopyMetadataTwo: batchCopyMetadata[1],
    batchCopyMetadataThree: batchCopyMetadata[2]
  }), (isCitationLoading || isReferenceLoading) && /* @__PURE__ */ import_react11.default.createElement("div", {
    className: "orm-loading"
  }, /* @__PURE__ */ import_react11.default.createElement(LoadingPuff, null)), showReferences && /* @__PURE__ */ import_react11.default.createElement(PaperList, {
    settings: props.settings,
    papers: references,
    type: "References"
  }), showCitations && /* @__PURE__ */ import_react11.default.createElement(PaperList, {
    settings: props.settings,
    papers: citations,
    type: "Citations"
  }));
};

// src/components/ReferenceMapList.tsx
var ReferenceMapList = (props) => {
  const [papers, setPapers] = (0, import_react12.useState)([]);
  const [query, setQuery] = (0, import_react12.useState)("");
  const activeRef = (0, import_react12.useRef)(null);
  (0, import_react12.useEffect)(() => {
    setPapers(props.indexCards);
  }, [
    props.settings,
    props.indexCards,
    props.library.libraryData,
    props.basename
  ]);
  (0, import_react12.useEffect)(() => {
    if (activeRef.current !== null)
      activeRef.current.scrollIntoView({
        block: "nearest",
        behavior: "smooth"
      });
  }, [props.selection]);
  const userSearch = (isSearchList) => {
    const searchFieldName = isSearchList ? "orm-index-search" : "orm-index-no-search";
    return /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "orm-search-form"
    }, /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "index-search"
    }, /* @__PURE__ */ import_react12.default.createElement("input", {
      type: "search",
      className: `orm-search-input ${searchFieldName}`,
      placeholder: `Reference Map`,
      onChange: (e) => setQuery(e.target.value),
      style: { padding: "0 30px 0 30px" }
    }), /* @__PURE__ */ import_react12.default.createElement(BsSearch, {
      size: 15,
      className: "search-icon"
    }), isSearchList && /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "cardCount"
    }, papers.length > 0 ? papers.length : "")));
  };
  const SetKeyInfo = () => {
    return /* @__PURE__ */ import_react12.default.createElement("div", null, !props.settings.searchCiteKey && /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "orm-no-content-subtext"
    }, "Configure ", /* @__PURE__ */ import_react12.default.createElement("code", null, "Get References Using CiteKey"), " in the settings tab to process citations using pandoc citekey"));
  };
  const noContentItems = () => {
    const items = props.citeKeyMap.filter((item) => item.citeKey === item.paperId);
    const citeKeys = items.map((item) => item.citeKey);
    return citeKeys;
  };
  if (!props.basename) {
    return /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "orm-no-content"
    }, /* @__PURE__ */ import_react12.default.createElement("div", null, userSearch(false), /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "orm-no-content-subtext"
    }, "No Active Markdown File.", /* @__PURE__ */ import_react12.default.createElement("br", null), "Click on a file to view its references."), /* @__PURE__ */ import_react12.default.createElement(SetKeyInfo, null)));
  } else if (papers.length > 0) {
    return /* @__PURE__ */ import_react12.default.createElement(import_react12.default.Fragment, null, /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "orm-reference-map"
    }, userSearch(true), indexSearch(papers, query).map((paper, index) => {
      const paperId = paper.id.replace("@", "");
      const activeIndexCardClass = props.selection.includes(paperId) ? "orm-active-index" : "";
      const ref = activeIndexCardClass ? activeRef : null;
      return /* @__PURE__ */ import_react12.default.createElement("div", {
        key: `${paper.paper.paperId}${index}${props.basename}`,
        ref
      }, /* @__PURE__ */ import_react12.default.createElement(IndexPaperCard, {
        className: activeIndexCardClass,
        settings: props.settings,
        rootPaper: paper,
        viewManager: props.viewManager
      }));
    })), noContentItems().length > 0 && props.settings.showInvalidItems && /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "orm-no-content"
    }, /* @__PURE__ */ import_react12.default.createElement("div", null, noContentItems().map((item) => {
      return /* @__PURE__ */ import_react12.default.createElement("div", {
        className: "orm-no-content-subtext",
        key: item
      }, /* @__PURE__ */ import_react12.default.createElement("code", null, item.substring(1)), " has no DOI or URL in the Library.");
    }), /* @__PURE__ */ import_react12.default.createElement(SetKeyInfo, null))));
  } else {
    if (noContentItems().length > 0 && props.settings.showInvalidItems) {
      return /* @__PURE__ */ import_react12.default.createElement("div", {
        className: "orm-no-content"
      }, /* @__PURE__ */ import_react12.default.createElement("div", null, userSearch(false), noContentItems().map((item) => {
        return /* @__PURE__ */ import_react12.default.createElement("div", {
          className: "orm-no-content-subtext",
          key: item
        }, /* @__PURE__ */ import_react12.default.createElement("code", null, item.substring(1)), " has no DOI or URL in the Library.");
      }), /* @__PURE__ */ import_react12.default.createElement(SetKeyInfo, null)));
    } else {
      return /* @__PURE__ */ import_react12.default.createElement("div", {
        className: "orm-no-content"
      }, /* @__PURE__ */ import_react12.default.createElement("div", null, userSearch(false), /* @__PURE__ */ import_react12.default.createElement("div", {
        className: "orm-no-content-subtext"
      }, "No Valid References Found."), /* @__PURE__ */ import_react12.default.createElement(SetKeyInfo, null)));
    }
  }
};

// src/context.tsx
var import_react13 = __toESM(require_react());
var AppContext = (0, import_react13.createContext)(void 0);

// src/reactView.tsx
var REFERENCE_MAP_VIEW_TYPE = "reference-map-view";
var ReferenceMapView = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.idSelectionHandle = (0, import_obsidian5.debounce)(() => {
      var _a;
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (!activeView || !activeView.file)
        return;
      const editor = activeView.editor;
      const selection = activeView.getMode() === "source" ? editor.getSelection().trim() : (_a = window.getSelection()) == null ? void 0 : _a.toString().trim();
      const isInIDs = Array.from(this.referenceMapData.paperIDs).map((id) => {
        id = id.replace("https://doi.org/", "");
        return selection == null ? void 0 : selection.includes(id);
      });
      let isInCiteKeys = false;
      for (const key in this.referenceMapData.citeKeyMap) {
        const value = String(this.referenceMapData.citeKeyMap[key]);
        if ((selection == null ? void 0 : selection.includes(key)) || (selection == null ? void 0 : selection.includes(value))) {
          isInCiteKeys = true;
          break;
        }
      }
      if (isInIDs || isInCiteKeys) {
        this.processReferences(selection != null ? selection : "");
      }
    }, 300, true);
    this.processReferences = async (selection = "") => {
      var _a;
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (activeView == null ? void 0 : activeView.file) {
        const fileMetadataCache = activeView.file ? await this.app.vault.cachedRead(activeView.file) : "";
        const fileCache = this.app.metadataCache.getFileCache(activeView.file);
        this.referenceMapData.updatePaperIDs(activeView, fileMetadataCache, fileCache);
      } else {
        this.referenceMapData.basename = "";
      }
      const indexCards = await this.referenceMapData.getIndexCards(this.referenceMapData.paperIDs, this.referenceMapData.citeKeyMap, this.referenceMapData.fileNameString, this.referenceMapData.frontMatterString, this.referenceMapData.basename, true);
      (_a = this.rootEl) == null ? void 0 : _a.render(/* @__PURE__ */ import_react14.default.createElement(AppContext.Provider, {
        value: this.app
      }, /* @__PURE__ */ import_react14.default.createElement(ReferenceMapList, {
        settings: this.plugin.settings,
        viewManager: this.referenceMapData.viewManager,
        library: this.referenceMapData.library,
        basename: this.referenceMapData.basename,
        paperIDs: this.referenceMapData.paperIDs,
        citeKeyMap: this.referenceMapData.citeKeyMap,
        indexCards,
        selection
      })));
    };
    this.plugin = plugin;
    this.referenceMapData = this.plugin.referenceMapData;
    this.rootEl = (0, import_client2.createRoot)(this.containerEl.children[1]);
    this.isUpdated = false;
    this.registerEvent(this.app.metadataCache.on("changed", (file) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (activeView && file === activeView.file) {
        this.processReferences();
      }
    }));
    this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf2) => {
      if (leaf2) {
        this.app.workspace.iterateRootLeaves((rootLeaf) => {
          if (rootLeaf === leaf2) {
            this.processReferences();
          }
        });
      }
    }));
    this.registerDomEvent(document, "pointerup", (evt) => {
      this.idSelectionHandle();
    });
    this.registerDomEvent(document, "keyup", (evt) => {
      this.idSelectionHandle();
    });
    this.processReferences();
  }
  getViewType() {
    return REFERENCE_MAP_VIEW_TYPE;
  }
  getDisplayText() {
    return t("REFERENCE_MAP");
  }
  getIcon() {
    return "ReferenceMapIconScroll";
  }
  async onOpen() {
    this.processReferences();
  }
  async onClose() {
    var _a;
    (_a = this.rootEl) == null ? void 0 : _a.unmount();
    this.referenceMapData.viewManager.clearCache();
    return super.onClose();
  }
  async reload(reloadType) {
    if (reloadType === RELOAD.HARD) {
      this.referenceMapData.viewManager.clearCache();
      this.referenceMapData.resetLibraryTime();
      await this.referenceMapData.loadLibrary(false);
      this.processReferences();
    } else if (reloadType === RELOAD.SOFT) {
      await this.referenceMapData.loadLibrary(false);
      this.processReferences();
    } else if (reloadType === RELOAD.VIEW) {
      this.processReferences();
    }
  }
};

// src/modals.ts
var import_obsidian7 = require("obsidian");

// node_modules/lru-cache/index.mjs
var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
var hasAbortController = typeof AbortController === "function";
var AC = hasAbortController ? AbortController : class AbortController2 {
  constructor() {
    this.signal = new AS();
  }
  abort(reason = new Error("This operation was aborted")) {
    this.signal.reason = this.signal.reason || reason;
    this.signal.aborted = true;
    this.signal.dispatchEvent({
      type: "abort",
      target: this.signal
    });
  }
};
var hasAbortSignal = typeof AbortSignal === "function";
var hasACAbortSignal = typeof AC.AbortSignal === "function";
var AS = hasAbortSignal ? AbortSignal : hasACAbortSignal ? AC.AbortController : class AbortSignal2 {
  constructor() {
    this.reason = void 0;
    this.aborted = false;
    this._listeners = [];
  }
  dispatchEvent(e) {
    if (e.type === "abort") {
      this.aborted = true;
      this.onabort(e);
      this._listeners.forEach((f) => f(e), this);
    }
  }
  onabort() {
  }
  addEventListener(ev, fn) {
    if (ev === "abort") {
      this._listeners.push(fn);
    }
  }
  removeEventListener(ev, fn) {
    if (ev === "abort") {
      this._listeners = this._listeners.filter((f) => f !== fn);
    }
  }
};
var warned = /* @__PURE__ */ new Set();
var deprecatedOption = (opt, instead) => {
  const code = `LRU_CACHE_OPTION_${opt}`;
  if (shouldWarn(code)) {
    warn(code, `${opt} option`, `options.${instead}`, LRUCache);
  }
};
var deprecatedMethod = (method, instead) => {
  const code = `LRU_CACHE_METHOD_${method}`;
  if (shouldWarn(code)) {
    const { prototype } = LRUCache;
    const { get } = Object.getOwnPropertyDescriptor(prototype, method);
    warn(code, `${method} method`, `cache.${instead}()`, get);
  }
};
var deprecatedProperty = (field, instead) => {
  const code = `LRU_CACHE_PROPERTY_${field}`;
  if (shouldWarn(code)) {
    const { prototype } = LRUCache;
    const { get } = Object.getOwnPropertyDescriptor(prototype, field);
    warn(code, `${field} property`, `cache.${instead}`, get);
  }
};
var emitWarning = (...a) => {
  typeof process === "object" && process && typeof process.emitWarning === "function" ? process.emitWarning(...a) : console.error(...a);
};
var shouldWarn = (code) => !warned.has(code);
var warn = (code, what, instead, fn) => {
  warned.add(code);
  const msg = `The ${what} is deprecated. Please use ${instead} instead.`;
  emitWarning(msg, "DeprecationWarning", code, fn);
};
var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
var ZeroArray = class extends Array {
  constructor(size) {
    super(size);
    this.fill(0);
  }
};
var Stack = class {
  constructor(max) {
    if (max === 0) {
      return [];
    }
    const UintArray = getUintArray(max);
    this.heap = new UintArray(max);
    this.length = 0;
  }
  push(n) {
    this.heap[this.length++] = n;
  }
  pop() {
    return this.heap[--this.length];
  }
};
var LRUCache = class {
  constructor(options = {}) {
    const {
      max = 0,
      ttl,
      ttlResolution = 1,
      ttlAutopurge,
      updateAgeOnGet,
      updateAgeOnHas,
      allowStale,
      dispose,
      disposeAfter,
      noDisposeOnSet,
      noUpdateTTL,
      maxSize = 0,
      maxEntrySize = 0,
      sizeCalculation,
      fetchMethod,
      fetchContext,
      noDeleteOnFetchRejection,
      noDeleteOnStaleGet,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort
    } = options;
    const { length, maxAge, stale } = options instanceof LRUCache ? {} : options;
    if (max !== 0 && !isPosInt(max)) {
      throw new TypeError("max option must be a nonnegative integer");
    }
    const UintArray = max ? getUintArray(max) : Array;
    if (!UintArray) {
      throw new Error("invalid max value: " + max);
    }
    this.max = max;
    this.maxSize = maxSize;
    this.maxEntrySize = maxEntrySize || this.maxSize;
    this.sizeCalculation = sizeCalculation || length;
    if (this.sizeCalculation) {
      if (!this.maxSize && !this.maxEntrySize) {
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      }
      if (typeof this.sizeCalculation !== "function") {
        throw new TypeError("sizeCalculation set to non-function");
      }
    }
    this.fetchMethod = fetchMethod || null;
    if (this.fetchMethod && typeof this.fetchMethod !== "function") {
      throw new TypeError("fetchMethod must be a function if specified");
    }
    this.fetchContext = fetchContext;
    if (!this.fetchMethod && fetchContext !== void 0) {
      throw new TypeError("cannot set fetchContext without fetchMethod");
    }
    this.keyMap = /* @__PURE__ */ new Map();
    this.keyList = new Array(max).fill(null);
    this.valList = new Array(max).fill(null);
    this.next = new UintArray(max);
    this.prev = new UintArray(max);
    this.head = 0;
    this.tail = 0;
    this.free = new Stack(max);
    this.initialFill = 1;
    this.size = 0;
    if (typeof dispose === "function") {
      this.dispose = dispose;
    }
    if (typeof disposeAfter === "function") {
      this.disposeAfter = disposeAfter;
      this.disposed = [];
    } else {
      this.disposeAfter = null;
      this.disposed = null;
    }
    this.noDisposeOnSet = !!noDisposeOnSet;
    this.noUpdateTTL = !!noUpdateTTL;
    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
    this.ignoreFetchAbort = !!ignoreFetchAbort;
    if (this.maxEntrySize !== 0) {
      if (this.maxSize !== 0) {
        if (!isPosInt(this.maxSize)) {
          throw new TypeError("maxSize must be a positive integer if specified");
        }
      }
      if (!isPosInt(this.maxEntrySize)) {
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      }
      this.initializeSizeTracking();
    }
    this.allowStale = !!allowStale || !!stale;
    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
    this.updateAgeOnGet = !!updateAgeOnGet;
    this.updateAgeOnHas = !!updateAgeOnHas;
    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
    this.ttlAutopurge = !!ttlAutopurge;
    this.ttl = ttl || maxAge || 0;
    if (this.ttl) {
      if (!isPosInt(this.ttl)) {
        throw new TypeError("ttl must be a positive integer if specified");
      }
      this.initializeTTLTracking();
    }
    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    }
    if (!this.ttlAutopurge && !this.max && !this.maxSize) {
      const code = "LRU_CACHE_UNBOUNDED";
      if (shouldWarn(code)) {
        warned.add(code);
        const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
        emitWarning(msg, "UnboundedCacheWarning", code, LRUCache);
      }
    }
    if (stale) {
      deprecatedOption("stale", "allowStale");
    }
    if (maxAge) {
      deprecatedOption("maxAge", "ttl");
    }
    if (length) {
      deprecatedOption("length", "sizeCalculation");
    }
  }
  getRemainingTTL(key) {
    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0;
  }
  initializeTTLTracking() {
    this.ttls = new ZeroArray(this.max);
    this.starts = new ZeroArray(this.max);
    this.setItemTTL = (index, ttl, start = perf.now()) => {
      this.starts[index] = ttl !== 0 ? start : 0;
      this.ttls[index] = ttl;
      if (ttl !== 0 && this.ttlAutopurge) {
        const t2 = setTimeout(() => {
          if (this.isStale(index)) {
            this.delete(this.keyList[index]);
          }
        }, ttl + 1);
        if (t2.unref) {
          t2.unref();
        }
      }
    };
    this.updateItemAge = (index) => {
      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0;
    };
    this.statusTTL = (status, index) => {
      if (status) {
        status.ttl = this.ttls[index];
        status.start = this.starts[index];
        status.now = cachedNow || getNow();
        status.remainingTTL = status.now + status.ttl - status.start;
      }
    };
    let cachedNow = 0;
    const getNow = () => {
      const n = perf.now();
      if (this.ttlResolution > 0) {
        cachedNow = n;
        const t2 = setTimeout(() => cachedNow = 0, this.ttlResolution);
        if (t2.unref) {
          t2.unref();
        }
      }
      return n;
    };
    this.getRemainingTTL = (key) => {
      const index = this.keyMap.get(key);
      if (index === void 0) {
        return 0;
      }
      return this.ttls[index] === 0 || this.starts[index] === 0 ? Infinity : this.starts[index] + this.ttls[index] - (cachedNow || getNow());
    };
    this.isStale = (index) => {
      return this.ttls[index] !== 0 && this.starts[index] !== 0 && (cachedNow || getNow()) - this.starts[index] > this.ttls[index];
    };
  }
  updateItemAge(_index) {
  }
  statusTTL(_status, _index) {
  }
  setItemTTL(_index, _ttl, _start) {
  }
  isStale(_index) {
    return false;
  }
  initializeSizeTracking() {
    this.calculatedSize = 0;
    this.sizes = new ZeroArray(this.max);
    this.removeItemSize = (index) => {
      this.calculatedSize -= this.sizes[index];
      this.sizes[index] = 0;
    };
    this.requireSize = (k, v, size, sizeCalculation) => {
      if (this.isBackgroundFetch(v)) {
        return 0;
      }
      if (!isPosInt(size)) {
        if (sizeCalculation) {
          if (typeof sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation must be a function");
          }
          size = sizeCalculation(v, k);
          if (!isPosInt(size)) {
            throw new TypeError("sizeCalculation return invalid (expect positive integer)");
          }
        } else {
          throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
        }
      }
      return size;
    };
    this.addItemSize = (index, size, status) => {
      this.sizes[index] = size;
      if (this.maxSize) {
        const maxSize = this.maxSize - this.sizes[index];
        while (this.calculatedSize > maxSize) {
          this.evict(true);
        }
      }
      this.calculatedSize += this.sizes[index];
      if (status) {
        status.entrySize = size;
        status.totalCalculatedSize = this.calculatedSize;
      }
    };
  }
  removeItemSize(_index) {
  }
  addItemSize(_index, _size) {
  }
  requireSize(_k, _v, size, sizeCalculation) {
    if (size || sizeCalculation) {
      throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
    }
  }
  *indexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i = this.tail; true; ) {
        if (!this.isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.isStale(i)) {
          yield i;
        }
        if (i === this.head) {
          break;
        } else {
          i = this.prev[i];
        }
      }
    }
  }
  *rindexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i = this.head; true; ) {
        if (!this.isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.isStale(i)) {
          yield i;
        }
        if (i === this.tail) {
          break;
        } else {
          i = this.next[i];
        }
      }
    }
  }
  isValidIndex(index) {
    return index !== void 0 && this.keyMap.get(this.keyList[index]) === index;
  }
  *entries() {
    for (const i of this.indexes()) {
      if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield [this.keyList[i], this.valList[i]];
      }
    }
  }
  *rentries() {
    for (const i of this.rindexes()) {
      if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield [this.keyList[i], this.valList[i]];
      }
    }
  }
  *keys() {
    for (const i of this.indexes()) {
      if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.keyList[i];
      }
    }
  }
  *rkeys() {
    for (const i of this.rindexes()) {
      if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.keyList[i];
      }
    }
  }
  *values() {
    for (const i of this.indexes()) {
      if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.valList[i];
      }
    }
  }
  *rvalues() {
    for (const i of this.rindexes()) {
      if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.valList[i];
      }
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  find(fn, getOptions) {
    for (const i of this.indexes()) {
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      if (fn(value, this.keyList[i], this)) {
        return this.get(this.keyList[i], getOptions);
      }
    }
  }
  forEach(fn, thisp = this) {
    for (const i of this.indexes()) {
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, this.keyList[i], this);
    }
  }
  rforEach(fn, thisp = this) {
    for (const i of this.rindexes()) {
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, this.keyList[i], this);
    }
  }
  get prune() {
    deprecatedMethod("prune", "purgeStale");
    return this.purgeStale;
  }
  purgeStale() {
    let deleted = false;
    for (const i of this.rindexes({ allowStale: true })) {
      if (this.isStale(i)) {
        this.delete(this.keyList[i]);
        deleted = true;
      }
    }
    return deleted;
  }
  dump() {
    const arr = [];
    for (const i of this.indexes({ allowStale: true })) {
      const key = this.keyList[i];
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      const entry = { value };
      if (this.ttls) {
        entry.ttl = this.ttls[i];
        const age = perf.now() - this.starts[i];
        entry.start = Math.floor(Date.now() - age);
      }
      if (this.sizes) {
        entry.size = this.sizes[i];
      }
      arr.unshift([key, entry]);
    }
    return arr;
  }
  load(arr) {
    this.clear();
    for (const [key, entry] of arr) {
      if (entry.start) {
        const age = Date.now() - entry.start;
        entry.start = perf.now() - age;
      }
      this.set(key, entry.value, entry);
    }
  }
  dispose(_v, _k, _reason) {
  }
  set(k, v, {
    ttl = this.ttl,
    start,
    noDisposeOnSet = this.noDisposeOnSet,
    size = 0,
    sizeCalculation = this.sizeCalculation,
    noUpdateTTL = this.noUpdateTTL,
    status
  } = {}) {
    size = this.requireSize(k, v, size, sizeCalculation);
    if (this.maxEntrySize && size > this.maxEntrySize) {
      if (status) {
        status.set = "miss";
        status.maxEntrySizeExceeded = true;
      }
      this.delete(k);
      return this;
    }
    let index = this.size === 0 ? void 0 : this.keyMap.get(k);
    if (index === void 0) {
      index = this.newIndex();
      this.keyList[index] = k;
      this.valList[index] = v;
      this.keyMap.set(k, index);
      this.next[this.tail] = index;
      this.prev[index] = this.tail;
      this.tail = index;
      this.size++;
      this.addItemSize(index, size, status);
      if (status) {
        status.set = "add";
      }
      noUpdateTTL = false;
    } else {
      this.moveToTail(index);
      const oldVal = this.valList[index];
      if (v !== oldVal) {
        if (this.isBackgroundFetch(oldVal)) {
          oldVal.__abortController.abort(new Error("replaced"));
        } else {
          if (!noDisposeOnSet) {
            this.dispose(oldVal, k, "set");
            if (this.disposeAfter) {
              this.disposed.push([oldVal, k, "set"]);
            }
          }
        }
        this.removeItemSize(index);
        this.valList[index] = v;
        this.addItemSize(index, size, status);
        if (status) {
          status.set = "replace";
          const oldValue = oldVal && this.isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
          if (oldValue !== void 0)
            status.oldValue = oldValue;
        }
      } else if (status) {
        status.set = "update";
      }
    }
    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {
      this.initializeTTLTracking();
    }
    if (!noUpdateTTL) {
      this.setItemTTL(index, ttl, start);
    }
    this.statusTTL(status, index);
    if (this.disposeAfter) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
    return this;
  }
  newIndex() {
    if (this.size === 0) {
      return this.tail;
    }
    if (this.size === this.max && this.max !== 0) {
      return this.evict(false);
    }
    if (this.free.length !== 0) {
      return this.free.pop();
    }
    return this.initialFill++;
  }
  pop() {
    if (this.size) {
      const val = this.valList[this.head];
      this.evict(true);
      return val;
    }
  }
  evict(free) {
    const head = this.head;
    const k = this.keyList[head];
    const v = this.valList[head];
    if (this.isBackgroundFetch(v)) {
      v.__abortController.abort(new Error("evicted"));
    } else {
      this.dispose(v, k, "evict");
      if (this.disposeAfter) {
        this.disposed.push([v, k, "evict"]);
      }
    }
    this.removeItemSize(head);
    if (free) {
      this.keyList[head] = null;
      this.valList[head] = null;
      this.free.push(head);
    }
    this.head = this.next[head];
    this.keyMap.delete(k);
    this.size--;
    return head;
  }
  has(k, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {
    const index = this.keyMap.get(k);
    if (index !== void 0) {
      if (!this.isStale(index)) {
        if (updateAgeOnHas) {
          this.updateItemAge(index);
        }
        if (status)
          status.has = "hit";
        this.statusTTL(status, index);
        return true;
      } else if (status) {
        status.has = "stale";
        this.statusTTL(status, index);
      }
    } else if (status) {
      status.has = "miss";
    }
    return false;
  }
  peek(k, { allowStale = this.allowStale } = {}) {
    const index = this.keyMap.get(k);
    if (index !== void 0 && (allowStale || !this.isStale(index))) {
      const v = this.valList[index];
      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
    }
  }
  backgroundFetch(k, index, options, context) {
    const v = index === void 0 ? void 0 : this.valList[index];
    if (this.isBackgroundFetch(v)) {
      return v;
    }
    const ac = new AC();
    if (options.signal) {
      options.signal.addEventListener("abort", () => ac.abort(options.signal.reason));
    }
    const fetchOpts = {
      signal: ac.signal,
      options,
      context
    };
    const cb = (v2, updateCache = false) => {
      const { aborted } = ac.signal;
      const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
      if (options.status) {
        if (aborted && !updateCache) {
          options.status.fetchAborted = true;
          options.status.fetchError = ac.signal.reason;
          if (ignoreAbort)
            options.status.fetchAbortIgnored = true;
        } else {
          options.status.fetchResolved = true;
        }
      }
      if (aborted && !ignoreAbort && !updateCache) {
        return fetchFail(ac.signal.reason);
      }
      if (this.valList[index] === p) {
        if (v2 === void 0) {
          if (p.__staleWhileFetching) {
            this.valList[index] = p.__staleWhileFetching;
          } else {
            this.delete(k);
          }
        } else {
          if (options.status)
            options.status.fetchUpdated = true;
          this.set(k, v2, fetchOpts.options);
        }
      }
      return v2;
    };
    const eb = (er) => {
      if (options.status) {
        options.status.fetchRejected = true;
        options.status.fetchError = er;
      }
      return fetchFail(er);
    };
    const fetchFail = (er) => {
      const { aborted } = ac.signal;
      const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
      const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
      const noDelete = allowStale || options.noDeleteOnFetchRejection;
      if (this.valList[index] === p) {
        const del = !noDelete || p.__staleWhileFetching === void 0;
        if (del) {
          this.delete(k);
        } else if (!allowStaleAborted) {
          this.valList[index] = p.__staleWhileFetching;
        }
      }
      if (allowStale) {
        if (options.status && p.__staleWhileFetching !== void 0) {
          options.status.returnedStale = true;
        }
        return p.__staleWhileFetching;
      } else if (p.__returned === p) {
        throw er;
      }
    };
    const pcall = (res, rej) => {
      this.fetchMethod(k, v, fetchOpts).then((v2) => res(v2), rej);
      ac.signal.addEventListener("abort", () => {
        if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
          res();
          if (options.allowStaleOnFetchAbort) {
            res = (v2) => cb(v2, true);
          }
        }
      });
    };
    if (options.status)
      options.status.fetchDispatched = true;
    const p = new Promise(pcall).then(cb, eb);
    p.__abortController = ac;
    p.__staleWhileFetching = v;
    p.__returned = null;
    if (index === void 0) {
      this.set(k, p, { ...fetchOpts.options, status: void 0 });
      index = this.keyMap.get(k);
    } else {
      this.valList[index] = p;
    }
    return p;
  }
  isBackgroundFetch(p) {
    return p && typeof p === "object" && typeof p.then === "function" && Object.prototype.hasOwnProperty.call(p, "__staleWhileFetching") && Object.prototype.hasOwnProperty.call(p, "__returned") && (p.__returned === p || p.__returned === null);
  }
  async fetch(k, {
    allowStale = this.allowStale,
    updateAgeOnGet = this.updateAgeOnGet,
    noDeleteOnStaleGet = this.noDeleteOnStaleGet,
    ttl = this.ttl,
    noDisposeOnSet = this.noDisposeOnSet,
    size = 0,
    sizeCalculation = this.sizeCalculation,
    noUpdateTTL = this.noUpdateTTL,
    noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
    allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
    ignoreFetchAbort = this.ignoreFetchAbort,
    allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
    fetchContext = this.fetchContext,
    forceRefresh = false,
    status,
    signal
  } = {}) {
    if (!this.fetchMethod) {
      if (status)
        status.fetch = "get";
      return this.get(k, {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        status
      });
    }
    const options = {
      allowStale,
      updateAgeOnGet,
      noDeleteOnStaleGet,
      ttl,
      noDisposeOnSet,
      size,
      sizeCalculation,
      noUpdateTTL,
      noDeleteOnFetchRejection,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort,
      status,
      signal
    };
    let index = this.keyMap.get(k);
    if (index === void 0) {
      if (status)
        status.fetch = "miss";
      const p = this.backgroundFetch(k, index, options, fetchContext);
      return p.__returned = p;
    } else {
      const v = this.valList[index];
      if (this.isBackgroundFetch(v)) {
        const stale = allowStale && v.__staleWhileFetching !== void 0;
        if (status) {
          status.fetch = "inflight";
          if (stale)
            status.returnedStale = true;
        }
        return stale ? v.__staleWhileFetching : v.__returned = v;
      }
      const isStale = this.isStale(index);
      if (!forceRefresh && !isStale) {
        if (status)
          status.fetch = "hit";
        this.moveToTail(index);
        if (updateAgeOnGet) {
          this.updateItemAge(index);
        }
        this.statusTTL(status, index);
        return v;
      }
      const p = this.backgroundFetch(k, index, options, fetchContext);
      const hasStale = p.__staleWhileFetching !== void 0;
      const staleVal = hasStale && allowStale;
      if (status) {
        status.fetch = hasStale && isStale ? "stale" : "refresh";
        if (staleVal && isStale)
          status.returnedStale = true;
      }
      return staleVal ? p.__staleWhileFetching : p.__returned = p;
    }
  }
  get(k, {
    allowStale = this.allowStale,
    updateAgeOnGet = this.updateAgeOnGet,
    noDeleteOnStaleGet = this.noDeleteOnStaleGet,
    status
  } = {}) {
    const index = this.keyMap.get(k);
    if (index !== void 0) {
      const value = this.valList[index];
      const fetching = this.isBackgroundFetch(value);
      this.statusTTL(status, index);
      if (this.isStale(index)) {
        if (status)
          status.get = "stale";
        if (!fetching) {
          if (!noDeleteOnStaleGet) {
            this.delete(k);
          }
          if (status)
            status.returnedStale = allowStale;
          return allowStale ? value : void 0;
        } else {
          if (status) {
            status.returnedStale = allowStale && value.__staleWhileFetching !== void 0;
          }
          return allowStale ? value.__staleWhileFetching : void 0;
        }
      } else {
        if (status)
          status.get = "hit";
        if (fetching) {
          return value.__staleWhileFetching;
        }
        this.moveToTail(index);
        if (updateAgeOnGet) {
          this.updateItemAge(index);
        }
        return value;
      }
    } else if (status) {
      status.get = "miss";
    }
  }
  connect(p, n) {
    this.prev[n] = p;
    this.next[p] = n;
  }
  moveToTail(index) {
    if (index !== this.tail) {
      if (index === this.head) {
        this.head = this.next[index];
      } else {
        this.connect(this.prev[index], this.next[index]);
      }
      this.connect(this.tail, index);
      this.tail = index;
    }
  }
  get del() {
    deprecatedMethod("del", "delete");
    return this.delete;
  }
  delete(k) {
    let deleted = false;
    if (this.size !== 0) {
      const index = this.keyMap.get(k);
      if (index !== void 0) {
        deleted = true;
        if (this.size === 1) {
          this.clear();
        } else {
          this.removeItemSize(index);
          const v = this.valList[index];
          if (this.isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else {
            this.dispose(v, k, "delete");
            if (this.disposeAfter) {
              this.disposed.push([v, k, "delete"]);
            }
          }
          this.keyMap.delete(k);
          this.keyList[index] = null;
          this.valList[index] = null;
          if (index === this.tail) {
            this.tail = this.prev[index];
          } else if (index === this.head) {
            this.head = this.next[index];
          } else {
            this.next[this.prev[index]] = this.next[index];
            this.prev[this.next[index]] = this.prev[index];
          }
          this.size--;
          this.free.push(index);
        }
      }
    }
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
    return deleted;
  }
  clear() {
    for (const index of this.rindexes({ allowStale: true })) {
      const v = this.valList[index];
      if (this.isBackgroundFetch(v)) {
        v.__abortController.abort(new Error("deleted"));
      } else {
        const k = this.keyList[index];
        this.dispose(v, k, "delete");
        if (this.disposeAfter) {
          this.disposed.push([v, k, "delete"]);
        }
      }
    }
    this.keyMap.clear();
    this.valList.fill(null);
    this.keyList.fill(null);
    if (this.ttls) {
      this.ttls.fill(0);
      this.starts.fill(0);
    }
    if (this.sizes) {
      this.sizes.fill(0);
    }
    this.head = 0;
    this.tail = 0;
    this.initialFill = 1;
    this.free.length = 0;
    this.calculatedSize = 0;
    this.size = 0;
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
  }
  get reset() {
    deprecatedMethod("reset", "clear");
    return this.clear;
  }
  get length() {
    deprecatedProperty("length", "size");
    return this.size;
  }
  static get AbortController() {
    return AC;
  }
  static get AbortSignal() {
    return AS;
  }
};
var lru_cache_default = LRUCache;

// src/apis/s2agAPI.ts
var import_lodash = __toESM(require_lodash());
var import_obsidian6 = require("obsidian");
var SEMANTIC_SCHOLAR_BATCH_URL = "https://api.semanticscholar.org/graph/v1/paper/batch";
var getBatchItems = async (paperIds, debugMode = false) => {
  const data = {
    ids: paperIds,
    fields: SEMANTIC_FIELDS.join(",")
  };
  const response = await (0, import_obsidian6.requestUrl)({
    url: SEMANTIC_SCHOLAR_BATCH_URL,
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data)
  });
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return [];
  }
  return response.json.data;
};
var getIndexItem = async (paperId, debugMode = false) => {
  const url = `${SEMANTICSCHOLAR_API_URL}/paper/${paperId}?fields=${SEMANTIC_FIELDS.join(",")}`;
  const response = await (0, import_obsidian6.requestUrl)(url);
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return null;
  }
  return response.json;
};
var getReferenceItems = async (paperId, debugMode = false) => {
  const url = `${SEMANTICSCHOLAR_API_URL}/paper/${paperId}/references?fields=${SEMANTIC_FIELDS.join(",")}`;
  const response = await (0, import_obsidian6.requestUrl)(url);
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return [];
  }
  return import_lodash.default.map(response.json.data, "citedPaper");
};
var getCitationItems = async (paperId, debugMode = false) => {
  const url = `${SEMANTICSCHOLAR_API_URL}/paper/${paperId}/citations?fields=${SEMANTIC_FIELDS.join(",")}`;
  const response = await (0, import_obsidian6.requestUrl)(url);
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return [];
  }
  return import_lodash.default.map(response.json.data, "citingPaper");
};
var getSearchItems = async (query, limit, debugMode = false) => {
  const url = `${SEMANTICSCHOLAR_API_URL}/paper/search?query=${query}&fields=${SEMANTIC_FIELDS.join(",")}&offset=0&limit=${limit}`;
  const response = await (0, import_obsidian6.requestUrl)(url);
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return [];
  }
  return response.json.data;
};

// src/viewManager.ts
var ViewManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.indexCache = new lru_cache_default({ max: 150 });
    this.batchCache = new lru_cache_default({ max: 50 });
    this.refCache = new lru_cache_default({ max: 20 });
    this.citeCache = new lru_cache_default({ max: 20 });
    this.searchCache = new lru_cache_default({ max: 20 });
    this.clearCache = () => {
      this.indexCache.clear();
      this.batchCache.clear();
      this.refCache.clear();
      this.citeCache.clear();
      this.searchCache.clear();
    };
    this.getBatchPapers = async (paperIds) => {
      const cachedBatch = this.batchCache.get(paperIds.join(","));
      if (cachedBatch) {
        return cachedBatch;
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const batchPapers = await getBatchItems(paperIds, debugMode);
        this.batchCache.set(paperIds.join(","), batchPapers);
        return batchPapers;
      } catch (e) {
        if (debugMode) {
          console.log("ORM: S2AG API Batch request error", e);
        }
        return [];
      }
    };
    this.getIndexPaper = async (paperId) => {
      const cachedPaper = this.indexCache.get(paperId);
      if (cachedPaper) {
        return cachedPaper;
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const paper = await getIndexItem(paperId, debugMode);
        this.indexCache.set(paperId, paper);
        return paper;
      } catch (e) {
        if (debugMode) {
          console.log("ORM: S2AG API Index Card request error", e);
        }
        if (e.status === 404) {
          this.indexCache.set(paperId, e.status);
        }
        return e.status;
      }
    };
    this.searchIndexPapers = async (query, limit = 0, cache = true) => {
      const cacheKey = `${query}${limit}`;
      const cachedSearch = this.searchCache.get(cacheKey);
      if (cachedSearch) {
        return cachedSearch;
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const indexCardsList = await getSearchItems(query, limit, debugMode);
        if (cache) {
          this.searchCache.set(cacheKey, indexCardsList);
        }
        return indexCardsList;
      } catch (e) {
        if (debugMode) {
          console.log("ORM: S2AG API SEARCH request error", e);
        }
        return [];
      }
    };
    this.getReferences = async (paperId) => {
      const cachedRefs = this.refCache.get(paperId);
      if (cachedRefs) {
        return cachedRefs;
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const references = await getReferenceItems(paperId, debugMode);
        this.refCache.set(paperId, references);
        return references;
      } catch (e) {
        if (debugMode) {
          console.log("ORM: S2AG API GET references request error", e);
        }
        return [];
      }
    };
    this.getCitations = async (paperId) => {
      const cachedCitations = this.citeCache.get(paperId);
      if (cachedCitations) {
        return cachedCitations;
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const citations = await getCitationItems(paperId, debugMode);
        this.citeCache.set(paperId, citations);
        return citations;
      } catch (e) {
        if (debugMode) {
          console.log("ORM: S2AG API  GET citations request error", e);
        }
        return [];
      }
    };
  }
};

// src/modals.ts
var ReferenceSearchModal = class extends import_obsidian7.Modal {
  constructor(plugin, query, mode, callback) {
    super(plugin.app);
    this.plugin = plugin;
    this.query = query;
    this.mode = mode;
    this.callback = callback;
    this.isBusy = false;
  }
  setBusy(busy) {
    var _a, _b;
    this.isBusy = busy;
    (_a = this.okBtnRef) == null ? void 0 : _a.setDisabled(busy);
    (_b = this.okBtnRef) == null ? void 0 : _b.setButtonText(busy ? "Requesting..." : "Search");
  }
  async searchReference() {
    if (!this.query) {
      throw new Error("ORM: No query entered.");
    }
    if (!this.isBusy) {
      try {
        this.setBusy(true);
        const paperIds = getPaperIds(this.query);
        if (paperIds.size > 0) {
          const paperPromises = Array.from(paperIds).map((paperId) => new ViewManager(this.plugin).getIndexPaper(paperId));
          const papers = await Promise.all(paperPromises);
          const validPapers = papers.filter((paper) => paper !== null);
          if (validPapers.length > 0) {
            this.callback(null, validPapers);
            this.close();
            return;
          }
        } else {
          const searchResults = await new ViewManager(this.plugin).searchIndexPapers(this.query, this.plugin.settings.modalSearchLimit, false);
          this.setBusy(false);
          if (!(searchResults == null ? void 0 : searchResults.length)) {
            new import_obsidian7.Notice(`No results found for "${this.query}"`);
            return;
          }
          this.callback(null, searchResults);
        }
      } catch (err) {
        this.callback(err);
      }
      this.close();
    }
  }
  submitEnterCallback(event) {
    if (event.key === "Enter" && !event.isComposing) {
      this.searchReference();
    }
  }
  onOpen() {
    const { contentEl } = this;
    const search_heading = contentEl.createDiv({ cls: "orm-search-modal-input-heading", text: "Search References" });
    search_heading.createDiv({ cls: "orm-search-modal-input-heading-mode", text: `${this.mode}` });
    contentEl.createDiv({ cls: "orm-search-modal-input" }, (settingItem) => {
      new import_obsidian7.TextComponent(settingItem).setValue(this.query).setPlaceholder("Search by keyword, title, authors, journal, abstract, ID, DOI, etc.").onChange((value) => this.query = value).inputEl.addEventListener("keydown", this.submitEnterCallback.bind(this));
    });
    new import_obsidian7.Setting(contentEl).setClass("orm-search-modal-input-button").addButton((btn) => {
      return this.okBtnRef = btn.setButtonText("Search").setCta().onClick(() => {
        this.searchReference();
      });
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};
var ReferenceSuggestModal = class extends import_obsidian7.SuggestModal {
  constructor(app2, suggestion, onChoose) {
    super(app2);
    this.suggestion = suggestion;
    this.onChoose = onChoose;
  }
  getSuggestions(query) {
    return this.suggestion.filter((reference) => {
      var _a;
      return (_a = reference.title) == null ? void 0 : _a.toLowerCase().includes(query == null ? void 0 : query.toLowerCase());
    });
  }
  renderSuggestion(reference, el) {
    const data = makeMetaData(reference);
    el.createEl("div", { cls: "orm-modal-paper-title", text: data.title });
    el.createEl("div", { cls: "orm-modal-paper-authors", text: data.authors });
    el.createEl("div", { cls: "orm-modal-paper-year", text: `${data.year}, ${data.journal}, ${data.volume}, ${data.pages}` });
  }
  onChooseSuggestion(reference) {
    this.onChoose(null, makeMetaData(reference));
  }
};

// src/main.ts
var import_path2 = __toESM(require("path"));

// src/referenceData.ts
var fs2 = __toESM(require("fs"));
var BibTeXParser = __toESM(require_bibtex_parser());
var import_lodash2 = __toESM(require_lodash());
var ReferenceMapData = class {
  constructor(plugin) {
    this.resetLibraryTime = () => {
      this.library.mtime = 0;
    };
    this.loadBibFileFromUserPath = async () => {
      const { searchCiteKey, searchCiteKeyPath, debugMode } = this.plugin.settings;
      if (!searchCiteKey || !searchCiteKeyPath)
        return null;
      const libraryPath = resolvePath(searchCiteKeyPath);
      try {
        const stats = fs2.statSync(libraryPath);
        const mtime = stats.mtimeMs;
        if (mtime === this.library.mtime)
          return null;
        if (debugMode)
          console.log(`ORM: Loading library from '${searchCiteKeyPath}'`);
        let rawData;
        try {
          rawData = fs2.readFileSync(libraryPath).toString();
        } catch (e) {
          if (debugMode)
            console.warn("ORM: Warnings associated with loading the library file.");
          return null;
        }
        const isJson = searchCiteKeyPath.endsWith(".json");
        const isBib = searchCiteKeyPath.endsWith(".bib");
        if (!isJson && !isBib)
          return null;
        let libraryData;
        try {
          libraryData = isJson ? JSON.parse(rawData) : BibTeXParser.parse(rawData, { errorHandler: () => {
          } }).entries;
        } catch (e) {
          if (debugMode)
            console.warn("ORM: Warnings associated with loading the library file.");
          return null;
        }
        this.library = {
          active: true,
          adapter: isJson ? "csl-json" : "bibtex",
          libraryData,
          mtime
        };
        return libraryData;
      } catch (e) {
        if (debugMode)
          console.log("ORM: Error loading library file.");
        return null;
      }
    };
    this.loadLibrary = async (fromCache) => {
      if (this.plugin.settings.searchCiteKey && this.plugin.settings.pullFromZotero) {
        await this.loadBibFileFromCache(fromCache);
        return;
      } else if (this.plugin.settings.searchCiteKey && this.plugin.settings.searchCiteKeyPath) {
        await this.loadBibFileFromUserPath();
        return;
      } else {
        this.library = DEFAULT_LIBRARY;
      }
    };
    this.getIndexCards = async (paperIDs = /* @__PURE__ */ new Set(), citeKeyMap = [], fileNameString = "", frontMatterString = "", basename = "", preprocess = false) => {
      const indexCards = [];
      const settings = this.plugin.settings;
      if (paperIDs.size > 0) {
        await Promise.all(import_lodash2.default.map([...paperIDs], async (paperId) => {
          const paper = await this.viewManager.getIndexPaper(paperId);
          if (paper !== null && typeof paper !== "number") {
            const paperCiteId = settings.searchCiteKey && this.library.libraryData !== null && settings.findZoteroCiteKeyFromID ? setCiteKeyId(paperId, this.library) : paperId;
            indexCards.push({ id: paperCiteId, location: null, paper });
          }
        }));
      }
      if (citeKeyMap.length > 0 && settings.searchCiteKey) {
        await Promise.all(import_lodash2.default.map(citeKeyMap, async (item) => {
          if (item.paperId !== item.citeKey) {
            const paper = await this.viewManager.getIndexPaper(item.paperId);
            if (paper !== null && typeof paper !== "number") {
              indexCards.push({ id: item.citeKey, location: item.location, paper });
            }
          }
        }));
      }
      if (settings.searchTitle && fileNameString && !EXCLUDE_FILE_NAMES.some((name) => basename.toLowerCase() === name.toLowerCase())) {
        const titleSearchPapers = await this.viewManager.searchIndexPapers(fileNameString, settings.searchLimit);
        import_lodash2.default.forEach(titleSearchPapers, (paper) => {
          indexCards.push({ id: paper.paperId, location: null, paper });
        });
      }
      if (settings.searchFrontMatter && frontMatterString) {
        const frontMatterPapers = await this.viewManager.searchIndexPapers(frontMatterString, settings.searchFrontMatterLimit);
        import_lodash2.default.forEach(frontMatterPapers, (paper) => {
          indexCards.push({ id: paper.paperId, location: null, paper });
        });
      }
      if (preprocess) {
        return this.preProcessReferences(indexCards);
      }
      return indexCards;
    };
    this.preProcessReferences = (indexCards) => {
      if (!this.plugin.settings.enableIndexSorting) {
        return removeNullReferences(indexCards).sort((a, b) => {
          if (a.location === null)
            return 1;
          if (b.location === null)
            return -1;
          return a.location - b.location;
        });
      }
      return indexSort(removeNullReferences(indexCards), this.plugin.settings.sortByIndex, this.plugin.settings.sortOrderIndex);
    };
    this.updatePaperIDs = async (activeView, fileMetadataCache = "", fileCache = null) => {
      var _a, _b, _c;
      const settings = this.plugin.settings;
      const isLibrary = settings.searchCiteKey && this.library.libraryData !== null;
      if (isLibrary && settings.autoUpdateCitekeyFile)
        this.loadLibrary(false);
      this.basename = (_b = (_a = activeView.file) == null ? void 0 : _a.basename) != null ? _b : "";
      if (fileMetadataCache)
        this.paperIDs = getPaperIds(fileMetadataCache);
      if (isLibrary) {
        const prefix = settings.findCiteKeyFromLinksWithoutPrefix ? "" : "@";
        const citeKeys = getCiteKeys(this.library.libraryData, fileMetadataCache, prefix);
        this.citeKeyMap = getCiteKeyIds(citeKeys, this.library);
      }
      if (settings.searchFrontMatter) {
        if (activeView.file && fileCache) {
          if (fileCache == null ? void 0 : fileCache.frontmatter) {
            const keywords = (_c = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _c[settings.searchFrontMatterKey];
            if (keywords)
              this.frontMatterString = extractKeywords(keywords).unique().join("+");
          }
        }
      }
      if (settings.searchTitle && !EXCLUDE_FILE_NAMES.some((name) => this.basename.toLowerCase() === name.toLowerCase())) {
        this.fileNameString = extractKeywords(this.basename).unique().join("+");
      }
    };
    this.plugin = plugin;
    this.library = DEFAULT_LIBRARY;
    this.viewManager = new ViewManager(plugin);
    this.initPromise = new PromiseCapability();
    this.paperIDs = /* @__PURE__ */ new Set();
    this.citeKeyMap = [];
    this.frontMatterString = "";
    this.fileNameString = "";
    this.basename = "";
  }
  async reinit(clearCache) {
    this.initPromise = new PromiseCapability();
    if (this.plugin.settings.pullFromZotero) {
      await this.loadBibFileFromCache(false);
    } else {
      await this.loadBibFileFromCache(true);
    }
    this.initPromise.resolve();
  }
  async loadBibFileFromCache(fromCache) {
    var _a;
    const { settings, cacheDir } = this.plugin;
    if (!((_a = settings.zoteroGroups) == null ? void 0 : _a.length))
      return;
    const bib = [];
    for (const group of settings.zoteroGroups) {
      try {
        const list = await getZBib(settings.zoteroPort, cacheDir, group.id, fromCache);
        if (list == null ? void 0 : list.length) {
          bib.push(...list);
          group.lastUpdate = Date.now();
        }
      } catch (e) {
        console.error("Error fetching bibliography from Zotero", e);
        continue;
      }
    }
    this.library = {
      active: true,
      adapter: "csl-json",
      libraryData: bib,
      mtime: Date.now()
    };
    return bib;
  }
};

// src/main.ts
var ReferenceMap = class extends import_obsidian8.Plugin {
  get initPromise() {
    if (!this._initPromise) {
      return this._initPromise = new PromiseCapability();
    }
    return this._initPromise;
  }
  async onload() {
    this.cacheDir = import_path2.default.join(getVaultRoot(), ".reference-map");
    this.referenceMapData = new ReferenceMapData(this);
    this.loadSettings().then(() => {
      this.init();
      this.initPromise.promise.then(() => {
        this.referenceMapData.loadLibrary(true);
      }).finally(() => this.referenceMapData.initPromise.resolve());
      this.initPromise.resolve();
    });
  }
  async init() {
    addIcons();
    this.addSettingTab(new ReferenceMapSettingTab(this));
    this.registerView(REFERENCE_MAP_VIEW_TYPE, (leaf) => new ReferenceMapView(leaf, this));
    this.addCommand({
      id: "show-reference-map-sidebar-view",
      name: "Show View",
      callback: () => {
        this.ensureLeafExists(true);
      }
    });
    this.addCommand({
      id: "reload-reference-map-library",
      name: "Refresh View",
      callback: () => {
        if (this.view) {
          this.view.reload(RELOAD.HARD);
        }
      }
    });
    this.addCommand({
      id: "open-reference-map-search-modal-to-insert",
      name: "Search and Insert",
      callback: () => this.insertMetadata()
    });
    this.addCommand({
      id: "open-reference-map-search-modal-to-create",
      name: "Search and Create",
      callback: () => this.createNewReferenceNote()
    });
    this.app.workspace.onLayoutReady(() => {
      this.ensureLeafExists(false);
    });
    this.addRibbonIcon("ReferenceMapIconScroll", "Reference Map", async (evt) => {
      this.ensureLeafExists(true);
    });
  }
  onunload() {
  }
  ensureLeafExists(active = false) {
    const { workspace } = this.app;
    const preferredSidebar = DIRECTION.RIGHT;
    let leaf;
    const existingPluginLeaves = workspace.getLeavesOfType(REFERENCE_MAP_VIEW_TYPE);
    if (existingPluginLeaves.length > 0) {
      leaf = existingPluginLeaves[0];
    } else {
      leaf = preferredSidebar === DIRECTION.LEFT ? workspace.getLeftLeaf(false) : workspace.getRightLeaf(false);
      workspace.revealLeaf(leaf);
      leaf.setViewState({ type: REFERENCE_MAP_VIEW_TYPE });
    }
    if (active) {
      workspace.setActiveLeaf(leaf);
    }
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(REFERENCE_MAP_VIEW_TYPE);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: REFERENCE_MAP_VIEW_TYPE,
      active: false
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(REFERENCE_MAP_VIEW_TYPE)[0]);
  }
  get view() {
    const leaves = this.app.workspace.getLeavesOfType(REFERENCE_MAP_VIEW_TYPE);
    if (!(leaves == null ? void 0 : leaves.length))
      return null;
    return leaves[0].view;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async createNewReferenceNote() {
    try {
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian8.MarkdownView);
      if (!markdownView || markdownView.getMode() !== "source") {
        new import_obsidian8.Notice("No active markdown view OR in Reading view");
        return;
      }
      const selection = markdownView.editor.getSelection().trim();
      const metaData = await this.searchReferenceMetadata(selection, "create");
      const activeLeaf = this.app.workspace.getLeaf();
      if (!activeLeaf) {
        new import_obsidian8.Notice("No active leaf");
        return;
      }
      const renderedContents = await this.getRenderedContentsForCreate(metaData);
      const fileName = makeFileName(metaData, this.settings.fileNameFormat);
      let filePath;
      if (this.settings.folder) {
        filePath = `${this.settings.folder}/${fileName}`;
      } else {
        filePath = `${fileName}`;
      }
      const targetFile = await this.app.vault.create(filePath, renderedContents);
      await activeLeaf.openFile(targetFile, { state: { mode: "source" } });
    } catch (err) {
      new import_obsidian8.Notice("Sorry, something went wrong.");
    }
  }
  async insertMetadata() {
    try {
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian8.MarkdownView);
      if (!markdownView || markdownView.getMode() !== "source") {
        new import_obsidian8.Notice("No active markdown view OR in Reading view");
        return;
      }
      const selection = markdownView.editor.getSelection().trim();
      const reference = await this.searchReferenceMetadata(selection, "insert");
      if (!markdownView.editor) {
        return;
      }
      const renderedContents = await this.getRenderedContentsForInsert(reference);
      markdownView.editor.replaceRange(renderedContents, markdownView.editor.getCursor());
    } catch (err) {
      new import_obsidian8.Notice("Sorry, something went wrong.");
    }
  }
  async searchReferenceMetadata(query, mode) {
    const searchedReferences = await this.openReferenceSearchModal(query, mode);
    return await this.openReferenceSuggestModal(searchedReferences);
  }
  async openReferenceSearchModal(query = "", mode = "insert") {
    return new Promise((resolve2, reject2) => {
      new ReferenceSearchModal(this, query, mode, (error, results) => {
        error ? reject2(error) : resolve2(results);
      }).open();
    });
  }
  async openReferenceSuggestModal(references) {
    return new Promise((resolve2, reject2) => {
      new ReferenceSuggestModal(this.app, references, (error, selectedReference) => {
        error ? reject2(error) : resolve2(selectedReference);
      }).open();
    });
  }
  async getRenderedContentsForInsert(metaData) {
    const template = this.settings.modalInsertTemplate || METADATA_MODAL_INSERT_TEMPLATE;
    return templateReplace(template, metaData);
  }
  async getRenderedContentsForCreate(metaData) {
    const template = this.settings.modalCreateTemplate || METADATA_MODAL_CREATE_TEMPLATE;
    return templateReplace(template, metaData);
  }
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
 * content-disposition
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
/*!
 * is-natural-number.js | MIT (c) Shinnosuke Watanabe
 * https://github.com/shinnn/is-natural-number.js
*/
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */
/*!
 * strip-dirs | MIT (c) Shinnosuke Watanabe
 * https://github.com/shinnn/node-strip-dirs
*/
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * @file Tests if ES6 @@toStringTag is supported.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-@@tostringtag|26.3.1 @@toStringTag}
 * @version 1.4.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module has-to-string-tag-x
 */
/**
 * @file Tests if ES6 Symbol is supported.
 * @version 1.4.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module has-symbol-support-x
 */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
